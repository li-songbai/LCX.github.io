<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot-logging配置</title>
    <url>/2020/02/22/SpringBoot-logging%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1-需要导入的依赖"><a href="#1-需要导入的依赖" class="headerlink" title="1.需要导入的依赖"></a>1.需要导入的依赖</h1><p>在springboot项目的基础上导入以下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<h1 id="2-日志配置"><a href="#2-日志配置" class="headerlink" title="2.日志配置"></a>2.日志配置</h1><h2 id="2-1-在application-properties中配置"><a href="#2-1-在application-properties中配置" class="headerlink" title="2.1.在application.properties中配置"></a>2.1.在application.properties中配置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.profiles.active=prod</span></span><br><span class="line"><span class="comment"># 日志的配置信息</span></span><br><span class="line"><span class="comment"># 日志输出的级别</span></span><br><span class="line"><span class="meta">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="comment"># 根据我们的包下面的操作进行日志记录</span></span><br><span class="line"><span class="meta">logging.level.com.lcx</span>=<span class="string">trace</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">F:/spring/spring02.log</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2使用xml文件进行配置"><a href="#2-2使用xml文件进行配置" class="headerlink" title="2.2使用xml文件进行配置"></a>2.2使用xml文件进行配置</h2><p><strong>log4j2.xml内容如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>longback-spring.xml内容如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/app/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"springboot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。</span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd&#125;----- [%thread] ---- %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!prod"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;file&gt;$&#123;LOG_HOME&#125;/$&#123;appName&#125;.log&lt;/file&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>F:/spring/spring.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="comment">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            滚动时产生的文件的存放位置及文件名称 %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动</span></span><br><span class="line"><span class="comment">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，</span></span><br><span class="line"><span class="comment">            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，</span></span><br><span class="line"><span class="comment">            那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="comment">		name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="comment">		level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span></span><br><span class="line"><span class="comment">		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="comment">		false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="comment">		表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.lcx"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="comment">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>笔试题总结</title>
    <url>/2020/02/21/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-编程题"><a href="#1-编程题" class="headerlink" title="1.编程题"></a>1.编程题</h2><h3 id="1-1倒序数："><a href="#1-1倒序数：" class="headerlink" title="1.1倒序数："></a>1.1倒序数：</h3><p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。<br>给定 x = 123，返回 321 </p><p>给定 x = -123，返回 -321</p><p>思路；通过取余取得最后一位 然后除以十再取最后一位(相当于往前取一位) ,用一个数保存，每次取得都乘十并加上取得的数字（相当于往前挤一位），</p><a id="more"></a>


<pre><code>直至原数不能再被十整除或者反转结果已经溢出则结束循环</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.bigdata.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daoxu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">outNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = c; <span class="comment">//临时记录c 用于判断是否溢出</span></span><br><span class="line">            c = c * <span class="number">10</span>  + n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(c/<span class="number">10</span> != temp)&#123;<span class="comment">//如果c/10和临时记录并不相等，说明已经溢出了 结束循环</span></span><br><span class="line">                c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i = outNumber(n);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>c = c * 10  + n % 10</strong></p>
<p><strong>c = c * 10  + n % 10</strong></p>
<p><strong>c = c * 10  + n % 10</strong></p>
<p>真滴蠢！！！</p>
<h3 id="1-2跳台阶："><a href="#1-2跳台阶：" class="headerlink" title="1.2跳台阶："></a>1.2跳台阶：</h3><p> 一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">1</span> || target == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JumpFloor(target - <span class="number">1</span>)+JumpFloor(target -<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringMVC02</title>
    <url>/2020/02/12/SpringMVC02/</url>
    <content><![CDATA[<h1 id="一、lombok注解开发"><a href="#一、lombok注解开发" class="headerlink" title="一、lombok注解开发"></a>一、lombok注解开发</h1><ul>
<li><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></li>
</ul><p>大部分项目中都必不可少的包含数据库实体(Entity)、数据载体(dto,dataObject),而这两部分都包含着大量的没有业务逻辑的setter、getter、空参构造，同时我们一般要复写类的toString(),equals(),hashCode()方法(贫血模型)。这些工作都是重复性的工作，作为程序员，懒是必备素质之一，这些工作肯定已经有大牛封装好了处理方法,这就是lombok。 </p><a id="more"></a>

<ul>
<li><h2 id="下载安装插件"><a href="#下载安装插件" class="headerlink" title="下载安装插件"></a>下载安装插件</h2><p>去官网下载idea对应版本的lombok的压缩包</p>
<p>插件配置</p>
<p>重启</p>
</li>
<li><h2 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h2></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li><p><strong>@Setter</strong></p>
<p>生成setter方法，final变量不包含</p>
</li>
<li><p><strong>@Getter</strong></p>
<p>生成getter方法，final变量不包含</p>
</li>
<li><p><strong>@NoArgsConstructor</strong></p>
<p>生成空参构造</p>
</li>
<li><p><strong>@AllArgsConstructor</strong></p>
<p>生成全部参数构造</p>
</li>
<li><p><strong>@RequiredArgsConstructor</strong></p>
<p>将标记为@NoNull的属性生成一个构造器 ， 如果运行中标记为@NoNull的属性为null,会抛出空指针异常。 </p>
</li>
<li><p><strong>@ToString</strong></p>
<p>生成所有属性的toString()方法 </p>
</li>
<li><p><strong>@EqualsAndHashCode</strong></p>
<p>生成equals()方法和hashCode方法 </p>
</li>
<li><p><strong>@Data(常用)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data直接修饰POJO or beans， getter所有的变量，setter所有不为final的变量。如果你不需要默认的生成方式，直接填写你需要的annotation的就可以了。默认生成的所有的annotation都是public的，如果需要不同权限修饰符可以使用AccessLevel.NONE选项。当然@Data 也可以使用staticConstructor选项生成一个静态方法。</span><br></pre></td></tr></table></figure>

<p><strong>@Data=@Setter+@Getter+@EqualsAndHashCode+@NoArgsConstructor</strong></p>
</li>
<li><p><strong>@SneakyThrows</strong> </p>
<p>可以对受检异常进行捕捉并抛出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConversion</span> <span class="keyword">implements</span> <span class="title">Converter</span> &lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String  str)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat  simpleDateFormat  =  <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        Date  date =  simpleDateFormat.parse(str);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h1 id="二、SpringMVC注解开发"><a href="#二、SpringMVC注解开发" class="headerlink" title="二、SpringMVC注解开发"></a>二、SpringMVC注解开发</h1><ul>
<li><h3 id="导入MVC、Web依赖"><a href="#导入MVC、Web依赖" class="headerlink" title="导入MVC、Web依赖"></a>导入MVC、Web依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="SpringMVC中注解开发的注解总结"><a href="#SpringMVC中注解开发的注解总结" class="headerlink" title="SpringMVC中注解开发的注解总结"></a>SpringMVC中注解开发的注解总结</h2><ul>
<li><p><strong>@controller</strong> </p>
<p>标记为处理器，方便Spring容器进行映射。 </p>
</li>
<li><p><strong>@RequestMapping</strong> </p>
<p>通过RequestMapping注解可以定义不同的处理器映射规则。 </p>
<p><strong>作用：</strong></p>
<p>1、URL路径映射。</p>
<p>2、窄化请求映射。</p>
<p>@RequestMapping放在类名上边，设置请求前缀</p>
<p>@Controller</p>
<p>@RequestMapping(“/item”)</p>
<p>方法名上边设置请求映射url：</p>
<p>@RequestMapping放在方法名上边，如下：</p>
<p>@RequestMapping(“/queryItem “) </p>
<p>访问地址为：/item/queryItem</p>
<p> 3、请求方法限定 </p>
</li>
<li><p><strong>@RequestParam</strong> </p>
<p>使用@RequestParam常用于处理简单类型的绑定。</p>
<p>常用定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(@RequestParam(value=<span class="string">"item_id"</span>,required=<span class="keyword">true</span>)</span> String id) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Validated</strong> </p>
<p>在绑定参数的参数前添加，表示对该参数进行校验。参数后面还需要添加BindingResult，表示检验信息写入此。 </p>
</li>
<li><p><strong>@RequestBody和ResponseBody</strong> </p>
<p>@RequestBody和ResponseBody分别表示输入和输出转换为json数据。</p>
<p>controller编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">json</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"------------jsondata-----------------"</span>);</span><br><span class="line">    <span class="keyword">return</span>  person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>@PathVariable</strong> </p>
<p>用于RESTfull中的模板模式映射。</p>
<p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/* 多个占位符的值得接受和传递 */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param04/&#123;id&#125;/&#123;name&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">param04</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span> <span class="keyword">int</span>  id</span></span><br><span class="line"><span class="function">  ,@<span class="title">PathVariable</span><span class="params">(value = <span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">      System.out.println(id +<span class="string">"-----------"</span>+ name);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线编程之剑指</title>
    <url>/2020/02/11/%E7%89%9B%E5%AE%A2%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%89%91%E6%8C%87/</url>
    <content><![CDATA[<h1 id="一、栈的压入、弹出序列"><a href="#一、栈的压入、弹出序列" class="headerlink" title="一、栈的压入、弹出序列"></a>一、栈的压入、弹出序列</h1><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><a id="more"></a>
<h6 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h6><p>​        用一个栈来模拟入栈和出栈的过程。</p>
<h6 id="Stack包中常用的方法："><a href="#Stack包中常用的方法：" class="headerlink" title="Stack包中常用的方法："></a>Stack包中常用的方法：</h6><p>​        push(); 将一个项目推到这个堆栈的顶部。(给堆栈里添加元素，也就是入栈。)</p>
<p>​        pop():在这个堆栈的顶部删除队形，并返回该对象的值作为该函数的返回值。（即弹栈）</p>
<p>​        peek():查看此堆栈顶部的对象。（即查看栈顶元素）</p>
<p><strong>注：栈的弹栈特点是先进后出。</strong></p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">//导入 栈的包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//如果pushA，popA之间有一个是空的，则是不合法的，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(pushA == <span class="keyword">null</span> &amp;&amp; popA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个辅助栈来模拟入栈出栈的过程</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//定义一个index来记录出栈popA的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环，一直到所有内容入栈完毕</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; pushA.length;i++)&#123;</span><br><span class="line">            stack.push(pushA[i]);</span><br><span class="line">            <span class="comment">//如果目前的栈顶与出栈的队列相同则出栈，然后index++</span></span><br><span class="line">            <span class="comment">//如果栈不为空，继续出栈。</span></span><br><span class="line">            <span class="keyword">while</span>((!stack.isEmpty()) &amp;&amp; stack.peek() == popA[index])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果最后栈为空，则返回true</span></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、从上往下打印二叉树"><a href="#二、从上往下打印二叉树" class="headerlink" title="二、从上往下打印二叉树"></a>二、从上往下打印二叉树</h1><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        从上往下打印出二叉树的每个节点，通层节点从左至右打印。</p>
<h6 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h6><p>​        层次遍历,用arraylist模拟一个队列来存储相应的TreeNode。</p>
<h6 id="ArrayList和LinkedList包中的常用方法："><a href="#ArrayList和LinkedList包中的常用方法：" class="headerlink" title="ArrayList和LinkedList包中的常用方法："></a>ArrayList和LinkedList包中的常用方法：</h6><p>​        ArrayList和LinkedList都继承了List类，其中add（）方法就是继承自List类的。</p>
<p>​        add():添加对象至集合(List、ArrayList、LinkedList)中。</p>
<p>​        isEmpty():用来判断集合中是否包含元素对象。返回值类型为Boolean。</p>
<p>​        removeFirst():移除并返回集合的第一个元素对象。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果二叉树为空则返回一个空的arrayList</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.定义一个ArrayList对象用来存储二叉树的节点值val</span></span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.定义一个LinkedList对象来做层序遍历</span></span><br><span class="line">        LinkedList&lt;TreeNode&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        linkedList.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!linkedList.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = linkedList.removeFirst();</span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            arrayList.add(temp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、二叉搜索树的后序遍历序列"><a href="#三、二叉搜索树的后序遍历序列" class="headerlink" title="三、二叉搜索树的后序遍历序列"></a>三、二叉搜索树的后序遍历序列</h1><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<h6 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h6><p>​        递归调用。</p>
<p>​        对于一个序列S，最后一个元素是last（即就是根节点元素），设去掉last元素后的序列为T，那么T必定满足：可以分为两段，前一段（即左子树）小于last，后一段（右子树）大于last，且两段都是合法的后序序列。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="keyword">int</span> [] sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> judge(sequence,<span class="number">0</span>,sequence.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> [] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= last)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后序遍历，最后的一个位置元素即是根节点</span></span><br><span class="line">        <span class="keyword">int</span> i = last;</span><br><span class="line">        <span class="comment">//找到的i即是分割左子树与右子树的位置。i-1的位置到start为左子树，i到last-1位置为右子树</span></span><br><span class="line">        <span class="comment">//因为二叉树的左子树的所有元素小于根节点的值，右子树的所有元素的值大于根节点的值</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt; start &amp;&amp; arr[i-<span class="number">1</span>] &gt; arr[last])&#123;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左子树的所有元素值都要小于根节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= start;--j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[last])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在递归的时候判断左子树和右子树是否满足后序遍历</span></span><br><span class="line">        <span class="keyword">return</span>(judge(arr,start,i-<span class="number">1</span>) &amp;&amp; judge(arr,i,last-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、把数组排成最小的数"><a href="#四、把数组排成最小的数" class="headerlink" title="四、把数组排成最小的数"></a>四、把数组排成最小的数</h1><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>
<h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h6><p>​        冒泡排序</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;numbers.length;j++)&#123;</span><br><span class="line">                String s1= numbers[i]+<span class="string">""</span>+numbers[j];</span><br><span class="line">                String s2= numbers[j]+<span class="string">""</span>+numbers[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(s1.compareTo(s2)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    temp = numbers[j];</span><br><span class="line">                    numbers[j]=numbers[i];</span><br><span class="line">                    numbers[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            str += String.valueOf(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>椭圆曲线密码学系统</title>
    <url>/2020/02/11/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="椭圆曲线密码系统"><a href="#椭圆曲线密码系统" class="headerlink" title="椭圆曲线密码系统"></a>椭圆曲线密码系统</h1><h2 id="一个简单的RAS算法"><a href="#一个简单的RAS算法" class="headerlink" title="一个简单的RAS算法"></a>一个简单的RAS算法</h2><p>​        RAS密码系统最让人头疼的问题就是，在加解密或者签名的时候需要庞大的运算量，所需较长的运算时间。对于一些处理器不强大的设备，比如手机、PDA（Personal Digital Assistant）或者及时响应的系统不友好。因此有了椭圆曲线密码系统（ECC）。ECC运算量较少，因此能提高效率。</p><a id="more"></a>
<h2 id="椭圆曲线的加法概念"><a href="#椭圆曲线的加法概念" class="headerlink" title="椭圆曲线的加法概念"></a>椭圆曲线的加法概念</h2><p><strong>中心思想：</strong></p>
<p>​        椭圆曲线的密码系统主要是利用椭圆曲线所构成的有限群来代替传统的RSA或ElGamal所使用的有限群，这里所使用的椭圆曲线方程式可以简化为 :<br>$$<br>y^2=x^3+ax+b<br>$$<br>它的曲线恰好对称于y=0这条直线，但在决定参数a、b时，必须让曲线没有重根（如此才能确保唯一解），因此a和b必须满足：<br>$$<br>4a^3+27b^2!=0<br>$$<br>​        决定参数a和b后，就可以在椭圆曲线上定义出一个有限加法群，这个加法与一般的加法不同，它的几何概念时令其加法单位元素为一无穷远的点O，且O=-O，并且此加法单位元素要满足：若椭圆曲线上某三点共线的话，其和就等于O。</p>
<p>​        椭圆曲线的加法运算是将椭圆曲线上两个坐标点相加，依坐标点的位置不同共有共有以下几种情况，其加法的过程都要满足3点共线时其和为O的这一项要求。</p>
<ul>
<li><h3 id="椭圆曲线上的不同坐标点相加"><a href="#椭圆曲线上的不同坐标点相加" class="headerlink" title="椭圆曲线上的不同坐标点相加"></a>椭圆曲线上的不同坐标点相加</h3><p>A、B为椭圆曲线上的不同点，将两个坐标相加，其做法如下：</p>
<p>&lt;1&gt;.先找出A与B这两点所构成的直线。</p>
<p>&lt;2&gt;.接着找出这条直线与椭圆曲线的交点R。</p>
<p>&lt;3&gt;.由于A、B、R这三点共线，根据椭圆曲线加法定义可知A+B+R=O,因此可求得A+B=-R，这里-R表示坐标点R对y=0这条直线的影射，也就是R对称于y轴的坐标点（如下图所示）。</p>
<p><a href="https://imgchr.com/i/MQLB59" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/11/MQLB59.md.png" alt="MQLB59.md.png"></a></p>
</li>
<li><h3 id="椭圆曲线上相同坐标点相加"><a href="#椭圆曲线上相同坐标点相加" class="headerlink" title="椭圆曲线上相同坐标点相加"></a>椭圆曲线上相同坐标点相加</h3><p>若椭圆曲线上的相同点做相加，其做法如下：</p>
<p>&lt;1&gt;.找出A点在椭圆曲线上的切线。</p>
<p>&lt;2&gt;.找出这条切线与椭圆曲线的交点R。</p>
<p>&lt;3&gt;.可以看成A、A、R这三点共线，根据椭圆曲线加法的定义可知A+A+R=O，因此A+A=-R(如下图所示)。</p>
<p><a href="https://imgchr.com/i/Ml3d1J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/11/Ml3d1J.md.png" alt="Ml3d1J.md.png"></a></p>
</li>
<li><h3 id="椭圆曲线上一坐标点与无穷远点相加"><a href="#椭圆曲线上一坐标点与无穷远点相加" class="headerlink" title="椭圆曲线上一坐标点与无穷远点相加"></a>椭圆曲线上一坐标点与无穷远点相加</h3><p>第三种状况是椭圆曲线上一A点与无穷远点做相加，其几何概念如下图所示：</p>
<p><img src="https://s2.ax1x.com/2019/11/11/MltcSU.png" alt="MltcSU.png"></p>
<p>把无穷远点视为y轴上一个正向极远的点，依据定义此无穷远的点就是O。此无穷远点与A点所构成的直线，可视为一条垂直线。因此，此垂直线与椭圆曲线会相交于另一点R，因此可求得A+oo=-R，而R与A刚好互为y轴的对称点（A=-R），故A+oo=A。</p>
</li>
</ul>
<ul>
<li><h3 id="椭圆曲线上两对称点相加"><a href="#椭圆曲线上两对称点相加" class="headerlink" title="椭圆曲线上两对称点相加"></a>椭圆曲线上两对称点相加</h3></li>
</ul>
<h2 id="在有限体内的椭圆曲线运算"><a href="#在有限体内的椭圆曲线运算" class="headerlink" title="在有限体内的椭圆曲线运算"></a>在有限体内的椭圆曲线运算</h2><h2 id="椭圆曲线的公开密钥加密机制"><a href="#椭圆曲线的公开密钥加密机制" class="headerlink" title="椭圆曲线的公开密钥加密机制"></a>椭圆曲线的公开密钥加密机制</h2><h2 id="椭圆曲线的数字签名"><a href="#椭圆曲线的数字签名" class="headerlink" title="椭圆曲线的数字签名"></a>椭圆曲线的数字签名</h2><p>​    </p>
]]></content>
  </entry>
  <entry>
    <title>Markdown进阶语法</title>
    <url>/2020/02/11/Markdown%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>写博客需要用到Markdown语法，于是产生了整理Markdown笔记的想法。</p><p>这篇文章是基于<a href="[https://lisongbai.top/2019/10/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/](https://lisongbai.top/2019/10/31/Markdown基本语法学习笔记-1/)">Markdown基本语法</a>的进阶语法。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1.内容目录"></a>1.内容目录</h3><p>在文章的最开始使用[TOC]引用目录，例如本文目录：</p><h3 id="2-加强代码块"><a href="#2-加强代码块" class="headerlink" title="2.加强代码块"></a>2.加强代码块</h3><p>使用”```”+”语言名”进行标记。例如：</p><ul>
<li><p>java示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeNode temp = root.left;</span><br><span class="line">            root.left = root.right;</span><br><span class="line">            root.right = temp;</span><br><span class="line">            Mirror(root.left);</span><br><span class="line">            Mirror(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>





<h3 id="3-脚注"><a href="#3-脚注" class="headerlink" title="3.脚注"></a>3.脚注</h3><p>使用[^keyword]表示注脚</p>
<ul>
<li><p>注脚</p>
<p>这是一个注脚[^1]的样例。</p>
</li>
</ul>
<h3 id="4-标签和分类"><a href="#4-标签和分类" class="headerlink" title="4.标签和分类"></a>4.标签和分类</h3><p>一般在吻兽输入tags添加标签，categories添加分类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> tags: </span><br><span class="line"> - Markdown</span><br><span class="line"> - 语言</span><br><span class="line"> categories:</span><br><span class="line">- 技术</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>分类具有层次性，标签无层次性。</p>
<h3 id="5-待办事项Todo列表"><a href="#5-待办事项Todo列表" class="headerlink" title="5.待办事项Todo列表"></a>5.待办事项Todo列表</h3><p>使用带有[]或者[x]（未完成或已完成）项的列表语法攥写一个代办事项列表例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 早起跑步</span><br><span class="line">- [X] 完成计网大作业</span><br><span class="line">- [x] 编译并更换ubuntu内核</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<ul>
<li><input disabled type="checkbox"> 早起跑步</li>
<li><input checked disabled type="checkbox"> 完成计网大作业</li>
<li><input checked disabled type="checkbox"> 编译并更换ubuntu内核</li>
</ul>
<p><strong>注：</strong>-空格[]空格具体事项（[]中填空格为未完成事项，填x为完成事项）</p>
<h3 id="6-LaTeX的公式规则"><a href="#6-LaTeX的公式规则" class="headerlink" title="6.LaTeX的公式规则"></a>6.LaTeX的公式规则</h3><h5 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h5><h6 id="1）转义"><a href="#1）转义" class="headerlink" title="1）转义"></a>1）转义</h6><blockquote>
<p>一下几个字符: # $ % &amp; ~ _ ^ \ { }有特殊意义，需要表示这些字符时，需要转义，即在每个字符前加上 \ 。<br> \boxed命令给公式加一个方框。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$E = mc^<span class="number">2</span> $</span><br><span class="line">$ \boxed&#123;E=mc^<span class="number">2</span>&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=E%20%3D%20mc%5E2%20%5Cquad%20%5Cboxed%7BE%3Dmc%5E2%7D" alt="E = mc^2 \quad \boxed{E=mc^2}"></p>
<h6 id="2）希腊字母"><a href="#2）希腊字母" class="headerlink" title="2）希腊字母"></a>2）希腊字母</h6><p><img src="https:////upload-images.jianshu.io/upload_images/3187098-f9884c349c6d36df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp" alt="img"></p>
<h6 id="3）上下标和根号"><a href="#3）上下标和根号" class="headerlink" title="3）上下标和根号"></a>3）上下标和根号</h6><blockquote>
<p>用^来表示上标<br> 用_来表示下标<br> 根号用\sqrt表示</p>
</blockquote>
<p>注意：上下标如果多余一个字符或符号，需要用{}括起来。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n a_i $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Csum_%7Bi%3D1%7D%5En%20a_i" alt="\sum_{i=1}^n a_i"><br> \sqrt[开方次数，默认为2]{开方公式}， 例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$$ x_&#123;ij&#125;^<span class="number">2</span>\quad \<span class="built_in">sqrt</span>&#123;x&#125;\quad \<span class="built_in">sqrt</span>[<span class="number">3</span>]&#123;x&#125; $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=x_%7Bij%7D%5E2%5Cquad%20%5Csqrt%7Bx%7D%5Cquad%20%5Csqrt%5B3%5D%7Bx%7D" alt="x_{ij}^2\quad \sqrt{x}\quad \sqrt[3]{x}"><br> 其中\quad表示添加空格。</p>
<h6 id="4）分数"><a href="#4）分数" class="headerlink" title="4）分数"></a>4）分数</h6><blockquote>
<p>分数用\frac表示。</p>
</blockquote>
<blockquote>
<p>字号工具环境设置：<br> \dfrac命令把字号设置为独立公式中的大小；<br> \tfrac则把字号设置为行间公式中的大小。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; \dfrac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cfrac%7B1%7D%7B2%7D%20%5Cdfrac%7B1%7D%7B2%7D" alt="\frac{1}{2} \dfrac{1}{2}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$ \frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; \tfrac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cfrac%7B1%7D%7B2%7D%20%5Ctfrac%7B1%7D%7B2%7D" alt="\frac{1}{2} \tfrac{1}{2}"></p>
<h6 id="5）运算符"><a href="#5）运算符" class="headerlink" title="5）运算符"></a>5）运算符</h6><blockquote>
<p>+ - * / = 直接输入；</p>
</blockquote>
<blockquote>
<p>特殊运算则用以下特殊命令<code>\pm\; \times\; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx\; \equiv</code><br> <img src="https://math.jianshu.com/math?formula=%5Cpm%5C%3B%20%5Ctimes%5C%3B%20%5Cdiv%5C%3B%20%5Ccdot%5C%3B%20%5Ccap%5C%3B%20%5Ccup%5C%3B%20%5Cgeq%5C%3B%20%5Cleq%5C%3B%20%5Cneq%5C%3B%20%5Capprox%5C%3B%20%5Cequiv" alt="\pm\; \times\; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx\; \equiv"></p>
</blockquote>
<blockquote>
<p>和、积、极限、积分等运算符用\sum, \prod, \lim, \int,这些公式在行内公式被压缩，以适应行高，可以通过\limits和\nolimits命令显示制动是否压缩。<br> <img src="https://math.jianshu.com/math?formula=%5Csum%5C%3B%20%5Cprod%5C%3B%20%5Clim%5C%3B%20%5Cint%5C%3B" alt="\sum\; \prod\; \lim\; \int\;"></p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n i </span><br><span class="line"></span><br><span class="line">$ \prod<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n </span><br><span class="line"></span><br><span class="line">$\lim<span class="number">_</span>&#123;x\to<span class="number">0</span>&#125;x^<span class="number">2</span> </span><br><span class="line"></span><br><span class="line">$\int<span class="number">_</span>&#123;a&#125;^&#123;b&#125;x^<span class="number">2</span> dx </span><br><span class="line"></span><br><span class="line">$\sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n i \quad\prod<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n </span><br><span class="line">\quad</span><br><span class="line">\lim<span class="number">_</span>&#123;x\to<span class="number">0</span>&#125;x^<span class="number">2</span> \quad\int<span class="number">_</span>&#123;a&#125;^&#123;b&#125;x^<span class="number">2</span> dx </span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Csum_%7Bi%3D1%7D%5En%20i%20%5Cquad%5Cprod_%7Bi%3D1%7D%5En%20%5Cquad%20%5Clim_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint_a%5Eb%20x%5E2%20dx%20%24%24%24%24%20%5Csum_%7Bi%3D1%7D%5En%20i%20%5Cquad%5Cprod_%7Bi%3D1%7D%5En%5Cquad%5Clim_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint_a%5Eb%20x%5E2%20dx%20%5Csum%5Cnolimits_%7Bi%3D1%7D%5En%5Cquad%5Cprod%5Cnolimits_%7Bi%3D1%7D%5En%20%5Cquad%20%5Clim%5Cnolimits_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint%5Cnolimits_a%5Eb%20x%5E2%20dx" alt="\sum_{i=1}^n i \quad\prod_{i=1}^n \quad \lim_{x\to0} x^2 \quad\int_a^b x^2 dx $$$$ \sum_{i=1}^n i \quad\prod_{i=1}^n\quad\lim_{x\to0} x^2 \quad\int_a^b x^2 dx \sum\nolimits_{i=1}^n\quad\prod\nolimits_{i=1}^n \quad \lim\nolimits_{x\to0} x^2 \quad\int\nolimits_a^b x^2 dx"></p>
<h6 id="6）多重积分"><a href="#6）多重积分" class="headerlink" title="6）多重积分"></a>6）多重积分</h6><blockquote>
<p>使用如下形式：\int、\iint、\iiint、\iiiint、\idotsint</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$$ \<span class="keyword">int</span> \<span class="keyword">int</span> \quad \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \quad </span><br><span class="line"> \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \quad \<span class="keyword">int</span> \dots \<span class="keyword">int</span> $$</span><br><span class="line"></span><br><span class="line">$$ \iint \quad \iiint \quad \iiiint \quad \idotsint $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cint%5Cint%5Cquad%5Cint%5Cint%5Cint%5Cquad%5Cint%5Cint%5Cint%5Cint%5Cquad%5Cint%5Cdots%5Cint%24%24%24%24%20%5Ciint%5Cquad%5Ciiint%5Cquad%5Ciiiint%5Cquad%5Cidotsint" alt="\int\int\quad\int\int\int\quad\int\int\int\int\quad\int\dots\int$$$$ \iint\quad\iiint\quad\iiiint\quad\idotsint"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \leftarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cleftarrow" alt="\leftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \rightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Crightarrow" alt="\rightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \leftrightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cleftrightarrow" alt="\leftrightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \longleftarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Clongleftarrow" alt="\longleftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$longleftrightarrow$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5CLongleftarrow" alt="\Longleftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \Longrightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5CLongleftrightarrow" alt="\Longleftrightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\xleftarrow和$\xrightarrow可根据内容自动调整</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cxleftarrow%7Bx%2By%2Bz%7D" alt="\xleftarrow{x+y+z}"></p>
<p><img src="https://math.jianshu.com/math?formula=%5Cxrightarrow%5Bx%5D%7Bx%2By%2Bz%7D" alt="\xrightarrow[x]{x+y+z}"></p>
<h6 id="7）注音和标注"><a href="#7）注音和标注" class="headerlink" title="7）注音和标注"></a>7）注音和标注</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \bar&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbar%7Bx%7D" alt="\bar{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \acute&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cacute%7Bx%7D" alt="\acute{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \mathring&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cmathring%7Bx%7D" alt="\mathring{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \vec&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cvec%7Bx%7D" alt="\vec{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \grave&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cgrave%7Bx%7D" alt="\grave{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \dot&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cdot%7Bx%7D" alt="\dot{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \hat&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Chat%7Bx%7D" alt="\hat{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \tilde&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bx%7D" alt="\tilde{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \ddot&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cddot%7Bx%7D" alt="\ddot{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \check&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Ccheck%7Bx%7D" alt="\check{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \breve&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbreve%7Bx%7D" alt="\breve{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \dddot&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cdddot%7Bx%7D" alt="\dddot{x}"></p>
<h6 id="8）分隔符"><a href="#8）分隔符" class="headerlink" title="8）分隔符"></a>8）分隔符</h6><blockquote>
<p>括号用() [] {} \lange \rangle表示 ()  []  {}  ⟨⟩</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \overline&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverline%7Bxxx%7D" alt="\overline{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overleftrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverleftrightarrow%7Bxxx%7D" alt="\overleftrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underline&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderline%7Bxxx%7D" alt="\underline{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underleftrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderleftrightarrow%7Bxxx%7D" alt="\underleftrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overleftarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverleftarrow%7Bxxx%7D" alt="\overleftarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overbrace&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverbrace%7Bxxx%7D" alt="\overbrace{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underleftarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderleftarrow%7Bxxx%7D" alt="\underleftarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underbrace&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderbrace%7Bxxx%7D" alt="\underbrace{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverrightarrow%7Bxxx%7D" alt="\overrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\widehat&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cwidehat%7Bxxx%7D" alt="\widehat{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderrightarrow%7Bxxx%7D" alt="\underrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\widetilde&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cwidetilde%7Bxxx%7D" alt="\widetilde{xxx}"></p>
<h6 id="9）省略号"><a href="#9）省略号" class="headerlink" title="9）省略号"></a>9）省略号</h6><blockquote>
<p>省略号用 \dots \cdots \vdots \ddots表示 ，\dots和\cdots的纵向位置不同，前者一般用于有下标的序列</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$ x_1, x_2, \dots, x_n\quad <span class="number">1</span>,<span class="number">2</span>,\cdots,n\quad \vdots\quad \ddots $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=x_1%2C%20x_2%2C%20%5Cdots%2C%20x_n%5Cquad%201%2C2%2C%5Ccdots%2Cn%5Cquad%20%5Cvdots%5Cquad%20%5Cddots" alt="x_1, x_2, \dots, x_n\quad 1,2,\cdots,n\quad \vdots\quad \ddots"></p>
<h6 id="10）空白间距"><a href="#10）空白间距" class="headerlink" title="10）空白间距"></a>10）空白间距</h6><table>
<thead>
<tr>
<th>语法</th>
<th align="left">格式</th>
<th>实例</th>
<th>显示</th>
</tr>
</thead>
<tbody><tr>
<td>quad空格</td>
<td align="left"><code>a \quad b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%20%5Cquad%20b" alt="a \quad b"></td>
<td>一个<em>m</em>的宽度</td>
</tr>
<tr>
<td>两个quad空格</td>
<td align="left"><code>a \qquad b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%20%5Cqquad%20b" alt="a \qquad b"></td>
<td>两个<em>m</em>的宽度</td>
</tr>
<tr>
<td>大空格</td>
<td align="left"><code>a \: b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%3Ab" alt="a\:b"></td>
<td>1/3<em>m</em>宽度</td>
</tr>
<tr>
<td>中等空格</td>
<td align="left"><code>a \; b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%3Bb" alt="a\;b"></td>
<td>2/7<em>m</em>宽度</td>
</tr>
<tr>
<td>小空格</td>
<td align="left"><code>a \, b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%2Cb" alt="a\,b"></td>
<td>1/6<em>m</em>宽度</td>
</tr>
<tr>
<td>没有空格</td>
<td align="left"><code>ab</code></td>
<td><img src="https://math.jianshu.com/math?formula=ab" alt="ab"></td>
<td>没有空格</td>
</tr>
<tr>
<td>缩进空格</td>
<td align="left"><code>a \! b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C!b" alt="a\!b"></td>
<td>缩进1/6<em>m</em>宽度</td>
</tr>
</tbody></table>
<h5 id="复杂公式"><a href="#复杂公式" class="headerlink" title="复杂公式"></a>复杂公式</h5><h6 id="1）矩阵"><a href="#1）矩阵" class="headerlink" title="1）矩阵"></a>1）矩阵</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">x_1 &amp; x_2 &amp;\dots\\</span><br><span class="line">x_3 &amp; x_4 &amp;\dots\\</span><br><span class="line">\vdots&amp;\vdots&amp;\ddots</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Barray%7D%7Bccc%7D%20x_1%20%26%20x_2%20%26%5Cdots%5C%5C%20x_3%20%26%20x_%204%26%5Cdots%5C%5C%20%5Cvdots%26%5Cvdots%26%5Cddots%20%5Cend%7Barray%7D" alt="\begin{array}{ccc} x_1 &amp; x_2 &amp;\dots\\ x_3 &amp; x_ 4&amp;\dots\\ \vdots&amp;\vdots&amp;\ddots \end{array}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;pmatrix&#125; </span><br><span class="line">a &amp; b\\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;pmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;bmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;Bmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;Bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;vmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;vmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;Vmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;Vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bpmatrix%7D%20a%20%26%20b%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bpmatrix%7D%5Cquad%5Cbegin%7Bbmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bbmatrix%7D%5Cquad%5Cbegin%7BBmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%5C%5C%5Cend%7BBmatrix%7D%5Cquad%5Cbegin%7Bvmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bvmatrix%7D%5Cquad%5Cbegin%7BVmatrix%7D%20a%20%26%20b%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7BVmatrix%7D" alt="\begin{pmatrix} a &amp; b\\ c &amp; d \\\end{pmatrix}\quad\begin{bmatrix} a &amp; b \\ c &amp; d \\\end{bmatrix}\quad\begin{Bmatrix} a &amp; b \\ c &amp; d\\\end{Bmatrix}\quad\begin{vmatrix} a &amp; b \\ c &amp; d \\\end{vmatrix}\quad\begin{Vmatrix} a &amp; b\\ c &amp; d \\\end{Vmatrix}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">(</span><br><span class="line">\<span class="keyword">begin</span>&#123;smallmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d </span><br><span class="line">\<span class="keyword">end</span>&#123;smallmatrix&#125;</span><br><span class="line">) </span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=(%5Cbegin%7Bsmallmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5Cend%7Bsmallmatrix%7D)" alt="(\begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix})"></p>
<h6 id="2）长公式"><a href="#2）长公式" class="headerlink" title="2）长公式"></a>2）长公式</h6><blockquote>
<p>无需对齐可使用multline；<br> 需要对齐使用split；<br> 用\来分行；<br> 用&amp;设置对齐的位置</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;multline&#125;    </span><br><span class="line">x = a+b+c+&#123;&#125; \\     </span><br><span class="line">d+e+f+g  </span><br><span class="line">\<span class="keyword">end</span>&#123;multline&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bmultline%7D%20x%20%3D%20a%2Bb%2Bc%2B%7B%7D%20%5C%5C%20d%2Be%2Bf%2Bg%20%5Cend%7Bmultline%7D" alt="\begin{multline} x = a+b+c+{} \\ d+e+f+g \end{multline}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;split&#125;</span><br><span class="line">x = &#123;&#125; &amp; a + b + c +&#123;&#125;\\    </span><br><span class="line">       &amp; d + e + f + g</span><br><span class="line">\<span class="keyword">end</span>&#123;split&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bsplit%7D%20x%20%3D%20%7B%7D%20%26%20a%20%2B%20b%20%2B%20c%20%2B%7B%7D%5C%5C%20%26%20d%20%2B%20e%20%2B%20f%20%2B%20g%20%5Cend%7Bsplit%7D" alt="\begin{split} x = {} &amp; a + b + c +{}\\ &amp; d + e + f + g \end{split}"></p>
<h6 id="3）公式组"><a href="#3）公式组" class="headerlink" title="3）公式组"></a>3）公式组</h6><blockquote>
<p>不需要对齐的公式组用gather；<br> 需要对齐使用align:</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\<span class="keyword">begin</span>&#123;gather&#125;</span><br><span class="line">a = b+c+d\\</span><br><span class="line">x = y+z\\</span><br><span class="line"><span class="number">5</span> = <span class="number">4</span>+<span class="number">1</span>\\</span><br><span class="line">\<span class="keyword">end</span>&#123;gather&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bgather%7D%20a%20%3D%20b%2Bc%2Bd%5C%5C%20x%20%3D%20y%2Bz%5C%5C%205%20%3D%204%2B1%20%5Cend%7Bgather%7D" alt="\begin{gather} a = b+c+d\\ x = y+z\\ 5 = 4+1 \end{gather}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\<span class="keyword">begin</span>&#123;align&#125;</span><br><span class="line">a &amp;=b+c+d \\</span><br><span class="line">x &amp;=y+z\\</span><br><span class="line"><span class="number">5</span> &amp;= <span class="number">4</span>+<span class="number">1</span></span><br><span class="line">\<span class="keyword">end</span>&#123;align&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Balign%7D%20a%20%26%3Db%2Bc%2Bd%20%5C%5C%20x%20%26%3Dy%2Bz%5C%5C%205%20%26%3D%204%2B1%20%5Cend%7Balign%7D" alt="\begin{align} a &amp;=b+c+d \\ x &amp;=y+z\\ 5 &amp;= 4+1 \end{align}"></p>
<h6 id="4）分支公式"><a href="#4）分支公式" class="headerlink" title="4）分支公式"></a>4）分支公式</h6><blockquote>
<p><strong>分段函数</strong>通常用cases次环境携程分支公式</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ y=\<span class="keyword">begin</span>&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq <span class="number">0</span>\\</span><br><span class="line">x, \quad x&gt;<span class="number">0</span></span><br><span class="line">\<span class="keyword">end</span>&#123;cases&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=y%3D%5Cbegin%7Bcases%7D-x%2C%5Cquad%20x%5Cleq%200%5C%5Cx%2C%20%5Cquad%20x%3E0%5Cend%7Bcases%7D" alt="y=\begin{cases}-x,\quad x\leq 0\\x, \quad x&gt;0\end{cases}"></p>
]]></content>
  </entry>
  <entry>
    <title>html学习笔记<一></title>
    <url>/2020/02/11/html%E4%B8%8Ecss%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-一个完整的网页"><a href="#1-一个完整的网页" class="headerlink" title="1. 一个完整的网页"></a>1. 一个完整的网页</h1><p>​    网页的内容 + 网页的样式 + 网页的动作</p><h1 id="2-万维网联盟-W3C"><a href="#2-万维网联盟-W3C" class="headerlink" title="2. 万维网联盟(W3C)"></a>2. 万维网联盟(W3C)</h1><p>由蒂姆·伯纳斯-李于1994年10月在麻省理工学院（MIT）计算机科学实验室成立<br>是Web技术领域最具权威和影响力的国际中立性技术标准机构<br>为Web技术的互相兼容，互联网技术的发展和应用起到了基础性和根本性的支撑作用</p><a id="more"></a>

<p>一流的企业做标准(苹果  高通   google   微软   华为)</p>
<p>二流企业做产品(腾讯  阿里   美团   字节跳动)  BAT  TMD</p>
<p>三流企业做服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://www.w3school.com.cn/</span><br></pre></td></tr></table></figure>



<h1 id="3-html的简介"><a href="#3-html的简介" class="headerlink" title="3. html的简介"></a>3. html的简介</h1><p>​    HTML（HyperText Mark-up Language）：超文本标记语言或超文本连接标示语言，由Tim Berners-Lee发明，是构成网页文档的主要语言</p>
<h1 id="4-html的编写"><a href="#4-html的编写" class="headerlink" title="4. html的编写"></a>4. html的编写</h1><ul>
<li>HTML文件一般存储为.htm或.html文件</li>
</ul>
<h1 id="5-html的编写工具-编辑器"><a href="#5-html的编写工具-编辑器" class="headerlink" title="5. html的编写工具(编辑器)"></a>5. html的编写工具(编辑器)</h1><ul>
<li>windows自带的记事本</li>
<li>Notepad++(windows平台最强大的文本编辑器)</li>
<li>Sublim(跨平台最强大的编辑器)</li>
<li>VScode(跨平台最强大的编辑器, “宇宙第一编辑器”)</li>
</ul>
<h1 id="6-html的编写工具-集成开发环境"><a href="#6-html的编写工具-集成开发环境" class="headerlink" title="6. html的编写工具(集成开发环境)"></a>6. html的编写工具(集成开发环境)</h1><ul>
<li>Dreamweaver(收费  已经不怎么用了)</li>
<li><strong>IntelliJ IDEA(新一代的神器)</strong></li>
<li><strong>Hbuilder(专属前端开发的神器)</strong></li>
</ul>
<h1 id="7-html中的特殊字符"><a href="#7-html中的特殊字符" class="headerlink" title="7. html中的特殊字符"></a>7. html中的特殊字符</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">空格	&amp;nbsp;</span><br><span class="line">大于号(&gt;)	&amp;gt;</span><br><span class="line">小于号(&lt;)	&amp;lt;</span><br><span class="line">引号(")	&amp;quot;</span><br><span class="line">版权符号@	&amp;copy;</span><br></pre></td></tr></table></figure>



<h1 id="8-html中的列表"><a href="#8-html中的列表" class="headerlink" title="8. html中的列表"></a>8. html中的列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表 </span></span><br><span class="line"><span class="comment">disc: 实体圆心,默认值</span></span><br><span class="line"><span class="comment">square: 实体方心</span></span><br><span class="line"><span class="comment">circle: 空心圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有序列表</span></span><br><span class="line"><span class="comment">1: 数字(阿拉伯数字)</span></span><br><span class="line"><span class="comment">a/A: 字母(英文字母)</span></span><br><span class="line"><span class="comment">i/I: 罗马数字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表</span></span><br><span class="line"><span class="comment">dt:列表的标题</span></span><br><span class="line"><span class="comment">dd:列表的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>所属学院<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>计算机院<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>所属专业<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>计算机网络<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="9-html中的表格"><a href="#9-html中的表格" class="headerlink" title="9. html中的表格"></a>9. html中的表格</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    border:表格边框的宽度</span></span><br><span class="line"><span class="comment">    width:表格自身的宽度</span></span><br><span class="line"><span class="comment">    height:表格自身的高度</span></span><br><span class="line"><span class="comment">    aligin: 表格的水平位置对其方式(left  center   right)</span></span><br><span class="line"><span class="comment">    cellspacing: 单元格距离边框的大小</span></span><br><span class="line"><span class="comment">    cellpadding: 单元格内容距离单元格的距离</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">width</span>=<span class="string">"800px"</span> <span class="attr">height</span>=<span class="string">"300px"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"0px"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        aligin: 给tr指定aligin则代表tr中的td的所有内容的对其方式</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rowspan 行合并(竖直方向上的合并) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 列合并(水皮方向上的合并) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="10-表单标签"><a href="#10-表单标签" class="headerlink" title="10. 表单标签"></a>10. 表单标签</h1><h1 id="11-html中的语义化标签"><a href="#11-html中的语义化标签" class="headerlink" title="11. html中的语义化标签"></a>11. html中的语义化标签</h1><ul>
<li><p>语义化标签可以让页面结构更加简洁、合理</p>
</li>
<li><p>能够达到见名知义的作用</p>
</li>
<li><p>更加符合Web标准，更利于搜索引擎的抓取（SEO的优化）和开发维护</p>
<p>article   header   footer</p>
</li>
</ul>
<h1 id="12-iframe框架标签"><a href="#12-iframe框架标签" class="headerlink" title="12. iframe框架标签"></a>12. iframe框架标签</h1><p> 用来引用框架页面，src属性用来指定要引入的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"path"</span> <span class="attr">name</span>=<span class="string">"mainFrame"</span> <span class="attr">frameborder</span>=<span class="string">"x"</span> <span class="attr">scrolling</span>=<span class="string">"yes/no"</span>  <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">width</span>=<span class="string">"x"</span> <span class="attr">height</span>=<span class="string">"y"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="13-独门秘籍"><a href="#13-独门秘籍" class="headerlink" title="13. 独门秘籍"></a>13. 独门秘籍</h1><p>emment表达式:</p>
<p>同级别:  +</p>
<p>子级:  &gt;</p>
<p>属性: []</p>
<p>文本: {}</p>
<p>数量:  *n</p>
<p>分组:  ()</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>DES加解密算法浅析</title>
    <url>/2020/02/11/DES%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="DES加解密算法浅析"><a href="#DES加解密算法浅析" class="headerlink" title="DES加解密算法浅析"></a>DES加解密算法浅析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>DES是一个分组加密算法，它以64位为分组对数据加密。同时DES也是一个对称算法：加密和解密用的是同一个算法。DES是一个包含16个阶段的“替换–置换”的分组加密算法，64位的分组明文序列作为加密算法的输入，经过16轮加密得到64位的密文序列。</p><p>算法原理看下图：</p><p><img src="https://s2.ax1x.com/2019/11/09/MmQzp6.png" alt="MmQzp6.png"></p><h2 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h2><p>DES算法主要分为3部分：加解密运算、f函数的处理、轮子密钥的生成，从右往左分别简单介绍一下。</p><a id="more"></a>



<p>轮子密钥的生成</p>
<p>数据表1</p>
<p> //PC-1</p>
<p>​    private int[] PC1={57,49,41,33,25,17,9,</p>
<p>​                       1,58,50,42,34,26,18,</p>
<p>​                       10,2,59,51,43,35,27,</p>
<p>​                        19,11,3,60,52,44,36,</p>
<p>​                       63,55,47,39,31,23,15,</p>
<p>​                       7,62,54,46,38,30,22,</p>
<p>​                       14,6,61,53,45,37,29,</p>
<p>​                       21,13,5,28,20,12,4};</p>
<p>​    //PC-2</p>
<p>​    private int[] PC2={14,17,11,24,1,5,3,28,</p>
<p>​                       15,6,21,10,23,19,12,4,</p>
<p>​                       26,8,16,7,27,20,13,2,</p>
<p>​                       41,52,31,37,47,55,30,40,</p>
<p>​                       51,45,33,48,44,49,39,56,</p>
<p>​                       34,53,46,42,50,36,29,32};</p>
<p>​    //Schedule of Left Shifts</p>
<p>​    private int[] LFT={1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};</p>
<p>16个子密钥的生成主要是利用了数据表1中的数表，首先将64位的初始密钥利用PC1压缩置换位56位的密钥，然后将其一分为二，这里记为C0和D0。这里28位的C0和28位的D0分别根据LET数组相应位置的值进行左移位得到C1和D1。这是将C1和D1合并根据PC2进行压缩置换得到48位的子密钥，而且注意C1和D1作为下轮的输入以用来产生下一个子密钥。</p>
<p>f函数的运算</p>
<p>数据表2</p>
<p>//E扩展</p>
<p>​    private int[] E={32,1,2,3,4,5,</p>
<p>​                      4,5,6,7,8,9,</p>
<p>​                     8,9,10,11,12,13,</p>
<p>​                     12,13,14,15,16,17,</p>
<p>​                     16,17,18,19,20,21,</p>
<p>​                     20,21,22,23,24,25,</p>
<p>​                     24,25,26,27,28,29,</p>
<p>​                     28,29,30,31,32,1};</p>
<p>​    //P置换</p>
<p>​    private int[] P={16,7,20,21,29,12,28,17,</p>
<p>​                      1,15,23,26,5,18,31,10,</p>
<p>​                      2,8,24,14,32,27,3,9,</p>
<p>​                      19,13,30,6,22,11,4,25};</p>
<p>​    private static final int[][][] S_Box = {//S-盒</p>
<p>​            {// S_Box[1]</p>
<p>​                    { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },</p>
<p>​                    { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },</p>
<p>​                    { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },</p>
<p>​                    { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } },</p>
<p>​            { // S_Box[2]</p>
<p>​                    { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },</p>
<p>​                    { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },</p>
<p>​                    { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },</p>
<p>​                    { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 } },</p>
<p>​            { // S_Box[3]</p>
<p>​                    { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },</p>
<p>​                    { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },</p>
<p>​                    { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },</p>
<p>​                    { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 } },</p>
<p>​            { // S_Box[4]</p>
<p>​                    { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },</p>
<p>​                    { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },</p>
<p>​                    { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },</p>
<p>​                    { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 } },</p>
<p>​            { // S_Box[5]</p>
<p>​                    { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },</p>
<p>​                    { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },</p>
<p>​                    { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },</p>
<p>​                    { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 } },</p>
<p>​            { // S_Box[6]</p>
<p>​                    { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },</p>
<p>​                    { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },</p>
<p>​                    { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },</p>
<p>​                    { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 } },</p>
<p>​            { // S_Box[7]</p>
<p>​                    { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },</p>
<p>​                    { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },</p>
<p>​                    { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },</p>
<p>​                    { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 } },</p>
<p>​            { // S_Box[8]</p>
<p>​                    { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },</p>
<p>​                    { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },</p>
<p>​                    { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },</p>
<p>​                    { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } }</p>
<p>​    };</p>
<p>从原理图中可以看到，f函数的输入是明文分组的右半分组记为R和子密钥记为K。32位的R首先要利用数据表2中的E进行E盒扩展变换得到48位的数据，这里记为RE。然后将RE与K进行异或运算并将异或结果利用数据表2中的S_BOX进行S盒替换，得到48位的运算结果记为RS。再将RS利用数据表2中的P进行P盒替换，得到32位的最终结果，记为RF。到这里f函数的运算任务就完成了。</p>
<p>加解密运算</p>
<p> //初始置换</p>
<p>​    private int[] IP={58,50,42,34,26,18,10,2,</p>
<p>​                     60,52,44,36,28,20,12,4,</p>
<p>​                     62,54,46,38,30,22,14,6,</p>
<p>​                     64,56,48,40,32,24,16,8,</p>
<p>​                     57,49,41,33,25,17,9,1,</p>
<p>​                     59,51,43,35,27,19,11,3,</p>
<p>​                     61,53,45,37,29,21,13,5,</p>
<p>​                     63,55,47,39,31,23,15,7};</p>
<p>​    //逆初始置换</p>
<p>​    private int[] IP_1={40,8,48,16,56,24,64,32,</p>
<p>​                       39,7,47,15,55,23,63,31,</p>
<p>​                       38,6,46,14,54,22,62,30,</p>
<p>​                       37,5,45,13,53,21,61,29,</p>
<p>​                       36,4,44,12,52,20,60,28,</p>
<p>​                       35,3,43,11,51,19,59,27,</p>
<p>​                       34,2,42,10,50,18,58,26,</p>
<p>​                       33,1,41,9,49,17,57,25};</p>
<p>在第一轮中将64位的明文分为L0和R0,则加密运算如下：<br> L1=R0<br> R1=L0⊕f(R0,K0)<br> 然后按此公式进行16轮的运算。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>CustomDES</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.des;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDES</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] IP = &#123;<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">            <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//逆初始置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] IP_1 = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">            <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">            <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">            <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">            <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;<span class="comment">//手残，数组数据没写全</span></span><br><span class="line">    <span class="comment">//E扩展</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] E = &#123;<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">            <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">            <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">            <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//P置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] P = &#123;<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][][] S_Box = &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//PC-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] PC1 = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">//PC-2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] PC2 = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line">    <span class="comment">//Schedule of Left Shifts</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] LFT = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密轮数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] keys = <span class="keyword">new</span> String[LOOP_NUM];</span><br><span class="line">    <span class="keyword">private</span> String[] pContent;</span><br><span class="line">    <span class="keyword">private</span> String[] cContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> origin_length;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 16个子密钥</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] sub_key = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>][<span class="number">48</span>];</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p_origin_length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDES</span><span class="params">(String key, String content)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        p_origin_length = content.getBytes().length;</span><br><span class="line">        generateKeys(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****拆分分组****/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] deal(<span class="keyword">byte</span>[] p, <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        origin_length = p.length;</span><br><span class="line">        <span class="keyword">int</span> g_num;</span><br><span class="line">        <span class="keyword">int</span> r_num;</span><br><span class="line">        g_num = origin_length / <span class="number">8</span>;</span><br><span class="line">        r_num = <span class="number">8</span> - (origin_length - g_num * <span class="number">8</span>);<span class="comment">//8不填充</span></span><br><span class="line">        <span class="keyword">byte</span>[] p_padding;</span><br><span class="line">        <span class="comment">/****填充********/</span></span><br><span class="line">        <span class="keyword">if</span> (r_num &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            p_padding = <span class="keyword">new</span> <span class="keyword">byte</span>[origin_length + r_num];</span><br><span class="line">            System.arraycopy(p, <span class="number">0</span>, p_padding, <span class="number">0</span>, origin_length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r_num; i++) &#123;</span><br><span class="line">                p_padding[origin_length + i] = (<span class="keyword">byte</span>) r_num;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p_padding = p;</span><br><span class="line">        &#125;</span><br><span class="line">        g_num = p_padding.length / <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] f_p = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] result_data = <span class="keyword">new</span> <span class="keyword">byte</span>[p_padding.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_num; i++) &#123;</span><br><span class="line">            System.arraycopy(p_padding, i * <span class="number">8</span>, f_p, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            System.arraycopy(descryUnit(f_p, sub_key, flag), <span class="number">0</span>, result_data, i * <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;<span class="comment">//解密</span></span><br><span class="line">            <span class="keyword">byte</span>[] p_result_data = <span class="keyword">new</span> <span class="keyword">byte</span>[p_origin_length];</span><br><span class="line">            System.arraycopy(result_data, <span class="number">0</span>, p_result_data, <span class="number">0</span>, p_origin_length);</span><br><span class="line">            <span class="keyword">return</span> p_result_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result_data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] descryUnit(<span class="keyword">byte</span>[] p, <span class="keyword">int</span> k[][], <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] p_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            String p_b = Integer.toBinaryString(p[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">while</span> (p_b.length() % <span class="number">8</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                p_b = <span class="string">"0"</span> + p_b;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(p_b);</span><br><span class="line">        &#125;</span><br><span class="line">        String p_str = stringBuilder.toString();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> p_t = Integer.valueOf(p_str.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (p_t == <span class="number">48</span>) &#123;</span><br><span class="line">                p_t = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p_t == <span class="number">49</span>) &#123;</span><br><span class="line">                p_t = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p_bit[i] = p_t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/***IP置换***/</span></span><br><span class="line">        <span class="keyword">int</span>[] p_IP = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            p_IP[i] = p_bit[IP[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123; <span class="comment">// 加密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">                L(p_IP, i, flag, k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123; <span class="comment">// 解密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">15</span>; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">                L(p_IP, i, flag, k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; IP_1.length; i++) &#123;</span><br><span class="line">            c[i] = p_IP[IP_1[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] c_byte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            c_byte[i] = (<span class="keyword">byte</span>) ((c[<span class="number">8</span> * i] &lt;&lt; <span class="number">7</span>) + (c[<span class="number">8</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">6</span>) + (c[<span class="number">8</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">5</span>) + (c[<span class="number">8</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">4</span>) + (c[<span class="number">8</span> * i + <span class="number">4</span>] &lt;&lt; <span class="number">3</span>) + (c[<span class="number">8</span> * i + <span class="number">5</span>] &lt;&lt; <span class="number">2</span>) + (c[<span class="number">8</span> * i + <span class="number">6</span>] &lt;&lt; <span class="number">1</span>) + (c[<span class="number">8</span> * i + <span class="number">7</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c_byte;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">L</span><span class="params">(<span class="keyword">int</span>[] M, <span class="keyword">int</span> times, <span class="keyword">int</span> flag, <span class="keyword">int</span>[] keyarray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] L0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] R0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] L1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] R1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        System.arraycopy(M, <span class="number">0</span>, L0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        System.arraycopy(M, <span class="number">32</span>, R0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        L1 = R0;</span><br><span class="line">        f = fFuction(R0, keyarray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">            R1[j] = L0[j] ^ f[j];</span><br><span class="line">            <span class="keyword">if</span> (((flag == <span class="number">0</span>) &amp;&amp; (times == <span class="number">0</span>)) || ((flag == <span class="number">1</span>) &amp;&amp; (times == <span class="number">15</span>))) &#123;</span><br><span class="line">                M[j] = R1[j];</span><br><span class="line">                M[j + <span class="number">32</span>] = L1[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                M[j] = L1[j];</span><br><span class="line">                M[j + <span class="number">32</span>] = R1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] fFuction(<span class="keyword">int</span>[] r_content, <span class="keyword">int</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] e_k = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">48</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E.length; i++) &#123;</span><br><span class="line">            e_k[i] = r_content[E[i] - <span class="number">1</span>] ^ key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/********S盒替换:由48位变32位，现分割e_k，然后再进行替换*********/</span></span><br><span class="line">        <span class="keyword">int</span>[][] s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span>[] s_after = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            System.arraycopy(e_k, i * <span class="number">6</span>, s[i], <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">            <span class="keyword">int</span> r = (s[i][<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) + s[i][<span class="number">5</span>];<span class="comment">//横坐标</span></span><br><span class="line">            <span class="keyword">int</span> c = (s[i][<span class="number">1</span>] &lt;&lt; <span class="number">3</span>) + (s[i][<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) + (s[i][<span class="number">3</span>] &lt;&lt; <span class="number">1</span>) + s[i][<span class="number">4</span>];<span class="comment">//纵坐标</span></span><br><span class="line">            String str = Integer.toBinaryString(S_Box[i][r][c]);</span><br><span class="line">            <span class="keyword">while</span> (str.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                str = <span class="string">"0"</span> + str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Integer.valueOf(str.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">48</span>) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">49</span>) &#123;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                s_after[<span class="number">4</span> * i + j] = p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/******S盒替换结束*******/</span></span><br><span class="line">        <span class="comment">/****P盒替代****/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; P.length; i++) &#123;</span><br><span class="line">            result[i] = s_after[P[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成子密钥</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateKeys</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (key.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            key = key + key;</span><br><span class="line">        &#125;</span><br><span class="line">        key = key.substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] keys = key.getBytes();</span><br><span class="line">        <span class="keyword">int</span>[] k_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="comment">//取位值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            String k_str = Integer.toBinaryString(keys[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">if</span> (k_str.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> k_size = k_str.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">8</span> - k_size; t++) &#123;</span><br><span class="line">                    k_str = <span class="string">"0"</span> + k_str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Integer.valueOf(k_str.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">48</span>) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">49</span>) &#123;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                k_bit[i * <span class="number">8</span> + j] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k_bit是初始的64位长密钥，下一步开始进行替换</span></span><br><span class="line">        <span class="comment">/***********PC-1压缩****************/</span></span><br><span class="line">        <span class="keyword">int</span>[] k_new_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">56</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PC1.length; i++) &#123;</span><br><span class="line">            k_new_bit[i] = k_bit[PC1[i] - <span class="number">1</span>];<span class="comment">/////这个减1注意点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**************************/</span></span><br><span class="line">        <span class="keyword">int</span>[] c0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">        <span class="keyword">int</span>[] d0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">        System.arraycopy(k_new_bit, <span class="number">0</span>, c0, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        System.arraycopy(k_new_bit, <span class="number">28</span>, d0, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] c1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">            <span class="keyword">int</span>[] d1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">            <span class="keyword">if</span> (LFT[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                System.arraycopy(c0, <span class="number">1</span>, c1, <span class="number">0</span>, <span class="number">27</span>);</span><br><span class="line">                c1[<span class="number">27</span>] = c0[<span class="number">0</span>];</span><br><span class="line">                System.arraycopy(d0, <span class="number">1</span>, d1, <span class="number">0</span>, <span class="number">27</span>);</span><br><span class="line">                d1[<span class="number">27</span>] = d0[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LFT[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                System.arraycopy(c0, <span class="number">2</span>, c1, <span class="number">0</span>, <span class="number">26</span>);</span><br><span class="line">                c1[<span class="number">26</span>] = c0[<span class="number">0</span>];</span><br><span class="line">                c1[<span class="number">27</span>] = c0[<span class="number">1</span>];<span class="comment">//这里手残之前写成c1</span></span><br><span class="line"></span><br><span class="line">                System.arraycopy(d0, <span class="number">2</span>, d1, <span class="number">0</span>, <span class="number">26</span>);</span><br><span class="line">                d1[<span class="number">26</span>] = d0[<span class="number">0</span>];</span><br><span class="line">                d1[<span class="number">27</span>] = d0[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"LFT Error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">56</span>];</span><br><span class="line">            System.arraycopy(c1, <span class="number">0</span>, tmp, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">            System.arraycopy(d1, <span class="number">0</span>, tmp, <span class="number">28</span>, <span class="number">28</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; PC2.length; j++) &#123;<span class="comment">//PC2压缩置换</span></span><br><span class="line">                sub_key[i][j] = tmp[PC2[j] - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            c0 = c1;</span><br><span class="line">            d0 = d1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CustomDESTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.des;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDESTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String origin=<span class="string">"https://www.lisongbai.top"</span>;</span><br><span class="line">        System.out.println(<span class="string">"原文：\n"</span>+origin);</span><br><span class="line">        CustomDES customDES=<span class="keyword">new</span> CustomDES(<span class="string">"LCX"</span>,origin);</span><br><span class="line">        <span class="keyword">byte</span>[] c=customDES.deal(origin.getBytes(),<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"密文：\n"</span>+<span class="keyword">new</span> String(c));</span><br><span class="line">        <span class="keyword">byte</span>[]p=customDES.deal(c,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] p_d=<span class="keyword">new</span> <span class="keyword">byte</span>[origin.getBytes().length];</span><br><span class="line">        System.arraycopy(p,<span class="number">0</span>,p_d,<span class="number">0</span>,origin.getBytes().length);</span><br><span class="line">        System.out.println(<span class="string">"明文：\n"</span>+<span class="keyword">new</span> String(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果如下：</p>
<p><a href="https://imgchr.com/i/Kj3ioq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/03/Kj3ioq.md.png" alt="Kj3ioq.md.png"></a></p>
<h2 id="感悟心得"><a href="#感悟心得" class="headerlink" title="感悟心得"></a>感悟心得</h2><p>​        通过自己动手实现DES加密解密算法，我对DES的加密解密过程有了更深的认识，之前在课堂上知识大致了解了一下流程，很多细节方面的知识并不是很了解，在这次大作业中，查阅了很多资料，对DES加密算法有了更多的体会。<br>​        DES加密是堆成加密的经典算法，通过它的实现过程发现它使用了很多次置换法，采用了混乱和扩散的组合，每个组合先替换后置换，共进行了16轮，其中充分利用了S盒的非对称性运算，大大增加了破解难度，在没有密钥的情况下，破解者之恶能通过穷举法来破解密钥，这种破解方法费时费力，所以DES的安全性还是挺高的。<br>通过这此大作业，我体会到了密码学中加密设计的有趣之处，在只接触到理论知识的时候，觉得加密算法只是枯燥的迭代运算，实践后才觉得枯燥的迭代运算正是它设计的奥秘所在。在以后的学习过程中，努力做到知其然并知其所以然。</p>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/01/29/SpringMVC/</url>
    <content><![CDATA[<hr><hr><h1 id="一、SpringMVC是什么"><a href="#一、SpringMVC是什么" class="headerlink" title="一、SpringMVC是什么?"></a>一、SpringMVC是什么?</h1><p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等。</p><a id="more"></a>


<h1 id="二、MVC的设计架构"><a href="#二、MVC的设计架构" class="headerlink" title="二、MVC的设计架构"></a>二、MVC的设计架构</h1><p>​    <strong>m: model</strong></p>
<p>​    <strong>v: view</strong></p>
<p>​    <strong>c: controller</strong></p>
<p><a href="https://imgchr.com/i/1toyb6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/02/1toyb6.md.png" alt="1toyb6.md.png"></a></p>
<h1 id="三、SpringMVC的框架"><a href="#三、SpringMVC的框架" class="headerlink" title="三、SpringMVC的框架"></a>三、SpringMVC的框架</h1><p><a href="https://imgchr.com/i/1toOPg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/02/1toOPg.md.png" alt="1toOPg.md.png"></a></p>
<ol>
<li>用户发起request请求，请求至DispatcherServlet前端控制器 </li>
<li>DispatcherServlet前端控制器请求HandlerMapping处理器映射器查找Handler </li>
<li>HandlerMapping处理器映射器，根据url及一些配置规则（xml配置、注解配置）查找Handler，将Handler返回给DispatcherServlet前端控制器 </li>
<li>DispatcherServlet前端控制器调用适配器执行Handler </li>
<li>适配器执行Handler </li>
<li>Handler执行完成返回ModelAndView </li>
<li>适配器将ModelAndView返回给DispatcherServlet </li>
<li>DispatcherServlet调用视图解析器进行视图解析，解析后生成view (springmvc视图封装对象 )</li>
<li>ViewResolver视图解析器给前端控制器返回view </li>
<li>DispatcherServlet调用view的渲染视图的方法，将模型数据填充到request域 </li>
<li>DispatcherServlet向用户响应结果(jsp页面、json数据。。。。) </li>
</ol>
<h1 id="四、springmvc入门程序"><a href="#四、springmvc入门程序" class="headerlink" title="四、springmvc入门程序"></a>四、springmvc入门程序</h1><h2 id="4-1-引入SpringMVC的依赖"><a href="#4-1-引入SpringMVC的依赖" class="headerlink" title="4.1 引入SpringMVC的依赖"></a>4.1 引入SpringMVC的依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-配置处理器映射器、适配器和视图解析器"><a href="#4-2-配置处理器映射器、适配器和视图解析器" class="headerlink" title="4.2 配置处理器映射器、适配器和视图解析器"></a>4.2 配置处理器映射器、适配器和视图解析器</h2><p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.it.bigdata"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器  RequestMappingHandlerMapping--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器  RequestMappingHandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器  默认为InternalResourceViewResolver --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-配置前端控制器"><a href="#4-3-配置前端控制器" class="headerlink" title="4.3  配置前端控制器"></a>4.3  配置前端控制器</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4-编写处理器"><a href="#4-4-编写处理器" class="headerlink" title="4.4 编写处理器"></a>4.4 编写处理器</h2><p><strong>即controller层代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值是视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ModelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/func1.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index02.jsp"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-编写视图"><a href="#4-5-编写视图" class="headerlink" title="4.5 编写视图"></a>4.5 编写视图</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index02&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">$&#123;userage&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="五、处理器方法的返回值"><a href="#五、处理器方法的返回值" class="headerlink" title="五、处理器方法的返回值"></a>五、处理器方法的返回值</h1><h2 id="5-1-返回ModelAndView"><a href="#5-1-返回ModelAndView" class="headerlink" title="5.1 返回ModelAndView"></a>5.1 返回ModelAndView</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func1.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index02.jsp"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-返回String"><a href="#5-2-返回String" class="headerlink" title="5.2 返回String"></a>5.2 返回String</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回值是视图的名称，在model中可以设置数据（常用）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func2.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">func2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func2"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>,<span class="string">"张三"</span>);</span><br><span class="line">     model.addAttribute(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index02.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3返回对象"><a href="#5-3返回对象" class="headerlink" title="5.3返回对象"></a>5.3返回对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func3.action"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回对象 以json返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">func3</span><span class="params">(Model model, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func3"</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"李四"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>须导入<strong>jackson-databind</strong>包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4返回void"><a href="#5-4返回void" class="headerlink" title="5.4返回void"></a>5.4返回void</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func4.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func4</span><span class="params">(Model model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func4"</span>);</span><br><span class="line">    <span class="comment">//从视图发送数据到控制台</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">    <span class="comment">//从控制台写数据到视图</span></span><br><span class="line">    response.getWriter().write(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>orange pi zero</title>
    <url>/2020/01/24/orange-pi-zero/</url>
    <content><![CDATA[<h3 id="一、可以用-Orange-Pi-Zero-做什么？"><a href="#一、可以用-Orange-Pi-Zero-做什么？" class="headerlink" title="一、可以用 Orange Pi Zero 做什么？"></a>一、可以用 Orange Pi Zero 做什么？</h3><p>我们可以用它搭建：</p><ul>
<li>一台计算机</li>
<li>一个无线网络服务器</li>
<li>游戏机</li>
<li>音乐播放器</li>
<li>高清视频播放器</li>
<li>扬声器</li>
<li>Android</li>
<li>Scratch</li>
<li>更多的各种功能，因为 Orange Pi Zero 是开源的</li>
</ul><h3 id="二、Orange-Pi-Zero-是为谁设计的？"><a href="#二、Orange-Pi-Zero-是为谁设计的？" class="headerlink" title="二、Orange Pi Zero 是为谁设计的？"></a>二、Orange Pi Zero 是为谁设计的？</h3><p>Orange Pi Zero 不仅仅是一款消费品，同时也是给任何想用技术来进行创作创新的人设计的。它是一款非常简单、有趣、实用的工具，你可以用它去打造你身边的世界。</p><a id="more"></a>


<h3 id="三、分区扩容"><a href="#三、分区扩容" class="headerlink" title="三、分区扩容"></a>三、分区扩容</h3><p>在使用win32DiskImager工具对*.img镜像进行写入，它只给rootfs分配一个g得存储空间，不够使用，需要对分区进行扩容。</p>
<p>linux下使用<strong>Gparted</strong></p>
<p>安装指令：sudo apt-get install  gparted </p>
<p>windows下使用<strong>DiskGenius</strong></p>
<p><strong>注意：</strong>DiskGenius对分区进行扩容有极大可能会造成数据丢失，从而导致系统跑不起来。建议使用Gparted工具来进行扩容。</p>
<h3 id="四、VNC远程投屏"><a href="#四、VNC远程投屏" class="headerlink" title="四、VNC远程投屏"></a>四、VNC远程投屏</h3><h4 id="安装xfce4桌面"><a href="#安装xfce4桌面" class="headerlink" title="安装xfce4桌面"></a>安装xfce4桌面</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install xfce4</span><br></pre></td></tr></table></figure>

<h4 id="安装vnc服务"><a href="#安装vnc服务" class="headerlink" title="安装vnc服务"></a>安装vnc服务</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install vnc4server</span><br></pre></td></tr></table></figure>

<h4 id="设置vnc密码"><a href="#设置vnc密码" class="headerlink" title="设置vnc密码"></a>设置vnc密码</h4><p>安装完成后对vnc4server设置密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vnc4server</span><br></pre></td></tr></table></figure>

<h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p>使用vnc viewer输入ip与端口号（默认端口号为5901）</p>
<p>登录成功后只有一个终端，并无桌面。</p>
<p>然后修改配置</p>
<p><strong>进入当前终端用户的.vnc目录：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vnc</span><br></pre></td></tr></table></figure>

<p><strong>备份好原来的 xstartup:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp xstartup xstartup-bak</span><br></pre></td></tr></table></figure>

<p><strong>xstartup配置参数如下:</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/24/1ZKNtK.png" alt="1ZKNtK.png"></p>
<h4 id="重启vnc-服务"><a href="#重启vnc-服务" class="headerlink" title="重启vnc 服务:"></a>重启vnc 服务:</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-tag">-kill</span> <span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-pseudo">:1</span></span><br></pre></td></tr></table></figure>

<h4 id="重新连接VNC"><a href="#重新连接VNC" class="headerlink" title="重新连接VNC:"></a>重新连接VNC:</h4><p>出现乱码情况</p>
<p><img src="https://s2.ax1x.com/2020/01/24/1ZKf1g.jpg" alt="1ZKf1g.jpg"></p>
<p><strong>状况：</strong>所用的<a href="https://www.centos.bz/tag/ubuntu/" target="_blank" rel="noopener">ubuntu</a>系统不支持中文，遇见中文就????。ORZ…</p>
<p><strong>目标：</strong>使系统/服务器支持中文，能够正常显示。</p>
<p>首先，安装中文支持包language-pack-zh-hans：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install language-pack-zh-hans</span></span><br></pre></td></tr></table></figure>

<p>然后，修改/etc/environment（在文件的末尾追加）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANGUAGE=&quot;zh_CN:zh:en_US:en&quot;</span><br></pre></td></tr></table></figure>

<p>再修改/var/lib/locales/supported.d/local(没有这个文件就新建，同样在末尾追加)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN GB2312</span><br></pre></td></tr></table></figure>

<p>最后，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo locale-gen</span></span><br></pre></td></tr></table></figure>

<p>对于中文乱码是空格的情况，安装中文字体解决。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming</span></span><br></pre></td></tr></table></figure>

<p><strong>感觉桌面作用不大！！！</strong></p>
]]></content>
      <tags>
        <tag>香橙派</tag>
      </tags>
  </entry>
  <entry>
    <title>java mysql数据类型对照</title>
    <url>/2020/01/16/java-mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E7%85%A7/</url>
    <content><![CDATA[<h1 id="java-mysql数据类型对照"><a href="#java-mysql数据类型对照" class="headerlink" title="java mysql数据类型对照"></a>java mysql数据类型对照</h1><table>
<thead>
<tr>
<th><strong>类型名称</strong></th>
<th><strong>显示长度</strong></th>
<th><strong>数据库类型</strong></th>
<th><strong>JAVA类型</strong></th>
<th><strong>JDBC类型索引(int)</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>VARCHAR</strong></td>
<td><strong>L+N</strong></td>
<td><strong>VARCHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>12</strong></td>
<td></td>
</tr>
<tr>
<td><strong>CHAR</strong></td>
<td><strong>N</strong></td>
<td><strong>CHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>1</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BLOB</strong></td>
<td><strong>L+N</strong></td>
<td><strong>BLOB</strong></td>
<td><strong>java.lang.byte[]</strong></td>
<td><strong>-4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TEXT</strong></td>
<td><strong>65535</strong></td>
<td><strong>VARCHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>-1</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>INTEGER</strong></td>
<td><strong>4</strong></td>
<td><strong>INTEGER UNSIGNED</strong></td>
<td><strong>java.lang.Long</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TINYINT</strong></td>
<td><strong>3</strong></td>
<td><strong>TINYINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>-6</strong></td>
<td></td>
</tr>
<tr>
<td><strong>SMALLINT</strong></td>
<td><strong>5</strong></td>
<td><strong>SMALLINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>5</strong></td>
<td></td>
</tr>
<tr>
<td><strong>MEDIUMINT</strong></td>
<td><strong>8</strong></td>
<td><strong>MEDIUMINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BIT</strong></td>
<td><strong>1</strong></td>
<td><strong>BIT</strong></td>
<td><strong>java.lang.Boolean</strong></td>
<td><strong>-7</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BIGINT</strong></td>
<td><strong>20</strong></td>
<td><strong>BIGINT UNSIGNED</strong></td>
<td><strong>java.math.BigInteger</strong></td>
<td><strong>-5</strong></td>
<td></td>
</tr>
<tr>
<td><strong>FLOAT</strong></td>
<td><strong>4+8</strong></td>
<td><strong>FLOAT</strong></td>
<td><strong>java.lang.Float</strong></td>
<td><strong>7</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DOUBLE</strong></td>
<td><strong>22</strong></td>
<td><strong>DOUBLE</strong></td>
<td><strong>java.lang.Double</strong></td>
<td><strong>8</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DECIMAL</strong></td>
<td><strong>11</strong></td>
<td><strong>DECIMAL</strong></td>
<td><strong>java.math.BigDecimal</strong></td>
<td><strong>3</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BOOLEAN</strong></td>
<td><strong>1</strong></td>
<td><strong>同TINYINT</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>ID</strong></td>
<td><strong>11</strong></td>
<td><strong>PK (INTEGER UNSIGNED)</strong></td>
<td><strong>java.lang.Long</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>DATE</strong></td>
<td><strong>10</strong></td>
<td><strong>DATE</strong></td>
<td><strong>java.sql.Date</strong></td>
<td><strong>91</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TIME</strong></td>
<td><strong>8</strong></td>
<td><strong>TIME</strong></td>
<td><strong>java.sql.Time</strong></td>
<td><strong>92</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DATETIME</strong></td>
<td><strong>19</strong></td>
<td><strong>DATETIME</strong></td>
<td><strong>java.sql.Timestamp</strong></td>
<td><strong>93</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TIMESTAMP</strong></td>
<td><strong>19</strong></td>
<td><strong>TIMESTAMP</strong></td>
<td><strong>java.sql.Timestamp</strong></td>
<td><strong>93</strong></td>
<td></td>
</tr>
<tr>
<td><strong>YEAR</strong></td>
<td><strong>4</strong></td>
<td><strong>YEAR</strong></td>
<td><strong>java.sql.Date</strong></td>
<td><strong>91</strong></td>
<td></td>
</tr>
</tbody></table>]]></content>
  </entry>
  <entry>
    <title>mySql中的事务</title>
    <url>/2020/01/15/mySql%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="一、MySql中的事务"><a href="#一、MySql中的事务" class="headerlink" title="一、MySql中的事务"></a>一、MySql中的事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul><a id="more"></a>

<h1 id="二、事务的四大特性（ACID）"><a href="#二、事务的四大特性（ACID）" class="headerlink" title="二、事务的四大特性（ACID）"></a>二、事务的四大特性（ACID）</h1><ul>
<li><p><strong>原子性（Atomicity）</strong></p>
<p>整个事务中的单元要么全部成功,要么全部失败 。</p>
<p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p><strong>一致性（Consistency）</strong></p>
<p>事务执行前后的结果必须一致 。</p>
<p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p><strong>隔离性(Isolation)</strong> </p>
<p>事务之间应该相互独立,互相不受影响 。</p>
<p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</p>
</li>
<li><p><strong>持久性(Durability)</strong> </p>
<p>一旦事务提交,就会持久化保存 ,事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p>
<p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<p>​    <em>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</em></p>
<h1 id="三、事务的两大动作"><a href="#三、事务的两大动作" class="headerlink" title="三、事务的两大动作"></a>三、事务的两大动作</h1><ul>
<li><strong>提交（commit）</strong></li>
<li><strong>回滚（rollback）</strong></li>
</ul>
<h1 id="四、事务的并发问题"><a href="#四、事务的并发问题" class="headerlink" title="四、事务的并发问题"></a>四、事务的并发问题</h1><ul>
<li><strong>脏读</strong><ul>
<li>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li>
</ul>
</li>
<li><strong>不可重复读</strong> <ul>
<li>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致 (<strong>侧重修改操作</strong>)</li>
</ul>
</li>
<li><strong>幻读</strong> <ul>
<li>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读 (<strong>侧重新增或删除</strong>)</li>
</ul>
</li>
</ul>
<h1 id="五、MySQL事务的隔离级别"><a href="#五、MySQL事务的隔离级别" class="headerlink" title="五、MySQL事务的隔离级别"></a>五、MySQL事务的隔离级别</h1><table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（read-uncommitted）</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读已提交（read-committed）</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（repeatable-read）</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化（serializable）</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<h1 id="六、mysql和oracle默认的隔离级别"><a href="#六、mysql和oracle默认的隔离级别" class="headerlink" title="六、mysql和oracle默认的隔离级别"></a>六、mysql和oracle默认的隔离级别</h1><p>​    mysql默认的隔离级别是<strong>repeatable-read</strong> </p>
<p>​    oracle默认的隔离级别是 <strong>read committed</strong></p>
<p>​    <strong>查询事务的隔离级别: select @@tx_isolation</strong> </p>
<p>​    <strong>设置事务的隔离级别: set session transaction  isolation level read committed</strong></p>
<h1 id="七、隔离级别的选择"><a href="#七、隔离级别的选择" class="headerlink" title="七、隔离级别的选择"></a>七、隔离级别的选择</h1><ul>
<li>两个极端的情况不选择<ul>
<li>read uncommitted和serializable是一般不会使用</li>
<li>一般我们会使用默认的隔离级别</li>
</ul>
</li>
</ul>
<h1 id="八、事务控制语句"><a href="#八、事务控制语句" class="headerlink" title="八、事务控制语句"></a>八、事务控制语句</h1><ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li>
</ul>
<h1 id="九、MYSQL-事务处理主要有两种方法："><a href="#九、MYSQL-事务处理主要有两种方法：" class="headerlink" title="九、MYSQL 事务处理主要有两种方法："></a>九、MYSQL 事务处理主要有两种方法：</h1><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>
</ul>
<h1 id="十、jdbc操作事务"><a href="#十、jdbc操作事务" class="headerlink" title="十、jdbc操作事务"></a>十、jdbc操作事务</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Statement statement;</span><br><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/*贾连欲执事*/</span></span><br><span class="line">    <span class="comment">//加载驱动</span></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//操作事务</span></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db2"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    statement = conn.createStatement();</span><br><span class="line">    ShiWuCaoZuo(<span class="number">500</span>, <span class="string">"xiaoming"</span>, <span class="string">"xiaohua"</span>);</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShiWuCaoZuo</span><span class="params">(Integer money, String from, String to)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">    ResultSet resultSet = statement.executeQuery(<span class="string">"select balance from account WHERE name='"</span> + from + <span class="string">"'"</span>);</span><br><span class="line">    <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">        <span class="keyword">int</span> balance = resultSet.getInt(<span class="string">"balance"</span>);</span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= money) &#123;</span><br><span class="line">            statement.execute(<span class="string">"update account set balance=balance-"</span> + money + <span class="string">" where name='"</span> + from + <span class="string">"'"</span>);</span><br><span class="line">            statement.execute(<span class="string">"update account set balance=balance+"</span> + money + <span class="string">" where name='"</span> + to + <span class="string">"'"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            conn.rollback();<span class="comment">//回滚</span></span><br><span class="line">            System.out.println(<span class="string">"转账失败...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    conn.commit();<span class="comment">//提交事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mysql事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架</title>
    <url>/2020/01/13/Spring%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、spring简介"><a href="#一、spring简介" class="headerlink" title="一、spring简介"></a>一、spring简介</h1><p>spring 是一个轻量级的，基于IOC和AOP核心技术的企业级开源开发框架</p><p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p><a id="more"></a>

<p>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </p>
<p><strong>Spring目的</strong>：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明 管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </p>
<p><strong>注意：</strong>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<h1 id="二、spring的主要特征"><a href="#二、spring的主要特征" class="headerlink" title="二、spring的主要特征"></a>二、spring的主要特征</h1><p><strong>（1）轻量级</strong>：spring是一个轻量级的开发框架，基本版本大约只有2M</p>
<p><strong>（2）IOC：</strong>控制反转，应用程序中对象之间的依赖是由spring 来控制的</p>
<p><strong>（3）AOP：</strong>面向切面编程，spring支持面向切面编程，这样可以将业务逻辑和系统服务分开，分离</p>
<p><strong>（4）容器：</strong>包含并管理应用程序中对象的生命周期和配置信息</p>
<p><strong>（5）MVC思想：</strong>spring也是基于MVC思想的框架，也遵循模型-视图-控制器这三个层次</p>
<p><strong>（6）事务：</strong>spring提供一个持续化的接口，可以上至扩展到本地事务下至扩展到全局事务</p>
<p><strong>（7）异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，hibernate,or JDO抛出的）转化为一致的unchecked 异常。</p>
<h1 id="三、spring优缺点"><a href="#三、spring优缺点" class="headerlink" title="三、spring优缺点"></a>三、spring优缺点</h1><p><strong>优点：</strong></p>
<p>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。<br>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。<br>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属<br>性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。<br>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。<br>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。<br>使用Spring构建的应用程序易于单元测试。<br>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。<br>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。<br>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。<br><strong>缺点：</strong><br>1.jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器</p>
<p>2.Spring不支持分布式，这也是EJB仍然在用的原因之一。</p>
<h1 id="四、Spring的两大内容"><a href="#四、Spring的两大内容" class="headerlink" title="四、Spring的两大内容"></a>四、Spring的两大内容</h1><p><strong>IOC（控制反转）和AOP（面向切面编程）</strong></p>
<p><strong>IOC：</strong>把对象的创建权交给Spring。</p>
<p><strong>AOP：</strong>底层使用动态代理,对代码进行增强的一种方式。</p>
<h2 id="1、IOC和DI（依赖注入）的关系"><a href="#1、IOC和DI（依赖注入）的关系" class="headerlink" title="1、IOC和DI（依赖注入）的关系"></a>1、IOC和DI（依赖注入）的关系</h2><ul>
<li><p><strong>依赖注入的前提:</strong></p>
<p>有IOC的环境,也就是将必须对象的创建权交给了Spring.</p>
</li>
<li><p><strong>DI 介绍</strong> </p>
<p>Dependency Injection 依赖注入.需要有IOC 的环境,Spring 创建这个类的过程中,Spring 将类的依赖的属性设置进去.</p>
</li>
<li><p><strong>IOC与DI的的区别:</strong> </p>
<p>IOC:  控制反转,将类的对象的创建交给Spring类管理创建.<br>DI:    依赖注入,将类里面的属性在创建类的过程中给属性赋值.<br>DI和IOC的关系: DI不能单独存在,DI需要在IOC的基础上来完成.</p>
<p>这样做得好处：做到了单一职责，并且提高了复用性，解耦了之后，任你如何实现，使用接口的引用调用的方法，永远不需要改变。</p>
</li>
<li><p><strong>依赖注入的四种方式：</strong></p>
<ul>
<li><p><strong>setter注入：</strong></p>
<p>在实体类中生成get、set方法和无参构造方法，在ApplicationContext.xml中配置。</p>
</li>
<li><p><strong>构造器注入:</strong></p>
<p>在实体类中生成有参构造方法，在ApplicationContext.xml中配置。</p>
<p>ApplicationContext.xml中配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     IOC setter注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Stu"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"陕西西安"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Dog"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.Dog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小黄"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    构造器注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"User"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.User"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"xian"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"Dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AcUtils代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> sun.plugin2.message.GetAppletMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">GetApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(path);</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lcx.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.lcx.utils.AcUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DITest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = AcUtils.GetApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        Student stu = applicationContext.getBean(<span class="string">"Stu"</span>, Student.class);</span><br><span class="line">        Dog dog = applicationContext.getBean(<span class="string">"Dog"</span>, Dog.class);</span><br><span class="line">        User user = applicationContext.getBean(<span class="string">"User"</span>, User.class);</span><br><span class="line">        System.out.println(stu+<span class="string">" "</span> +dog+<span class="string">" "</span> +user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student&#123;name=&apos;李四&apos;, age=18, address=&apos;陕西西安&apos;&#125; Dog&#123;name=&apos;小黄&apos;, age=3, color=&apos;yellow&apos;&#125; User&#123;name=&apos;小明&apos;, age=18, address=&apos;xian&apos;, dog=Dog&#123;name=&apos;小黄&apos;, age=3, color=&apos;yellow&apos;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>当注入的属性为另一个类对象时用 ref、在影射过程中如果该类的对象有继承关系时用parent=父类注解id对应的字符串。</p>
</li>
<li><p>接口注入（不常用）：</p>
<p>通过接口的方式给实体类注入信息。例子如下：</p>
<p>change4.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"changeToLowerCase"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.ChangetoLowerCase"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"ABCDEFG"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"changeToUoCase"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.ChangetoUpCase"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"higklmn"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ChangeWord.java接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义两个实体类，分别实现大写转小写，小写转大写。代码如下：</p>
<p>ChangetoLower.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangetoLowerCase</span> <span class="keyword">implements</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ChangetoUpCase.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangetoUpCase</span> <span class="keyword">implements</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toUpperCase();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大写转小写后的结果：abcdefg</span><br><span class="line">小写转大写后的结果：HIGKLMN</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注解注入（推荐）：</strong></p>
<p>ApplicationContext01.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lcx.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实体类Items：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>@Component(“items”)<br>  public class Items {</p>
<pre><code>@Value(&quot;大白兔&quot;)
  private String name;
  @Value(&quot;10&quot;)
  private Double price;
  @Value(&quot;糖&quot;)
  private String dec;</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String getName() &#123;</span><br><span class="line">      return name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setName(String name) &#123;</span><br><span class="line">      this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Double getPrice() &#123;</span><br><span class="line">      return price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setPrice(Double price) &#123;</span><br><span class="line">      this.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String getDec() &#123;</span><br><span class="line">      return dec;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setDec(String dec) &#123;</span><br><span class="line">      this.dec = dec;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>  }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实体类Super：</span><br><span class="line">  </span><br><span class="line">```java</span><br><span class="line">package com.lcx.pojo;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component(&quot;super&quot;)</span><br><span class="line">public class Super &#123;</span><br><span class="line">    @Value(&quot;大脚便利店&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Items items;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Items getItems() &#123;</span><br><span class="line">        return items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<pre><code>测试类代码：</code></pre>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lcx.pojo.Items;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.Super;</span><br><span class="line"><span class="keyword">import</span> com.lcx.utils.AcUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DITest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = AcUtils.GetApplicationContext(<span class="string">"ApplicationContext01.xml"</span>);</span><br><span class="line">        Items items = applicationContext.getBean(<span class="string">"items"</span>, Items.class);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">        System.out.println(items.getDec());</span><br><span class="line">        System.out.println(items.getPrice());</span><br><span class="line">        Super aSuper = applicationContext.getBean(<span class="string">"super"</span>, Super.class);</span><br><span class="line">        System.out.println(aSuper.getName()+<span class="string">" "</span>+ aSuper.getItems());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>结果：</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大白兔</span><br><span class="line">糖</span><br><span class="line">10.0</span><br><span class="line">大脚便利店 Items&#123;name=&apos;大白兔&apos;, price=10.0, dec=&apos;糖&apos;&#125;</span><br></pre></td></tr></table></figure>

<pre><code>**注意：**如果注入的属性为对象，使用@Autowired自动注入。</code></pre><h2 id="2、AOP（面向切面编程）"><a href="#2、AOP（面向切面编程）" class="headerlink" title="2、AOP（面向切面编程）"></a>2、AOP（面向切面编程）</h2><h4 id="Spring中的AOP的简介"><a href="#Spring中的AOP的简介" class="headerlink" title="Spring中的AOP的简介"></a><strong>Spring中的AOP的简介</strong></h4><ul>
<li><strong>AOP Aspect Oriented Programing 面向切面编程</strong></li>
<li><strong>AOP采取==横向抽取==机制，取代了传统==纵向继承==体系重复性代码（性能监视、事务管理、安全检查、缓存）</strong></li>
<li><strong>Spring中的Aop是纯Java来实现的,使用==动态代理==的方式增强代码</strong></li>
<li><strong>AOP不是由Spring提出来的,是由AOP联盟定义的</strong></li>
</ul>
<h4 id="Spring中的动态代理"><a href="#Spring中的动态代理" class="headerlink" title="Spring中的动态代理"></a>Spring中的动态代理</h4><ul>
<li><strong>jdk自带的动态代理</strong><ul>
<li>如果委托类和代理类实现了同一个接口则底层选择jdk的动态代理</li>
</ul>
</li>
<li><strong>cglib动态代理</strong><ul>
<li>委托类和代理类没有实现同一个接口,则底层选择cglib的动态代理,cglib的动态代理底层使用的是继承</li>
</ul>
</li>
</ul>
<h4 id="Spring中的AOP的专业术语"><a href="#Spring中的AOP的专业术语" class="headerlink" title="Spring中的AOP的专业术语"></a>Spring中的AOP的专业术语</h4><ul>
<li><strong>Joinpoint(连接点)</strong> :委托类中可以被增强的方法 </li>
<li>==<strong>Pointcut(切入点)</strong> :切点 ,要被增强的方法== </li>
<li>==<strong>Advice(通知/增强)</strong> :增强的代码== </li>
<li><strong>Target(目标对象)</strong> :委托对象 </li>
<li><strong>Weaving(织入) :把增强</strong>应用<strong>切点</strong>的过程 </li>
<li><strong>Proxy（代理）</strong>: 一个类被AOP织入增强后，就产生一个结果代理类 </li>
<li>==<strong>Aspect(切面):</strong> 是<strong>切点</strong>和<strong>通知</strong>的结合== </li>
</ul>
<h4 id="Spring中的AOP的实现"><a href="#Spring中的AOP的实现" class="headerlink" title="Spring中的AOP的实现"></a>Spring中的AOP的实现</h4><h5 id="传统的SpringAOP"><a href="#传统的SpringAOP" class="headerlink" title="传统的SpringAOP"></a>传统的SpringAOP</h5><p>​    <strong>一个切点只能对应一个通知</strong></p>
<h5 id="基于AspectJ的AOP"><a href="#基于AspectJ的AOP" class="headerlink" title="基于AspectJ的AOP"></a>基于AspectJ的AOP</h5><ul>
<li>AspectJ是一个基于Java语言的面向切面的AOP框架</li>
<li>Spring2.0以后新增了对AspectJ<strong>切点表达式</strong>支持</li>
<li>@AspectJ 是AspectJ1.5新增功能，通过JDK5注解技术，允许直接在Bean类中定义切面</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li>
</ul>
<h5 id="Aspectj的切点表达式"><a href="#Aspectj的切点表达式" class="headerlink" title="Aspectj的切点表达式"></a>Aspectj的切点表达式</h5><ul>
<li>语法:execution(表达式)</li>
<li>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)</li>
<li>public * *(..) —检索所有的public方法</li>
<li>execution(“* cn.it.spring4.demo1.dao.*(..)”) —只检索当前包</li>
<li>execution(“* cn.it.spring4.demo1.dao..*(..)”) —检索包及当前包的子包.</li>
</ul>
<h5 id="Aspect的增强类型"><a href="#Aspect的增强类型" class="headerlink" title="Aspect的增强类型"></a>Aspect的增强类型</h5><ul>
<li>@Before 前置通知 </li>
<li>@AfterReturning 后置通知 </li>
<li>@Around 环绕通知 </li>
<li>@AfterThrowing抛出通知 </li>
<li>@After 最终final通知 </li>
</ul>
<h4 id="aop编程实现"><a href="#aop编程实现" class="headerlink" title="aop编程实现"></a>aop编程实现</h4><ul>
<li><p><strong>引入pom依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置自动代理和注解扫描器</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.it.bigdata"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启aop自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>编写（dao）委托类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加新用户..."</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户..."</span>+id);</span><br><span class="line">        <span class="comment">//int a =10/0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUser</span><span class="params">(Integer  id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户"</span>+ id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户..."</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面 = 切点(切点表达式) + 通知(要增强的代码,方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.add*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置通知带返回值</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution( * com.lcx.bigdata.UserDao.add*(..))"</span>, returning = <span class="string">"ret"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice2</span><span class="params">(String ret)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span> + ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.updateUser(..)))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice3</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕通知前"</span>);</span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕通知后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//抛出异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution( * com.lcx.bigdata.UserDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:ApplicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBefore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">18</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.updateUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一些注解的含义：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Aspect 作用是把当前类标识为一个切面供容器读取</span><br><span class="line">- @Before 前置通知 </span><br><span class="line">- @AfterReturning 后置通知 </span><br><span class="line">- @Around 环绕通知 </span><br><span class="line">- @AfterThrowing抛出通知 </span><br><span class="line">- @After 最终final通知</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Repository 存储层(Dao)Bean</span><br><span class="line">- @Service 业务层Bean</span><br><span class="line">- @Controller 展示层Bean</span><br><span class="line">- @Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。</span><br><span class="line">- @Service 通常作用在业务层，但是目前该功能与 @Component 相同。</span><br><span class="line">- @Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @RunWith 就是一个运行器</span><br><span class="line">- @RunWith(JUnit4.class) 就是指用JUnit4来运行</span><br><span class="line"></span><br><span class="line">- @RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境</span><br><span class="line"></span><br><span class="line">- @RunWith(Suite.class) 的话就是一套测试集合，</span><br><span class="line"></span><br><span class="line">- @ContextConfiguration Spring整合JUnit4测试时，使用注解引入多个配置文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</span><br><span class="line">@Autowired的原理:其实在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性.</span><br><span class="line">注意事项：</span><br><span class="line">　　在使用@Autowired时，首先在容器中查询对应类型的bean。</span><br><span class="line">　　　　如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据。</span><br><span class="line">　　　　如果查询的结果不止一个，那么@Autowired会根据名称来查找。</span><br><span class="line">　　　　如果查询的结果为空，那么会抛出异常。解决方法时，使用required=false。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Java框架学习<一></title>
    <url>/2020/01/11/Java%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、JavaSE"><a href="#一、JavaSE" class="headerlink" title="一、JavaSE"></a>一、JavaSE</h1><h2 id="遗忘知识回顾"><a href="#遗忘知识回顾" class="headerlink" title="遗忘知识回顾"></a>遗忘知识回顾</h2><ul>
<li><p><strong>java基本数据类型：byte、char、short、int、long、float、double、boolean</strong></p>
</li>
<li><p><strong>对应包装类：Byte、Character、Short、Integer、Long、Float、Double、Boolean</strong></p>
</li>
<li><p><strong>访问修饰符范围从大到小：public、protected、default、private。如下图所示：</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5ijzt.png" alt="l5ijzt.png"></p>
</li>
<li><p><strong>标识接口</strong></p>
<p>标识接口是没有任何方法和属性的接口。标识接口不对实现它的类有任何语义上的要求，它仅仅表明实现它的类属于一个特定的类型。</p>
<p>　标接口在Java语言中有一些很著名的应用，例如我们常用的ArrayList类，它的类实现接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>仔细看 RandomAccess、RandomAccess、Serializable的接口可以看到，内部都是一些空接口，没有定义接口方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface RandomAccess &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Cloneable &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Serializable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 标识接口，<strong>当一个类实现了一个标识接口之后就像是给自己打了个标签。</strong></p>
<p>　　打个比喻，不是很恰当。就像是一个人穿了件名牌衣服（实现了标识接口），别人一看他穿的衣服（标识接口）就知道他的品味、身份（特性）。</p>
</li>
<li><p><strong>java反射机制</strong></p>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
</li>
<li><p><strong>注解</strong></p>
</li>
</ul><a id="more"></a>
<h1 id="二、Java主流框架"><a href="#二、Java主流框架" class="headerlink" title="二、Java主流框架"></a>二、Java主流框架</h1><h2 id="框架的作用："><a href="#框架的作用：" class="headerlink" title="框架的作用："></a>框架的作用：</h2><p>对原生态的java代码进行封装，简化程序员操作。</p>
<ul>
<li><p><strong>框架是什么：</strong></p>
<p>框架就是一套规范。既然是规范，你使用这个框架就要遵守这个框架所规定的约束。在Java开发中，框架是用一套规则+一群jar包来表示的。</p>
</li>
<li><p><strong>意义：</strong></p>
<p>框架不仅仅只完成这些简单的约束，更重要的是，框架为我们封装好了一些冗余，且重用率低的代码。并且使用反射与动态代理机制，将代码实现了通用性。比如如果你说servlet开发，你需要在servlet获取表单的参数，每次都要获取很麻烦，而struts底层就使用反射机制和拦截器机制帮助我们获取表单的值，我们就不用每次都手写那些代码了，简化了开发，当然你必须遵守一些规定来配置。</p>
<p>还有比如hibernate，它提供了一些通用性很强的对数据库的增删改差，如果你使用jdbc每次做一些简单的crud的时候都必须写sql，但使用hibernate就不需要这么麻烦了，直接save,update就可以了。当然，你还是要遵循其一些规范而配置。同理spring也是如此。</p>
</li>
</ul>
<h2 id="Java最原始的框架"><a href="#Java最原始的框架" class="headerlink" title="Java最原始的框架"></a>Java最原始的框架</h2><p><strong>整合框架：SSH=spring+struts2+hibernate</strong></p>
<h3 id="spring框架"><a href="#spring框架" class="headerlink" title="spring框架"></a><strong>spring框架</strong></h3><p><strong>1.spring简介</strong><br>spring 是一个轻量级的，基于IOC和AOP核心技术的企业级开源开发框架</p>
<p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p>
<p>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </p>
<p><strong>Spring目的</strong>：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明 管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </p>
<p><strong>注意：</strong>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<p><strong>2.spring的主要特征</strong><br><strong>（1）轻量级</strong>：spring是一个轻量级的开发框架，基本版本大约只有2M</p>
<p><strong>（2）IOC：</strong>控制反转，应用程序中对象之间的依赖是由spring 来控制的</p>
<p><strong>（3）AOP：</strong>面向切面编程，spring支持面向切面编程，这样可以将业务逻辑和系统服务分开，分离</p>
<p><strong>（4）容器：</strong>包含并管理应用程序中对象的生命周期和配置信息</p>
<p><strong>（5）MVC思想：</strong>spring也是基于MVC思想的框架，也遵循模型-视图-控制器这三个层次</p>
<p><strong>（6）事务：</strong>spring提供一个持续化的接口，可以上至扩展到本地事务下至扩展到全局事务</p>
<p><strong>（7）异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，hibernate,or JDO抛出的）转化为一致的unchecked 异常。</p>
<p> <strong>3.spring优缺点</strong></p>
<p><strong>优点：</strong></p>
<p>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。<br>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。<br>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属<br>性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。<br>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。<br>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。<br>使用Spring构建的应用程序易于单元测试。<br>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。<br>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。<br>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。<br><strong>缺点：</strong><br>1.jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器</p>
<p>2.Spring不支持分布式，这也是EJB仍然在用的原因之一。</p>
<h3 id="Struts框架"><a href="#Struts框架" class="headerlink" title="Struts框架"></a>Struts框架</h3><p><strong>1.structs1原理</strong><br>想要理解strusts1，我是先通过strusts1的运行原理图来理解的，然后，我们根据原理图来讲解structs1原理。</p>
<p><strong>1.1 strusts1原理图</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5ytiV.jpg" alt="l5ytiV.jpg"></p>
<p><strong>1.2 structs1原理步骤</strong><br>用户在视图层输入数据。</p>
<p>第一步：structs框架总控制器，初始化,开始读取strusts-config.xml文件。</p>
<p>struts框架的总控制器ActionServlet是一个Servlet，它在web.xml中配置成自动启动的Servlet，在启动时总控制器会读取配置文件(struts-config.xml)的配置信息，为struts中不同的模块初始化相应的对象。(面向对象思想)</p>
<p>第二步：视图层向总控制器发送Http请求</p>
<p>用户提交表单或者通过URL向WEB服务器提交请求，请求的数据用HTTP协议传给web服务器</p>
<p>第三步： Form填充</p>
<p>struts的总控制器ActionServlet在用户提交请求时将数据放到对应的form对象中的成员变量中。</p>
<p>第四步：派发请求</p>
<p>控制器根据配置信息，对象ActionConfig将请求派发到具体的Action，对应的formBean一并传给这个Action中的excute()方法。</p>
<p>第五步：处理业务</p>
<p>Action一般只包含一个excute()方法，它负责执行相应的业务逻辑(调用其它的业务模块)完毕后返回一个ActionForward对象。服务器通过ActionForward对象进行转发工作。</p>
<p>第六步：返回响应</p>
<p>Action将业务处理的不同结果返回一个目标响应对象给总控制器。</p>
<p>第七步：查找响应</p>
<p>总控制器根据Action处理业务返回的目标响应对象，找到对应的资源对象，一般情况下为jsp页面。</p>
<p>第八步:响应用户</p>
<p>目标响应对象将结果传递给资源对象，将结果展现给用户。</p>
<p><strong>1.3 structs的优缺点：</strong><br><strong>1.优点：</strong><br>  ①开源的框架，结构清晰<br>  ②是MVC的经典实现（MVC是一种思想，而不是一种技术）<br>  ③处理异常机制，实现国际化<br>  ④具有强大的标签库<br>  ⑤解决了JSP页面存在大量的JAVA代码，维护起来方便<br>  ⑥在formBean中会自动提交，不会去使用传统的get、set方法得到值、取值 </p>
<p><strong>2.缺点：</strong><br>  ①配置复杂<br>  ②测试不方便<br>  ③依赖web容器<br>  ④action是一个单例模式，必须设置为线程安全<br><strong>2.structs2原理</strong><br><strong>2.1 structs2原理图</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l56Ymd.jpg" alt="l56Ymd.jpg"></p>
<p>第一步：客户端初始化一个指向Servlet容器（例如Tomcat）的请求<br>第二步：这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）<br>第三步：接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action<br>第四步：如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy<br>第五步：ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类<br>第六步：ActionProxy创建一个ActionInvocation的实例。<br>第七步：ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。 </p>
<p>第八步：一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper </p>
<p><strong>注意：</strong>在上述过程中所有的对象（Action，Results，Interceptors，等）都是通过ObjectFactory来创建的</p>
<p><strong>2.2 structs2的优缺点：</strong><br><strong>优点：</strong><br>大量的拦截器：<br>Struts2本身提供了大量的可重用的拦截器，比如类型转换拦截器，很多时候我们从页面取得参数，这个时候它是String类型的，我们需要手动。<br>基于插件的框架：<br>Struts2是一个基于插件的框架，社区中提供了很多实用的插件，比如jfreechat/json等等，使用这些插件可以简化我们的开发，加快开发进度。<br>struts2最大的缺点莫过于在好多web服务器上支持不好，例如在websphere5.5,weblogic8.1及以前版本支持非常查，需要用最新的。<br>多种视图的支持：<br>多种视图的支持：jsp，freemarker，Veloctiy，只要你愿意，你甚至可以通过轻松的改造让它支持pdf，同一个项目中你可以支持多种视图。<br>更加的模块化：<br>与Struts1.X 相比，Struts2更加的模块化，可以轻松将配置信息按功能界限拆分成多个文件，便于管理和团队协作开发。<br>与Spring的集成：<br>与Struts1.x相比，Struts2不必再自己编写singleton，进一步的降低了程序间的耦合性，就Struts2内部本身而言，降低了框架本身的偶合性。<br>基于pojo易于测试：</p>
<p>在Struts1.x中我需要Mock出这两个Http对象，使我们很难编写Action的单元测试，与Struts1.x相比，Struts2的Action 不再依赖于HttpServletRequest和HttpServletResponse对象，使我们能够更方便的针对Action编写单元测试。</p>
<p><strong>缺点：</strong><br>Struts2中Action中取得从jsp中传过来的参数时还是有点麻烦。</p>
<p>可以为Struts2的Action中的属性配置上Getter和Setter方法，通过默认拦截器，就可以将请求参数设置到这些属性中。如果用这种方式，当请求参数很多时，Action类就会被这些表单属性弄的很臃肿，让人感觉会很乱。还有Action中的属性不但可以用来获得请求参数还可以输出到Jsp中，这样就会更乱。假设从JSP1中获得了参数money=100000，但是这个Action还要输出到JSP2中，但是输出的格式却不同，money=100,000，这样这个Action中的money中的值就变了。</p>
<p>校验还是感觉比较繁琐，感觉太烦乱，也太细化了。</p>
<p>如果校验出错的只能给用户提示一些信息。如果有多个字段，每个字段出错时返回到不同的画面，这个功能在Strut2框架下借助框架提供的校验逻辑就不容易实现。</p>
<p>安全性有待提高。</p>
<p>Struts2曝出2个高危安全漏洞，一个是使用缩写的导航参数前缀时的远程代码执行漏洞，另一个是使用缩写的重定向参数前缀时的开放式重定向漏洞。这些漏洞可使黑客取得网站服务器的“最高权限”，从而使企业服务器变成黑客手中的“肉鸡”</p>
<h3 id="hibernate框架"><a href="#hibernate框架" class="headerlink" title="hibernate框架"></a><strong>hibernate框架</strong></h3><p><strong>1.hibernate的工作原理</strong></p>
<p>第一步：Configuration.config() 来读取xml配置文件</p>
<p>第二步：Configuration.config()来读取配置文件里面的映射信息</p>
<p>第三步：创建会话工厂</p>
<p>第四步：打开会话</p>
<p>第五步：开启事务</p>
<p>第六步：持久化到数据库</p>
<p>第七步：关闭会话</p>
<p>第八步：关闭会话工厂<br><strong>2.hibernate优缺点</strong></p>
<p><strong>优点：</strong></p>
<p>1.hibernate是基于ORMapping技术的开源的框架，对JDBC进行了轻量级的封装，使用面向对象的思维来操纵数据库。 </p>
<p>2.hibernate提供了session缓存和二级缓存，对于不需要进行复杂查询的系统，性能有提升。 </p>
<p>3.低侵入式设计</p>
<p><strong>缺点：</strong></p>
<p>1.hibernate不容易上手，学习成本太高</p>
<p>2.hibernate由于不直接对底层数据库进行操作，所以不适合复杂的查询（统计）</p>
<p>3.不适合大量的聚集操作（存储过程）</p>
<p>比较难操作，比较古老，已很少使用。</p>
<h2 id="Java较新框架"><a href="#Java较新框架" class="headerlink" title="Java较新框架"></a>Java较新框架</h2><p><strong>集成框架SSM=SptingMVC+Spring+Mybiats</strong></p>
<h2 id="Java最新框架"><a href="#Java最新框架" class="headerlink" title="Java最新框架"></a>Java最新框架</h2><p><strong>Springboot</strong></p>
<h2 id="Java微服务框架"><a href="#Java微服务框架" class="headerlink" title="Java微服务框架"></a>Java微服务框架</h2><p><strong>SpringCloud</strong></p>
]]></content>
      <tags>
        <tag>框架学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04系统移植过及程序焼写</title>
    <url>/2020/01/08/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<h1 id="ubuntu18-04系统移植过及程序焼写"><a href="#ubuntu18-04系统移植过及程序焼写" class="headerlink" title="ubuntu18.04系统移植过及程序焼写"></a>ubuntu18.04系统移植过及程序焼写</h1><h2 id="ubuntu18-04系统移植（目标版为contex-A系列）"><a href="#ubuntu18-04系统移植（目标版为contex-A系列）" class="headerlink" title="ubuntu18.04系统移植（目标版为contex A系列）"></a>ubuntu18.04系统移植（目标版为contex A系列）</h2><h3 id="一、tftp文件服务器"><a href="#一、tftp文件服务器" class="headerlink" title="一、tftp文件服务器"></a>一、tftp文件服务器</h3><ul>
<li><strong>tftp的作用</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在嵌入式系统开发中，经常需要从主机上传送映像、文件等到目标机上。实现的方法有很多。如tftp，scp等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TFTP（Trivial File Transfer Protocol）是用来下载远程文件的最简单的网络协议，它基于UDP协议而实现。</li>
<li><strong>安装tftp-hpa</strong></li>
</ul><a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftp-hpa</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tftp-hpa是客户端，作用是从别人的TFTP服务器端上传/下载东西。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftpd-hpa</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tftpd-hpa是服务端，字母d代表daemon，作用是为别人提供TFTP服务，供别人上传/下载东西。</p>
<ul>
<li><strong>创建TFTP目录</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在此我使用的是默认文件夹。</li>
<li><strong>修改配置文件</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/tftpd-hpa</span><br></pre></td></tr></table></figure>

<p>更改后内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 # /etc/default/tftpd-hpa                                                    </span><br><span class="line">2 </span><br><span class="line">3 TFTP_USERNAME=&quot;tftp&quot;</span><br><span class="line">4 TFTP_DIRECTORY=&quot;/var/lib/tftpboot&quot;  // 指定tftp的共享目录 </span><br><span class="line">5 TFTP_ADDRESS=&quot;0.0.0.0:69&quot;</span><br><span class="line">6 TFTP_OPTIONS=&quot;-c -s -l&quot;</span><br></pre></td></tr></table></figure>

<p>修改配置后重启tfti服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service tftpd-hpa restart</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>上传文件时注意权限<br>建议给最大权限（777）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R  777  目录名</span><br></pre></td></tr></table></figure>

<h3 id="二、nfs网络文件系统"><a href="#二、nfs网络文件系统" class="headerlink" title="二、nfs网络文件系统"></a>二、nfs网络文件系统</h3><ul>
<li><strong>nfs的作用</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个嵌入式操作系统的核心组成部分：内核和文件系统。在本次课设中，使用的内核是别人提供的，使用的操作系统是nfs网络文件系统。在内核中应添加对nfs的支持，实质是在内核启动过程中，启动了一个nfs客户端通过配置文件去读取nfs服务端上的文件系统。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将pcNFS是由Sun开发并发展起来的一项在不同机器、不同操作系统之间通过网络共享文件的技术。在嵌入式Linux系统的开发调试阶段，可以利用该技术在主机上建立基于NFS 的根文件系统，挂载到嵌入式设备，可以很方便地修改根文件系统的内容。以上讨论的都是基于存储设备的文件系统(memory-based file system)，它们都可用作Linux的根文件系统。实际上，Linux还支持逻辑的或伪文件系统(logical or pseudo file system)，例如procfs(proc文件系统)，用于获取系统信息，以及devfs(设备文件系统)和sysfs，用于维护设备文件。<br><strong>安装nfs服务器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server</span><br></pre></td></tr></table></figure>

<p><strong>配置nfs服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/exports</span><br></pre></td></tr></table></figure>

<p>更改后内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 # /etc/exports: the access control list for filesystems which may be exporte    d                                                                           </span><br><span class="line"> 2 #       to NFS clients.  See exports(5).</span><br><span class="line"> 3 #</span><br><span class="line"> 4 # Example for NFSv2 and NFSv3:</span><br><span class="line"> 5 # /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_    subtree_check)</span><br><span class="line"> 6 #</span><br><span class="line"> 7 # Example for NFSv4:</span><br><span class="line"> 8 # /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class="line"> 9 # /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class="line">10 #</span><br><span class="line">11 /home/source/rootfs *(rw,sync,no_root_squash)</span><br><span class="line"># 指定共享目录为/home/source/rootfs  权限为读写 ...</span><br></pre></td></tr></table></figure>

<p><strong>复制文件系统压缩包至指定目录并解压</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将根文件系统的压缩包rootfs.tar.xz拷贝至/home/source，然后解压，注意权限<br><strong>解压指令:</strong>sudo tar -xvf  rootfs.tar.xz<br><strong>重启NFS服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nfs-kernel-server restart</span><br></pre></td></tr></table></figure>

<p><strong>进行挂载测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount -t nfs localhost:/source/rootfs /mnt</span><br><span class="line">ls -l /mnt</span><br></pre></td></tr></table></figure>

<p><strong>卸载测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt/</span><br></pre></td></tr></table></figure>

<h3 id="三、开发板的环境搭建（contex-A系列）"><a href="#三、开发板的环境搭建（contex-A系列）" class="headerlink" title="三、开发板的环境搭建（contex A系列）"></a>三、开发板的环境搭建（contex A系列）</h3><ul>
<li><strong>查看串口驱动</strong><br><strong>指令如下：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ cd /dev/</span><br><span class="line">lcx@lcx-linux:/dev$ ls ttyUSB*</span><br><span class="line">crw-rw-rw- 1 root dialout 188, 0 2020-01-08 10:38 ttyUSB0</span><br><span class="line">lcx@lcx-linux:/dev$</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装传串口通讯软件（putty ）</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install putty</span><br></pre></td></tr></table></figure>

<p>设置端口：位/秒 115200，数据位 8，奇偶校验 无，停止位 1，数据流控制 无</p>
<ul>
<li><strong>连接串口线到开发板</strong><br>给开发板上电，应该能从putty看到串口信息。</li>
<li><strong>配置开发板的环境变量</strong><br>setenv ipaddr 192.168.1.3—-&gt;开发板IP<br>setenv serverip 192.168.1.2—&gt;nfs服务器IP<br><strong>ping 测试</strong><br>开发板ping 192.168.1.2<br>显示alive ping通了  也可用主机ping开发板<br><strong>系统启动参数</strong><br>setenv bootcmd tftp 41000000 uImage;tftp 42000000 exynos4412-fs4412.dtb;bootm 41000000 - 42000000<br><strong>内核启动nfs文件系统参数</strong><br>setenv bootargs root=/dev/nfs nfsroot=192.168.1.2:/home/source/rootfs rw ip=192.168.1.3 console=ttySAC2,115200 init=/linuxrc</li>
</ul>
<h3 id="四、交叉编译工具链"><a href="#四、交叉编译工具链" class="headerlink" title="四、交叉编译工具链"></a>四、交叉编译工具链</h3><ul>
<li><strong>交叉编译工具链的作用：</strong><br>arm交叉编译工具链是用于在一种平台上编译出能运行在体系结构不同的另一种平台上的程序，比如在PC平台（X86 CPU）上编译出能运行在以ARM为内核的CPU平台上的程序，编译得到的程序在X86 CPU平台上是不能运行的，必须放到ARM CPU平台上才能运行，虽然两个平台用的都是Linux系统。</li>
<li><strong>下载交叉编译链工具</strong><br><strong>方法一：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载指令：</span><br><span class="line">sudo apt-get install gcc-arm-linux-gnueabihf </span><br><span class="line">卸载指令：</span><br><span class="line">sudo apt-get remove gcc-arm-linux-gnueabihf</span><br></pre></td></tr></table></figure>

<p>这种方法不需要配置环境  但是可能出现not found的问题   该问题是因为你的linux系统是64位的系统的而你安装的arm-linux-gcc-4.4.3是32位的软件，虽然64位系统可以运行32位的软件，但需要安装32位的运行库，你没安装32位运行库就不能使用。<br><strong>方法二：</strong><br>1.从网上下载对应版本的交叉编译工具。<br>2.使用tar命令解压安装包，即在Terminal中输入以下命令：（前面的sudo表示使用root权限执行该命令）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~/下载$ sudo tar -xvf gcc-4.6.4.tar.xz</span><br></pre></td></tr></table></figure>

<p>3.查看解压后bin目录的全路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ cd 下载/gcc-4.6.4/bin/</span><br><span class="line">lcx@lcx-linux:~/下载/gcc-4.6.4/bin$ pwd</span><br><span class="line">/home/lcx/下载/gcc-4.6.4/bin</span><br><span class="line">lcx@lcx-linux:~/下载/gcc-4.6.4/bin$</span><br></pre></td></tr></table></figure>

<p>4.添加环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ vim .bashrc</span><br></pre></td></tr></table></figure>

<p>最后一行添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 交叉编译工具链</span><br><span class="line"> export PATH=$PATH:/home/lcx/下载/gcc-4.6.4/bin</span><br></pre></td></tr></table></figure>

<p>执行如下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ source .bashrc</span><br></pre></td></tr></table></figure>

<h2 id="程序的烧写"><a href="#程序的烧写" class="headerlink" title="程序的烧写"></a>程序的烧写</h2><h3 id="一、文件拷贝项目"><a href="#一、文件拷贝项目" class="headerlink" title="一、文件拷贝项目"></a>一、文件拷贝项目</h3><p>1.将项目程序拷贝至nfs文件系统中<br>2.在ubuntu18.04中将项目程序使用交叉编译工具链进行编译<br>代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:/home/source/rootfs$ arm-none-linux-gnueabi-gcc-4.6.4 -o write write.c</span><br></pre></td></tr></table></figure>

<p>3.在开发板上执行程序<br>代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@farsight ]# ./write 1.txt 2.txt</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open source file ok!</span><br><span class="line">Create new file successfully!</span><br><span class="line">Write ok!</span><br></pre></td></tr></table></figure>

<p>项目代码如下（实现文件拷贝功能）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">6</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> <span class="number">7</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="number">8</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="meta"># <span class="meta-keyword">define</span> BUF_SIZE 20</span></span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="keyword">int</span> fd,fd1;</span><br><span class="line"><span class="number">14</span>     <span class="keyword">char</span> bufs[<span class="number">20</span>];</span><br><span class="line"><span class="number">15</span>     <span class="keyword">int</span> len;</span><br><span class="line"><span class="number">16</span>     <span class="keyword">if</span>(argc != <span class="number">3</span>)&#123;</span><br><span class="line"><span class="number">17</span>         <span class="built_in">printf</span>(<span class="string">"please input file name!\n"</span>);</span><br><span class="line"><span class="number">18</span>         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span>     <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">21</span>         <span class="comment">//1 打开源文件</span></span><br><span class="line"><span class="number">22</span>         fd = open(argv[<span class="number">1</span>],O_RDONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">23</span>         <span class="keyword">if</span>(<span class="number">-1</span> == fd)&#123;</span><br><span class="line"><span class="number">24</span>             perror(<span class="string">"open read file error!\n"</span>);</span><br><span class="line"><span class="number">25</span>             <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">26</span>         &#125;</span><br><span class="line"><span class="number">27</span>         <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">28</span>             <span class="built_in">printf</span>(<span class="string">"open source file ok!\n"</span>);</span><br><span class="line"><span class="number">29</span>         <span class="comment">//2 打开目标文件 </span></span><br><span class="line"><span class="number">30</span>             <span class="comment">//如果目标文件不存在  则创建目标文件</span></span><br><span class="line"><span class="number">31</span>             fd1 = open(argv[<span class="number">2</span>],O_WRONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">32</span>             <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line"><span class="number">33</span>                 <span class="comment">//创建目标文件</span></span><br><span class="line"><span class="number">34</span>                 fd1 = creat(argv[<span class="number">2</span>],<span class="number">0775</span>);</span><br><span class="line"><span class="number">35</span>                 <span class="built_in">printf</span>(<span class="string">"Create new file successfully!\n"</span>);</span><br><span class="line"><span class="number">36</span>                 fd1 = open(argv[<span class="number">2</span>],O_WRONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">37</span>             <span class="comment">// cp</span></span><br><span class="line"><span class="number">38</span>                 <span class="keyword">while</span>((len = read(fd,bufs,BUF_SIZE))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">39</span>                       write(fd1,bufs,len);</span><br><span class="line"><span class="number">40</span>                 &#125;</span><br><span class="line"><span class="number">41</span>                 <span class="built_in">printf</span>(<span class="string">"Write ok!\n"</span>);</span><br><span class="line"><span class="number">42</span> </span><br><span class="line"><span class="number">43</span>                 <span class="keyword">if</span>(<span class="number">-1</span> == fd1)</span><br><span class="line"><span class="number">44</span>                 &#123;</span><br><span class="line"><span class="number">45</span>                 perror(<span class="string">"open write file error!\n"</span>);</span><br><span class="line"><span class="number">46</span>                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">47</span>                 &#125;                                                                                                                                                                                             </span><br><span class="line"><span class="number">48</span>             &#125;</span><br><span class="line"><span class="number">49</span>             <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">50</span>                 <span class="built_in">printf</span>(<span class="string">"open destination file ok!\n"</span>);</span><br><span class="line"><span class="number">51</span>         <span class="comment">//3  如果存在 则复制到目标文件</span></span><br><span class="line"><span class="number">52</span>                 <span class="keyword">while</span>((len = read(fd,bufs,BUF_SIZE))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">53</span>                     write(fd1,bufs,len);</span><br><span class="line"><span class="number">54</span> </span><br><span class="line"><span class="number">55</span>                 &#125;</span><br><span class="line"><span class="number">56</span>                 <span class="built_in">printf</span>(<span class="string">"write ok!\n"</span>);</span><br><span class="line"><span class="number">57</span>             &#125;</span><br><span class="line"><span class="number">58</span>             close(fd);</span><br><span class="line"><span class="number">59</span>             close(fd1);</span><br><span class="line"><span class="number">60</span>             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">61</span>         &#125;</span><br><span class="line"><span class="number">62</span>     &#125;</span><br><span class="line"><span class="number">63</span> &#125;</span><br></pre></td></tr></table></figure>

<p>由于开发板不支持中文格式，故将测试源文件命名为1.txt，内容为舌尖上的中国英译版文案 ,在此不创建目标文件。（拷贝时创建）<br>测试结果如下：<br><img src="https://s2.ax1x.com/2020/01/08/l26KL6.png" alt="运行编译后的可执行文件.png"><br><img src="https://s2.ax1x.com/2020/01/08/l26koF.png" alt="2.txt.png"></p>
<h3 id="二、百度网盘项目"><a href="#二、百度网盘项目" class="headerlink" title="二、百度网盘项目"></a>二、百度网盘项目</h3><ul>
<li><strong>项目简介及使用</strong><br>由两个c程序实现网盘文件传输功能，是基于tcp协议的文件传输程序。其功能是使用TCP协议从client端向server端传输文件。将server程序通过gcc编译运行在开发机上，将client程序通过交叉编译链编译运行在开发板上。<br>具体用法如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> 编译：</span><br><span class="line"></span><br><span class="line">     lcx@lcx-linux:~/test/百度网盘低配版$ gcc -o server server.c </span><br><span class="line">lcx@lcx-linux:~/test/百度网盘低配版$ arm-none-linux-gnueabi-gcc-4.6.4 -o client client.c </span><br><span class="line"></span><br><span class="line">     运行：</span><br><span class="line"></span><br><span class="line">           client端：./client  server IP  端口号  上传文件名</span><br><span class="line">           server端：./server   端口号   保存为文件名</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>知识储备</strong><br>tcp传输协议、网络套接字编程、c语言。</li>
<li><strong>测试结果如下</strong><br><img src="https://s2.ax1x.com/2020/01/09/lR4sje.png" alt="客户端"><br><strong>注意</strong>  先打开server程序 设置好端口号，再打开client程序。图中上半部分为错误案例。<br><img src="https://s2.ax1x.com/2020/01/09/lR5SvF.png" alt="服务端"><br>接收到的文件名指定为1.txt<br>打开1.txt如下图所示：<br><img src="https://s2.ax1x.com/2020/01/09/lR5Ban.png" alt="lR5Ban.png"></li>
<li><strong>代码如下</strong><br><strong>client.c</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE        1024</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"usage :%s ipaddr portnum filename\n"</span>, command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span>                   buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span>                    sock_id;</span><br><span class="line">    <span class="keyword">int</span>                    read_len;</span><br><span class="line">    <span class="keyword">int</span>                    send_len;</span><br><span class="line">    FILE                   *fp;</span><br><span class="line">    <span class="keyword">int</span>                    i_ret;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">        usage(argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* open the file to be transported commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">3</span>],<span class="string">"r"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Open file failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* create the socket commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">if</span> ((sock_id = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Create socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;serv_addr.sin_addr);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* connect the server commented by guoqingbo*/</span></span><br><span class="line">    i_ret = connect(sock_id, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(struct sockaddr));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == i_ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Connect socket failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* transported the file commented by guoqingbo*/</span></span><br><span class="line">    bzero(buf, MAXLINE);</span><br><span class="line">    <span class="keyword">while</span> ((read_len = fread(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), MAXLINE, fp)) &gt;<span class="number">0</span> ) &#123;</span><br><span class="line">        send_len = send(sock_id, buf, read_len, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( send_len &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            perror(<span class="string">"Send file failed\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buf, MAXLINE);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    close(sock_id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Send Finish\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>server.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE        1024</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"usage :%s portnum filename\n"</span>, command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span>                   buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span>                    sock_id;</span><br><span class="line">    <span class="keyword">int</span>                    link_id;</span><br><span class="line">    <span class="keyword">int</span>                    recv_len;</span><br><span class="line">    <span class="keyword">int</span>                    write_leng;</span><br><span class="line">    <span class="keyword">int</span>                    clie_addr_len;</span><br><span class="line">    FILE                   *fp;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        usage(argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">2</span>], <span class="string">"w"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Open file failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((sock_id = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Create socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*fill the server sockaddr_in struct commented by guoqingbo*/</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (bind(sock_id, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"Bind socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == listen(sock_id, <span class="number">10</span>)) &#123;</span><br><span class="line">        perror(<span class="string">"Listen socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* server part commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">        link_id = accept(sock_id, (struct sockaddr *)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == link_id) &#123;</span><br><span class="line">            perror(<span class="string">"Accept socket failed\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buf, MAXLINE);</span><br><span class="line">        <span class="keyword">while</span> (recv_len = recv(link_id, buf, MAXLINE, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* receiver data part commented by guoqingbo*/</span></span><br><span class="line">            <span class="keyword">if</span>(recv_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Recieve Data From Server Failed!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">            write_leng = fwrite(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), recv_len, fp);</span><br><span class="line">            <span class="keyword">if</span> (write_leng &lt; recv_len) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Write file failed\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bzero(buf,MAXLINE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nFinish Recieve\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        close(link_id);</span><br><span class="line">    &#125;</span><br><span class="line">    close(sock_id); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><strong>注意事项</strong><br>在使用开发板前，应打开tftp服务器和nfs服务器。<br>开发板属于热插拔器件，应断电后插拔。<br>在使用nfs网络文件系统时，应注意在编译内核的过程中，选择nfs选项，使得在内核启动过程中去创建一个nfs客户端去连接服务端 获取文件系统。</li>
<li><strong>可能出现的问题</strong><br>在内核启动过程中无法加在nfs文件系统。<br>应从以下几个方面去查错：<br>1.内核编译时是否选择nfs文件系统选项。<br>2.nfs服务器是否搭建完成。（需要做本机挂载测试）<br>3.网络是否通畅。（ping 命令查看）<br>4.nfs参数配置是否正确。</li>
<li><strong>最严重的问题</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VFS: Unable to mount root fs via NFS, trying floppy.</span><br><span class="line">VFS: Cannot open root device &quot;nfs&quot; or unknown-block(2,0): error -6</span><br><span class="line">Please append a correct &quot;root=&quot; boot option; here are the available partitions:</span><br><span class="line">1f00             256 mtdblock0  (driver?)</span><br><span class="line">1f01             128 mtdblock1  (driver?)</span><br><span class="line">1f02            2048 mtdblock2  (driver?)</span><br><span class="line">1f03          259712 mtdblock3  (driver?)</span><br><span class="line">Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0)</span><br></pre></td></tr></table></figure>

<p>查找资料发现从Ubuntu17.04开始，nfs默认只支持协议3和协议4，而kernel中默认支持协议2，所以才会出现挂载失败的情况，现有两种方法可以解决该问题：</p>
<ol>
<li>设置Ubuntu18.04系统中的nfs服务支持协议2，修改nfs配置文件 /etc/default/nfs-kernel-server,在文件末尾加入一句：RPCNFSDOPTS=”–nfs-version 2,3,4 –debug –syslog”。</li>
<li>如果kernel版本较高支持nfs协议3的话，可以在Uboot传到Kernel的bootargs参数中加入’nfsvers=3’,使kernel使用nfs协议3。</li>
</ol>
]]></content>
      <tags>
        <tag>嵌入式系统移植</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql笔记整理</title>
    <url>/2019/11/26/mysql%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="Windows服务"><a href="#Windows服务" class="headerlink" title="Windows服务"></a>Windows服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 启动MySQL</span><br><span class="line">    net start mysql</span><br><span class="line">-- 创建Windows服务</span><br><span class="line">    sc create mysql binPath = mysqld_bin_path(注意：等号与值之间有空格)</span><br></pre></td></tr></table></figure><h3 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"> </span><br><span class="line">SHOW PROCESSLIST -- 显示哪些线程正在运行</span><br><span class="line">SHOW VARIABLES -- 显示系统变量信息</span><br></pre></td></tr></table></figure><a id="more"></a>



<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">    SELECT DATABASE();</span><br><span class="line">-- 显示当前时间、用户名、数据库版本</span><br><span class="line">    SELECT now(), user(), version();</span><br><span class="line">-- 创建库</span><br><span class="line">    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        CHARACTER SET charset_name</span><br><span class="line">        COLLATE collation_name</span><br><span class="line">-- 查看已有库</span><br><span class="line">    SHOW DATABASES[ LIKE &apos;PATTERN&apos;]</span><br><span class="line">-- 查看当前库信息</span><br><span class="line">    SHOW CREATE DATABASE 数据库名</span><br><span class="line">-- 修改库的选项信息</span><br><span class="line">    ALTER DATABASE 库名 选项信息</span><br><span class="line">-- 删除库</span><br><span class="line">    DROP DATABASE[ IF EXISTS] 数据库名</span><br></pre></td></tr></table></figure>

<h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &apos;string&apos;]</span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line">        DATA DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        INDEX DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = &apos;string&apos;</span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION BY ... (详细见手册)</span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ LIKE &apos;pattern&apos;]</span><br><span class="line">    SHOW TABLES FROM 表名</span><br><span class="line">-- 查看表机构</span><br><span class="line">    SHOW CREATE TABLE 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &apos;PATTERN&apos;]</span><br><span class="line">    SHOW TABLE STATUS [FROM db_name] [LIKE &apos;pattern&apos;]</span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        ALTER TABLE 表名 表的选项</span><br><span class="line">        eg: ALTER TABLE 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        RENAME TABLE 原表名 TO 新表名</span><br><span class="line">        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- RENAME可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span><br><span class="line">        ALTER TABLE 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            ADD[ COLUMN] 字段定义       -- 增加字段</span><br><span class="line">                AFTER 字段名          -- 表示增加在该字段名后面</span><br><span class="line">                FIRST               -- 表示增加在第一个</span><br><span class="line">            ADD PRIMARY KEY(字段名)   -- 创建主键</span><br><span class="line">            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引</span><br><span class="line">            ADD INDEX [索引名] (字段名) -- 创建普通索引</span><br><span class="line">            DROP[ COLUMN] 字段名      -- 删除字段</span><br><span class="line">            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            DROP INDEX 索引名 -- 删除索引</span><br><span class="line">            DROP FOREIGN KEY 外键    -- 删除外键</span><br><span class="line">-- 删除表</span><br><span class="line">    DROP TABLE[ IF EXISTS] 表名 ...</span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [TABLE] 表名</span><br><span class="line">-- 复制表结构</span><br><span class="line">    CREATE TABLE 表名 LIKE 要复制的表名</span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名</span><br><span class="line">-- 检查表是否有错误</span><br><span class="line">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">-- 优化表</span><br><span class="line">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br><span class="line">-- 修复表</span><br><span class="line">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span><br><span class="line">-- 分析表</span><br><span class="line">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 增</span><br><span class="line">    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]</span><br><span class="line">        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span><br><span class="line">        -- 可同时插入多条数据记录！</span><br><span class="line">        REPLACE 与 INSERT 完全一样，可互换。</span><br><span class="line">    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]</span><br><span class="line">-- 查</span><br><span class="line">    SELECT 字段列表 FROM 表名[ 其他子句]</span><br><span class="line">        -- 可来自多个表的多个字段</span><br><span class="line">        -- 其他子句可以不使用</span><br><span class="line">        -- 字段列表可以用*代替，表示所有字段</span><br><span class="line">-- 删</span><br><span class="line">    DELETE FROM 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line">-- 改</span><br><span class="line">    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</span><br></pre></td></tr></table></figure>

<h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL、数据库、表、字段均可设置编码</span><br><span class="line">-- 数据编码与客户端编码不需一致</span><br><span class="line">SHOW VARIABLES LIKE &apos;character_set_%&apos;   -- 查看所有字符集编码项</span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line">SET 变量名 = 变量值</span><br><span class="line">    SET character_set_client = gbk;</span><br><span class="line">    SET character_set_results = gbk;</span><br><span class="line">    SET character_set_connection = gbk;</span><br><span class="line">SET NAMES GBK;  -- 相当于完成以上三个设置</span><br><span class="line">-- 校对集</span><br><span class="line">    校对集用以排序</span><br><span class="line">    SHOW CHARACTER SET [LIKE &apos;pattern&apos;]/SHOW CHARSET [LIKE &apos;pattern&apos;]   查看所有字符集</span><br><span class="line">    SHOW COLLATION [LIKE &apos;pattern&apos;]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    COLLATE 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure>

<h3 id="数据类型（列类型）"><a href="#数据类型（列类型）" class="headerlink" title="数据类型（列类型）"></a>数据类型（列类型）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数值类型</span><br><span class="line"> </span><br><span class="line">-- a. 整型 ----------</span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255</span><br><span class="line">    smallint    2字节    -32768 ~ 32767</span><br><span class="line">    mediumint   3字节    -8388608 ~ 8388607</span><br><span class="line">    int         4字节</span><br><span class="line">    bigint      8字节</span><br><span class="line">    int(M)  M表示总位数</span><br><span class="line">    - 默认存在符号位，unsigned 属性修改</span><br><span class="line">    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</span><br><span class="line">        例：int(5)   插入一个数&apos;123&apos;，补填后为&apos;00123&apos;</span><br><span class="line">    - 在满足要求的情况下，越小越好。</span><br><span class="line">    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</span><br><span class="line"> </span><br><span class="line">-- b. 浮点型 ----------</span><br><span class="line">    类型             字节     范围</span><br><span class="line">    float(单精度)     4字节</span><br><span class="line">    double(双精度)    8字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填0.</span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        float(M, D)     double(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"> </span><br><span class="line">-- c. 定点数 ----------</span><br><span class="line">    decimal -- 可变长度</span><br><span class="line">    decimal(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每9位数字保存为4个字节。</span><br><span class="line"> </span><br><span class="line">2. 字符串类型</span><br><span class="line"> </span><br><span class="line">-- a. char, varchar ----------</span><br><span class="line">    char    定长字符串，速度快，但浪费空间</span><br><span class="line">    varchar 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    char,最多255个字符，与编码无关。</span><br><span class="line">    varchar,最多65535字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过65535个字节。</span><br><span class="line">        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</span><br><span class="line">    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    varchar 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。</span><br><span class="line">    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span><br><span class="line"> </span><br><span class="line">-- b. blob, text ----------</span><br><span class="line">    blob 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, blob, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给default值</span><br><span class="line"> </span><br><span class="line">-- c. binary, varbinary ----------</span><br><span class="line">    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    char, varchar, text 对应 binary, varbinary, blob.</span><br><span class="line"> </span><br><span class="line">3. 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span><br><span class="line">    date        3字节    日期         1000-01-01 到 9999-12-31</span><br><span class="line">    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span><br><span class="line">    time        3字节    时间         -838:59:59 到 838:59:59</span><br><span class="line">    year        1字节    年份         1901 - 2155</span><br><span class="line">datetime    YYYY-MM-DD hh:mm:ss</span><br><span class="line">timestamp   YY-MM-DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">date        YYYY-MM-DD</span><br><span class="line">            YY-MM-DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">time        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line">year        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br><span class="line"> </span><br><span class="line">4. 枚举和集合</span><br><span class="line"> </span><br><span class="line">-- 枚举(enum) ----------</span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为65535.</span><br><span class="line">    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    NULL值的索引是NULL。</span><br><span class="line">    空字符串错误值的索引值是0。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">-- 集合（set） ----------</span><br><span class="line">set(val1, val2, val3...)</span><br><span class="line">    create table tab ( gender set(&apos;男&apos;, &apos;女&apos;, &apos;无&apos;) );</span><br><span class="line">    insert into tab values (&apos;男, 女&apos;);</span><br><span class="line">    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，SET成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure>

<h3 id="选择类型"><a href="#选择类型" class="headerlink" title="选择类型"></a>选择类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- PHP角度</span><br><span class="line">1. 功能满足</span><br><span class="line">2. 存储空间尽量小，处理效率更高</span><br><span class="line">3. 考虑兼容问题</span><br><span class="line"> </span><br><span class="line">-- IP存储 ----------</span><br><span class="line">1. 只需存储，可用字符串</span><br><span class="line">2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned</span><br><span class="line">    1) PHP函数转换</span><br><span class="line">        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。</span><br><span class="line">        利用sprintf函数格式化字符串</span><br><span class="line">        sprintf(&quot;%u&quot;, ip2long(&apos;192.168.3.134&apos;));</span><br><span class="line">        然后用long2ip将整型转回IP字符串</span><br><span class="line">    2) MySQL函数转换(无符号整型，UNSIGNED)</span><br><span class="line">        INET_ATON(&apos;127.0.0.1&apos;) 将IP转为整型</span><br><span class="line">        INET_NTOA(2130706433) 将整型转为IP</span><br></pre></td></tr></table></figure>

<h3 id="列属性（列约束）"><a href="#列属性（列约束）" class="headerlink" title="列属性（列约束）"></a>列属性（列约束）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：create table tab ( id int, stu varchar(10), primary key (id));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    insert into tab values (null, &apos;val&apos;);</span><br><span class="line">        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    insert into tab values (default, &apos;val&apos;);    -- 此时表示强制使用默认值。</span><br><span class="line">    create table tab ( add_time timestamp default current_timestamp );</span><br><span class="line">        -- 表示将当前时间的时间戳设为默认值。</span><br><span class="line">        current_date, current_time</span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</span><br><span class="line">6. COMMENT 注释</span><br><span class="line">    例：create table tab ( id int ) comment &apos;注释内容&apos;;</span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);</span><br><span class="line">        -- 将表t1的t1_id外键关联到表t2的id字段。</span><br><span class="line">        -- 每个外键都有一个名字，可以通过 constraint 指定</span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。</span><br><span class="line">    3. restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure>

<h3 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  -- Normal Format, NF</span><br><span class="line">        - 每个表保存一个实体信息</span><br><span class="line">        - 每个具有一个ID字段作为主键</span><br><span class="line">        - ID主键 + 原子表</span><br><span class="line">    -- 1NF, 第一范式</span><br><span class="line">        字段不能再分，就满足第一范式。</span><br><span class="line">    -- 2NF, 第二范式</span><br><span class="line">        满足第一范式的前提下，不能出现部分依赖。</span><br><span class="line">        消除符合主键就可以避免部分依赖。增加单列关键字。</span><br><span class="line">    -- 3NF, 第三范式</span><br><span class="line">        满足第二范式的前提下，不能出现传递依赖。</span><br><span class="line">        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span><br><span class="line">        将一个实体信息的数据放在一个表内实现。</span><br></pre></td></tr></table></figure>

<h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</span><br><span class="line">a. select_expr</span><br><span class="line">    -- 可以用 * 表示所有字段。</span><br><span class="line">        select * from tb;</span><br><span class="line">    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span><br><span class="line">        select stu, 29+25, now() from tb;</span><br><span class="line">    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        select stu+10 as add10 from tb;</span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    -- 可以为表起别名。使用as关键字。</span><br><span class="line">        SELECT * FROM tb1 AS tt, tb2 AS bb;</span><br><span class="line">    -- from子句后，可以同时出现多个表。</span><br><span class="line">        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span><br><span class="line">        SELECT * FROM tb1, tb2;</span><br><span class="line">    -- 向优化符提示如何选择索引</span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">c. WHERE 子句</span><br><span class="line">    -- 从from获得的数据源中进行筛选。</span><br><span class="line">    -- 整型1表示真，0表示假。</span><br><span class="line">    -- 表达式由运算符和运算数组成。</span><br><span class="line">        -- 运算数：变量（字段）、值、函数返回值</span><br><span class="line">        -- 运算符：</span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br></pre></td></tr></table></figure>

<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  将多个select查询的结果组合成一个结果集合。</span><br><span class="line">    SELECT ... UNION [ALL|DISTINCT] SELECT ...</span><br><span class="line">    默认 DISTINCT 方式，即所有返回的行都是唯一的</span><br><span class="line">    建议，对每个SELECT查询加上小括号包裹。</span><br><span class="line">    ORDER BY 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">    需要各select查询的字段数量一样。</span><br><span class="line">    每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    - 子查询需用括号包裹。</span><br><span class="line">-- from型</span><br><span class="line">    from后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;</span><br><span class="line">-- where型</span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    select * from tb where money = (select max(money) from tb);</span><br><span class="line">    -- 列子查询</span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            select column1 from t1 where exists (select * from t2);</span><br><span class="line">    -- 行子查询</span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        select * from t1 where (id, gender) in (select id, gender from t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    -- 特殊运算符</span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure>

<h3 id="连接查询-join"><a href="#连接查询-join" class="headerlink" title="连接查询(join)"></a>连接查询(join)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line">-- 内连接(inner join)</span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line">    -- 交叉连接 cross join</span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        select * from tb1 cross join tb2;</span><br><span class="line">-- 外连接(outer join)</span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    -- 左外连接 left join</span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    -- 右外连接 right join</span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line">-- 自然连接(natural join)</span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br><span class="line">    </span><br><span class="line">select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;</span><br></pre></td></tr></table></figure>

<p>导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据</span><br><span class="line"> </span><br><span class="line">load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据</span><br><span class="line">    生成的数据默认的分隔符是制表符</span><br><span class="line">    local未指定，则数据文件必须在服务器上</span><br><span class="line">    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理</span><br><span class="line">-- 控制格式</span><br><span class="line">fields  控制字段格式</span><br><span class="line">默认：fields terminated by &apos;&apos; enclosed by &apos;&apos; escaped by &apos;&apos;</span><br><span class="line">    terminated by &apos;string&apos;  -- 终止</span><br><span class="line">    enclosed by &apos;char&apos;      -- 包裹</span><br><span class="line">    escaped by &apos;char&apos;       -- 转义</span><br><span class="line">    -- 示例：</span><br><span class="line">        SELECT a,b,a+b INTO OUTFILE &apos;/tmp/result.text&apos;</span><br><span class="line">        FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos;</span><br><span class="line">        LINES TERMINATED BY &apos;&apos;</span><br><span class="line">        FROM test_table;</span><br><span class="line">lines   控制行格式</span><br><span class="line">默认：lines terminated by &apos;&apos;</span><br><span class="line">    terminated by &apos;string&apos;  -- 终止</span><br></pre></td></tr></table></figure>

<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select语句获得的数据可以用insert插入。</span><br><span class="line">可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用set语法。</span><br><span class="line">    INSERT INTO tbl_name SET field=value,...；</span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (), (), ();</span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, 10+10, now());</span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, DEFAULT);</span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    INSERT INTO tbl_name SELECT ...;</span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;</span><br></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line">1，truncate 是删除表再创建，delete 是逐条删除</span><br><span class="line">2，truncate 重置auto_increment的值。而delete不会</span><br><span class="line">3，truncate 不知道删除了几条，而delete知道。</span><br><span class="line">4，当被用于带分区的表时，truncate 会保留分区。</span><br></pre></td></tr></table></figure>

<h3 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line">-- 导出</span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] ---database DB1 [DB2 DB3...]</span><br><span class="line">mysqldump [options] --all--database</span><br><span class="line">1. 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">可以-w携带WHERE条件</span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件 &gt;</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是视图：</span><br><span class="line">    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span><br><span class="line">    视图具有表结构文件，但不存在数据文件。</span><br><span class="line">    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span><br><span class="line">    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span><br><span class="line">-- 创建视图</span><br><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于SELECT语句检索的列数</span><br><span class="line">-- 查看结构</span><br><span class="line">    SHOW CREATE VIEW view_name</span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    DROP VIEW [IF EXISTS] view_name ...</span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    ALTER VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">-- 视图作用</span><br><span class="line">    1. 简化业务逻辑</span><br><span class="line">    2. 对客户端隐藏真实的表结构</span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    MERGE       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure>

<h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续SQL的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - InnoDB被称为事务安全型引擎。</span><br><span class="line">-- 事务开启</span><br><span class="line">    START TRANSACTION; 或者 BEGIN;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line">-- 事务提交</span><br><span class="line">    COMMIT;</span><br><span class="line">-- 事务回滚</span><br><span class="line">    ROLLBACK;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line">-- 事务的特性</span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line">-- 事务的实现</span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line">-- 事务的原理</span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。</span><br><span class="line">-- 注意</span><br><span class="line">    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    2. 事务不能被嵌套</span><br><span class="line">-- 保存点</span><br><span class="line">    SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">    RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br><span class="line">-- InnoDB自动提交特性设置</span><br><span class="line">    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，</span><br><span class="line">        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure>

<h3 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line">-- 锁定</span><br><span class="line">    LOCK TABLES tbl_name [AS alias]</span><br><span class="line">-- 解锁</span><br><span class="line">    UNLOCK TABLES</span><br></pre></td></tr></table></figure>

<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        INSERT：将新行插入表时激活触发程序</span><br><span class="line">        UPDATE：更改某一行时激活触发程序</span><br><span class="line">        DELETE：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line">-- 删除</span><br><span class="line">DROP TRIGGER [schema_name.]trigger_name</span><br><span class="line">可以使用old和new代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是old，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line">-- 注意</span><br><span class="line">    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line">    </span><br><span class="line">-- 字符连接函数</span><br><span class="line">concat(str1,str2,...])</span><br><span class="line">concat_ws(separator,str1,str2,...)</span><br><span class="line"> </span><br><span class="line">-- 分支语句</span><br><span class="line">if 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">else</span><br><span class="line">    执行语句</span><br><span class="line">end if;</span><br><span class="line"> </span><br><span class="line">-- 修改最外层语句结束符</span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    SQL语句</span><br><span class="line">自定义结束符号</span><br><span class="line">delimiter ;     -- 修改回原来的分号</span><br><span class="line"> </span><br><span class="line">-- 语句块包裹</span><br><span class="line">begin</span><br><span class="line">    语句块</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">-- 特殊的执行</span><br><span class="line">1. 只要添加记录，就会触发程序。</span><br><span class="line">2. Insert into on duplicate key update 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 before insert, after insert;</span><br><span class="line">    如果有重复记录并更新，会触发 before insert, before update, after update;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before insert, before update</span><br><span class="line">3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert</span><br></pre></td></tr></table></figure>

<h3 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--// 局部变量 ----------</span><br><span class="line">-- 变量声明</span><br><span class="line">    declare var_name[,...] type [default value]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。</span><br><span class="line">-- 赋值</span><br><span class="line">    使用 set 和 select into 语句为变量赋值。</span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 全局变量 ----------</span><br><span class="line">-- 定义、赋值</span><br><span class="line">set 语句可以定义并为变量赋值。</span><br><span class="line">set @var = value;</span><br><span class="line">也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。</span><br><span class="line">select @var:=20;</span><br><span class="line">select @v1:=id, @v2=name from t1 limit 1;</span><br><span class="line">select * from tbl_name where @var:=30;</span><br><span class="line">select into 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| select max(height) into @max_height from tb;</span><br><span class="line">-- 自定义变量名</span><br><span class="line">为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@var=10;</span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 控制结构 ----------</span><br><span class="line">-- if语句</span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line">end if;</span><br><span class="line">-- case语句</span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line">END</span><br><span class="line">-- while循环</span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line">end while [end_label];</span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    -- 退出循环</span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 内置函数 ----------</span><br><span class="line">-- 数值函数</span><br><span class="line">abs(x)          -- 绝对值 abs(-10.9) = 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="line">ceil(x)         -- 向上取整 ceil(10.1) = 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) = 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)       -- m%n m mod n 求余 10%3=1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)       -- m^n</span><br><span class="line">sqrt(x)         -- 算术平方根</span><br><span class="line">rand()          -- 随机数</span><br><span class="line">truncate(x, d)  -- 截取d位小数</span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                 -- 当前日期</span><br><span class="line">current_time();                 -- 当前时间</span><br><span class="line">date(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取日期部分</span><br><span class="line">time(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取时间部分</span><br><span class="line">date_format(&apos;yyyy-mm-dd hh:ii:ss&apos;, &apos;%d %y %a %d %m %b %j&apos;); -- 格式化时间</span><br><span class="line">unix_timestamp();               -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)          -- string长度，字节</span><br><span class="line">char_length(string)     -- string的字符个数</span><br><span class="line">substring(str, position [,length])      -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])   -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)           -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position]) -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)           -- 去除前端空格</span><br><span class="line">repeat(string, count)   -- 重复count次</span><br><span class="line">rpad(string, length, pad)   --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)           -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line">-- 流程函数</span><br><span class="line">case when [condition] then result [when [condition] then result ...] [else result] end   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br><span class="line"> </span><br><span class="line">--// 存储函数，自定义函数 ----------</span><br><span class="line">-- 新建</span><br><span class="line">    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 return 返回值语句。</span><br><span class="line">-- 删除</span><br><span class="line">    DROP FUNCTION [IF EXISTS] function_name;</span><br><span class="line">-- 查看</span><br><span class="line">    SHOW FUNCTION STATUS LIKE &apos;partten&apos;</span><br><span class="line">    SHOW CREATE FUNCTION function_name;</span><br><span class="line">-- 修改</span><br><span class="line">    ALTER FUNCTION function_name 函数选项</span><br><span class="line"> </span><br><span class="line">--// 存储过程，自定义功能 ----------</span><br><span class="line">-- 定义</span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。</span><br><span class="line">-- 创建</span><br><span class="line">CREATE PROCEDURE sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line">IN，表示输入型</span><br><span class="line">OUT，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 存储过程 */ ------------------</span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：CALL 过程名</span><br><span class="line">-- 注意</span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line">-- 参数</span><br><span class="line">IN|OUT|INOUT 参数名 数据类型</span><br><span class="line">IN      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line">OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line">-- 语法</span><br><span class="line">CREATE PROCEDURE 过程名 (参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">    过程体</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<h3 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- root密码重置</span><br><span class="line">1. 停止MySQL服务</span><br><span class="line">2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;amp;</span><br><span class="line">    [Windows] mysqld --skip-grant-tables</span><br><span class="line">3. use mysql;</span><br><span class="line">4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;</span><br><span class="line">5. FLUSH PRIVILEGES;</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">-- 增加用户</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &apos;user_name&apos;@&apos;192.168.1.1&apos;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line">-- 重命名用户</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&apos;密码&apos;)  -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&apos;密码&apos;) -- 为指定用户设置密码</span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER 用户名</span><br><span class="line">-- 分配权限/添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &apos;password&apos;]</span><br><span class="line">    - all privileges 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    GRANT ALL PRIVILEGES ON `pms`.* TO &apos;pms&apos;@&apos;%&apos; IDENTIFIED BY &apos;pms0817&apos;;</span><br><span class="line">-- 查看权限</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">    -- 查看当前用户权限</span><br><span class="line">    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限</span><br><span class="line">-- 权限层级</span><br><span class="line">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用REVOKE时，您必须指定与被授权列相同的列。</span><br><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER   -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE   -- 更改或取消已存储的子程序</span><br><span class="line">CREATE  -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE  -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW     -- 允许使用CREATE VIEW</span><br><span class="line">DELETE  -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE     -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX   -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT  -- 允许使用INSERT</span><br><span class="line">LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES  -- 未被实施</span><br><span class="line">RELOAD  -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT  -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES  -- 显示所有数据库</span><br><span class="line">SHOW VIEW   -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE  -- 允许使用UPDATE</span><br><span class="line">USAGE   -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br></pre></td></tr></table></figure>

<h3 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>

<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 /* 注释内容 */</span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 &apos;</span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;G&quot;, &quot;g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line">7. 清除已有语句：c</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程之线程同步</title>
    <url>/2019/11/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<hr><hr><p>用一个简单的题目来说明线程同步的三种方式，题目如下：</p><p>​        模拟传智播客的三个老师同时分发80份学习笔记，每个老师相当于一个线程。</p><h3 id="同步代码块实现"><a href="#同步代码块实现" class="headerlink" title="同步代码块实现"></a>同步代码块实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synclock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(note &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>





<h3 id="同步方法实现"><a href="#同步方法实现" class="headerlink" title="同步方法实现"></a>同步方法实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynMethods</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            SendNote();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SendNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(note &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步锁实现"><a href="#同步锁实现" class="headerlink" title="同步锁实现"></a>同步锁实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line">    <span class="comment">//定义一个锁对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynCodeBlock synCodeBlock = <span class="keyword">new</span> SynCodeBlock();</span><br><span class="line">        <span class="comment">//创建并开启三个线程，模拟三个老师分发笔记</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SynMethods synMethods = <span class="keyword">new</span> SynMethods();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SynLock synLock = <span class="keyword">new</span> SynLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>同步代码块、同步方法、同步锁都是实现不同线程对同一资源的共线问题。</p>
]]></content>
      <tags>
        <tag>java线程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线编程之数据库SQL实战</title>
    <url>/2019/11/19/%E7%89%9B%E5%AE%A2%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="一、查询最晚入职员工的所有信息"><a href="#一、查询最晚入职员工的所有信息" class="headerlink" title="一、查询最晚入职员工的所有信息"></a>一、查询最晚入职员工的所有信息</h1><ul>
<li><strong>题目描述</strong></li>
</ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找最晚入职员工的所有信息</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure><a id="more"></a>


<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> hire_date = (<span class="keyword">select</span> <span class="keyword">max</span>(hire_date)<span class="keyword">from</span> employees);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>考察select语句的嵌套使用</p>
</li>
</ul>
<h1 id="二、查找入职员工时间排名倒数第三名的员工所有信息"><a href="#二、查找入职员工时间排名倒数第三名的员工所有信息" class="headerlink" title="二、查找入职员工时间排名倒数第三名的员工所有信息"></a>二、查找入职员工时间排名倒数第三名的员工所有信息</h1><ul>
<li><strong>题目描述</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找入职员工时间排名倒数第三的员工所有信息</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>*</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> </span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>order by作用：</p>
<p>对记录进行排序（默认升序），desc为降序，asc为升序。</p>
<p>limit作用：</p>
<p>用于限制显示的条数。</p>
<p>Limit [offset,] N<br> Offset: 偏移量,即跳过几行，0可不写<br> N: 取出条目</p>
<p><conter> <img src="https://s2.ax1x.com/2019/11/19/Mg0c01.png" alt="Mg0c01.png"></conter></p>
</li>
</ul>
<h1 id="三、查找当前薪水详情以及部门编号"><a href="#三、查找当前薪水详情以及部门编号" class="headerlink" title="三、查找当前薪水详情以及部门编号"></a>三、查找当前薪水详情以及部门编号</h1><ul>
<li><strong>题目描述</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找各个部门当前(to_date=&apos;9999-01-01&apos;)领导当前薪水详情以及其对应部门编号dept_no</span><br><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">`dept_no` char(4) NOT NULL,</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`salary` int(11) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salaries.*,dept_manager.dept_no </span><br><span class="line"><span class="keyword">from</span> salaries, dept_manager </span><br><span class="line"><span class="keyword">where</span> salaries.emp_no = dept_manager.emp_no</span><br><span class="line"><span class="keyword">and</span> salaries.to_date = <span class="string">"9999-01-01"</span></span><br><span class="line"><span class="keyword">and</span> dept_manager.to_date = <span class="string">"9999-01-01"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>多条件查询。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式</title>
    <url>/2019/11/18/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<hr><h1 id="一、装饰者模式"><a href="#一、装饰者模式" class="headerlink" title="一、装饰者模式"></a>一、装饰者模式</h1><p>动态地给一个对象添加一些额外地职责。就增加功能来说，Decorator模式相比生成子类来说更为灵活。</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ul>
<li>在不影响其他对象的情况下，以动态透明的方式给单个对象增加职责。</li>
<li>处理那些可以撤销的职责。</li>
<li>当不能采用生成子类的方法进行扩充时。</li>
</ul><h2 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h2><ul>
<li><p>Component</p>
<p>定义一个对象接口，可以给这些对象动态地添加职责。</p>
</li>
<li><p>ConcereteComponent</p>
<p>定义一个对象，可以给这个对象添加一些职责。</p>
</li>
<li><p>Decorator</p>
<p>维持一个指向Component对象地指针，并定义一个与Component接口一致地接口</p>
</li>
<li><p>ConcreteDecorator</p>
<p>向组件添加职责。</p>
</li>
</ul><a id="more"></a>



<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>Componet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcereteComponent</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="title">impements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(）&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        System.out.println(<span class="string">"男人在吃饭！"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Decorator</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteDecortor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        reEat();</span><br><span class="line">        System.out.println(<span class="string">"ManDecoratorA类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reEat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"再吃一顿饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"ManDecoratorB类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Man man  = <span class="keyword">new</span> Man();</span><br><span class="line">        ManDecoratorA md1 = <span class="keyword">new</span> ManDecoratorA();</span><br><span class="line">        ManDecoratorB md2 = <span class="keyword">new</span> ManDecoratorB();</span><br><span class="line">        </span><br><span class="line">        md1.setPerson(man);</span><br><span class="line">        md2.setPerson(md1);</span><br><span class="line">        md2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>result</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">男人在吃</span><br><span class="line">再吃一顿饭</span><br><span class="line">ManDecoratorA类</span><br><span class="line">===============</span><br><span class="line">ManDecoratorB类</span><br></pre></td></tr></table></figure>

<h1 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h1><p>保证一个类有且仅有一个实例化对象，提供一个访问它的全局访问点。</p>
<h2 id="适用性-1"><a href="#适用性-1" class="headerlink" title="适用性"></a>适用性</h2><ul>
<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</li>
<li>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</li>
</ul>
<h2 id="参与者-1"><a href="#参与者-1" class="headerlink" title="参与者"></a>参与者</h2><ul>
<li><p><strong>Singleton</strong></p>
<p>定义一个Instance操作，允许客户访问它的唯一实例。Instance是一个类操作。</p>
</li>
</ul>
<h2 id="单例模式特点"><a href="#单例模式特点" class="headerlink" title="单例模式特点"></a>单例模式特点</h2><ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p>
<h2 id="单例模式的线程安全问题"><a href="#单例模式的线程安全问题" class="headerlink" title="单例模式的线程安全问题"></a>单例模式的线程安全问题</h2><p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p>
<p>​        另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p>
<h2 id="单例模式的选择"><a href="#单例模式的选择" class="headerlink" title="单例模式的选择"></a>单例模式的选择</h2><p>​        我们最早使用的MVC框架Struts1中的action就是单例模式的，而到了Struts2就使用了多例。在Struts1里，当有多个请求访问，每个都会分配一个新线程，在这些线程，操作的都是同一个action对象，每个用户的数据都是不同的，而action却只有一个。到了Struts2， action对象为每一个请求产生一个实例，并不会带来线程安全问题（实际上servlet容器给每个请求产生许多可丢弃的对象，但是并没有影响到性能和垃圾回收问题，有时间会做下研究）。</p>
<h2 id="实现单例模式的方式"><a href="#实现单例模式的方式" class="headerlink" title="实现单例模式的方式"></a>实现单例模式的方式</h2><ul>
<li><strong>饿汉模式（立即加载）</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        饿汉模式在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p>
<p>​        Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p>
<ul>
<li><strong>懒汉模式（延时加载）</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 single = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        该示例虽然用延迟加载方式实现了懒汉式单例，但在多线程环境下会产生多个single对象，如何改造请看以下方式。</p>
<p><strong>使用Synchronized同步锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。</p>
<p><strong>双层校验锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双层校验锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    single = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p>
<ul>
<li><strong>静态内部类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton5 single = <span class="keyword">new</span> Singleton5();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObject.single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        静态内部类虽然保证了单例在多线程并发下的线程安全性，<em>但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的</em>。这种情况不多做说明了，使用时请注意。</p>
<ul>
<li><strong>static静态代码块</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代码块在类首次加载的时候执行一次。</p>
<ul>
<li><strong>内部枚举类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnumSingleton&#123;</span><br><span class="line">        Singleton;</span><br><span class="line">        <span class="keyword">private</span> Singleton7 singleton;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举类的构造方法在类加载时被实例化</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnumSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnumSingleton.Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton7</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java设计模式.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"饿汉模式(立即加载)"</span>);</span><br><span class="line">        Singleton1 singleton1 = Singleton1.getInstance();</span><br><span class="line">        Singleton1 singleton2 = Singleton1.getInstance();</span><br><span class="line">        System.out.println(singleton1);</span><br><span class="line">        System.out.println(singleton2);</span><br><span class="line">        System.out.println(<span class="string">"懒汉模式（延时加载）"</span>);</span><br><span class="line">        Singleton2 singleton3 = Singleton2.getInstance();</span><br><span class="line">        Singleton2 singleton4 = Singleton2.getInstance();</span><br><span class="line">        System.out.println(singleton3);</span><br><span class="line">        System.out.println(singleton4);</span><br><span class="line">        System.out.println(<span class="string">"使用Synchronized同步锁"</span>);</span><br><span class="line">        Singleton3 singleton5 = Singleton3.getInstance();</span><br><span class="line">        Singleton3 singleton6 = Singleton3.getInstance();</span><br><span class="line">        System.out.println(singleton5);</span><br><span class="line">        System.out.println(singleton6);</span><br><span class="line">        System.out.println(<span class="string">"双层校验锁"</span>);</span><br><span class="line">        Singleton4 singleton7 = Singleton4.getInstance();</span><br><span class="line">        Singleton4 singleton8 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton7);</span><br><span class="line">        System.out.println(singleton8);</span><br><span class="line">        System.out.println(<span class="string">"静态内部类"</span>);</span><br><span class="line">        Singleton5 singleton9 = Singleton5.getInstance();</span><br><span class="line">        Singleton5 singleton10 = Singleton5.getInstance();</span><br><span class="line">        System.out.println(singleton9);</span><br><span class="line">        System.out.println(singleton10);</span><br><span class="line">        System.out.println(<span class="string">"static静态代码块"</span>);</span><br><span class="line">        Singleton6 singleton11 = Singleton6.getInstance();</span><br><span class="line">        Singleton6 singleton12 = Singleton6.getInstance();</span><br><span class="line">        System.out.println(singleton11);</span><br><span class="line">        System.out.println(singleton12);</span><br><span class="line">        System.out.println(<span class="string">"内部枚举类"</span>);</span><br><span class="line">        Singleton7 singletonFactory = SingletonFactory.getInstance();</span><br><span class="line">        Singleton7 singletonFactory1 = SingletonFactory.getInstance();</span><br><span class="line">        System.out.println(singletonFactory);</span><br><span class="line">        System.out.println(singletonFactory1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">饿汉模式(立即加载)</span><br><span class="line">java设计模式.单例模式.Singleton1@<span class="number">74</span>a14482</span><br><span class="line">java设计模式.单例模式.Singleton1@<span class="number">74</span>a14482</span><br><span class="line">懒汉模式（延时加载）</span><br><span class="line">java设计模式.单例模式.Singleton2@<span class="number">1540e19</span>d</span><br><span class="line">java设计模式.单例模式.Singleton2@<span class="number">1540e19</span>d</span><br><span class="line">使用Synchronized同步锁</span><br><span class="line">java设计模式.单例模式.Singleton3@<span class="number">677327</span>b6</span><br><span class="line">java设计模式.单例模式.Singleton3@<span class="number">677327</span>b6</span><br><span class="line">双层校验锁</span><br><span class="line">java设计模式.单例模式.Singleton4@<span class="number">14</span>ae5a5</span><br><span class="line">java设计模式.单例模式.Singleton4@<span class="number">14</span>ae5a5</span><br><span class="line">静态内部类</span><br><span class="line">java设计模式.单例模式.Singleton5@<span class="number">7f</span>31245a</span><br><span class="line">java设计模式.单例模式.Singleton5@<span class="number">7f</span>31245a</span><br><span class="line"><span class="keyword">static</span>静态代码块</span><br><span class="line">java设计模式.单例模式.Singleton6@<span class="number">6</span>d6f6e28</span><br><span class="line">java设计模式.单例模式.Singleton6@<span class="number">6</span>d6f6e28</span><br><span class="line">内部枚举类</span><br><span class="line">java设计模式.单例模式.Singleton7@<span class="number">135f</span>baa4</span><br><span class="line">java设计模式.单例模式.Singleton7@<span class="number">135f</span>baa4</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加密算法浅析</title>
    <url>/2019/11/09/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="RSA的加解密机制"><a href="#RSA的加解密机制" class="headerlink" title="RSA的加解密机制"></a>RSA的加解密机制</h1><p>RSA的加密系统可分为三个部分，即用户密钥的产生、加密算法以及解密算法。</p><h2 id="用户密钥的产生"><a href="#用户密钥的产生" class="headerlink" title="用户密钥的产生"></a>用户密钥的产生</h2><p>在用户密钥的产生部分，首先此系统的每一个用户将自行选择一组公开密钥，然后公之于众，使得他人都能使用此公开密钥对机密数据进行加密，然后自己使用私密密钥进行解密，获取机密数据。</p><p>​        以下是RSA密钥的产生过程：</p><a id="more"></a>


<p>​        &lt;1&gt;.首先找出两个大质数p和q，两者均至少为100位的十进制数。</p>
<p>​        &lt;2&gt;.计算N=p * q 及 φ(N)= (q-1)*(p-1),    其中φ(N)为欧拉函数，意为小于N的整数中与N互质的整数个数。例如，只有1和5这两个数与6互质，所以φ(6)=2。</p>
<p>​        &lt;3&gt;.找出一个与φ(N)互质的数e，因此（e，N）可以作为该用户的公开密钥。</p>
<p>​        &lt;4&gt;.计算出该用户的私密密钥d，使得e * d mod φ(N) =1，也就是在模φ(N)的情况下，使得e和d互为乘法反元素，其中d称为用户的私密密钥，须绝对保密。</p>
<h2 id="加密解密机制"><a href="#加密解密机制" class="headerlink" title="加密解密机制"></a>加密解密机制</h2><p>在RSA密码系统里，每次加密或解密的信息块的值在0~（N-1）的范围内。若明文及密文大于这个块，则分块。</p>
<p>在实际加解密过程中，N至少为521位。N值越大，RSA的安全性越高，加解密所需要的时间就越长。</p>
<p>现在假设要对M信息进行加密，其中0&lt;=M&lt;=(N-1),RSA加密算法为：C=Ee（M）=M^2modN.<br>$$<br>C=Ee(M)=M^emodN<br>$$<br>C为加密后的密文。若要对C进行解密，则需要计算：M=D<sub>d<sub>（C）modM<br>$$<br>M=Dd(C)modN<br>$$</sub></sub></p>
<h2 id="加密解密算法的JAVA代码实现"><a href="#加密解密算法的JAVA代码实现" class="headerlink" title="加密解密算法的JAVA代码实现"></a>加密解密算法的JAVA代码实现</h2><p><strong>RSA加密解密的简单JAVA实现代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.rsa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncrypt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> m=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> public_key=<span class="number">0</span>;<span class="comment">//公匙</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> private_key=<span class="number">0</span>;<span class="comment">//密匙</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> text=<span class="number">0</span>;<span class="comment">//明文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> secretword=<span class="number">0</span>;<span class="comment">//密文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> word=<span class="number">0</span>;<span class="comment">//解密后明文</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为素数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">primenumber</span><span class="params">(<span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">        k=(<span class="keyword">long</span>)Math.sqrt((<span class="keyword">double</span>)t);</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        outer:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((t%i)==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入PQ</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputPQ</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入素数p: "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.p=Integer.parseInt(br);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!primenumber(<span class="keyword">this</span>.p));</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入素数q: "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.q=Integer.parseInt(br);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!primenumber(<span class="keyword">this</span>.q));</span><br><span class="line">        <span class="keyword">this</span>.n=<span class="keyword">this</span>.p*<span class="keyword">this</span>.q;</span><br><span class="line">        <span class="keyword">this</span>.m=(p-<span class="number">1</span>)*(q-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"这两个素数的乘积为p*q："</span>+<span class="keyword">this</span>.n);</span><br><span class="line">        System.out.println(<span class="string">"所得的小于Ｎ并且与Ｎ互素的整数的个数为m=(p-1)(q-1)："</span>+<span class="keyword">this</span>.m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求最大公约数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> gcd;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">            gcd=a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            gcd=gcd(b,a%b);</span><br><span class="line">        System.out.println(<span class="string">"gcd:"</span>+gcd);</span><br><span class="line">        <span class="keyword">return</span> gcd;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入公匙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPublic_key</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入一个公钥的值，这个值要求小于m并且和m互质： "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.public_key=Long.parseLong(br);</span><br><span class="line">        &#125;<span class="keyword">while</span>((<span class="keyword">this</span>.public_key &gt;= <span class="keyword">this</span>.m) || (<span class="keyword">this</span>.gcd(<span class="keyword">this</span>.m,<span class="keyword">this</span>.public_key)!=<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"公钥为："</span>+<span class="keyword">this</span>.public_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算得到密匙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivate_key</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> value=<span class="number">1</span>;</span><br><span class="line">        outer:<span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">1</span>;;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            value=i*<span class="keyword">this</span>.m+<span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"value:  "</span>+value);</span><br><span class="line">            <span class="keyword">if</span>((value%<span class="keyword">this</span>.public_key==<span class="number">0</span>)&amp;&amp; (value/<span class="keyword">this</span>.public_key &lt; <span class="keyword">this</span>.m))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.private_key=value/<span class="keyword">this</span>.public_key;</span><br><span class="line">                <span class="keyword">break</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"产生的一个私钥为："</span>+<span class="keyword">this</span>.private_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入明文</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getText</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入明文："</span>);</span><br><span class="line">        BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String br=stdin.readLine();</span><br><span class="line">        <span class="keyword">this</span>.text=Long.parseLong(br);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加密、解密计算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">colum</span><span class="params">(<span class="keyword">long</span> y,<span class="keyword">long</span> n,<span class="keyword">long</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mul;</span><br><span class="line">        <span class="keyword">if</span>(key==<span class="number">1</span>)</span><br><span class="line">            mul=y%n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mul=y*<span class="keyword">this</span>.colum(y,n,key-<span class="number">1</span>)%n;</span><br><span class="line">        <span class="keyword">return</span> mul;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密后解密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pascolum</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getText();</span><br><span class="line">        System.out.println(<span class="string">"输入明文为: "</span>+<span class="keyword">this</span>.text);</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">this</span>.secretword=<span class="keyword">this</span>.colum(<span class="keyword">this</span>.text,<span class="keyword">this</span>.n,<span class="keyword">this</span>.public_key);</span><br><span class="line">        System.out.println(<span class="string">"所得的密文为："</span>+<span class="keyword">this</span>.secretword);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">this</span>.word=<span class="keyword">this</span>.colum(<span class="keyword">this</span>.secretword,<span class="keyword">this</span>.n,<span class="keyword">this</span>.private_key);</span><br><span class="line">        System.out.println(<span class="string">"解密后所得的明文为："</span>+<span class="keyword">this</span>.word);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试如下代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.rsa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncryptTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RSAEncrypt t = <span class="keyword">new</span> RSAEncrypt();</span><br><span class="line">        t.inputPQ();</span><br><span class="line">        t.getPublic_key();</span><br><span class="line">        t.getPrivate_key();</span><br><span class="line">        t.pascolum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入数据来源为课本上例题所给，用来验证加密解密算法实现的正确性。</p>
<p><strong>课本例题如下：</strong></p>
<p><img src="https://s2.ax1x.com/2019/11/09/MmEbex.png" alt="MmEbex.png"></p>
<p><strong>运行结果如下：</strong></p>
<p><a href="https://imgchr.com/i/MmElJe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MmElJe.md.png" alt="MmElJe.md.png"></a></p>
]]></content>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM9指令操作系统</title>
    <url>/2019/11/04/ARM9%E6%8C%87%E4%BB%A4%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><strong>注：</strong>为了迅速的复习完ARM9的寻址方式以及基本指令集，在此只做指令演示，不做详细的文字叙述。</p><h1 id="一、ARM处理器的寻址方式"><a href="#一、ARM处理器的寻址方式" class="headerlink" title="一、ARM处理器的寻址方式"></a>一、ARM处理器的寻址方式</h1><ul>
<li><h2 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R2,R3		;R2&lt;-R3		R3中的内容赋给R2</span><br><span class="line">ADD R2,R3,R4    ;R2&lt;-R3+R4	R3+R4中的内容相加，结果赋给R2</span><br></pre></td></tr></table></figure>



</li>
</ul><a id="more"></a>

<ul>
<li><h2 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD R1.R1,#1234		:R1&lt;-R1+1234</span><br><span class="line">ADD R1,R1,#0x7f		;R1&lt;-R1+0x7f</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R1,[R2]		;R1&lt;-[R2]		R2中的内容为地址，该指令实现将该地址中的数据传送到R1</span><br><span class="line">STR R1,[R2]		;[R2]&lt;-R1</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h2 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R0,[R1,#8]		;R0&lt;-[R1+8]	R1的内容加上8形成的操作数的有效地址，并将地址中的操作数存入R0中</span><br><span class="line">LDR R0,[R1,#8]!		;R0&lt;-[R1+8],R1&lt;-R1+8</span><br><span class="line">LDR R0,[R1],#2		;R0&lt;-[R1],R1&lt;-R1+2</span><br><span class="line">LDR R0,[R1,R2]		;R0&lt;-[R1+R2]</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h2 id="寄存器移位寻址"><a href="#寄存器移位寻址" class="headerlink" title="寄存器移位寻址"></a>寄存器移位寻址</h2><p><strong>1.LSL(或ASL)操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，LSL（或ASL）操作数</span><br></pre></td></tr></table></figure>

<p>作用：可完成对通用寄存器中的内容进行逻辑（或算术）的左移操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,LSL#4		;将R1中的内容逻辑左移四位后送给R0</span><br></pre></td></tr></table></figure>

<p><strong>2.LSR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，LSR操作数</span><br></pre></td></tr></table></figure>

<p>作用：可完成对通用寄存器中的内容进行逻辑的右移操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,LSR#4		;将R1中的内容逻辑右移四位后送给R0</span><br></pre></td></tr></table></figure>

<p><strong>3.ROR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，ROR操作数</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行循环右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,ROR#4		;R1的内容循环右移4位后传到R0中</span><br></pre></td></tr></table></figure>

<p><strong>4.ASR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，ASR操作数</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,ASR#4		;R1的内容右移4位后传到R0中，符号为保持不变。</span><br></pre></td></tr></table></figure>

<p><strong>5.RRX操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，RRX</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行带扩充的循环右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,RRX		;R1的内容进行带扩充的循环右移1位后传到R0中</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h2><ul>
<li><h3 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h3></li>
<li><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3></li>
</ul>
</li>
</ul>
<h1 id="二、ARM指令集"><a href="#二、ARM指令集" class="headerlink" title="二、ARM指令集"></a>二、ARM指令集</h1><ul>
<li><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;opcode&gt;&#123;&lt;code&gt;&#125;&#123;s&#125;&lt;Rd&gt;,&lt;Rn&gt;,&lt;op2&gt;</span><br></pre></td></tr></table></figure>

<p>各项介绍如下：</p>
<p><opcode>:操作码，如ADD等操作指令。</opcode></p>
<p>{<code>}：决定指令执行的条件码。</code></p>
<p>{s}：决定指令执行是否影响CPRS寄存器的值。</p>
<p><rd>：目的寄存器。</rd></p>
<p><rn>：第一个操作数，为寄存器。</rn></p>
<p><op2>：第二个操作数。</op2></p>
</li>
</ul>
<p><strong>注</strong>：opcode、cond与s之间没有分隔符，s与Rd之间用空格隔开。</p>
<ul>
<li><h2 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h2><p>如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">条件码</th>
<th align="center">助记符后缀</th>
<th align="center">标志</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000</td>
<td align="center">EQ</td>
<td align="center">Z置位</td>
<td align="center">相等</td>
</tr>
<tr>
<td align="center">0001</td>
<td align="center">NE</td>
<td align="center">Z清零</td>
<td align="center">不相等</td>
</tr>
<tr>
<td align="center">0010</td>
<td align="center">CS</td>
<td align="center">C置位</td>
<td align="center">无符号数大于或等于</td>
</tr>
<tr>
<td align="center">0011</td>
<td align="center">CC</td>
<td align="center">C清零</td>
<td align="center">无符号数小于</td>
</tr>
<tr>
<td align="center">0100</td>
<td align="center">MI</td>
<td align="center">N置位</td>
<td align="center">负数</td>
</tr>
<tr>
<td align="center">0101</td>
<td align="center">PL</td>
<td align="center">N清零</td>
<td align="center">正数或零</td>
</tr>
<tr>
<td align="center">0110</td>
<td align="center">VS</td>
<td align="center">V置位</td>
<td align="center">溢出</td>
</tr>
<tr>
<td align="center">0111</td>
<td align="center">VC</td>
<td align="center">V清零</td>
<td align="center">未溢出</td>
</tr>
<tr>
<td align="center">1000</td>
<td align="center">HI</td>
<td align="center">C置位Z清零</td>
<td align="center">无符号数大于</td>
</tr>
<tr>
<td align="center">1001</td>
<td align="center">LS</td>
<td align="center">C清零Z置位</td>
<td align="center">无符号数小于或等于</td>
</tr>
<tr>
<td align="center">1010</td>
<td align="center">GE</td>
<td align="center">N等于V</td>
<td align="center">带符号数大于或等于</td>
</tr>
<tr>
<td align="center">1011</td>
<td align="center">LT</td>
<td align="center">N不等于V</td>
<td align="center">带符号数小于</td>
</tr>
<tr>
<td align="center">1100</td>
<td align="center">GT</td>
<td align="center">Z清零且（N等于V）</td>
<td align="center">带符号数大于</td>
</tr>
<tr>
<td align="center">1101</td>
<td align="center">LE</td>
<td align="center">Z置位或（N不等V）</td>
<td align="center">带符号数小于或等于</td>
</tr>
<tr>
<td align="center">1110</td>
<td align="center">AL</td>
<td align="center">忽略</td>
<td align="center">无条件执行</td>
</tr>
</tbody></table>
</li>
<li><h2 id="ARM存储器访问指令"><a href="#ARM存储器访问指令" class="headerlink" title="ARM存储器访问指令"></a>ARM存储器访问指令</h2><p><strong>1.单一数据加载/存储指令</strong></p>
<p><strong><1>.LDR指令</1></strong></p>
<p>LDR的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125; 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R3,[R4]			;将存储器地址为R4中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,R2]		;将存储器地址为R1+R2中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,#8]		;将存储器地址为R1+8中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,R2]!		;将存储器地址为R1中的字数据读入R3寄存器中,将新地址R1+R2写入R1</span><br></pre></td></tr></table></figure>

<p>LDR指令是字加载指令。</p>
<p><strong><2>.LDRB指令</2></strong></p>
<p>LDRB的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;B 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDRB R3,[R1]		;将存储器地址为R4中的字数据读入R3寄存器中,并将R3的高24位清零</span><br></pre></td></tr></table></figure>

<p>LDRB指令是字加载指令，同时将寄存器的高24位清零。</p>
<p><strong><3>.LDRH指令</3></strong></p>
<p>LDRH的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;H 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDRH R3,[R1]		;将存储器地址为R4中的字数据读入R3寄存器中,并将R3的高16位清零</span><br></pre></td></tr></table></figure>

<p>LDRB指令是字加载指令，同时将寄存器的高16位清零。</p>
<p><strong><4>.STR指令</4></strong></p>
<p>STR的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125; 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR R3,[R1],#8		;将R3中的字数据写入以R1为地址的存储器中，并将新地址R1+8写入R1</span><br></pre></td></tr></table></figure>

<p>STR指令是字存储指令，从源寄存器中将一个32位的字数据传送到寄存器中。</p>
<p><strong><5>.STRB指令</5></strong></p>
<p>STRB的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125;B 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRB R3,[R1,#8]		;将R3中的字数据写入以R1+8为地址的存储器中</span><br></pre></td></tr></table></figure>

<p>STRB指令是无符号字节存储指令，从源寄存器中将一个8位的字节数据传送到寄存器中。该字节数据是源寄存器中的低8位。</p>
<p><strong><6>.STRH指令</6></strong></p>
<p>STRH的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125;H 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRH R3,[R1]		;将R3中的半字数据写入以R1为地址的存储器中</span><br></pre></td></tr></table></figure>

<p>STRH指令是无符号半字存储指令，从源寄存器中将一个16位的半字数据传送到寄存器中。该字节数据是源寄存器中的低16位。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法学习笔记</title>
    <url>/2019/10/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>一个#是一级标题，二个#是二级标题，以此类推。最多到六级标题。</p><p>注：标准语法一般在#后面跟空格再写标题，有的地方可以不加空格（比如：简书上写Markdown）。</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><a id="more"></a>






<h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>…</p>
<h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p>要加粗的文字左右分别用两个**包起来</p>
</li>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><p>要斜体的文字左右分别用一个*包起来</p>
</li>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5><p>要斜体和加粗的文字左右分别用三个*号包起来</p>
</li>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><p>要加删除线的文字左右分别用两个~~包起来</p>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**这是加粗字体**</span><br><span class="line">*这是斜体*</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是加删除线的~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
</li>
</ul>
<p>  <strong>这是加粗字体</strong><br>  <em>这是斜体</em><br>  <strong><em>这是加粗斜体</em></strong><br>  <del>这是加删除线的</del></p>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>  在引用文字前加&gt;即可。引用可以嵌套。</p>
<p>  实例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>  三个或者三个以上的 - 或者 * 都可以</p>
<p>  实例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<p>  可以看到，显示的效果是一毛一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt]（图片地址 ”图片title“）</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片底线的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移动到图片上时显示的内容。所以title可有可无。</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![KTeDsJ.png](https://s2.ax1x.com/2019/10/31/KTeDsJ.png)</span><br></pre></td></tr></table></figure>

<p>示例如下：</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KTeDsJ.png" alt="KTeDsJ.png"></p>
<p><strong>上传本地图片直接拉到md文件中就ok！</strong></p>
<p>注：若发布博客的话图片不显示参考这篇<a href="https://blog.csdn.net/Mandyucan/article/details/80421711" target="_blank" rel="noopener">博客</a></p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[小李的博客]（https://lisongbai.top）</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p> <a href="https://lisongbai.top">小李的博客</a></p>
<p>注：()一定要使用英文括号Markdown不识别中文括号。</p>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><ul>
<li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：</p>
<p>无序列表用” <strong>-  + *</strong> “任意一个都可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
</ul>
</li>
<li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：</p>
<p>数字加点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>1.列表内容<br>2.列表内容<br>3.列表内容</p>
</li>
</ul>
<ul>
<li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一集之间敲三个空格即可</strong></p>
<p>仔细观察标题七中的列表你会发现无须列表的嵌套滴！</p>
</li>
</ul>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英雄 | 别名 | 羁绊</span><br><span class="line">:- | :-: | -:</span><br><span class="line">杰斯 | 炮王 | 海克斯</span><br><span class="line">李青 | 小学僧 | 暂无</span><br><span class="line">疾风剑豪 | 托儿索 | 剑士</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th align="right">英雄</th>
<th align="center">别名</th>
<th align="right">羁绊</th>
</tr>
</thead>
<tbody><tr>
<td align="right">杰斯</td>
<td align="center">炮王</td>
<td align="right">海克斯</td>
</tr>
<tr>
<td align="right">李青</td>
<td align="center">小学僧</td>
<td align="right">暂无</td>
</tr>
<tr>
<td align="right">疾风剑豪</td>
<td align="center">托儿索</td>
<td align="right">剑士</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：</p>
<p>单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">	代码...</span><br><span class="line">	代码...</span><br><span class="line">	代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
<p>实例：</p>
<p>单行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`System.Out.Println(<span class="string">"hello hexo!"</span>);`</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">	<span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	System.Out.Println(<span class="string">"hello hexo!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><code>System.Out.Println(&quot;hello hexo!&quot;);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	System.Out.Println(<span class="string">"hello hexo!"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>



<p>注：我用的是Typora编辑器，这个有点问题，暂未解决。<strong>cond(yes)-&gt;io-&gt;e  cond(no)-&gt;sub1(right)-&gt;op</strong>这两条语句只会执行第一条，从而导致有一条线它画不出来。</p>
<p>如下图所示：</p>
<p><img src="https://i.loli.net/2019/10/31/ImfquYTA7HvLch9.png" alt="流程图.png"></p>
]]></content>
  </entry>
</search>
