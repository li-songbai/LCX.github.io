<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DHCP跨路由转发</title>
    <url>/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/11.png" class><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><ul>
<li>DHCP协议工作过程配置</li>
<li>DHCP协议报文格式</li>
</ul><h1 id="3-实验原理"><a href="#3-实验原理" class="headerlink" title="3.实验原理"></a>3.实验原理</h1><h2 id="3-1DHCP概述"><a href="#3-1DHCP概述" class="headerlink" title="3.1DHCP概述"></a>3.1DHCP概述</h2><p> DHCP，动态主机配置协议，前身是BOOTP协议，是一个局域网的网络协议，使用UDP协议工作，常用的2个端口：67(DHCP server),68(DHCP client)。DHCP通常被用于局域网环境，主要作用是集中的管理、分配IP地址，使client动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。简单来说，DHCP就是一个不需要账号密码登录的、自动给内网机器分配IP地址等信息的协议。 </p><a id="more"></a>



<h2 id="3-2DHCP协议中的报文"><a href="#3-2DHCP协议中的报文" class="headerlink" title="3.2DHCP协议中的报文"></a>3.2DHCP协议中的报文</h2><h3 id="3-2-1DHCP报文共有一下几种："><a href="#3-2-1DHCP报文共有一下几种：" class="headerlink" title="3.2.1DHCP报文共有一下几种："></a>3.2.1DHCP报文共有一下几种：</h3><ul>
<li><strong>DHCP DISCOVER</strong> ：客户端开始DHCP过程发送的包，是DHCP协议的开始</li>
<li><strong>DHCP OFFER</strong> ：服务器接收到DHCP DISCOVER之后做出的响应，它包括了给予客户端的IP（yiaddr）、客户端的MAC地址、租约过期时间、服务器的识别符以及其他信息</li>
<li><strong>DHCP REQUEST</strong> ：客户端对于服务器发出的DHCP OFFER所做出的响应。在续约租期的时候同样会使用。</li>
<li><strong>DHCP ACK</strong> ：服务器在接收到客户端发来的DHCP REQUEST之后发出的成功确认的报文。在建立连接的时候，客户端在接收到这个报文之后才会确认分配给它的IP和其他信息可以被允许使用。</li>
<li><strong>DHCP NAK</strong> ：DHCP ACK的相反的报文，表示服务器拒绝了客户端的请求。</li>
<li><strong>DHCP RELEASE</strong> ：一般出现在客户端关机、下线等状况。这个报文将会使DHCP服务器释放发出此报文的客户端的IP地址</li>
<li><strong>DHCP INFORM</strong> ：客户端发出的向服务器请求一些信息的报文</li>
<li><strong>DHCP DECLINE</strong> :当客户端发现服务器分配的IP地址无法使用（如IP地址冲突时），将发出此报文，通知服务器禁止使用该IP地址。</li>
</ul>
<h3 id="3-2-2DHCP-的-工作流程："><a href="#3-2-2DHCP-的-工作流程：" class="headerlink" title="3.2.2DHCP 的 工作流程："></a>3.2.2DHCP 的 工作流程：</h3><img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/1.png" class>

<h1 id="4-实验主要步骤"><a href="#4-实验主要步骤" class="headerlink" title="4.实验主要步骤"></a>4.实验主要步骤</h1><h2 id="4-1设置PC的ip为DHCP动态获取"><a href="#4-1设置PC的ip为DHCP动态获取" class="headerlink" title="4.1设置PC的ip为DHCP动态获取"></a>4.1设置PC的ip为DHCP动态获取</h2><h2 id="4-2在交换机S1中划分vlan、配置虚接口IP"><a href="#4-2在交换机S1中划分vlan、配置虚接口IP" class="headerlink" title="4.2在交换机S1中划分vlan、配置虚接口IP"></a>4.2在交换机S1中划分vlan、配置虚接口IP</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.	</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">S1	</span></span><br><span class="line"><span class="meta">[S1]vlan</span> <span class="string">batch 2 3 4</span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">GigabitEthernet0/0/1</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">link-type access 	</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">default vlan 2</span></span><br><span class="line"><span class="attr">[S1-GigabitEthernet0/0/1]quit</span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">GigabitEthernet0/0/2</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">link-type access 	</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">default vlan 3</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">GigabitEthernet 0/0/3</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">link-type access </span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">l	</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">li</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">default vlan 4</span></span><br><span class="line"><span class="attr">[S1-GigabitEthernet0/0/3]</span></span><br><span class="line"><span class="attr">[S1-GigabitEthernet0/0/3]quit</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1-Vlanif2]ip</span> <span class="string">address 192.168.0.254 24</span></span><br><span class="line"><span class="attr">[S1-Vlanif2]quit</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">Vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif3]ip</span> <span class="string">address 192.168.1.254 24</span></span><br><span class="line"><span class="attr">[S1-Vlanif3]quit</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">Vlanif 4</span></span><br><span class="line"><span class="meta">[S1-Vlanif4]ip</span> <span class="string">address 192.168.2.1 24</span></span><br><span class="line"><span class="attr">[S1-Vlanif4]quit</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3在路由器R1中配置DHCP服务"><a href="#4-3在路由器R1中配置DHCP服务" class="headerlink" title="4.3在路由器R1中配置DHCP服务"></a>4.3在路由器R1中配置DHCP服务</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;Huawei&gt;system-view</span> <span class="string"></span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R1</span></span><br><span class="line"><span class="meta">[R1]int</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.2.254 24</span></span><br><span class="line"><span class="attr">[R1-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">route-static 192.168.0.0 24 192.168.2.1</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">route-static 192.168.1.0 24 192.168.2.1</span></span><br><span class="line"><span class="comment">#创建地址池 1、2</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">pool 1	</span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]network</span> <span class="string">192.168.0.0 mask 255.255.255.0</span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]gate</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]gateway-list</span> <span class="string">192.168.0.254	</span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]dns-list</span> <span class="string">8.8.8.8</span></span><br><span class="line"><span class="attr">[R1-ip-pool-1]quit</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">pool 2</span></span><br><span class="line"><span class="meta">[R1-ip-pool-2]network</span> <span class="string">192.168.1.0 mask 255.255.255.0</span></span><br><span class="line"><span class="meta">[R1-ip-pool-2]gateway-list</span> <span class="string">192.168.1.254</span></span><br><span class="line"><span class="meta">[R1-ip-pool-2]dns-list</span> <span class="string">114.114.114.114</span></span><br><span class="line"><span class="attr">[R1-ip-pool-2]quit</span></span><br><span class="line"><span class="meta">[R1]int</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]dhcp</span> <span class="string">enable</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]dhcp</span> <span class="string">select global </span></span><br><span class="line"><span class="attr">[R1-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="attr">[R1]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4在交换机S1中配置DHCP中继服务"><a href="#4-4在交换机S1中配置DHCP中继服务" class="headerlink" title="4.4在交换机S1中配置DHCP中继服务"></a>4.4在交换机S1中配置DHCP中继服务</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[S1]dhcp</span> <span class="string">enable </span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">Vlanif 2</span></span><br><span class="line"><span class="meta">[S1-Vlanif2]dhcp</span> <span class="string">select relay </span></span><br><span class="line"><span class="meta">[S1-Vlanif2]dhcp</span> <span class="string">relay server-ip 192.168.2.254</span></span><br><span class="line"><span class="attr">[S1-Vlanif2]quit</span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">Vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif3]dhcp</span> <span class="string">select relay </span></span><br><span class="line"><span class="meta">[S1-Vlanif3]dhcp</span> <span class="string">relay server-ip 192.168.2.254		</span></span><br><span class="line"><span class="attr">[S1-Vlanif3]quit</span></span><br></pre></td></tr></table></figure>

<h2 id="4-5测试"><a href="#4-5测试" class="headerlink" title="4.5测试"></a>4.5测试</h2><p>在PC3的命令行输入ipconfig命令查看机器的ip分配情况：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/12.png" class>

<p>在PC4的命令行输入ipconfig命令查看机器的ip分配情况：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/13.png" class>

<p>用PC3 Ping PC4 测试网络连通性，结果如下：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/14.png" class>

<h2 id="4-6DHCP报文捕获和分析"><a href="#4-6DHCP报文捕获和分析" class="headerlink" title="4.6DHCP报文捕获和分析"></a>4.6DHCP报文捕获和分析</h2><h3 id="4-6-1报文捕获"><a href="#4-6-1报文捕获" class="headerlink" title="4.6.1报文捕获"></a>4.6.1报文捕获</h3><p>先将PC3的ip获取方式设置为静态，然后在路由器R1的GE0/0/0端口上进行报文捕获，再将PC3的ip获取方式设置为DHCP动态获取，去触发3.2.2工作流程中的报文（<strong>DHCP DISCOVER</strong>，<strong>DHCP OFFER</strong> ，<strong>DHCP REQUEST</strong>，<strong>DHCP ACK</strong>），再将PC3的ip获取方式设置为静态，模拟设备客户端下线行为，触发<strong>DHCP RELEASE</strong>报文。共捕获到5中类型的报文，如下图所示：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/15.png" class>

<h3 id="4-6-2报文分析"><a href="#4-6-2报文分析" class="headerlink" title="4.6.2报文分析"></a>4.6.2报文分析</h3><ul>
<li><p><strong>DHCP DISCOVER</strong>：客户端开始DHCP过程发送的包，是DHCP协议的开始。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/16.png" class>
</li>
<li><p><strong>DHCP OFFER</strong> ：服务器接收到DHCP DISCOVER之后做出的响应，它包括了给予客户端的IP（yiaddr）、客户端的MAC地址、租约过期时间、服务器的识别符以及其他信息。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/17.png" class>
</li>
<li><p><strong>DHCP REQUEST</strong> ：客户端对于服务器发出的DHCP OFFER所做出的响应。在续约租期的时候同样会使用。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/18.png" class>
</li>
<li><p><strong>DHCP ACK</strong> ：服务器在接收到客户端发来的DHCP REQUEST之后发出的成功确认的报文。在建立连接的时候，客户端在接收到这个报文之后才会确认分配给它的IP和其他信息可以被允许使用。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/19.png" class>
</li>
<li><p><strong>DHCP RELEASE</strong> ：一般出现在客户端关机、下线等状况。这个报文将会使DHCP服务器释放发出此报文的客户端的IP地址。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/20.png" class></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ARM9指令操作系统</title>
    <url>/2019/11/04/ARM9%E6%8C%87%E4%BB%A4%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><strong>注：</strong>为了迅速的复习完ARM9的寻址方式以及基本指令集，在此只做指令演示，不做详细的文字叙述。</p><h1 id="一、ARM处理器的寻址方式"><a href="#一、ARM处理器的寻址方式" class="headerlink" title="一、ARM处理器的寻址方式"></a>一、ARM处理器的寻址方式</h1><ul>
<li><h2 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R2,R3		;R2&lt;-R3		R3中的内容赋给R2</span><br><span class="line">ADD R2,R3,R4    ;R2&lt;-R3+R4	R3+R4中的内容相加，结果赋给R2</span><br></pre></td></tr></table></figure>



</li>
</ul><a id="more"></a>

<ul>
<li><h2 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD R1.R1,#1234		:R1&lt;-R1+1234</span><br><span class="line">ADD R1,R1,#0x7f		;R1&lt;-R1+0x7f</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R1,[R2]		;R1&lt;-[R2]		R2中的内容为地址，该指令实现将该地址中的数据传送到R1</span><br><span class="line">STR R1,[R2]		;[R2]&lt;-R1</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h2 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R0,[R1,#8]		;R0&lt;-[R1+8]	R1的内容加上8形成的操作数的有效地址，并将地址中的操作数存入R0中</span><br><span class="line">LDR R0,[R1,#8]!		;R0&lt;-[R1+8],R1&lt;-R1+8</span><br><span class="line">LDR R0,[R1],#2		;R0&lt;-[R1],R1&lt;-R1+2</span><br><span class="line">LDR R0,[R1,R2]		;R0&lt;-[R1+R2]</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h2 id="寄存器移位寻址"><a href="#寄存器移位寻址" class="headerlink" title="寄存器移位寻址"></a>寄存器移位寻址</h2><p><strong>1.LSL(或ASL)操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，LSL（或ASL）操作数</span><br></pre></td></tr></table></figure>

<p>作用：可完成对通用寄存器中的内容进行逻辑（或算术）的左移操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,LSL#4		;将R1中的内容逻辑左移四位后送给R0</span><br></pre></td></tr></table></figure>

<p><strong>2.LSR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，LSR操作数</span><br></pre></td></tr></table></figure>

<p>作用：可完成对通用寄存器中的内容进行逻辑的右移操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,LSR#4		;将R1中的内容逻辑右移四位后送给R0</span><br></pre></td></tr></table></figure>

<p><strong>3.ROR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，ROR操作数</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行循环右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,ROR#4		;R1的内容循环右移4位后传到R0中</span><br></pre></td></tr></table></figure>

<p><strong>4.ASR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，ASR操作数</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,ASR#4		;R1的内容右移4位后传到R0中，符号为保持不变。</span><br></pre></td></tr></table></figure>

<p><strong>5.RRX操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，RRX</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行带扩充的循环右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,RRX		;R1的内容进行带扩充的循环右移1位后传到R0中</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h2><ul>
<li><h3 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h3></li>
<li><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3></li>
</ul>
</li>
</ul>
<h1 id="二、ARM指令集"><a href="#二、ARM指令集" class="headerlink" title="二、ARM指令集"></a>二、ARM指令集</h1><ul>
<li><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;opcode&gt;&#123;&lt;code&gt;&#125;&#123;s&#125;&lt;Rd&gt;,&lt;Rn&gt;,&lt;op2&gt;</span><br></pre></td></tr></table></figure>

<p>各项介绍如下：</p>
<p><opcode>:操作码，如ADD等操作指令。</opcode></p>
<p>{<code>}：决定指令执行的条件码。</code></p>
<p>{s}：决定指令执行是否影响CPRS寄存器的值。</p>
<p><rd>：目的寄存器。</rd></p>
<p><rn>：第一个操作数，为寄存器。</rn></p>
<p><op2>：第二个操作数。</op2></p>
</li>
</ul>
<p><strong>注</strong>：opcode、cond与s之间没有分隔符，s与Rd之间用空格隔开。</p>
<ul>
<li><h2 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h2><p>如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">条件码</th>
<th align="center">助记符后缀</th>
<th align="center">标志</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000</td>
<td align="center">EQ</td>
<td align="center">Z置位</td>
<td align="center">相等</td>
</tr>
<tr>
<td align="center">0001</td>
<td align="center">NE</td>
<td align="center">Z清零</td>
<td align="center">不相等</td>
</tr>
<tr>
<td align="center">0010</td>
<td align="center">CS</td>
<td align="center">C置位</td>
<td align="center">无符号数大于或等于</td>
</tr>
<tr>
<td align="center">0011</td>
<td align="center">CC</td>
<td align="center">C清零</td>
<td align="center">无符号数小于</td>
</tr>
<tr>
<td align="center">0100</td>
<td align="center">MI</td>
<td align="center">N置位</td>
<td align="center">负数</td>
</tr>
<tr>
<td align="center">0101</td>
<td align="center">PL</td>
<td align="center">N清零</td>
<td align="center">正数或零</td>
</tr>
<tr>
<td align="center">0110</td>
<td align="center">VS</td>
<td align="center">V置位</td>
<td align="center">溢出</td>
</tr>
<tr>
<td align="center">0111</td>
<td align="center">VC</td>
<td align="center">V清零</td>
<td align="center">未溢出</td>
</tr>
<tr>
<td align="center">1000</td>
<td align="center">HI</td>
<td align="center">C置位Z清零</td>
<td align="center">无符号数大于</td>
</tr>
<tr>
<td align="center">1001</td>
<td align="center">LS</td>
<td align="center">C清零Z置位</td>
<td align="center">无符号数小于或等于</td>
</tr>
<tr>
<td align="center">1010</td>
<td align="center">GE</td>
<td align="center">N等于V</td>
<td align="center">带符号数大于或等于</td>
</tr>
<tr>
<td align="center">1011</td>
<td align="center">LT</td>
<td align="center">N不等于V</td>
<td align="center">带符号数小于</td>
</tr>
<tr>
<td align="center">1100</td>
<td align="center">GT</td>
<td align="center">Z清零且（N等于V）</td>
<td align="center">带符号数大于</td>
</tr>
<tr>
<td align="center">1101</td>
<td align="center">LE</td>
<td align="center">Z置位或（N不等V）</td>
<td align="center">带符号数小于或等于</td>
</tr>
<tr>
<td align="center">1110</td>
<td align="center">AL</td>
<td align="center">忽略</td>
<td align="center">无条件执行</td>
</tr>
</tbody></table>
</li>
<li><h2 id="ARM存储器访问指令"><a href="#ARM存储器访问指令" class="headerlink" title="ARM存储器访问指令"></a>ARM存储器访问指令</h2><p><strong>1.单一数据加载/存储指令</strong></p>
<p><strong><1>.LDR指令</1></strong></p>
<p>LDR的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125; 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R3,[R4]			;将存储器地址为R4中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,R2]		;将存储器地址为R1+R2中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,#8]		;将存储器地址为R1+8中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,R2]!		;将存储器地址为R1中的字数据读入R3寄存器中,将新地址R1+R2写入R1</span><br></pre></td></tr></table></figure>

<p>LDR指令是字加载指令。</p>
<p><strong><2>.LDRB指令</2></strong></p>
<p>LDRB的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;B 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDRB R3,[R1]		;将存储器地址为R4中的字数据读入R3寄存器中,并将R3的高24位清零</span><br></pre></td></tr></table></figure>

<p>LDRB指令是字加载指令，同时将寄存器的高24位清零。</p>
<p><strong><3>.LDRH指令</3></strong></p>
<p>LDRH的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;H 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDRH R3,[R1]		;将存储器地址为R4中的字数据读入R3寄存器中,并将R3的高16位清零</span><br></pre></td></tr></table></figure>

<p>LDRB指令是字加载指令，同时将寄存器的高16位清零。</p>
<p><strong><4>.STR指令</4></strong></p>
<p>STR的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125; 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR R3,[R1],#8		;将R3中的字数据写入以R1为地址的存储器中，并将新地址R1+8写入R1</span><br></pre></td></tr></table></figure>

<p>STR指令是字存储指令，从源寄存器中将一个32位的字数据传送到寄存器中。</p>
<p><strong><5>.STRB指令</5></strong></p>
<p>STRB的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125;B 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRB R3,[R1,#8]		;将R3中的字数据写入以R1+8为地址的存储器中</span><br></pre></td></tr></table></figure>

<p>STRB指令是无符号字节存储指令，从源寄存器中将一个8位的字节数据传送到寄存器中。该字节数据是源寄存器中的低8位。</p>
<p><strong><6>.STRH指令</6></strong></p>
<p>STRH的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125;H 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRH R3,[R1]		;将R3中的半字数据写入以R1为地址的存储器中</span><br></pre></td></tr></table></figure>

<p>STRH指令是无符号半字存储指令，从源寄存器中将一个16位的半字数据传送到寄存器中。该字节数据是源寄存器中的低16位。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>ARM9指令操作</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC/GC</title>
    <url>/2020/02/25/JUC-GC/</url>
    <content><![CDATA[<h1 id="1-JUC（java-util-concurrent）"><a href="#1-JUC（java-util-concurrent）" class="headerlink" title="1.JUC（java.util.concurrent）"></a>1.JUC（java.util.concurrent）</h1><p>高并发、并行问题</p><h2 id="1-1java-util-concurrent-atomic"><a href="#1-1java-util-concurrent-atomic" class="headerlink" title="1.1java.util.concurrent.atomic"></a>1.1java.util.concurrent.atomic</h2><h3 id="1-1-1Class-AtomicIntefger"><a href="#1-1-1Class-AtomicIntefger" class="headerlink" title="1.1.1Class AtomicIntefger"></a>1.1.1Class AtomicIntefger</h3><p>原子引用</p><p>1.你对volatile的理解？</p><ul>
<li><p>volatile是java虚拟机提供的轻量级的同步机制。有三大特性：</p>
<ul>
<li><p>保证可见性。</p>
<p>代码验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="comment">//int number = 0;</span></span><br><span class="line">    <span class="comment">//volatile 实现了线程的可见性 及一个线程将拷贝的值修改后刷回修改了主内存的值，对其他线程可见。</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTo60</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 验证volatile的可见性</span></span><br><span class="line"><span class="comment"> * 1.1 假如 int number = 0；number变量之前没加volatile关键字修饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();<span class="comment">//资源类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t come in"</span>);</span><br><span class="line">            <span class="comment">//暂停线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myData.addTo60();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t update number value:"</span>+myData.number);</span><br><span class="line">        &#125;,<span class="string">"AAA"</span>).start();</span><br><span class="line">        <span class="comment">//第二个线程是main线程</span></span><br><span class="line">        <span class="keyword">while</span> (myData.number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//main线程等待，直到number值不为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t mission is over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不保证原子性。</p>
</li>
</ul>
</li>
</ul><a id="more"></a>



<ul>
<li>禁止指令重排。</li>
</ul>
<ul>
<li>JVM（java虚拟机）</li>
</ul>
<ul>
<li><p>JMM（java内存模型）</p>
<p><img src="/2020/02/25/JUC-GC/C:%5CUsers%5C12173%5CDesktop%5Cimage%5CJMM01.png" alt="JMM"></p>
<p><img src="/2020/02/25/JUC-GC/C:%5CUsers%5C12173%5CDesktop%5Cimage%5CJMM.png" alt="JMM"></p>
<p>JMM三大特性：可见性、原子性、有序性。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>DES加解密算法浅析</title>
    <url>/2020/02/23/DES%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="DES加解密算法浅析"><a href="#DES加解密算法浅析" class="headerlink" title="DES加解密算法浅析"></a>DES加解密算法浅析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>DES是一个分组加密算法，它以64位为分组对数据加密。同时DES也是一个对称算法：加密和解密用的是同一个算法。DES是一个包含16个阶段的“替换–置换”的分组加密算法，64位的分组明文序列作为加密算法的输入，经过16轮加密得到64位的密文序列。</p><p>算法原理看下图：</p><p><img src="https://s2.ax1x.com/2019/11/09/MmQzp6.png" alt="MmQzp6.png"></p><h2 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h2><p>DES算法主要分为3部分：加解密运算、f函数的处理、轮子密钥的生成，从右往左分别简单介绍一下。</p><a id="more"></a>



<p>轮子密钥的生成</p>
<p>数据表1</p>
<p> //PC-1</p>
<p>​    private int[] PC1={57,49,41,33,25,17,9,</p>
<p>​                       1,58,50,42,34,26,18,</p>
<p>​                       10,2,59,51,43,35,27,</p>
<p>​                        19,11,3,60,52,44,36,</p>
<p>​                       63,55,47,39,31,23,15,</p>
<p>​                       7,62,54,46,38,30,22,</p>
<p>​                       14,6,61,53,45,37,29,</p>
<p>​                       21,13,5,28,20,12,4};</p>
<p>​    //PC-2</p>
<p>​    private int[] PC2={14,17,11,24,1,5,3,28,</p>
<p>​                       15,6,21,10,23,19,12,4,</p>
<p>​                       26,8,16,7,27,20,13,2,</p>
<p>​                       41,52,31,37,47,55,30,40,</p>
<p>​                       51,45,33,48,44,49,39,56,</p>
<p>​                       34,53,46,42,50,36,29,32};</p>
<p>​    //Schedule of Left Shifts</p>
<p>​    private int[] LFT={1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};</p>
<p>16个子密钥的生成主要是利用了数据表1中的数表，首先将64位的初始密钥利用PC1压缩置换位56位的密钥，然后将其一分为二，这里记为C0和D0。这里28位的C0和28位的D0分别根据LET数组相应位置的值进行左移位得到C1和D1。这是将C1和D1合并根据PC2进行压缩置换得到48位的子密钥，而且注意C1和D1作为下轮的输入以用来产生下一个子密钥。</p>
<p>f函数的运算</p>
<p>数据表2</p>
<p>//E扩展</p>
<p>​    private int[] E={32,1,2,3,4,5,</p>
<p>​                      4,5,6,7,8,9,</p>
<p>​                     8,9,10,11,12,13,</p>
<p>​                     12,13,14,15,16,17,</p>
<p>​                     16,17,18,19,20,21,</p>
<p>​                     20,21,22,23,24,25,</p>
<p>​                     24,25,26,27,28,29,</p>
<p>​                     28,29,30,31,32,1};</p>
<p>​    //P置换</p>
<p>​    private int[] P={16,7,20,21,29,12,28,17,</p>
<p>​                      1,15,23,26,5,18,31,10,</p>
<p>​                      2,8,24,14,32,27,3,9,</p>
<p>​                      19,13,30,6,22,11,4,25};</p>
<p>​    private static final int[][][] S_Box = {//S-盒</p>
<p>​            {// S_Box[1]</p>
<p>​                    { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },</p>
<p>​                    { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },</p>
<p>​                    { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },</p>
<p>​                    { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } },</p>
<p>​            { // S_Box[2]</p>
<p>​                    { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },</p>
<p>​                    { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },</p>
<p>​                    { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },</p>
<p>​                    { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 } },</p>
<p>​            { // S_Box[3]</p>
<p>​                    { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },</p>
<p>​                    { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },</p>
<p>​                    { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },</p>
<p>​                    { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 } },</p>
<p>​            { // S_Box[4]</p>
<p>​                    { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },</p>
<p>​                    { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },</p>
<p>​                    { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },</p>
<p>​                    { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 } },</p>
<p>​            { // S_Box[5]</p>
<p>​                    { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },</p>
<p>​                    { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },</p>
<p>​                    { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },</p>
<p>​                    { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 } },</p>
<p>​            { // S_Box[6]</p>
<p>​                    { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },</p>
<p>​                    { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },</p>
<p>​                    { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },</p>
<p>​                    { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 } },</p>
<p>​            { // S_Box[7]</p>
<p>​                    { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },</p>
<p>​                    { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },</p>
<p>​                    { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },</p>
<p>​                    { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 } },</p>
<p>​            { // S_Box[8]</p>
<p>​                    { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },</p>
<p>​                    { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },</p>
<p>​                    { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },</p>
<p>​                    { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } }</p>
<p>​    };</p>
<p>从原理图中可以看到，f函数的输入是明文分组的右半分组记为R和子密钥记为K。32位的R首先要利用数据表2中的E进行E盒扩展变换得到48位的数据，这里记为RE。然后将RE与K进行异或运算并将异或结果利用数据表2中的S_BOX进行S盒替换，得到48位的运算结果记为RS。再将RS利用数据表2中的P进行P盒替换，得到32位的最终结果，记为RF。到这里f函数的运算任务就完成了。</p>
<p>加解密运算</p>
<p> //初始置换</p>
<p>​    private int[] IP={58,50,42,34,26,18,10,2,</p>
<p>​                     60,52,44,36,28,20,12,4,</p>
<p>​                     62,54,46,38,30,22,14,6,</p>
<p>​                     64,56,48,40,32,24,16,8,</p>
<p>​                     57,49,41,33,25,17,9,1,</p>
<p>​                     59,51,43,35,27,19,11,3,</p>
<p>​                     61,53,45,37,29,21,13,5,</p>
<p>​                     63,55,47,39,31,23,15,7};</p>
<p>​    //逆初始置换</p>
<p>​    private int[] IP_1={40,8,48,16,56,24,64,32,</p>
<p>​                       39,7,47,15,55,23,63,31,</p>
<p>​                       38,6,46,14,54,22,62,30,</p>
<p>​                       37,5,45,13,53,21,61,29,</p>
<p>​                       36,4,44,12,52,20,60,28,</p>
<p>​                       35,3,43,11,51,19,59,27,</p>
<p>​                       34,2,42,10,50,18,58,26,</p>
<p>​                       33,1,41,9,49,17,57,25};</p>
<p>在第一轮中将64位的明文分为L0和R0,则加密运算如下：<br> L1=R0<br> R1=L0⊕f(R0,K0)<br> 然后按此公式进行16轮的运算。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>CustomDES</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.des;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDES</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] IP = &#123;<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">            <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//逆初始置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] IP_1 = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">            <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">            <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">            <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">            <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;<span class="comment">//手残，数组数据没写全</span></span><br><span class="line">    <span class="comment">//E扩展</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] E = &#123;<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">            <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">            <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">            <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//P置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] P = &#123;<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][][] S_Box = &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//PC-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] PC1 = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">//PC-2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] PC2 = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line">    <span class="comment">//Schedule of Left Shifts</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] LFT = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密轮数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] keys = <span class="keyword">new</span> String[LOOP_NUM];</span><br><span class="line">    <span class="keyword">private</span> String[] pContent;</span><br><span class="line">    <span class="keyword">private</span> String[] cContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> origin_length;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 16个子密钥</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] sub_key = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>][<span class="number">48</span>];</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p_origin_length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDES</span><span class="params">(String key, String content)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        p_origin_length = content.getBytes().length;</span><br><span class="line">        generateKeys(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****拆分分组****/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] deal(<span class="keyword">byte</span>[] p, <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        origin_length = p.length;</span><br><span class="line">        <span class="keyword">int</span> g_num;</span><br><span class="line">        <span class="keyword">int</span> r_num;</span><br><span class="line">        g_num = origin_length / <span class="number">8</span>;</span><br><span class="line">        r_num = <span class="number">8</span> - (origin_length - g_num * <span class="number">8</span>);<span class="comment">//8不填充</span></span><br><span class="line">        <span class="keyword">byte</span>[] p_padding;</span><br><span class="line">        <span class="comment">/****填充********/</span></span><br><span class="line">        <span class="keyword">if</span> (r_num &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            p_padding = <span class="keyword">new</span> <span class="keyword">byte</span>[origin_length + r_num];</span><br><span class="line">            System.arraycopy(p, <span class="number">0</span>, p_padding, <span class="number">0</span>, origin_length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r_num; i++) &#123;</span><br><span class="line">                p_padding[origin_length + i] = (<span class="keyword">byte</span>) r_num;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p_padding = p;</span><br><span class="line">        &#125;</span><br><span class="line">        g_num = p_padding.length / <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] f_p = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] result_data = <span class="keyword">new</span> <span class="keyword">byte</span>[p_padding.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_num; i++) &#123;</span><br><span class="line">            System.arraycopy(p_padding, i * <span class="number">8</span>, f_p, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            System.arraycopy(descryUnit(f_p, sub_key, flag), <span class="number">0</span>, result_data, i * <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;<span class="comment">//解密</span></span><br><span class="line">            <span class="keyword">byte</span>[] p_result_data = <span class="keyword">new</span> <span class="keyword">byte</span>[p_origin_length];</span><br><span class="line">            System.arraycopy(result_data, <span class="number">0</span>, p_result_data, <span class="number">0</span>, p_origin_length);</span><br><span class="line">            <span class="keyword">return</span> p_result_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result_data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] descryUnit(<span class="keyword">byte</span>[] p, <span class="keyword">int</span> k[][], <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] p_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            String p_b = Integer.toBinaryString(p[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">while</span> (p_b.length() % <span class="number">8</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                p_b = <span class="string">"0"</span> + p_b;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(p_b);</span><br><span class="line">        &#125;</span><br><span class="line">        String p_str = stringBuilder.toString();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> p_t = Integer.valueOf(p_str.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (p_t == <span class="number">48</span>) &#123;</span><br><span class="line">                p_t = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p_t == <span class="number">49</span>) &#123;</span><br><span class="line">                p_t = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p_bit[i] = p_t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/***IP置换***/</span></span><br><span class="line">        <span class="keyword">int</span>[] p_IP = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            p_IP[i] = p_bit[IP[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123; <span class="comment">// 加密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">                L(p_IP, i, flag, k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123; <span class="comment">// 解密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">15</span>; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">                L(p_IP, i, flag, k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; IP_1.length; i++) &#123;</span><br><span class="line">            c[i] = p_IP[IP_1[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] c_byte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            c_byte[i] = (<span class="keyword">byte</span>) ((c[<span class="number">8</span> * i] &lt;&lt; <span class="number">7</span>) + (c[<span class="number">8</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">6</span>) + (c[<span class="number">8</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">5</span>) + (c[<span class="number">8</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">4</span>) + (c[<span class="number">8</span> * i + <span class="number">4</span>] &lt;&lt; <span class="number">3</span>) + (c[<span class="number">8</span> * i + <span class="number">5</span>] &lt;&lt; <span class="number">2</span>) + (c[<span class="number">8</span> * i + <span class="number">6</span>] &lt;&lt; <span class="number">1</span>) + (c[<span class="number">8</span> * i + <span class="number">7</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c_byte;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">L</span><span class="params">(<span class="keyword">int</span>[] M, <span class="keyword">int</span> times, <span class="keyword">int</span> flag, <span class="keyword">int</span>[] keyarray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] L0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] R0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] L1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] R1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        System.arraycopy(M, <span class="number">0</span>, L0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        System.arraycopy(M, <span class="number">32</span>, R0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        L1 = R0;</span><br><span class="line">        f = fFuction(R0, keyarray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">            R1[j] = L0[j] ^ f[j];</span><br><span class="line">            <span class="keyword">if</span> (((flag == <span class="number">0</span>) &amp;&amp; (times == <span class="number">0</span>)) || ((flag == <span class="number">1</span>) &amp;&amp; (times == <span class="number">15</span>))) &#123;</span><br><span class="line">                M[j] = R1[j];</span><br><span class="line">                M[j + <span class="number">32</span>] = L1[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                M[j] = L1[j];</span><br><span class="line">                M[j + <span class="number">32</span>] = R1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] fFuction(<span class="keyword">int</span>[] r_content, <span class="keyword">int</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] e_k = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">48</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E.length; i++) &#123;</span><br><span class="line">            e_k[i] = r_content[E[i] - <span class="number">1</span>] ^ key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/********S盒替换:由48位变32位，现分割e_k，然后再进行替换*********/</span></span><br><span class="line">        <span class="keyword">int</span>[][] s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span>[] s_after = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            System.arraycopy(e_k, i * <span class="number">6</span>, s[i], <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">            <span class="keyword">int</span> r = (s[i][<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) + s[i][<span class="number">5</span>];<span class="comment">//横坐标</span></span><br><span class="line">            <span class="keyword">int</span> c = (s[i][<span class="number">1</span>] &lt;&lt; <span class="number">3</span>) + (s[i][<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) + (s[i][<span class="number">3</span>] &lt;&lt; <span class="number">1</span>) + s[i][<span class="number">4</span>];<span class="comment">//纵坐标</span></span><br><span class="line">            String str = Integer.toBinaryString(S_Box[i][r][c]);</span><br><span class="line">            <span class="keyword">while</span> (str.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                str = <span class="string">"0"</span> + str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Integer.valueOf(str.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">48</span>) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">49</span>) &#123;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                s_after[<span class="number">4</span> * i + j] = p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/******S盒替换结束*******/</span></span><br><span class="line">        <span class="comment">/****P盒替代****/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; P.length; i++) &#123;</span><br><span class="line">            result[i] = s_after[P[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成子密钥</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateKeys</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (key.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            key = key + key;</span><br><span class="line">        &#125;</span><br><span class="line">        key = key.substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] keys = key.getBytes();</span><br><span class="line">        <span class="keyword">int</span>[] k_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="comment">//取位值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            String k_str = Integer.toBinaryString(keys[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">if</span> (k_str.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> k_size = k_str.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">8</span> - k_size; t++) &#123;</span><br><span class="line">                    k_str = <span class="string">"0"</span> + k_str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Integer.valueOf(k_str.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">48</span>) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">49</span>) &#123;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                k_bit[i * <span class="number">8</span> + j] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k_bit是初始的64位长密钥，下一步开始进行替换</span></span><br><span class="line">        <span class="comment">/***********PC-1压缩****************/</span></span><br><span class="line">        <span class="keyword">int</span>[] k_new_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">56</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PC1.length; i++) &#123;</span><br><span class="line">            k_new_bit[i] = k_bit[PC1[i] - <span class="number">1</span>];<span class="comment">/////这个减1注意点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**************************/</span></span><br><span class="line">        <span class="keyword">int</span>[] c0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">        <span class="keyword">int</span>[] d0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">        System.arraycopy(k_new_bit, <span class="number">0</span>, c0, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        System.arraycopy(k_new_bit, <span class="number">28</span>, d0, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] c1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">            <span class="keyword">int</span>[] d1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">            <span class="keyword">if</span> (LFT[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                System.arraycopy(c0, <span class="number">1</span>, c1, <span class="number">0</span>, <span class="number">27</span>);</span><br><span class="line">                c1[<span class="number">27</span>] = c0[<span class="number">0</span>];</span><br><span class="line">                System.arraycopy(d0, <span class="number">1</span>, d1, <span class="number">0</span>, <span class="number">27</span>);</span><br><span class="line">                d1[<span class="number">27</span>] = d0[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LFT[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                System.arraycopy(c0, <span class="number">2</span>, c1, <span class="number">0</span>, <span class="number">26</span>);</span><br><span class="line">                c1[<span class="number">26</span>] = c0[<span class="number">0</span>];</span><br><span class="line">                c1[<span class="number">27</span>] = c0[<span class="number">1</span>];<span class="comment">//这里手残之前写成c1</span></span><br><span class="line"></span><br><span class="line">                System.arraycopy(d0, <span class="number">2</span>, d1, <span class="number">0</span>, <span class="number">26</span>);</span><br><span class="line">                d1[<span class="number">26</span>] = d0[<span class="number">0</span>];</span><br><span class="line">                d1[<span class="number">27</span>] = d0[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"LFT Error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">56</span>];</span><br><span class="line">            System.arraycopy(c1, <span class="number">0</span>, tmp, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">            System.arraycopy(d1, <span class="number">0</span>, tmp, <span class="number">28</span>, <span class="number">28</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; PC2.length; j++) &#123;<span class="comment">//PC2压缩置换</span></span><br><span class="line">                sub_key[i][j] = tmp[PC2[j] - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            c0 = c1;</span><br><span class="line">            d0 = d1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CustomDESTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.des;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDESTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String origin=<span class="string">"https://www.lisongbai.top"</span>;</span><br><span class="line">        System.out.println(<span class="string">"原文：\n"</span>+origin);</span><br><span class="line">        CustomDES customDES=<span class="keyword">new</span> CustomDES(<span class="string">"LCX"</span>,origin);</span><br><span class="line">        <span class="keyword">byte</span>[] c=customDES.deal(origin.getBytes(),<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"密文：\n"</span>+<span class="keyword">new</span> String(c));</span><br><span class="line">        <span class="keyword">byte</span>[]p=customDES.deal(c,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] p_d=<span class="keyword">new</span> <span class="keyword">byte</span>[origin.getBytes().length];</span><br><span class="line">        System.arraycopy(p,<span class="number">0</span>,p_d,<span class="number">0</span>,origin.getBytes().length);</span><br><span class="line">        System.out.println(<span class="string">"明文：\n"</span>+<span class="keyword">new</span> String(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果如下：</p>
<p><a href="https://imgchr.com/i/Kj3ioq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/03/Kj3ioq.md.png" alt="Kj3ioq.md.png"></a></p>
<h2 id="感悟心得"><a href="#感悟心得" class="headerlink" title="感悟心得"></a>感悟心得</h2><p>​        通过自己动手实现DES加密解密算法，我对DES的加密解密过程有了更深的认识，之前在课堂上知识大致了解了一下流程，很多细节方面的知识并不是很了解，在这次大作业中，查阅了很多资料，对DES加密算法有了更多的体会。<br>​        DES加密是堆成加密的经典算法，通过它的实现过程发现它使用了很多次置换法，采用了混乱和扩散的组合，每个组合先替换后置换，共进行了16轮，其中充分利用了S盒的非对称性运算，大大增加了破解难度，在没有密钥的情况下，破解者之恶能通过穷举法来破解密钥，这种破解方法费时费力，所以DES的安全性还是挺高的。<br>通过这此大作业，我体会到了密码学中加密设计的有趣之处，在只接触到理论知识的时候，觉得加密算法只是枯燥的迭代运算，实践后才觉得枯燥的迭代运算正是它设计的奥秘所在。在以后的学习过程中，努力做到知其然并知其所以然。</p>
]]></content>
      <categories>
        <category>加密算法</category>
        <category>DES</category>
      </categories>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java框架学习&lt;一&gt;</title>
    <url>/2020/01/11/Java%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、JavaSE"><a href="#一、JavaSE" class="headerlink" title="一、JavaSE"></a>一、JavaSE</h1><h2 id="遗忘知识回顾"><a href="#遗忘知识回顾" class="headerlink" title="遗忘知识回顾"></a>遗忘知识回顾</h2><ul>
<li><p><strong>java基本数据类型：byte、char、short、int、long、float、double、boolean</strong></p>
</li>
<li><p><strong>对应包装类：Byte、Character、Short、Integer、Long、Float、Double、Boolean</strong></p>
</li>
<li><p><strong>访问修饰符范围从大到小：public、protected、default、private。如下图所示：</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5ijzt.png" alt="l5ijzt.png"></p>
</li>
<li><p><strong>标识接口</strong></p>
<p>标识接口是没有任何方法和属性的接口。标识接口不对实现它的类有任何语义上的要求，它仅仅表明实现它的类属于一个特定的类型。</p>
<p>　标接口在Java语言中有一些很著名的应用，例如我们常用的ArrayList类，它的类实现接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>仔细看 RandomAccess、RandomAccess、Serializable的接口可以看到，内部都是一些空接口，没有定义接口方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface RandomAccess &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Cloneable &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Serializable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 标识接口，<strong>当一个类实现了一个标识接口之后就像是给自己打了个标签。</strong></p>
<p>　　打个比喻，不是很恰当。就像是一个人穿了件名牌衣服（实现了标识接口），别人一看他穿的衣服（标识接口）就知道他的品味、身份（特性）。</p>
</li>
<li><p><strong>java反射机制</strong></p>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
</li>
<li><p><strong>注解</strong></p>
</li>
</ul><a id="more"></a>
<h1 id="二、Java主流框架"><a href="#二、Java主流框架" class="headerlink" title="二、Java主流框架"></a>二、Java主流框架</h1><h2 id="框架的作用："><a href="#框架的作用：" class="headerlink" title="框架的作用："></a>框架的作用：</h2><p>对原生态的java代码进行封装，简化程序员操作。</p>
<ul>
<li><p><strong>框架是什么：</strong></p>
<p>框架就是一套规范。既然是规范，你使用这个框架就要遵守这个框架所规定的约束。在Java开发中，框架是用一套规则+一群jar包来表示的。</p>
</li>
<li><p><strong>意义：</strong></p>
<p>框架不仅仅只完成这些简单的约束，更重要的是，框架为我们封装好了一些冗余，且重用率低的代码。并且使用反射与动态代理机制，将代码实现了通用性。比如如果你说servlet开发，你需要在servlet获取表单的参数，每次都要获取很麻烦，而struts底层就使用反射机制和拦截器机制帮助我们获取表单的值，我们就不用每次都手写那些代码了，简化了开发，当然你必须遵守一些规定来配置。</p>
<p>还有比如hibernate，它提供了一些通用性很强的对数据库的增删改差，如果你使用jdbc每次做一些简单的crud的时候都必须写sql，但使用hibernate就不需要这么麻烦了，直接save,update就可以了。当然，你还是要遵循其一些规范而配置。同理spring也是如此。</p>
</li>
</ul>
<h2 id="Java最原始的框架"><a href="#Java最原始的框架" class="headerlink" title="Java最原始的框架"></a>Java最原始的框架</h2><p><strong>整合框架：SSH=spring+struts2+hibernate</strong></p>
<h3 id="spring框架"><a href="#spring框架" class="headerlink" title="spring框架"></a><strong>spring框架</strong></h3><p><strong>1.spring简介</strong><br>spring 是一个轻量级的，基于IOC和AOP核心技术的企业级开源开发框架</p>
<p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p>
<p>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </p>
<p><strong>Spring目的</strong>：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明 管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </p>
<p><strong>注意：</strong>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<p><strong>2.spring的主要特征</strong><br><strong>（1）轻量级</strong>：spring是一个轻量级的开发框架，基本版本大约只有2M</p>
<p><strong>（2）IOC：</strong>控制反转，应用程序中对象之间的依赖是由spring 来控制的</p>
<p><strong>（3）AOP：</strong>面向切面编程，spring支持面向切面编程，这样可以将业务逻辑和系统服务分开，分离</p>
<p><strong>（4）容器：</strong>包含并管理应用程序中对象的生命周期和配置信息</p>
<p><strong>（5）MVC思想：</strong>spring也是基于MVC思想的框架，也遵循模型-视图-控制器这三个层次</p>
<p><strong>（6）事务：</strong>spring提供一个持续化的接口，可以上至扩展到本地事务下至扩展到全局事务</p>
<p><strong>（7）异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，hibernate,or JDO抛出的）转化为一致的unchecked 异常。</p>
<p> <strong>3.spring优缺点</strong></p>
<p><strong>优点：</strong></p>
<p>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。<br>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。<br>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属<br>性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。<br>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。<br>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。<br>使用Spring构建的应用程序易于单元测试。<br>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。<br>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。<br>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。<br><strong>缺点：</strong><br>1.jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器</p>
<p>2.Spring不支持分布式，这也是EJB仍然在用的原因之一。</p>
<h3 id="Struts框架"><a href="#Struts框架" class="headerlink" title="Struts框架"></a>Struts框架</h3><p><strong>1.structs1原理</strong><br>想要理解strusts1，我是先通过strusts1的运行原理图来理解的，然后，我们根据原理图来讲解structs1原理。</p>
<p><strong>1.1 strusts1原理图</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5ytiV.jpg" alt="l5ytiV.jpg"></p>
<p><strong>1.2 structs1原理步骤</strong><br>用户在视图层输入数据。</p>
<p>第一步：structs框架总控制器，初始化,开始读取strusts-config.xml文件。</p>
<p>struts框架的总控制器ActionServlet是一个Servlet，它在web.xml中配置成自动启动的Servlet，在启动时总控制器会读取配置文件(struts-config.xml)的配置信息，为struts中不同的模块初始化相应的对象。(面向对象思想)</p>
<p>第二步：视图层向总控制器发送Http请求</p>
<p>用户提交表单或者通过URL向WEB服务器提交请求，请求的数据用HTTP协议传给web服务器</p>
<p>第三步： Form填充</p>
<p>struts的总控制器ActionServlet在用户提交请求时将数据放到对应的form对象中的成员变量中。</p>
<p>第四步：派发请求</p>
<p>控制器根据配置信息，对象ActionConfig将请求派发到具体的Action，对应的formBean一并传给这个Action中的excute()方法。</p>
<p>第五步：处理业务</p>
<p>Action一般只包含一个excute()方法，它负责执行相应的业务逻辑(调用其它的业务模块)完毕后返回一个ActionForward对象。服务器通过ActionForward对象进行转发工作。</p>
<p>第六步：返回响应</p>
<p>Action将业务处理的不同结果返回一个目标响应对象给总控制器。</p>
<p>第七步：查找响应</p>
<p>总控制器根据Action处理业务返回的目标响应对象，找到对应的资源对象，一般情况下为jsp页面。</p>
<p>第八步:响应用户</p>
<p>目标响应对象将结果传递给资源对象，将结果展现给用户。</p>
<p><strong>1.3 structs的优缺点：</strong><br><strong>1.优点：</strong><br>  ①开源的框架，结构清晰<br>  ②是MVC的经典实现（MVC是一种思想，而不是一种技术）<br>  ③处理异常机制，实现国际化<br>  ④具有强大的标签库<br>  ⑤解决了JSP页面存在大量的JAVA代码，维护起来方便<br>  ⑥在formBean中会自动提交，不会去使用传统的get、set方法得到值、取值 </p>
<p><strong>2.缺点：</strong><br>  ①配置复杂<br>  ②测试不方便<br>  ③依赖web容器<br>  ④action是一个单例模式，必须设置为线程安全<br><strong>2.structs2原理</strong><br><strong>2.1 structs2原理图</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l56Ymd.jpg" alt="l56Ymd.jpg"></p>
<p>第一步：客户端初始化一个指向Servlet容器（例如Tomcat）的请求<br>第二步：这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）<br>第三步：接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action<br>第四步：如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy<br>第五步：ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类<br>第六步：ActionProxy创建一个ActionInvocation的实例。<br>第七步：ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。 </p>
<p>第八步：一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper </p>
<p><strong>注意：</strong>在上述过程中所有的对象（Action，Results，Interceptors，等）都是通过ObjectFactory来创建的</p>
<p><strong>2.2 structs2的优缺点：</strong><br><strong>优点：</strong><br>大量的拦截器：<br>Struts2本身提供了大量的可重用的拦截器，比如类型转换拦截器，很多时候我们从页面取得参数，这个时候它是String类型的，我们需要手动。<br>基于插件的框架：<br>Struts2是一个基于插件的框架，社区中提供了很多实用的插件，比如jfreechat/json等等，使用这些插件可以简化我们的开发，加快开发进度。<br>struts2最大的缺点莫过于在好多web服务器上支持不好，例如在websphere5.5,weblogic8.1及以前版本支持非常查，需要用最新的。<br>多种视图的支持：<br>多种视图的支持：jsp，freemarker，Veloctiy，只要你愿意，你甚至可以通过轻松的改造让它支持pdf，同一个项目中你可以支持多种视图。<br>更加的模块化：<br>与Struts1.X 相比，Struts2更加的模块化，可以轻松将配置信息按功能界限拆分成多个文件，便于管理和团队协作开发。<br>与Spring的集成：<br>与Struts1.x相比，Struts2不必再自己编写singleton，进一步的降低了程序间的耦合性，就Struts2内部本身而言，降低了框架本身的偶合性。<br>基于pojo易于测试：</p>
<p>在Struts1.x中我需要Mock出这两个Http对象，使我们很难编写Action的单元测试，与Struts1.x相比，Struts2的Action 不再依赖于HttpServletRequest和HttpServletResponse对象，使我们能够更方便的针对Action编写单元测试。</p>
<p><strong>缺点：</strong><br>Struts2中Action中取得从jsp中传过来的参数时还是有点麻烦。</p>
<p>可以为Struts2的Action中的属性配置上Getter和Setter方法，通过默认拦截器，就可以将请求参数设置到这些属性中。如果用这种方式，当请求参数很多时，Action类就会被这些表单属性弄的很臃肿，让人感觉会很乱。还有Action中的属性不但可以用来获得请求参数还可以输出到Jsp中，这样就会更乱。假设从JSP1中获得了参数money=100000，但是这个Action还要输出到JSP2中，但是输出的格式却不同，money=100,000，这样这个Action中的money中的值就变了。</p>
<p>校验还是感觉比较繁琐，感觉太烦乱，也太细化了。</p>
<p>如果校验出错的只能给用户提示一些信息。如果有多个字段，每个字段出错时返回到不同的画面，这个功能在Strut2框架下借助框架提供的校验逻辑就不容易实现。</p>
<p>安全性有待提高。</p>
<p>Struts2曝出2个高危安全漏洞，一个是使用缩写的导航参数前缀时的远程代码执行漏洞，另一个是使用缩写的重定向参数前缀时的开放式重定向漏洞。这些漏洞可使黑客取得网站服务器的“最高权限”，从而使企业服务器变成黑客手中的“肉鸡”</p>
<h3 id="hibernate框架"><a href="#hibernate框架" class="headerlink" title="hibernate框架"></a><strong>hibernate框架</strong></h3><p><strong>1.hibernate的工作原理</strong></p>
<p>第一步：Configuration.config() 来读取xml配置文件</p>
<p>第二步：Configuration.config()来读取配置文件里面的映射信息</p>
<p>第三步：创建会话工厂</p>
<p>第四步：打开会话</p>
<p>第五步：开启事务</p>
<p>第六步：持久化到数据库</p>
<p>第七步：关闭会话</p>
<p>第八步：关闭会话工厂<br><strong>2.hibernate优缺点</strong></p>
<p><strong>优点：</strong></p>
<p>1.hibernate是基于ORMapping技术的开源的框架，对JDBC进行了轻量级的封装，使用面向对象的思维来操纵数据库。 </p>
<p>2.hibernate提供了session缓存和二级缓存，对于不需要进行复杂查询的系统，性能有提升。 </p>
<p>3.低侵入式设计</p>
<p><strong>缺点：</strong></p>
<p>1.hibernate不容易上手，学习成本太高</p>
<p>2.hibernate由于不直接对底层数据库进行操作，所以不适合复杂的查询（统计）</p>
<p>3.不适合大量的聚集操作（存储过程）</p>
<p>比较难操作，比较古老，已很少使用。</p>
<h2 id="Java较新框架"><a href="#Java较新框架" class="headerlink" title="Java较新框架"></a>Java较新框架</h2><p><strong>集成框架SSM=SptingMVC+Spring+Mybiats</strong></p>
<h2 id="Java最新框架"><a href="#Java最新框架" class="headerlink" title="Java最新框架"></a>Java最新框架</h2><p><strong>Springboot</strong></p>
<h2 id="Java微服务框架"><a href="#Java微服务框架" class="headerlink" title="Java微服务框架"></a>Java微服务框架</h2><p><strong>SpringCloud</strong></p>
]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式</title>
    <url>/2019/11/18/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<hr><h1 id="一、装饰者模式"><a href="#一、装饰者模式" class="headerlink" title="一、装饰者模式"></a>一、装饰者模式</h1><p>动态地给一个对象添加一些额外地职责。就增加功能来说，Decorator模式相比生成子类来说更为灵活。</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ul>
<li>在不影响其他对象的情况下，以动态透明的方式给单个对象增加职责。</li>
<li>处理那些可以撤销的职责。</li>
<li>当不能采用生成子类的方法进行扩充时。</li>
</ul><h2 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h2><ul>
<li><p>Component</p>
<p>定义一个对象接口，可以给这些对象动态地添加职责。</p>
</li>
<li><p>ConcereteComponent</p>
<p>定义一个对象，可以给这个对象添加一些职责。</p>
</li>
<li><p>Decorator</p>
<p>维持一个指向Component对象地指针，并定义一个与Component接口一致地接口</p>
</li>
<li><p>ConcreteDecorator</p>
<p>向组件添加职责。</p>
</li>
</ul><a id="more"></a>



<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>Componet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcereteComponent</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="title">impements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(）&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        System.out.println(<span class="string">"男人在吃饭！"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Decorator</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteDecortor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        reEat();</span><br><span class="line">        System.out.println(<span class="string">"ManDecoratorA类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reEat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"再吃一顿饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"ManDecoratorB类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Man man  = <span class="keyword">new</span> Man();</span><br><span class="line">        ManDecoratorA md1 = <span class="keyword">new</span> ManDecoratorA();</span><br><span class="line">        ManDecoratorB md2 = <span class="keyword">new</span> ManDecoratorB();</span><br><span class="line">        </span><br><span class="line">        md1.setPerson(man);</span><br><span class="line">        md2.setPerson(md1);</span><br><span class="line">        md2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>result</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">男人在吃</span><br><span class="line">再吃一顿饭</span><br><span class="line">ManDecoratorA类</span><br><span class="line">===============</span><br><span class="line">ManDecoratorB类</span><br></pre></td></tr></table></figure>

<h1 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h1><p>保证一个类有且仅有一个实例化对象，提供一个访问它的全局访问点。</p>
<h2 id="适用性-1"><a href="#适用性-1" class="headerlink" title="适用性"></a>适用性</h2><ul>
<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</li>
<li>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</li>
</ul>
<h2 id="参与者-1"><a href="#参与者-1" class="headerlink" title="参与者"></a>参与者</h2><ul>
<li><p><strong>Singleton</strong></p>
<p>定义一个Instance操作，允许客户访问它的唯一实例。Instance是一个类操作。</p>
</li>
</ul>
<h2 id="单例模式特点"><a href="#单例模式特点" class="headerlink" title="单例模式特点"></a>单例模式特点</h2><ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p>
<h2 id="单例模式的线程安全问题"><a href="#单例模式的线程安全问题" class="headerlink" title="单例模式的线程安全问题"></a>单例模式的线程安全问题</h2><p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p>
<p>​        另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p>
<h2 id="单例模式的选择"><a href="#单例模式的选择" class="headerlink" title="单例模式的选择"></a>单例模式的选择</h2><p>​        我们最早使用的MVC框架Struts1中的action就是单例模式的，而到了Struts2就使用了多例。在Struts1里，当有多个请求访问，每个都会分配一个新线程，在这些线程，操作的都是同一个action对象，每个用户的数据都是不同的，而action却只有一个。到了Struts2， action对象为每一个请求产生一个实例，并不会带来线程安全问题（实际上servlet容器给每个请求产生许多可丢弃的对象，但是并没有影响到性能和垃圾回收问题，有时间会做下研究）。</p>
<h2 id="实现单例模式的方式"><a href="#实现单例模式的方式" class="headerlink" title="实现单例模式的方式"></a>实现单例模式的方式</h2><ul>
<li><strong>饿汉模式（立即加载）</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        饿汉模式在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p>
<p>​        Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p>
<ul>
<li><strong>懒汉模式（延时加载）</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 single = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        该示例虽然用延迟加载方式实现了懒汉式单例，但在多线程环境下会产生多个single对象，如何改造请看以下方式。</p>
<p><strong>使用Synchronized同步锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。</p>
<p><strong>双层校验锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双层校验锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    single = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p>
<ul>
<li><strong>静态内部类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton5 single = <span class="keyword">new</span> Singleton5();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObject.single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        静态内部类虽然保证了单例在多线程并发下的线程安全性，<em>但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的</em>。这种情况不多做说明了，使用时请注意。</p>
<ul>
<li><strong>static静态代码块</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代码块在类首次加载的时候执行一次。</p>
<ul>
<li><strong>内部枚举类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnumSingleton&#123;</span><br><span class="line">        Singleton;</span><br><span class="line">        <span class="keyword">private</span> Singleton7 singleton;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举类的构造方法在类加载时被实例化</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnumSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnumSingleton.Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton7</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java设计模式.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"饿汉模式(立即加载)"</span>);</span><br><span class="line">        Singleton1 singleton1 = Singleton1.getInstance();</span><br><span class="line">        Singleton1 singleton2 = Singleton1.getInstance();</span><br><span class="line">        System.out.println(singleton1);</span><br><span class="line">        System.out.println(singleton2);</span><br><span class="line">        System.out.println(<span class="string">"懒汉模式（延时加载）"</span>);</span><br><span class="line">        Singleton2 singleton3 = Singleton2.getInstance();</span><br><span class="line">        Singleton2 singleton4 = Singleton2.getInstance();</span><br><span class="line">        System.out.println(singleton3);</span><br><span class="line">        System.out.println(singleton4);</span><br><span class="line">        System.out.println(<span class="string">"使用Synchronized同步锁"</span>);</span><br><span class="line">        Singleton3 singleton5 = Singleton3.getInstance();</span><br><span class="line">        Singleton3 singleton6 = Singleton3.getInstance();</span><br><span class="line">        System.out.println(singleton5);</span><br><span class="line">        System.out.println(singleton6);</span><br><span class="line">        System.out.println(<span class="string">"双层校验锁"</span>);</span><br><span class="line">        Singleton4 singleton7 = Singleton4.getInstance();</span><br><span class="line">        Singleton4 singleton8 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton7);</span><br><span class="line">        System.out.println(singleton8);</span><br><span class="line">        System.out.println(<span class="string">"静态内部类"</span>);</span><br><span class="line">        Singleton5 singleton9 = Singleton5.getInstance();</span><br><span class="line">        Singleton5 singleton10 = Singleton5.getInstance();</span><br><span class="line">        System.out.println(singleton9);</span><br><span class="line">        System.out.println(singleton10);</span><br><span class="line">        System.out.println(<span class="string">"static静态代码块"</span>);</span><br><span class="line">        Singleton6 singleton11 = Singleton6.getInstance();</span><br><span class="line">        Singleton6 singleton12 = Singleton6.getInstance();</span><br><span class="line">        System.out.println(singleton11);</span><br><span class="line">        System.out.println(singleton12);</span><br><span class="line">        System.out.println(<span class="string">"内部枚举类"</span>);</span><br><span class="line">        Singleton7 singletonFactory = SingletonFactory.getInstance();</span><br><span class="line">        Singleton7 singletonFactory1 = SingletonFactory.getInstance();</span><br><span class="line">        System.out.println(singletonFactory);</span><br><span class="line">        System.out.println(singletonFactory1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">饿汉模式(立即加载)</span><br><span class="line">java设计模式.单例模式.Singleton1@<span class="number">74</span>a14482</span><br><span class="line">java设计模式.单例模式.Singleton1@<span class="number">74</span>a14482</span><br><span class="line">懒汉模式（延时加载）</span><br><span class="line">java设计模式.单例模式.Singleton2@<span class="number">1540e19</span>d</span><br><span class="line">java设计模式.单例模式.Singleton2@<span class="number">1540e19</span>d</span><br><span class="line">使用Synchronized同步锁</span><br><span class="line">java设计模式.单例模式.Singleton3@<span class="number">677327</span>b6</span><br><span class="line">java设计模式.单例模式.Singleton3@<span class="number">677327</span>b6</span><br><span class="line">双层校验锁</span><br><span class="line">java设计模式.单例模式.Singleton4@<span class="number">14</span>ae5a5</span><br><span class="line">java设计模式.单例模式.Singleton4@<span class="number">14</span>ae5a5</span><br><span class="line">静态内部类</span><br><span class="line">java设计模式.单例模式.Singleton5@<span class="number">7f</span>31245a</span><br><span class="line">java设计模式.单例模式.Singleton5@<span class="number">7f</span>31245a</span><br><span class="line"><span class="keyword">static</span>静态代码块</span><br><span class="line">java设计模式.单例模式.Singleton6@<span class="number">6</span>d6f6e28</span><br><span class="line">java设计模式.单例模式.Singleton6@<span class="number">6</span>d6f6e28</span><br><span class="line">内部枚举类</span><br><span class="line">java设计模式.单例模式.Singleton7@<span class="number">135f</span>baa4</span><br><span class="line">java设计模式.单例模式.Singleton7@<span class="number">135f</span>baa4</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法学习笔记</title>
    <url>/2019/10/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>一个#是一级标题，二个#是二级标题，以此类推。最多到六级标题。</p><p>注：标准语法一般在#后面跟空格再写标题，有的地方可以不加空格（比如：简书上写Markdown）。</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><a id="more"></a>






<h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>…</p>
<h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p>要加粗的文字左右分别用两个**包起来</p>
</li>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><p>要斜体的文字左右分别用一个*包起来</p>
</li>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5><p>要斜体和加粗的文字左右分别用三个*号包起来</p>
</li>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><p>要加删除线的文字左右分别用两个~~包起来</p>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**这是加粗字体**</span><br><span class="line">*这是斜体*</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是加删除线的~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
</li>
</ul>
<p>  <strong>这是加粗字体</strong><br>  <em>这是斜体</em><br>  <strong><em>这是加粗斜体</em></strong><br>  <del>这是加删除线的</del></p>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>  在引用文字前加&gt;即可。引用可以嵌套。</p>
<p>  实例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>  三个或者三个以上的 - 或者 * 都可以</p>
<p>  实例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<p>  可以看到，显示的效果是一毛一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt]（图片地址 ”图片title“）</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片底线的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移动到图片上时显示的内容。所以title可有可无。</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![KTeDsJ.png](https://s2.ax1x.com/2019/10/31/KTeDsJ.png)</span><br></pre></td></tr></table></figure>

<p>示例如下：</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KTeDsJ.png" alt="KTeDsJ.png"></p>
<p><strong>上传本地图片直接拉到md文件中就ok！</strong></p>
<p>注：若发布博客的话图片不显示参考这篇<a href="https://blog.csdn.net/Mandyucan/article/details/80421711" target="_blank" rel="noopener">博客</a></p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[小李的博客]（https://lisongbai.top）</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p> <a href="https://lisongbai.top">小李的博客</a></p>
<p>注：()一定要使用英文括号Markdown不识别中文括号。</p>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><ul>
<li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：</p>
<p>无序列表用” <strong>-  + *</strong> “任意一个都可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
</ul>
</li>
<li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：</p>
<p>数字加点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>1.列表内容<br>2.列表内容<br>3.列表内容</p>
</li>
</ul>
<ul>
<li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一集之间敲三个空格即可</strong></p>
<p>仔细观察标题七中的列表你会发现无须列表的嵌套滴！</p>
</li>
</ul>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英雄 | 别名 | 羁绊</span><br><span class="line">:- | :-: | -:</span><br><span class="line">杰斯 | 炮王 | 海克斯</span><br><span class="line">李青 | 小学僧 | 暂无</span><br><span class="line">疾风剑豪 | 托儿索 | 剑士</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th align="right">英雄</th>
<th align="center">别名</th>
<th align="right">羁绊</th>
</tr>
</thead>
<tbody><tr>
<td align="right">杰斯</td>
<td align="center">炮王</td>
<td align="right">海克斯</td>
</tr>
<tr>
<td align="right">李青</td>
<td align="center">小学僧</td>
<td align="right">暂无</td>
</tr>
<tr>
<td align="right">疾风剑豪</td>
<td align="center">托儿索</td>
<td align="right">剑士</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：</p>
<p>单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">	代码...</span><br><span class="line">	代码...</span><br><span class="line">	代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
<p>实例：</p>
<p>单行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`System.Out.Println(<span class="string">"hello hexo!"</span>);`</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">	<span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	System.Out.Println(<span class="string">"hello hexo!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><code>System.Out.Println(&quot;hello hexo!&quot;);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	System.Out.Println(<span class="string">"hello hexo!"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>



<p>注：我用的是Typora编辑器，这个有点问题，暂未解决。<strong>cond(yes)-&gt;io-&gt;e  cond(no)-&gt;sub1(right)-&gt;op</strong>这两条语句只会执行第一条，从而导致有一条线它画不出来。</p>
<p>如下图所示：</p>
<p><img src="https://i.loli.net/2019/10/31/ImfquYTA7HvLch9.png" alt="流程图.png"></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>RIPv2报文分析</title>
    <url>/2020/03/16/RIPv2%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><p><img src="https://s1.ax1x.com/2020/03/16/8GVlV0.png" alt="8GVlV0.png"></p><h1 id="2-配置思路"><a href="#2-配置思路" class="headerlink" title="2.配置思路"></a>2.配置思路</h1><ol>
<li>配置各接口IP地址，使网络可达。</li>
<li>在各路由器上使能RIP，基本实现网络互联。 </li>
<li>在各路由器上配置RIPv2版本，提升RIP路由扩展性能。</li>
<li>使AR1接收到的RIP路由的度量值加大5. </li>
</ol><h1 id="3-操作配置"><a href="#3-操作配置" class="headerlink" title="3.操作配置"></a>3.操作配置</h1><h2 id="3-1-配置AR1-AR2-AR3-AR4-直连接口ip地址和回环ip地址"><a href="#3-1-配置AR1-AR2-AR3-AR4-直连接口ip地址和回环ip地址" class="headerlink" title="3.1 配置AR1,AR2,AR3,AR4,直连接口ip地址和回环ip地址"></a>3.1 配置AR1,AR2,AR3,AR4,直连接口ip地址和回环ip地址</h2><ul>
<li><h3 id="AR1配置"><a href="#AR1配置" class="headerlink" title="AR1配置"></a>AR1配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R1</span><br><span class="line"></span><br><span class="line">[R1]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R1-GigabitEthernet0/0/0]ip address 10.1.12.1 24   //配置接口ip</span><br><span class="line">[R1-GigabitEthernet0/0/0]quit</span><br><span class="line">[R1]interface loopback 0 </span><br><span class="line">[R1-loopback0]ip address 10.1.1.1 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R1-loopback0]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR2配置"><a href="#AR2配置" class="headerlink" title="AR2配置"></a>AR2配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R2</span><br><span class="line"></span><br><span class="line">[R2]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R2-GigabitEthernet0/0/0]ip address 10.1.12.2 24   //配置接口ip</span><br><span class="line">[R2-GigabitEthernet0/0/0]quit</span><br><span class="line">[R2]interface GigabitEthernet 0/0/1    </span><br><span class="line">[R2-GigabitEthernet0/0/1]ip address 10.1.23.2 24  //配置接口ip</span><br><span class="line">[R2-GigabitEthernet0/0/1]quit</span><br><span class="line">[R2]interface GigabitEthernet 0/0/2    </span><br><span class="line">[R2-GigabitEthernet0/0/2]ip address 10.1.24.2 24   //配置接口ip</span><br><span class="line">[R2-GigabitEthernet0/0/2]quit</span><br><span class="line">[R2]interface loopback 0 </span><br><span class="line">[R2-loopback0]ip address 10.1.2.2 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R2-loopback0]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR3配置"><a href="#AR3配置" class="headerlink" title="AR3配置"></a>AR3配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R3</span><br><span class="line"></span><br><span class="line">[R3]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R3-GigabitEthernet0/0/0]ip address 10.1.23.13 24   //配置接口ip</span><br><span class="line">[R3-GigabitEthernet0/0/0]quit</span><br><span class="line">[R3]interface loopback 0 </span><br><span class="line">[R3-loopback0]ip address 10.1.3.3 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R3-loopback0]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR4配置"><a href="#AR4配置" class="headerlink" title="AR4配置"></a>AR4配置</h3></li>
</ul><a id="more"></a>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R4</span><br><span class="line"></span><br><span class="line">[R4]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R4-GigabitEthernet0/0/0]ip address 10.1.24.4 24   //配置接口ip</span><br><span class="line">[R4-GigabitEthernet0/0/0]quit</span><br><span class="line">[R4]interface loopback 0 </span><br><span class="line">[R4-loopback0]ip address 10.1.4.4 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R4-loopback0]quit</span><br></pre></td></tr></table></figure>

<h2 id="3-2在AR1-AR2-AR3-AR4-上配置RIP基本功能"><a href="#3-2在AR1-AR2-AR3-AR4-上配置RIP基本功能" class="headerlink" title="3.2在AR1,AR2,AR3,AR4,上配置RIP基本功能"></a>3.2在AR1,AR2,AR3,AR4,上配置RIP基本功能</h2><ul>
<li><h3 id="AR1配置-1"><a href="#AR1配置-1" class="headerlink" title="AR1配置"></a>AR1配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R1]rip    //进入RIP进程</span><br><span class="line">[R1-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R1-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R1-rip-1]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR2配置-1"><a href="#AR2配置-1" class="headerlink" title="AR2配置"></a>AR2配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R2]rip    //进入RIP进程</span><br><span class="line">[R2-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R2-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R2-rip-1]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR3配置-1"><a href="#AR3配置-1" class="headerlink" title="AR3配置"></a>AR3配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R3]rip    //进入RIP进程</span><br><span class="line">[R3-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R3-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R3-rip-1]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR4配置-1"><a href="#AR4配置-1" class="headerlink" title="AR4配置"></a>AR4配置</h3></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R4]rip    //进入RIP进程</span><br><span class="line">[R4-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R4-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R4-rip-1]quit</span><br></pre></td></tr></table></figure>

<h2 id="3-3查看路由表"><a href="#3-3查看路由表" class="headerlink" title="3.3查看路由表"></a>3.3查看路由表</h2><ol>
<li><p>在AR1上查看路由表信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display rip 1 route</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/16/8GtF61.png" alt="8GtF61.png"></p>
</li>
<li><p>修改度量值</p>
<p>使AR1接受到的RIP路由度量值增大5，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">interface gigabitrthernet 0/0/0</span><br><span class="line">rip metricin 5</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次查看路由表信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display rip 1 route</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/16/8GNEgs.png" alt="8GNEgs.png"></p>
</li>
</ol>
<h2 id="3-4Ripv2报文分析"><a href="#3-4Ripv2报文分析" class="headerlink" title="3.4Ripv2报文分析"></a>3.4Ripv2报文分析</h2><p>R1 Ping R4在AR4的GE0/0/0端口捕获报文如下：</p>
<p><img src="/2020/03/16/RIPv2%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/C:%5CUsers%5C12173%5CDesktop%5Cimage%5CRipv2.png" alt="Ripv2"></p>
<p>具体报文内容如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/03/16/8GwjmR.png" alt="8GwjmR.png"></p>
<p>command字段：占1个字节，取值为2时表示该报文是一个回应报文。其中包含路由信息。</p>
<p>version字段：占1个字节，取值为2时表示RIPv2。</p>
<p>address Family字段：占2个字节，ipv4取值为2。</p>
<p>route tag字段：占2个字节，标记外部重分发进RIPv2中的路由</p>
<p>ip address字段：占4个字节，表示路由的目的地址，该地址是网络地址。</p>
<p>netmask字段：占4个字节，是子网掩码，RIPv2是有类别的，所以有这个字段。</p>
<p>next hop字段：占4个字节，它表示一个比通告路由器的地址更好的下一跳。如果这个字段设置为0.0.0.0说明通告路由器的地址就是最优的下一跳。</p>
<p>metric字段：占4个字节，指度量值，在RIP中就是跳数。</p>
<h2 id="3-5Ripv2和Ripv1的区别"><a href="#3-5Ripv2和Ripv1的区别" class="headerlink" title="3.5Ripv2和Ripv1的区别"></a>3.5Ripv2和Ripv1的区别</h2><p> <strong>区别一：</strong>RIP1是一个有类路由协议，即所有的更新包中不含子网掩码，不支持VLSM， 所以就要求网络中所有设备必须使用相同的子网掩码，否则就会出错，而RIP2是一个无类的路由协议，它使用子网掩码。<br><strong>区别二：</strong>第二个不同的地方是RIP1<em>是发送更新包的时候使用的是*</em>广播包<strong>，而RIP2默认使用的是</strong>组播<strong>224.0.0.9，也支持广播发送，这样相对于RIP1来说就节省了一部分网络带宽。<br>**区别三：</strong>第三个就是RIP2支持明文或者是 MD5验证，要求两台路由器在同步路由表的时候必须进行验证，通过才可以进行路由同步，这样可以加强安全性。 </p>
<p><strong>补充</strong></p>
<h2 id="3-6Ripv2配置MD5验证"><a href="#3-6Ripv2配置MD5验证" class="headerlink" title="3.6Ripv2配置MD5验证"></a>3.6Ripv2配置MD5验证</h2><p>在各个路由器的相应端口上配置如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rip authentication-mode md5 usual abc</span><br></pre></td></tr></table></figure>

<p>AR3 Ping AR4时在AR2的GE0/0/2端口捕获报文如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/16/8G74Ff.png" alt="8G74Ff.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>RIPv2报文分析</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加密算法浅析</title>
    <url>/2019/11/09/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="RSA的加解密机制"><a href="#RSA的加解密机制" class="headerlink" title="RSA的加解密机制"></a>RSA的加解密机制</h1><p>RSA的加密系统可分为三个部分，即用户密钥的产生、加密算法以及解密算法。</p><h2 id="用户密钥的产生"><a href="#用户密钥的产生" class="headerlink" title="用户密钥的产生"></a>用户密钥的产生</h2><p>在用户密钥的产生部分，首先此系统的每一个用户将自行选择一组公开密钥，然后公之于众，使得他人都能使用此公开密钥对机密数据进行加密，然后自己使用私密密钥进行解密，获取机密数据。</p><p>​        以下是RSA密钥的产生过程：</p><a id="more"></a>


<p>​        &lt;1&gt;.首先找出两个大质数p和q，两者均至少为100位的十进制数。</p>
<p>​        &lt;2&gt;.计算N=p * q 及 φ(N)= (q-1)*(p-1),    其中φ(N)为欧拉函数，意为小于N的整数中与N互质的整数个数。例如，只有1和5这两个数与6互质，所以φ(6)=2。</p>
<p>​        &lt;3&gt;.找出一个与φ(N)互质的数e，因此（e，N）可以作为该用户的公开密钥。</p>
<p>​        &lt;4&gt;.计算出该用户的私密密钥d，使得e * d mod φ(N) =1，也就是在模φ(N)的情况下，使得e和d互为乘法反元素，其中d称为用户的私密密钥，须绝对保密。</p>
<h2 id="加密解密机制"><a href="#加密解密机制" class="headerlink" title="加密解密机制"></a>加密解密机制</h2><p>在RSA密码系统里，每次加密或解密的信息块的值在0~（N-1）的范围内。若明文及密文大于这个块，则分块。</p>
<p>在实际加解密过程中，N至少为521位。N值越大，RSA的安全性越高，加解密所需要的时间就越长。</p>
<p>现在假设要对M信息进行加密，其中0&lt;=M&lt;=(N-1),RSA加密算法为：C=Ee（M）=M^2modN.<br>$$<br>C=Ee(M)=M^emodN<br>$$<br>C为加密后的密文。若要对C进行解密，则需要计算：M=D<sub>d<sub>（C）modM<br>$$<br>M=Dd(C)modN<br>$$</sub></sub></p>
<h2 id="加密解密算法的JAVA代码实现"><a href="#加密解密算法的JAVA代码实现" class="headerlink" title="加密解密算法的JAVA代码实现"></a>加密解密算法的JAVA代码实现</h2><p><strong>RSA加密解密的简单JAVA实现代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.rsa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncrypt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> m=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> public_key=<span class="number">0</span>;<span class="comment">//公匙</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> private_key=<span class="number">0</span>;<span class="comment">//密匙</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> text=<span class="number">0</span>;<span class="comment">//明文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> secretword=<span class="number">0</span>;<span class="comment">//密文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> word=<span class="number">0</span>;<span class="comment">//解密后明文</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为素数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">primenumber</span><span class="params">(<span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">        k=(<span class="keyword">long</span>)Math.sqrt((<span class="keyword">double</span>)t);</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        outer:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((t%i)==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入PQ</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputPQ</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入素数p: "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.p=Integer.parseInt(br);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!primenumber(<span class="keyword">this</span>.p));</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入素数q: "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.q=Integer.parseInt(br);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!primenumber(<span class="keyword">this</span>.q));</span><br><span class="line">        <span class="keyword">this</span>.n=<span class="keyword">this</span>.p*<span class="keyword">this</span>.q;</span><br><span class="line">        <span class="keyword">this</span>.m=(p-<span class="number">1</span>)*(q-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"这两个素数的乘积为p*q："</span>+<span class="keyword">this</span>.n);</span><br><span class="line">        System.out.println(<span class="string">"所得的小于Ｎ并且与Ｎ互素的整数的个数为m=(p-1)(q-1)："</span>+<span class="keyword">this</span>.m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求最大公约数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> gcd;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">            gcd=a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            gcd=gcd(b,a%b);</span><br><span class="line">        System.out.println(<span class="string">"gcd:"</span>+gcd);</span><br><span class="line">        <span class="keyword">return</span> gcd;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入公匙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPublic_key</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入一个公钥的值，这个值要求小于m并且和m互质： "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.public_key=Long.parseLong(br);</span><br><span class="line">        &#125;<span class="keyword">while</span>((<span class="keyword">this</span>.public_key &gt;= <span class="keyword">this</span>.m) || (<span class="keyword">this</span>.gcd(<span class="keyword">this</span>.m,<span class="keyword">this</span>.public_key)!=<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"公钥为："</span>+<span class="keyword">this</span>.public_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算得到密匙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivate_key</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> value=<span class="number">1</span>;</span><br><span class="line">        outer:<span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">1</span>;;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            value=i*<span class="keyword">this</span>.m+<span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"value:  "</span>+value);</span><br><span class="line">            <span class="keyword">if</span>((value%<span class="keyword">this</span>.public_key==<span class="number">0</span>)&amp;&amp; (value/<span class="keyword">this</span>.public_key &lt; <span class="keyword">this</span>.m))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.private_key=value/<span class="keyword">this</span>.public_key;</span><br><span class="line">                <span class="keyword">break</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"产生的一个私钥为："</span>+<span class="keyword">this</span>.private_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入明文</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getText</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入明文："</span>);</span><br><span class="line">        BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String br=stdin.readLine();</span><br><span class="line">        <span class="keyword">this</span>.text=Long.parseLong(br);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加密、解密计算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">colum</span><span class="params">(<span class="keyword">long</span> y,<span class="keyword">long</span> n,<span class="keyword">long</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mul;</span><br><span class="line">        <span class="keyword">if</span>(key==<span class="number">1</span>)</span><br><span class="line">            mul=y%n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mul=y*<span class="keyword">this</span>.colum(y,n,key-<span class="number">1</span>)%n;</span><br><span class="line">        <span class="keyword">return</span> mul;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密后解密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pascolum</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getText();</span><br><span class="line">        System.out.println(<span class="string">"输入明文为: "</span>+<span class="keyword">this</span>.text);</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">this</span>.secretword=<span class="keyword">this</span>.colum(<span class="keyword">this</span>.text,<span class="keyword">this</span>.n,<span class="keyword">this</span>.public_key);</span><br><span class="line">        System.out.println(<span class="string">"所得的密文为："</span>+<span class="keyword">this</span>.secretword);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">this</span>.word=<span class="keyword">this</span>.colum(<span class="keyword">this</span>.secretword,<span class="keyword">this</span>.n,<span class="keyword">this</span>.private_key);</span><br><span class="line">        System.out.println(<span class="string">"解密后所得的明文为："</span>+<span class="keyword">this</span>.word);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试如下代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.rsa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncryptTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RSAEncrypt t = <span class="keyword">new</span> RSAEncrypt();</span><br><span class="line">        t.inputPQ();</span><br><span class="line">        t.getPublic_key();</span><br><span class="line">        t.getPrivate_key();</span><br><span class="line">        t.pascolum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入数据来源为课本上例题所给，用来验证加密解密算法实现的正确性。</p>
<p><strong>课本例题如下：</strong></p>
<p><img src="https://s2.ax1x.com/2019/11/09/MmEbex.png" alt="MmEbex.png"></p>
<p><strong>运行结果如下：</strong></p>
<p><a href="https://imgchr.com/i/MmElJe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MmElJe.md.png" alt="MmElJe.md.png"></a></p>
]]></content>
      <categories>
        <category>加密算法</category>
        <category>RSA</category>
      </categories>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown进阶语法学习笔记</title>
    <url>/2019/11/02/Markdown%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>写博客需要用到Markdown语法，于是产生了整理Markdown笔记的想法。</p><p>这篇文章是基于<a href="[https://lisongbai.top/2019/10/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/](https://lisongbai.top/2019/10/31/Markdown基本语法学习笔记-1/)">Markdown基本语法</a>的进阶语法。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1.内容目录"></a>1.内容目录</h3><p>在文章的最开始使用[TOC]引用目录，例如本文目录：</p><h3 id="2-加强代码块"><a href="#2-加强代码块" class="headerlink" title="2.加强代码块"></a>2.加强代码块</h3><p>使用”```”+”语言名”进行标记。例如：</p><ul>
<li><p>java示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeNode temp = root.left;</span><br><span class="line">            root.left = root.right;</span><br><span class="line">            root.right = temp;</span><br><span class="line">            Mirror(root.left);</span><br><span class="line">            Mirror(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>





<h3 id="3-脚注"><a href="#3-脚注" class="headerlink" title="3.脚注"></a>3.脚注</h3><p>使用[^keyword]表示注脚</p>
<ul>
<li><p>注脚</p>
<p>这是一个注脚[^1]的样例。</p>
</li>
</ul>
<h3 id="4-标签和分类"><a href="#4-标签和分类" class="headerlink" title="4.标签和分类"></a>4.标签和分类</h3><p>一般在吻兽输入tags添加标签，categories添加分类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> tags: </span><br><span class="line"> - Markdown</span><br><span class="line"> - 语言</span><br><span class="line"> categories:</span><br><span class="line">- 技术</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>分类具有层次性，标签无层次性。</p>
<h3 id="5-待办事项Todo列表"><a href="#5-待办事项Todo列表" class="headerlink" title="5.待办事项Todo列表"></a>5.待办事项Todo列表</h3><p>使用带有[]或者[x]（未完成或已完成）项的列表语法攥写一个代办事项列表例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 早起跑步</span><br><span class="line">- [X] 完成计网大作业</span><br><span class="line">- [x] 编译并更换ubuntu内核</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<ul>
<li><input disabled type="checkbox"> 早起跑步</li>
<li><input checked disabled type="checkbox"> 完成计网大作业</li>
<li><input checked disabled type="checkbox"> 编译并更换ubuntu内核</li>
</ul>
<p><strong>注：</strong>-空格[]空格具体事项（[]中填空格为未完成事项，填x为完成事项）</p>
<h3 id="6-LaTeX的公式规则"><a href="#6-LaTeX的公式规则" class="headerlink" title="6.LaTeX的公式规则"></a>6.LaTeX的公式规则</h3><h5 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h5><h6 id="1）转义"><a href="#1）转义" class="headerlink" title="1）转义"></a>1）转义</h6><blockquote>
<p>一下几个字符: # $ % &amp; ~ _ ^ \ { }有特殊意义，需要表示这些字符时，需要转义，即在每个字符前加上 \ 。<br> \boxed命令给公式加一个方框。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$E = mc^<span class="number">2</span> $</span><br><span class="line">$ \boxed&#123;E=mc^<span class="number">2</span>&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=E%20%3D%20mc%5E2%20%5Cquad%20%5Cboxed%7BE%3Dmc%5E2%7D" alt="E = mc^2 \quad \boxed{E=mc^2}"></p>
<h6 id="2）希腊字母"><a href="#2）希腊字母" class="headerlink" title="2）希腊字母"></a>2）希腊字母</h6><p><img src="https:////upload-images.jianshu.io/upload_images/3187098-f9884c349c6d36df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp" alt="img"></p>
<h6 id="3）上下标和根号"><a href="#3）上下标和根号" class="headerlink" title="3）上下标和根号"></a>3）上下标和根号</h6><blockquote>
<p>用^来表示上标<br> 用_来表示下标<br> 根号用\sqrt表示</p>
</blockquote>
<p>注意：上下标如果多余一个字符或符号，需要用{}括起来。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n a_i $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Csum_%7Bi%3D1%7D%5En%20a_i" alt="\sum_{i=1}^n a_i"><br> \sqrt[开方次数，默认为2]{开方公式}， 例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$$ x_&#123;ij&#125;^<span class="number">2</span>\quad \<span class="built_in">sqrt</span>&#123;x&#125;\quad \<span class="built_in">sqrt</span>[<span class="number">3</span>]&#123;x&#125; $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=x_%7Bij%7D%5E2%5Cquad%20%5Csqrt%7Bx%7D%5Cquad%20%5Csqrt%5B3%5D%7Bx%7D" alt="x_{ij}^2\quad \sqrt{x}\quad \sqrt[3]{x}"><br> 其中\quad表示添加空格。</p>
<h6 id="4）分数"><a href="#4）分数" class="headerlink" title="4）分数"></a>4）分数</h6><blockquote>
<p>分数用\frac表示。</p>
</blockquote>
<blockquote>
<p>字号工具环境设置：<br> \dfrac命令把字号设置为独立公式中的大小；<br> \tfrac则把字号设置为行间公式中的大小。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; \dfrac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cfrac%7B1%7D%7B2%7D%20%5Cdfrac%7B1%7D%7B2%7D" alt="\frac{1}{2} \dfrac{1}{2}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$ \frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; \tfrac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cfrac%7B1%7D%7B2%7D%20%5Ctfrac%7B1%7D%7B2%7D" alt="\frac{1}{2} \tfrac{1}{2}"></p>
<h6 id="5）运算符"><a href="#5）运算符" class="headerlink" title="5）运算符"></a>5）运算符</h6><blockquote>
<p>+ - * / = 直接输入；</p>
</blockquote>
<blockquote>
<p>特殊运算则用以下特殊命令<code>\pm\; \times\; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx\; \equiv</code><br> <img src="https://math.jianshu.com/math?formula=%5Cpm%5C%3B%20%5Ctimes%5C%3B%20%5Cdiv%5C%3B%20%5Ccdot%5C%3B%20%5Ccap%5C%3B%20%5Ccup%5C%3B%20%5Cgeq%5C%3B%20%5Cleq%5C%3B%20%5Cneq%5C%3B%20%5Capprox%5C%3B%20%5Cequiv" alt="\pm\; \times\; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx\; \equiv"></p>
</blockquote>
<blockquote>
<p>和、积、极限、积分等运算符用\sum, \prod, \lim, \int,这些公式在行内公式被压缩，以适应行高，可以通过\limits和\nolimits命令显示制动是否压缩。<br> <img src="https://math.jianshu.com/math?formula=%5Csum%5C%3B%20%5Cprod%5C%3B%20%5Clim%5C%3B%20%5Cint%5C%3B" alt="\sum\; \prod\; \lim\; \int\;"></p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n i </span><br><span class="line"></span><br><span class="line">$ \prod<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n </span><br><span class="line"></span><br><span class="line">$\lim<span class="number">_</span>&#123;x\to<span class="number">0</span>&#125;x^<span class="number">2</span> </span><br><span class="line"></span><br><span class="line">$\int<span class="number">_</span>&#123;a&#125;^&#123;b&#125;x^<span class="number">2</span> dx </span><br><span class="line"></span><br><span class="line">$\sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n i \quad\prod<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n </span><br><span class="line">\quad</span><br><span class="line">\lim<span class="number">_</span>&#123;x\to<span class="number">0</span>&#125;x^<span class="number">2</span> \quad\int<span class="number">_</span>&#123;a&#125;^&#123;b&#125;x^<span class="number">2</span> dx </span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Csum_%7Bi%3D1%7D%5En%20i%20%5Cquad%5Cprod_%7Bi%3D1%7D%5En%20%5Cquad%20%5Clim_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint_a%5Eb%20x%5E2%20dx%20%24%24%24%24%20%5Csum_%7Bi%3D1%7D%5En%20i%20%5Cquad%5Cprod_%7Bi%3D1%7D%5En%5Cquad%5Clim_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint_a%5Eb%20x%5E2%20dx%20%5Csum%5Cnolimits_%7Bi%3D1%7D%5En%5Cquad%5Cprod%5Cnolimits_%7Bi%3D1%7D%5En%20%5Cquad%20%5Clim%5Cnolimits_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint%5Cnolimits_a%5Eb%20x%5E2%20dx" alt="\sum_{i=1}^n i \quad\prod_{i=1}^n \quad \lim_{x\to0} x^2 \quad\int_a^b x^2 dx $$$$ \sum_{i=1}^n i \quad\prod_{i=1}^n\quad\lim_{x\to0} x^2 \quad\int_a^b x^2 dx \sum\nolimits_{i=1}^n\quad\prod\nolimits_{i=1}^n \quad \lim\nolimits_{x\to0} x^2 \quad\int\nolimits_a^b x^2 dx"></p>
<h6 id="6）多重积分"><a href="#6）多重积分" class="headerlink" title="6）多重积分"></a>6）多重积分</h6><blockquote>
<p>使用如下形式：\int、\iint、\iiint、\iiiint、\idotsint</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$$ \<span class="keyword">int</span> \<span class="keyword">int</span> \quad \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \quad </span><br><span class="line"> \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \quad \<span class="keyword">int</span> \dots \<span class="keyword">int</span> $$</span><br><span class="line"></span><br><span class="line">$$ \iint \quad \iiint \quad \iiiint \quad \idotsint $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cint%5Cint%5Cquad%5Cint%5Cint%5Cint%5Cquad%5Cint%5Cint%5Cint%5Cint%5Cquad%5Cint%5Cdots%5Cint%24%24%24%24%20%5Ciint%5Cquad%5Ciiint%5Cquad%5Ciiiint%5Cquad%5Cidotsint" alt="\int\int\quad\int\int\int\quad\int\int\int\int\quad\int\dots\int$$$$ \iint\quad\iiint\quad\iiiint\quad\idotsint"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \leftarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cleftarrow" alt="\leftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \rightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Crightarrow" alt="\rightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \leftrightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cleftrightarrow" alt="\leftrightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \longleftarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Clongleftarrow" alt="\longleftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$longleftrightarrow$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5CLongleftarrow" alt="\Longleftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \Longrightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5CLongleftrightarrow" alt="\Longleftrightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\xleftarrow和$\xrightarrow可根据内容自动调整</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cxleftarrow%7Bx%2By%2Bz%7D" alt="\xleftarrow{x+y+z}"></p>
<p><img src="https://math.jianshu.com/math?formula=%5Cxrightarrow%5Bx%5D%7Bx%2By%2Bz%7D" alt="\xrightarrow[x]{x+y+z}"></p>
<h6 id="7）注音和标注"><a href="#7）注音和标注" class="headerlink" title="7）注音和标注"></a>7）注音和标注</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \bar&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbar%7Bx%7D" alt="\bar{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \acute&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cacute%7Bx%7D" alt="\acute{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \mathring&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cmathring%7Bx%7D" alt="\mathring{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \vec&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cvec%7Bx%7D" alt="\vec{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \grave&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cgrave%7Bx%7D" alt="\grave{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \dot&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cdot%7Bx%7D" alt="\dot{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \hat&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Chat%7Bx%7D" alt="\hat{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \tilde&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bx%7D" alt="\tilde{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \ddot&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cddot%7Bx%7D" alt="\ddot{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \check&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Ccheck%7Bx%7D" alt="\check{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \breve&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbreve%7Bx%7D" alt="\breve{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \dddot&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cdddot%7Bx%7D" alt="\dddot{x}"></p>
<h6 id="8）分隔符"><a href="#8）分隔符" class="headerlink" title="8）分隔符"></a>8）分隔符</h6><blockquote>
<p>括号用() [] {} \lange \rangle表示 ()  []  {}  ⟨⟩</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \overline&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverline%7Bxxx%7D" alt="\overline{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overleftrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverleftrightarrow%7Bxxx%7D" alt="\overleftrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underline&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderline%7Bxxx%7D" alt="\underline{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underleftrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderleftrightarrow%7Bxxx%7D" alt="\underleftrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overleftarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverleftarrow%7Bxxx%7D" alt="\overleftarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overbrace&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverbrace%7Bxxx%7D" alt="\overbrace{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underleftarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderleftarrow%7Bxxx%7D" alt="\underleftarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underbrace&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderbrace%7Bxxx%7D" alt="\underbrace{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverrightarrow%7Bxxx%7D" alt="\overrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\widehat&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cwidehat%7Bxxx%7D" alt="\widehat{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderrightarrow%7Bxxx%7D" alt="\underrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\widetilde&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cwidetilde%7Bxxx%7D" alt="\widetilde{xxx}"></p>
<h6 id="9）省略号"><a href="#9）省略号" class="headerlink" title="9）省略号"></a>9）省略号</h6><blockquote>
<p>省略号用 \dots \cdots \vdots \ddots表示 ，\dots和\cdots的纵向位置不同，前者一般用于有下标的序列</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$ x_1, x_2, \dots, x_n\quad <span class="number">1</span>,<span class="number">2</span>,\cdots,n\quad \vdots\quad \ddots $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=x_1%2C%20x_2%2C%20%5Cdots%2C%20x_n%5Cquad%201%2C2%2C%5Ccdots%2Cn%5Cquad%20%5Cvdots%5Cquad%20%5Cddots" alt="x_1, x_2, \dots, x_n\quad 1,2,\cdots,n\quad \vdots\quad \ddots"></p>
<h6 id="10）空白间距"><a href="#10）空白间距" class="headerlink" title="10）空白间距"></a>10）空白间距</h6><table>
<thead>
<tr>
<th>语法</th>
<th align="left">格式</th>
<th>实例</th>
<th>显示</th>
</tr>
</thead>
<tbody><tr>
<td>quad空格</td>
<td align="left"><code>a \quad b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%20%5Cquad%20b" alt="a \quad b"></td>
<td>一个<em>m</em>的宽度</td>
</tr>
<tr>
<td>两个quad空格</td>
<td align="left"><code>a \qquad b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%20%5Cqquad%20b" alt="a \qquad b"></td>
<td>两个<em>m</em>的宽度</td>
</tr>
<tr>
<td>大空格</td>
<td align="left"><code>a \: b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%3Ab" alt="a\:b"></td>
<td>1/3<em>m</em>宽度</td>
</tr>
<tr>
<td>中等空格</td>
<td align="left"><code>a \; b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%3Bb" alt="a\;b"></td>
<td>2/7<em>m</em>宽度</td>
</tr>
<tr>
<td>小空格</td>
<td align="left"><code>a \, b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%2Cb" alt="a\,b"></td>
<td>1/6<em>m</em>宽度</td>
</tr>
<tr>
<td>没有空格</td>
<td align="left"><code>ab</code></td>
<td><img src="https://math.jianshu.com/math?formula=ab" alt="ab"></td>
<td>没有空格</td>
</tr>
<tr>
<td>缩进空格</td>
<td align="left"><code>a \! b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C!b" alt="a\!b"></td>
<td>缩进1/6<em>m</em>宽度</td>
</tr>
</tbody></table>
<h5 id="复杂公式"><a href="#复杂公式" class="headerlink" title="复杂公式"></a>复杂公式</h5><h6 id="1）矩阵"><a href="#1）矩阵" class="headerlink" title="1）矩阵"></a>1）矩阵</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">x_1 &amp; x_2 &amp;\dots\\</span><br><span class="line">x_3 &amp; x_4 &amp;\dots\\</span><br><span class="line">\vdots&amp;\vdots&amp;\ddots</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Barray%7D%7Bccc%7D%20x_1%20%26%20x_2%20%26%5Cdots%5C%5C%20x_3%20%26%20x_%204%26%5Cdots%5C%5C%20%5Cvdots%26%5Cvdots%26%5Cddots%20%5Cend%7Barray%7D" alt="\begin{array}{ccc} x_1 &amp; x_2 &amp;\dots\\ x_3 &amp; x_ 4&amp;\dots\\ \vdots&amp;\vdots&amp;\ddots \end{array}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;pmatrix&#125; </span><br><span class="line">a &amp; b\\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;pmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;bmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;Bmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;Bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;vmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;vmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;Vmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;Vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bpmatrix%7D%20a%20%26%20b%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bpmatrix%7D%5Cquad%5Cbegin%7Bbmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bbmatrix%7D%5Cquad%5Cbegin%7BBmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%5C%5C%5Cend%7BBmatrix%7D%5Cquad%5Cbegin%7Bvmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bvmatrix%7D%5Cquad%5Cbegin%7BVmatrix%7D%20a%20%26%20b%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7BVmatrix%7D" alt="\begin{pmatrix} a &amp; b\\ c &amp; d \\\end{pmatrix}\quad\begin{bmatrix} a &amp; b \\ c &amp; d \\\end{bmatrix}\quad\begin{Bmatrix} a &amp; b \\ c &amp; d\\\end{Bmatrix}\quad\begin{vmatrix} a &amp; b \\ c &amp; d \\\end{vmatrix}\quad\begin{Vmatrix} a &amp; b\\ c &amp; d \\\end{Vmatrix}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">(</span><br><span class="line">\<span class="keyword">begin</span>&#123;smallmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d </span><br><span class="line">\<span class="keyword">end</span>&#123;smallmatrix&#125;</span><br><span class="line">) </span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=(%5Cbegin%7Bsmallmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5Cend%7Bsmallmatrix%7D)" alt="(\begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix})"></p>
<h6 id="2）长公式"><a href="#2）长公式" class="headerlink" title="2）长公式"></a>2）长公式</h6><blockquote>
<p>无需对齐可使用multline；<br> 需要对齐使用split；<br> 用\来分行；<br> 用&amp;设置对齐的位置</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;multline&#125;    </span><br><span class="line">x = a+b+c+&#123;&#125; \\     </span><br><span class="line">d+e+f+g  </span><br><span class="line">\<span class="keyword">end</span>&#123;multline&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bmultline%7D%20x%20%3D%20a%2Bb%2Bc%2B%7B%7D%20%5C%5C%20d%2Be%2Bf%2Bg%20%5Cend%7Bmultline%7D" alt="\begin{multline} x = a+b+c+{} \\ d+e+f+g \end{multline}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;split&#125;</span><br><span class="line">x = &#123;&#125; &amp; a + b + c +&#123;&#125;\\    </span><br><span class="line">       &amp; d + e + f + g</span><br><span class="line">\<span class="keyword">end</span>&#123;split&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bsplit%7D%20x%20%3D%20%7B%7D%20%26%20a%20%2B%20b%20%2B%20c%20%2B%7B%7D%5C%5C%20%26%20d%20%2B%20e%20%2B%20f%20%2B%20g%20%5Cend%7Bsplit%7D" alt="\begin{split} x = {} &amp; a + b + c +{}\\ &amp; d + e + f + g \end{split}"></p>
<h6 id="3）公式组"><a href="#3）公式组" class="headerlink" title="3）公式组"></a>3）公式组</h6><blockquote>
<p>不需要对齐的公式组用gather；<br> 需要对齐使用align:</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\<span class="keyword">begin</span>&#123;gather&#125;</span><br><span class="line">a = b+c+d\\</span><br><span class="line">x = y+z\\</span><br><span class="line"><span class="number">5</span> = <span class="number">4</span>+<span class="number">1</span>\\</span><br><span class="line">\<span class="keyword">end</span>&#123;gather&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bgather%7D%20a%20%3D%20b%2Bc%2Bd%5C%5C%20x%20%3D%20y%2Bz%5C%5C%205%20%3D%204%2B1%20%5Cend%7Bgather%7D" alt="\begin{gather} a = b+c+d\\ x = y+z\\ 5 = 4+1 \end{gather}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\<span class="keyword">begin</span>&#123;align&#125;</span><br><span class="line">a &amp;=b+c+d \\</span><br><span class="line">x &amp;=y+z\\</span><br><span class="line"><span class="number">5</span> &amp;= <span class="number">4</span>+<span class="number">1</span></span><br><span class="line">\<span class="keyword">end</span>&#123;align&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Balign%7D%20a%20%26%3Db%2Bc%2Bd%20%5C%5C%20x%20%26%3Dy%2Bz%5C%5C%205%20%26%3D%204%2B1%20%5Cend%7Balign%7D" alt="\begin{align} a &amp;=b+c+d \\ x &amp;=y+z\\ 5 &amp;= 4+1 \end{align}"></p>
<h6 id="4）分支公式"><a href="#4）分支公式" class="headerlink" title="4）分支公式"></a>4）分支公式</h6><blockquote>
<p><strong>分段函数</strong>通常用cases次环境携程分支公式</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ y=\<span class="keyword">begin</span>&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq <span class="number">0</span>\\</span><br><span class="line">x, \quad x&gt;<span class="number">0</span></span><br><span class="line">\<span class="keyword">end</span>&#123;cases&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=y%3D%5Cbegin%7Bcases%7D-x%2C%5Cquad%20x%5Cleq%200%5C%5Cx%2C%20%5Cquad%20x%3E0%5Cend%7Bcases%7D" alt="y=\begin{cases}-x,\quad x\leq 0\\x, \quad x&gt;0\end{cases}"></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-logging配置</title>
    <url>/2020/02/22/SpringBoot-logging%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1-使用自带的日志系统（longback）进行配置"><a href="#1-使用自带的日志系统（longback）进行配置" class="headerlink" title="1.使用自带的日志系统（longback）进行配置"></a>1.使用自带的日志系统（longback）进行配置</h1><h2 id="1-1longback简介"><a href="#1-1longback简介" class="headerlink" title="1.1longback简介"></a>1.1longback简介</h2><h3 id="1-1-1Logback主要有下面的特性："><a href="#1-1-1Logback主要有下面的特性：" class="headerlink" title="1.1.1Logback主要有下面的特性："></a>1.1.1Logback主要有下面的特性：</h3><ul>
<li><p><strong>更快的执行速度：</strong></p>
<p>基于我们先前在Log4j上的工作，Logback 重写了内部的实现，在某些特定的场景上面，甚至可以比之前的速度快上10倍。在保证Logback的组件更加快速的同时，同时所需的内存更加少；</p>
</li>
<li><p><strong>充分的测试：</strong></p>
<p>Logback 历经了几年，数不清小时数的测试。尽管Log4j也是测试过的，但是Logback的测试更加充分，跟Log4j不在同一个级别。我们认为，这正是人们选择Logback而不是Log4j的最重要的原因。谁不希望即使在恶劣的条件下，你的日志框架依然稳定而可靠呢？</p>
</li>
</ul><a id="more"></a>
<h3 id="1-1-2-组成模块"><a href="#1-1-2-组成模块" class="headerlink" title="1.1.2 组成模块"></a>1.1.2 组成模块</h3><ul>
<li>logback-core </li>
<li>logback-classic </li>
<li>logback-access </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logback-core是其它模块的基础设施，其它模块基于它构建，显然，logback-core提供了一些关键的通用机制。logback-classic的地位和作用等同于 Log4J，它也被认为是 Log4J的一个改进版，并且它实现了简单日志门面 SLF4J；而 logback-access主要作为一个与 Servlet容器交互的模块，比如说tomcat或者 jetty，提供一些与 HTTP访问相关的功能。</span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-Sl4J是什么？"><a href="#1-1-3-Sl4J是什么？" class="headerlink" title="1.1.3 Sl4J是什么？"></a>1.1.3 <strong>Sl4J是什么？</strong></h3><p> <strong>slf4j：</strong></p>
<p>The Simple Logging Facade for Java 即java的简单日志门面<br>简答的讲就是slf4j是一系列的日志接口，slf4j是作为一个日志的抽象行为存在的，但是并没有提供真正的实现。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slf4j为各种日志框架提供了一个统一的界面，使用户可以用统一的接口记录日志，动态地决定要使用的实现框架，比如Logback，Log4j，common-logging等框架都实现了这些接口。</span><br></pre></td></tr></table></figure>



<h2 id="1-2需要导入的依赖"><a href="#1-2需要导入的依赖" class="headerlink" title="1.2需要导入的依赖"></a>1.2需要导入的依赖</h2><p>在springboot项目的基础上导入以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2日志配置"><a href="#1-2日志配置" class="headerlink" title="1.2日志配置"></a>1.2日志配置</h2><h3 id="1-2-1-在application-properties中配置"><a href="#1-2-1-在application-properties中配置" class="headerlink" title="1.2.1.在application.properties中配置"></a>1.2.1.在application.properties中配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.profiles.active=prod</span></span><br><span class="line"><span class="comment"># 日志的配置信息</span></span><br><span class="line"><span class="comment"># 日志输出的级别</span></span><br><span class="line"><span class="meta">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="comment"># 根据我们的包下面的操作进行日志记录</span></span><br><span class="line"><span class="meta">logging.level.com.lcx</span>=<span class="string">trace</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">F:/spring/spring02.log</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-2使用xml文件进行配置"><a href="#1-2-2使用xml文件进行配置" class="headerlink" title="1.2.2使用xml文件进行配置"></a>1.2.2使用xml文件进行配置</h3><p><strong>longback-spring.xml内容如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/app/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"springboot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。</span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd&#125;----- [%thread] ---- %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!prod"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;file&gt;$&#123;LOG_HOME&#125;/$&#123;appName&#125;.log&lt;/file&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>F:/spring/spring.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="comment">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            滚动时产生的文件的存放位置及文件名称 %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动</span></span><br><span class="line"><span class="comment">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，</span></span><br><span class="line"><span class="comment">            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，</span></span><br><span class="line"><span class="comment">            那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="comment">		name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="comment">		level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span></span><br><span class="line"><span class="comment">		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="comment">		false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="comment">		表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.lcx"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="comment">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-使用log4j2替换Logback"><a href="#2-使用log4j2替换Logback" class="headerlink" title="2.使用log4j2替换Logback"></a>2.使用log4j2替换Logback</h1><h2 id="2-1Log4j2简介"><a href="#2-1Log4j2简介" class="headerlink" title="2.1Log4j2简介"></a>2.1Log4j2简介</h2><p> Log4j2是Log4j的升级版，与之前的版本Log4j 1.x相比、有重大的改进，修正了Logback固有的架构问题的同事，改进了许多Logback所具有的功能。 </p>
<h2 id="2-2特性"><a href="#2-2特性" class="headerlink" title="2.2特性"></a>2.2特性</h2><h3 id="2-2-1-API-分离"><a href="#2-2-1-API-分离" class="headerlink" title="2.2.1 API 分离"></a>2.2.1 API 分离</h3><p>  Log4j2将API与实现分离开来。开发人员现在可以很清楚的知道能够使用哪些没有兼容问题的类和方法，同事又允许通过自己实现来增加功能。 </p>
<h3 id="2-2-2改进性能"><a href="#2-2-2改进性能" class="headerlink" title="2.2.2改进性能"></a>2.2.2改进性能</h3><p>  Log4j2的性能在某些关键领域比Log4j 1.x更快，而且大多数情况下与Logback相当。 </p>
<h3 id="2-2-3-支持多种-API"><a href="#2-2-3-支持多种-API" class="headerlink" title="2.2.3 支持多种 API"></a>2.2.3 支持多种 API</h3><p> Log4j 2提供了最棒的性能的同事，还支持SLF4J和公共日志记录API。</p>
<h3 id="2-2-4-自动装配加载"><a href="#2-2-4-自动装配加载" class="headerlink" title="2.2.4 自动装配加载"></a>2.2.4 自动装配加载</h3><p> 像Logback一样，一旦配置发生改变，Log4j2可以自动载入这些更改后的配置信息，又与Logback不同，配置发生改变时不会丢失任何日志事件。 </p>
<h3 id="2-2-5-高级过滤功能"><a href="#2-2-5-高级过滤功能" class="headerlink" title="2.2.5 高级过滤功能"></a>2.2.5 高级过滤功能</h3><p>与Logback类似，Log4Jj2可以支持基于上下文数据、标记、正则表达式以及日志时间中的其他组件的过滤。Log4j2能够专门制定适用于所有的事件，无论这些事件在传入Loggers之前还是正在传给appenders。另外，过滤器还可以与Loggers关联其阿里。与Logback不同的是，Filter公共类可以用于任何情况。</p>
<h3 id="2-2-6-插件架构"><a href="#2-2-6-插件架构" class="headerlink" title="2.2.6 插件架构"></a>2.2.6 插件架构</h3><p> 所有可以配置的组件都以Log4j插件的形式来定义。同样地，不需要修改任何Log4j代码就可以创建新的Appender、layout、Pattern Convert等等。Log4j自动识别预定义的插件，如果在配置中引用到这些插件，Log4j就会自动载入使用。 </p>
<h3 id="2-2-7-属性支持"><a href="#2-2-7-属性支持" class="headerlink" title="2.2.7 属性支持"></a>2.2.7 属性支持</h3><p> 属性可以在配置文件中引用，也可以直接替代或传入潜在的组件，属性在这些组件中能够动态解析。属性可以是配置文件、属性文件、环境变量、线程上下文映射以及事件中的数据中定义的值。用户可以通过增加自己的Lookup插件来定制自己的属性。 </p>
<h2 id="2-3日志配置"><a href="#2-3日志配置" class="headerlink" title="2.3日志配置"></a>2.3日志配置</h2><h3 id="2-3-1pom文件中的改动"><a href="#2-3-1pom文件中的改动" class="headerlink" title="2.3.1pom文件中的改动"></a>2.3.1pom文件中的改动</h3><p>解除底层默认日志依赖、并添加log4j2作为自己的日志实现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--解除底层的默认的日志依赖  logback--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用log4j2作为日志的实现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2在application-properties中配置"><a href="#2-3-2在application-properties中配置" class="headerlink" title="2.3.2在application.properties中配置"></a>2.3.2在application.properties中配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.com.lcx</span>=<span class="string">debug</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">F:/spring01/spring.log</span></span><br><span class="line"><span class="meta">logging.file.max-size</span>=<span class="string">100MB</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;==== [%thread] === %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-3在xml中的配置"><a href="#2-3-3在xml中的配置" class="headerlink" title="2.3.3在xml中的配置"></a>2.3.3在xml中的配置</h3><p><strong>log4j.xml内容如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个输出控制台的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"log"</span> <span class="attr">fileName</span>=<span class="string">"F:/spring-Log/spring.log"</span> <span class="attr">append</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/info.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/warn.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"warn"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/error.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/01/29/SpringMVC/</url>
    <content><![CDATA[<hr><hr><h1 id="一、SpringMVC是什么"><a href="#一、SpringMVC是什么" class="headerlink" title="一、SpringMVC是什么?"></a>一、SpringMVC是什么?</h1><p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等。</p><a id="more"></a>


<h1 id="二、MVC的设计架构"><a href="#二、MVC的设计架构" class="headerlink" title="二、MVC的设计架构"></a>二、MVC的设计架构</h1><p>​    <strong>m: model</strong></p>
<p>​    <strong>v: view</strong></p>
<p>​    <strong>c: controller</strong></p>
<p><a href="https://imgchr.com/i/1toyb6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/02/1toyb6.md.png" alt="1toyb6.md.png"></a></p>
<h1 id="三、SpringMVC的框架"><a href="#三、SpringMVC的框架" class="headerlink" title="三、SpringMVC的框架"></a>三、SpringMVC的框架</h1><p><a href="https://imgchr.com/i/1toOPg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/02/1toOPg.md.png" alt="1toOPg.md.png"></a></p>
<ol>
<li>用户发起request请求，请求至DispatcherServlet前端控制器 </li>
<li>DispatcherServlet前端控制器请求HandlerMapping处理器映射器查找Handler </li>
<li>HandlerMapping处理器映射器，根据url及一些配置规则（xml配置、注解配置）查找Handler，将Handler返回给DispatcherServlet前端控制器 </li>
<li>DispatcherServlet前端控制器调用适配器执行Handler </li>
<li>适配器执行Handler </li>
<li>Handler执行完成返回ModelAndView </li>
<li>适配器将ModelAndView返回给DispatcherServlet </li>
<li>DispatcherServlet调用视图解析器进行视图解析，解析后生成view (springmvc视图封装对象 )</li>
<li>ViewResolver视图解析器给前端控制器返回view </li>
<li>DispatcherServlet调用view的渲染视图的方法，将模型数据填充到request域 </li>
<li>DispatcherServlet向用户响应结果(jsp页面、json数据。。。。) </li>
</ol>
<h1 id="四、springmvc入门程序"><a href="#四、springmvc入门程序" class="headerlink" title="四、springmvc入门程序"></a>四、springmvc入门程序</h1><h2 id="4-1-引入SpringMVC的依赖"><a href="#4-1-引入SpringMVC的依赖" class="headerlink" title="4.1 引入SpringMVC的依赖"></a>4.1 引入SpringMVC的依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-配置处理器映射器、适配器和视图解析器"><a href="#4-2-配置处理器映射器、适配器和视图解析器" class="headerlink" title="4.2 配置处理器映射器、适配器和视图解析器"></a>4.2 配置处理器映射器、适配器和视图解析器</h2><p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.it.bigdata"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器  RequestMappingHandlerMapping--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器  RequestMappingHandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器  默认为InternalResourceViewResolver --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-配置前端控制器"><a href="#4-3-配置前端控制器" class="headerlink" title="4.3  配置前端控制器"></a>4.3  配置前端控制器</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4-编写处理器"><a href="#4-4-编写处理器" class="headerlink" title="4.4 编写处理器"></a>4.4 编写处理器</h2><p><strong>即controller层代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值是视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ModelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/func1.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index02.jsp"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-编写视图"><a href="#4-5-编写视图" class="headerlink" title="4.5 编写视图"></a>4.5 编写视图</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index02&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">$&#123;userage&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="五、处理器方法的返回值"><a href="#五、处理器方法的返回值" class="headerlink" title="五、处理器方法的返回值"></a>五、处理器方法的返回值</h1><h2 id="5-1-返回ModelAndView"><a href="#5-1-返回ModelAndView" class="headerlink" title="5.1 返回ModelAndView"></a>5.1 返回ModelAndView</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func1.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index02.jsp"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-返回String"><a href="#5-2-返回String" class="headerlink" title="5.2 返回String"></a>5.2 返回String</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回值是视图的名称，在model中可以设置数据（常用）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func2.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">func2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func2"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>,<span class="string">"张三"</span>);</span><br><span class="line">     model.addAttribute(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index02.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3返回对象"><a href="#5-3返回对象" class="headerlink" title="5.3返回对象"></a>5.3返回对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func3.action"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回对象 以json返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">func3</span><span class="params">(Model model, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func3"</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"李四"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>须导入<strong>jackson-databind</strong>包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4返回void"><a href="#5-4返回void" class="headerlink" title="5.4返回void"></a>5.4返回void</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func4.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func4</span><span class="params">(Model model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func4"</span>);</span><br><span class="line">    <span class="comment">//从视图发送数据到控制台</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">    <span class="comment">//从控制台写数据到视图</span></span><br><span class="line">    response.getWriter().write(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC02</title>
    <url>/2020/02/12/SpringMVC02/</url>
    <content><![CDATA[<h1 id="一、lombok注解开发"><a href="#一、lombok注解开发" class="headerlink" title="一、lombok注解开发"></a>一、lombok注解开发</h1><ul>
<li><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></li>
</ul><p>大部分项目中都必不可少的包含数据库实体(Entity)、数据载体(dto,dataObject),而这两部分都包含着大量的没有业务逻辑的setter、getter、空参构造，同时我们一般要复写类的toString(),equals(),hashCode()方法(贫血模型)。这些工作都是重复性的工作，作为程序员，懒是必备素质之一，这些工作肯定已经有大牛封装好了处理方法,这就是lombok。 </p><a id="more"></a>

<ul>
<li><h2 id="下载安装插件"><a href="#下载安装插件" class="headerlink" title="下载安装插件"></a>下载安装插件</h2><p>去官网下载idea对应版本的lombok的压缩包</p>
<p>插件配置</p>
<p>重启</p>
</li>
<li><h2 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h2></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li><p><strong>@Setter</strong></p>
<p>生成setter方法，final变量不包含</p>
</li>
<li><p><strong>@Getter</strong></p>
<p>生成getter方法，final变量不包含</p>
</li>
<li><p><strong>@NoArgsConstructor</strong></p>
<p>生成空参构造</p>
</li>
<li><p><strong>@AllArgsConstructor</strong></p>
<p>生成全部参数构造</p>
</li>
<li><p><strong>@RequiredArgsConstructor</strong></p>
<p>将标记为@NoNull的属性生成一个构造器 ， 如果运行中标记为@NoNull的属性为null,会抛出空指针异常。 </p>
</li>
<li><p><strong>@ToString</strong></p>
<p>生成所有属性的toString()方法 </p>
</li>
<li><p><strong>@EqualsAndHashCode</strong></p>
<p>生成equals()方法和hashCode方法 </p>
</li>
<li><p><strong>@Data(常用)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data直接修饰POJO or beans， getter所有的变量，setter所有不为final的变量。如果你不需要默认的生成方式，直接填写你需要的annotation的就可以了。默认生成的所有的annotation都是public的，如果需要不同权限修饰符可以使用AccessLevel.NONE选项。当然@Data 也可以使用staticConstructor选项生成一个静态方法。</span><br></pre></td></tr></table></figure>

<p><strong>@Data=@Setter+@Getter+@EqualsAndHashCode+@NoArgsConstructor</strong></p>
</li>
<li><p><strong>@SneakyThrows</strong> </p>
<p>可以对受检异常进行捕捉并抛出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConversion</span> <span class="keyword">implements</span> <span class="title">Converter</span> &lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String  str)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat  simpleDateFormat  =  <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        Date  date =  simpleDateFormat.parse(str);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h1 id="二、SpringMVC注解开发"><a href="#二、SpringMVC注解开发" class="headerlink" title="二、SpringMVC注解开发"></a>二、SpringMVC注解开发</h1><ul>
<li><h3 id="导入MVC、Web依赖"><a href="#导入MVC、Web依赖" class="headerlink" title="导入MVC、Web依赖"></a>导入MVC、Web依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="SpringMVC中注解开发的注解总结"><a href="#SpringMVC中注解开发的注解总结" class="headerlink" title="SpringMVC中注解开发的注解总结"></a>SpringMVC中注解开发的注解总结</h2><ul>
<li><p><strong>@controller</strong> </p>
<p>标记为处理器，方便Spring容器进行映射。 </p>
</li>
<li><p><strong>@RequestMapping</strong> </p>
<p>通过RequestMapping注解可以定义不同的处理器映射规则。 </p>
<p><strong>作用：</strong></p>
<p>1、URL路径映射。</p>
<p>2、窄化请求映射。</p>
<p>@RequestMapping放在类名上边，设置请求前缀</p>
<p>@Controller</p>
<p>@RequestMapping(“/item”)</p>
<p>方法名上边设置请求映射url：</p>
<p>@RequestMapping放在方法名上边，如下：</p>
<p>@RequestMapping(“/queryItem “) </p>
<p>访问地址为：/item/queryItem</p>
<p> 3、请求方法限定 </p>
</li>
<li><p><strong>@RequestParam</strong> </p>
<p>使用@RequestParam常用于处理简单类型的绑定。</p>
<p>常用定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(@RequestParam(value=<span class="string">"item_id"</span>,required=<span class="keyword">true</span>)</span> String id) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Validated</strong> </p>
<p>在绑定参数的参数前添加，表示对该参数进行校验。参数后面还需要添加BindingResult，表示检验信息写入此。 </p>
</li>
<li><p><strong>@RequestBody和ResponseBody</strong> </p>
<p>@RequestBody和ResponseBody分别表示输入和输出转换为json数据。</p>
<p>controller编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">json</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"------------jsondata-----------------"</span>);</span><br><span class="line">    <span class="keyword">return</span>  person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>@PathVariable</strong> </p>
<p>用于RESTfull中的模板模式映射。</p>
<p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/* 多个占位符的值得接受和传递 */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param04/&#123;id&#125;/&#123;name&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">param04</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span> <span class="keyword">int</span>  id</span></span><br><span class="line"><span class="function">  ,@<span class="title">PathVariable</span><span class="params">(value = <span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">      System.out.println(id +<span class="string">"-----------"</span>+ name);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>工具</category>
        <category>lombok</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hello hexo</category>
      </categories>
      <tags>
        <tag>hello hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架</title>
    <url>/2020/01/13/Spring%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、spring简介"><a href="#一、spring简介" class="headerlink" title="一、spring简介"></a>一、spring简介</h1><p>spring 是一个轻量级的，基于IOC和AOP核心技术的企业级开源开发框架</p><p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p><a id="more"></a>

<p>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </p>
<p><strong>Spring目的</strong>：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明 管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </p>
<p><strong>注意：</strong>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<h1 id="二、spring的主要特征"><a href="#二、spring的主要特征" class="headerlink" title="二、spring的主要特征"></a>二、spring的主要特征</h1><p><strong>（1）轻量级</strong>：spring是一个轻量级的开发框架，基本版本大约只有2M</p>
<p><strong>（2）IOC：</strong>控制反转，应用程序中对象之间的依赖是由spring 来控制的</p>
<p><strong>（3）AOP：</strong>面向切面编程，spring支持面向切面编程，这样可以将业务逻辑和系统服务分开，分离</p>
<p><strong>（4）容器：</strong>包含并管理应用程序中对象的生命周期和配置信息</p>
<p><strong>（5）MVC思想：</strong>spring也是基于MVC思想的框架，也遵循模型-视图-控制器这三个层次</p>
<p><strong>（6）事务：</strong>spring提供一个持续化的接口，可以上至扩展到本地事务下至扩展到全局事务</p>
<p><strong>（7）异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，hibernate,or JDO抛出的）转化为一致的unchecked 异常。</p>
<h1 id="三、spring优缺点"><a href="#三、spring优缺点" class="headerlink" title="三、spring优缺点"></a>三、spring优缺点</h1><p><strong>优点：</strong></p>
<p>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。<br>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。<br>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属<br>性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。<br>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。<br>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。<br>使用Spring构建的应用程序易于单元测试。<br>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。<br>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。<br>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。<br><strong>缺点：</strong><br>1.jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器</p>
<p>2.Spring不支持分布式，这也是EJB仍然在用的原因之一。</p>
<h1 id="四、Spring的两大内容"><a href="#四、Spring的两大内容" class="headerlink" title="四、Spring的两大内容"></a>四、Spring的两大内容</h1><p><strong>IOC（控制反转）和AOP（面向切面编程）</strong></p>
<p><strong>IOC：</strong>把对象的创建权交给Spring。</p>
<p><strong>AOP：</strong>底层使用动态代理,对代码进行增强的一种方式。</p>
<h2 id="1、IOC和DI（依赖注入）的关系"><a href="#1、IOC和DI（依赖注入）的关系" class="headerlink" title="1、IOC和DI（依赖注入）的关系"></a>1、IOC和DI（依赖注入）的关系</h2><ul>
<li><p><strong>依赖注入的前提:</strong></p>
<p>有IOC的环境,也就是将必须对象的创建权交给了Spring.</p>
</li>
<li><p><strong>DI 介绍</strong> </p>
<p>Dependency Injection 依赖注入.需要有IOC 的环境,Spring 创建这个类的过程中,Spring 将类的依赖的属性设置进去.</p>
</li>
<li><p><strong>IOC与DI的的区别:</strong> </p>
<p>IOC:  控制反转,将类的对象的创建交给Spring类管理创建.<br>DI:    依赖注入,将类里面的属性在创建类的过程中给属性赋值.<br>DI和IOC的关系: DI不能单独存在,DI需要在IOC的基础上来完成.</p>
<p>这样做得好处：做到了单一职责，并且提高了复用性，解耦了之后，任你如何实现，使用接口的引用调用的方法，永远不需要改变。</p>
</li>
<li><p><strong>依赖注入的四种方式：</strong></p>
<ul>
<li><p><strong>setter注入：</strong></p>
<p>在实体类中生成get、set方法和无参构造方法，在ApplicationContext.xml中配置。</p>
</li>
<li><p><strong>构造器注入:</strong></p>
<p>在实体类中生成有参构造方法，在ApplicationContext.xml中配置。</p>
<p>ApplicationContext.xml中配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     IOC setter注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Stu"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"陕西西安"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Dog"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.Dog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小黄"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    构造器注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"User"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.User"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"xian"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"Dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AcUtils代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> sun.plugin2.message.GetAppletMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">GetApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(path);</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lcx.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.lcx.utils.AcUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DITest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = AcUtils.GetApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        Student stu = applicationContext.getBean(<span class="string">"Stu"</span>, Student.class);</span><br><span class="line">        Dog dog = applicationContext.getBean(<span class="string">"Dog"</span>, Dog.class);</span><br><span class="line">        User user = applicationContext.getBean(<span class="string">"User"</span>, User.class);</span><br><span class="line">        System.out.println(stu+<span class="string">" "</span> +dog+<span class="string">" "</span> +user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student&#123;name=&apos;李四&apos;, age=18, address=&apos;陕西西安&apos;&#125; Dog&#123;name=&apos;小黄&apos;, age=3, color=&apos;yellow&apos;&#125; User&#123;name=&apos;小明&apos;, age=18, address=&apos;xian&apos;, dog=Dog&#123;name=&apos;小黄&apos;, age=3, color=&apos;yellow&apos;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>当注入的属性为另一个类对象时用 ref、在影射过程中如果该类的对象有继承关系时用parent=父类注解id对应的字符串。</p>
</li>
<li><p>接口注入（不常用）：</p>
<p>通过接口的方式给实体类注入信息。例子如下：</p>
<p>change4.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"changeToLowerCase"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.ChangetoLowerCase"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"ABCDEFG"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"changeToUoCase"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.ChangetoUpCase"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"higklmn"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ChangeWord.java接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义两个实体类，分别实现大写转小写，小写转大写。代码如下：</p>
<p>ChangetoLower.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangetoLowerCase</span> <span class="keyword">implements</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ChangetoUpCase.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangetoUpCase</span> <span class="keyword">implements</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toUpperCase();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大写转小写后的结果：abcdefg</span><br><span class="line">小写转大写后的结果：HIGKLMN</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注解注入（推荐）：</strong></p>
<p>ApplicationContext01.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lcx.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实体类Items：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>@Component(“items”)<br>  public class Items {</p>
<pre><code>@Value(&quot;大白兔&quot;)
  private String name;
  @Value(&quot;10&quot;)
  private Double price;
  @Value(&quot;糖&quot;)
  private String dec;</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String getName() &#123;</span><br><span class="line">      return name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setName(String name) &#123;</span><br><span class="line">      this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Double getPrice() &#123;</span><br><span class="line">      return price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setPrice(Double price) &#123;</span><br><span class="line">      this.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String getDec() &#123;</span><br><span class="line">      return dec;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setDec(String dec) &#123;</span><br><span class="line">      this.dec = dec;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>  }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实体类Super：</span><br><span class="line">  </span><br><span class="line">```java</span><br><span class="line">package com.lcx.pojo;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component(&quot;super&quot;)</span><br><span class="line">public class Super &#123;</span><br><span class="line">    @Value(&quot;大脚便利店&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Items items;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Items getItems() &#123;</span><br><span class="line">        return items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<pre><code>测试类代码：</code></pre>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lcx.pojo.Items;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.Super;</span><br><span class="line"><span class="keyword">import</span> com.lcx.utils.AcUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DITest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = AcUtils.GetApplicationContext(<span class="string">"ApplicationContext01.xml"</span>);</span><br><span class="line">        Items items = applicationContext.getBean(<span class="string">"items"</span>, Items.class);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">        System.out.println(items.getDec());</span><br><span class="line">        System.out.println(items.getPrice());</span><br><span class="line">        Super aSuper = applicationContext.getBean(<span class="string">"super"</span>, Super.class);</span><br><span class="line">        System.out.println(aSuper.getName()+<span class="string">" "</span>+ aSuper.getItems());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>结果：</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大白兔</span><br><span class="line">糖</span><br><span class="line">10.0</span><br><span class="line">大脚便利店 Items&#123;name=&apos;大白兔&apos;, price=10.0, dec=&apos;糖&apos;&#125;</span><br></pre></td></tr></table></figure>

<pre><code>**注意：**如果注入的属性为对象，使用@Autowired自动注入。</code></pre><h2 id="2、AOP（面向切面编程）"><a href="#2、AOP（面向切面编程）" class="headerlink" title="2、AOP（面向切面编程）"></a>2、AOP（面向切面编程）</h2><h4 id="Spring中的AOP的简介"><a href="#Spring中的AOP的简介" class="headerlink" title="Spring中的AOP的简介"></a><strong>Spring中的AOP的简介</strong></h4><ul>
<li><strong>AOP Aspect Oriented Programing 面向切面编程</strong></li>
<li><strong>AOP采取==横向抽取==机制，取代了传统==纵向继承==体系重复性代码（性能监视、事务管理、安全检查、缓存）</strong></li>
<li><strong>Spring中的Aop是纯Java来实现的,使用==动态代理==的方式增强代码</strong></li>
<li><strong>AOP不是由Spring提出来的,是由AOP联盟定义的</strong></li>
</ul>
<h4 id="Spring中的动态代理"><a href="#Spring中的动态代理" class="headerlink" title="Spring中的动态代理"></a>Spring中的动态代理</h4><ul>
<li><strong>jdk自带的动态代理</strong><ul>
<li>如果委托类和代理类实现了同一个接口则底层选择jdk的动态代理</li>
</ul>
</li>
<li><strong>cglib动态代理</strong><ul>
<li>委托类和代理类没有实现同一个接口,则底层选择cglib的动态代理,cglib的动态代理底层使用的是继承</li>
</ul>
</li>
</ul>
<h4 id="Spring中的AOP的专业术语"><a href="#Spring中的AOP的专业术语" class="headerlink" title="Spring中的AOP的专业术语"></a>Spring中的AOP的专业术语</h4><ul>
<li><strong>Joinpoint(连接点)</strong> :委托类中可以被增强的方法 </li>
<li>==<strong>Pointcut(切入点)</strong> :切点 ,要被增强的方法== </li>
<li>==<strong>Advice(通知/增强)</strong> :增强的代码== </li>
<li><strong>Target(目标对象)</strong> :委托对象 </li>
<li><strong>Weaving(织入) :把增强</strong>应用<strong>切点</strong>的过程 </li>
<li><strong>Proxy（代理）</strong>: 一个类被AOP织入增强后，就产生一个结果代理类 </li>
<li>==<strong>Aspect(切面):</strong> 是<strong>切点</strong>和<strong>通知</strong>的结合== </li>
</ul>
<h4 id="Spring中的AOP的实现"><a href="#Spring中的AOP的实现" class="headerlink" title="Spring中的AOP的实现"></a>Spring中的AOP的实现</h4><h5 id="传统的SpringAOP"><a href="#传统的SpringAOP" class="headerlink" title="传统的SpringAOP"></a>传统的SpringAOP</h5><p>​    <strong>一个切点只能对应一个通知</strong></p>
<h5 id="基于AspectJ的AOP"><a href="#基于AspectJ的AOP" class="headerlink" title="基于AspectJ的AOP"></a>基于AspectJ的AOP</h5><ul>
<li>AspectJ是一个基于Java语言的面向切面的AOP框架</li>
<li>Spring2.0以后新增了对AspectJ<strong>切点表达式</strong>支持</li>
<li>@AspectJ 是AspectJ1.5新增功能，通过JDK5注解技术，允许直接在Bean类中定义切面</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li>
</ul>
<h5 id="Aspectj的切点表达式"><a href="#Aspectj的切点表达式" class="headerlink" title="Aspectj的切点表达式"></a>Aspectj的切点表达式</h5><ul>
<li>语法:execution(表达式)</li>
<li>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)</li>
<li>public * *(..) —检索所有的public方法</li>
<li>execution(“* cn.it.spring4.demo1.dao.*(..)”) —只检索当前包</li>
<li>execution(“* cn.it.spring4.demo1.dao..*(..)”) —检索包及当前包的子包.</li>
</ul>
<h5 id="Aspect的增强类型"><a href="#Aspect的增强类型" class="headerlink" title="Aspect的增强类型"></a>Aspect的增强类型</h5><ul>
<li>@Before 前置通知 </li>
<li>@AfterReturning 后置通知 </li>
<li>@Around 环绕通知 </li>
<li>@AfterThrowing抛出通知 </li>
<li>@After 最终final通知 </li>
</ul>
<h4 id="aop编程实现"><a href="#aop编程实现" class="headerlink" title="aop编程实现"></a>aop编程实现</h4><ul>
<li><p><strong>引入pom依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置自动代理和注解扫描器</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.it.bigdata"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启aop自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>编写（dao）委托类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加新用户..."</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户..."</span>+id);</span><br><span class="line">        <span class="comment">//int a =10/0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUser</span><span class="params">(Integer  id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户"</span>+ id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户..."</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面 = 切点(切点表达式) + 通知(要增强的代码,方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.add*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置通知带返回值</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution( * com.lcx.bigdata.UserDao.add*(..))"</span>, returning = <span class="string">"ret"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice2</span><span class="params">(String ret)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span> + ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.updateUser(..)))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice3</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕通知前"</span>);</span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕通知后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//抛出异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution( * com.lcx.bigdata.UserDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:ApplicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBefore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">18</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.updateUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一些注解的含义：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Aspect 作用是把当前类标识为一个切面供容器读取</span><br><span class="line">- @Before 前置通知 </span><br><span class="line">- @AfterReturning 后置通知 </span><br><span class="line">- @Around 环绕通知 </span><br><span class="line">- @AfterThrowing抛出通知 </span><br><span class="line">- @After 最终final通知</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Repository 存储层(Dao)Bean</span><br><span class="line">- @Service 业务层Bean</span><br><span class="line">- @Controller 展示层Bean</span><br><span class="line">- @Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。</span><br><span class="line">- @Service 通常作用在业务层，但是目前该功能与 @Component 相同。</span><br><span class="line">- @Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @RunWith 就是一个运行器</span><br><span class="line">- @RunWith(JUnit4.class) 就是指用JUnit4来运行</span><br><span class="line"></span><br><span class="line">- @RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境</span><br><span class="line"></span><br><span class="line">- @RunWith(Suite.class) 的话就是一套测试集合，</span><br><span class="line"></span><br><span class="line">- @ContextConfiguration Spring整合JUnit4测试时，使用注解引入多个配置文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</span><br><span class="line">@Autowired的原理:其实在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性.</span><br><span class="line">注意事项：</span><br><span class="line">　　在使用@Autowired时，首先在容器中查询对应类型的bean。</span><br><span class="line">　　　　如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据。</span><br><span class="line">　　　　如果查询的结果不止一个，那么@Autowired会根据名称来查找。</span><br><span class="line">　　　　如果查询的结果为空，那么会抛出异常。解决方法时，使用required=false。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>git上传</title>
    <url>/2020/06/18/git%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="一、Git手动上传文件"><a href="#一、Git手动上传文件" class="headerlink" title="一、Git手动上传文件"></a>一、Git手动上传文件</h1><h2 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1.创建远程仓库"></a>1.创建远程仓库</h2><p>在自己的Github上创建一个仓库</p><p><img src="https://i.loli.net/2020/06/18/XAeHZzOkblIqTif.png" alt="image-20200618215633512"></p><p><img src="https://i.loli.net/2020/06/18/HirE1N9pxGq4MLd.png" alt="image-20200618215739080"></p><p>填写仓库名、仓库描述、勾选<strong>Initialize this repostitory with a README</strong>选项，在创建仓库时会初始化一个README.md文件，点击<strong>Create repository</strong>按钮进行创建。</p><h2 id="2-创建本地仓库"><a href="#2-创建本地仓库" class="headerlink" title="2.创建本地仓库"></a>2.创建本地仓库</h2><a id="more"></a>



<p>新建一个文件夹作为本地仓库。右键<strong>git bash here</strong>，在终端中输入git init 命令初始化仓库。</p>
<p><img src="https://i.loli.net/2020/06/18/BNyTRdruF18z6H7.png" alt="image-20200618220624964"></p>
<h2 id="3-同步远程仓库"><a href="#3-同步远程仓库" class="headerlink" title="3.同步远程仓库"></a>3.同步远程仓库</h2><p>然后添加要上传的文件或代码至本地仓库中，在终端输入git add . </p>
<p>用官方的话就是：跟踪新文件，或者说将内容从工作目录添加到暂存区。</p>
<p><img src="https://i.loli.net/2020/06/18/DhiKUbZFxtQWjgP.png" alt="image-20200618220902092"></p>
<p>提交staged的文件git commit -m “initial commit”。</p>
<p><strong>git commit -m用于提交暂存区的文件</strong></p>
<p>从GitHub上拷贝之前新建的仓库地址，使用git remote add origin + 仓库地址。</p>
<p>再使用Push命令 ，将本地仓库同步至远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>如果提示冲突可以强制push：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>

<p>==切记，git不能上传大于100MB的单个文件！！！==</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>html学习笔记&lt;一&gt;</title>
    <url>/2019/10/31/html%E4%B8%8Ecss%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-一个完整的网页"><a href="#1-一个完整的网页" class="headerlink" title="1. 一个完整的网页"></a>1. 一个完整的网页</h1><p>​    网页的内容 + 网页的样式 + 网页的动作</p><h1 id="2-万维网联盟-W3C"><a href="#2-万维网联盟-W3C" class="headerlink" title="2. 万维网联盟(W3C)"></a>2. 万维网联盟(W3C)</h1><p>由蒂姆·伯纳斯-李于1994年10月在麻省理工学院（MIT）计算机科学实验室成立<br>是Web技术领域最具权威和影响力的国际中立性技术标准机构<br>为Web技术的互相兼容，互联网技术的发展和应用起到了基础性和根本性的支撑作用</p><a id="more"></a>

<p>一流的企业做标准(苹果  高通   google   微软   华为)</p>
<p>二流企业做产品(腾讯  阿里   美团   字节跳动)  BAT  TMD</p>
<p>三流企业做服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://www.w3school.com.cn/</span><br></pre></td></tr></table></figure>



<h1 id="3-html的简介"><a href="#3-html的简介" class="headerlink" title="3. html的简介"></a>3. html的简介</h1><p>​    HTML（HyperText Mark-up Language）：超文本标记语言或超文本连接标示语言，由Tim Berners-Lee发明，是构成网页文档的主要语言</p>
<h1 id="4-html的编写"><a href="#4-html的编写" class="headerlink" title="4. html的编写"></a>4. html的编写</h1><ul>
<li>HTML文件一般存储为.htm或.html文件</li>
</ul>
<h1 id="5-html的编写工具-编辑器"><a href="#5-html的编写工具-编辑器" class="headerlink" title="5. html的编写工具(编辑器)"></a>5. html的编写工具(编辑器)</h1><ul>
<li>windows自带的记事本</li>
<li>Notepad++(windows平台最强大的文本编辑器)</li>
<li>Sublim(跨平台最强大的编辑器)</li>
<li>VScode(跨平台最强大的编辑器, “宇宙第一编辑器”)</li>
</ul>
<h1 id="6-html的编写工具-集成开发环境"><a href="#6-html的编写工具-集成开发环境" class="headerlink" title="6. html的编写工具(集成开发环境)"></a>6. html的编写工具(集成开发环境)</h1><ul>
<li>Dreamweaver(收费  已经不怎么用了)</li>
<li><strong>IntelliJ IDEA(新一代的神器)</strong></li>
<li><strong>Hbuilder(专属前端开发的神器)</strong></li>
</ul>
<h1 id="7-html中的特殊字符"><a href="#7-html中的特殊字符" class="headerlink" title="7. html中的特殊字符"></a>7. html中的特殊字符</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">空格	&amp;nbsp;</span><br><span class="line">大于号(&gt;)	&amp;gt;</span><br><span class="line">小于号(&lt;)	&amp;lt;</span><br><span class="line">引号(")	&amp;quot;</span><br><span class="line">版权符号@	&amp;copy;</span><br></pre></td></tr></table></figure>



<h1 id="8-html中的列表"><a href="#8-html中的列表" class="headerlink" title="8. html中的列表"></a>8. html中的列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表 </span></span><br><span class="line"><span class="comment">disc: 实体圆心,默认值</span></span><br><span class="line"><span class="comment">square: 实体方心</span></span><br><span class="line"><span class="comment">circle: 空心圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有序列表</span></span><br><span class="line"><span class="comment">1: 数字(阿拉伯数字)</span></span><br><span class="line"><span class="comment">a/A: 字母(英文字母)</span></span><br><span class="line"><span class="comment">i/I: 罗马数字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表</span></span><br><span class="line"><span class="comment">dt:列表的标题</span></span><br><span class="line"><span class="comment">dd:列表的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>所属学院<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>计算机院<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>所属专业<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>计算机网络<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="9-html中的表格"><a href="#9-html中的表格" class="headerlink" title="9. html中的表格"></a>9. html中的表格</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    border:表格边框的宽度</span></span><br><span class="line"><span class="comment">    width:表格自身的宽度</span></span><br><span class="line"><span class="comment">    height:表格自身的高度</span></span><br><span class="line"><span class="comment">    aligin: 表格的水平位置对其方式(left  center   right)</span></span><br><span class="line"><span class="comment">    cellspacing: 单元格距离边框的大小</span></span><br><span class="line"><span class="comment">    cellpadding: 单元格内容距离单元格的距离</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">width</span>=<span class="string">"800px"</span> <span class="attr">height</span>=<span class="string">"300px"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"0px"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        aligin: 给tr指定aligin则代表tr中的td的所有内容的对其方式</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rowspan 行合并(竖直方向上的合并) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 列合并(水皮方向上的合并) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="10-表单标签"><a href="#10-表单标签" class="headerlink" title="10. 表单标签"></a>10. 表单标签</h1><h1 id="11-html中的语义化标签"><a href="#11-html中的语义化标签" class="headerlink" title="11. html中的语义化标签"></a>11. html中的语义化标签</h1><ul>
<li><p>语义化标签可以让页面结构更加简洁、合理</p>
</li>
<li><p>能够达到见名知义的作用</p>
</li>
<li><p>更加符合Web标准，更利于搜索引擎的抓取（SEO的优化）和开发维护</p>
<p>article   header   footer</p>
</li>
</ul>
<h1 id="12-iframe框架标签"><a href="#12-iframe框架标签" class="headerlink" title="12. iframe框架标签"></a>12. iframe框架标签</h1><p> 用来引用框架页面，src属性用来指定要引入的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"path"</span> <span class="attr">name</span>=<span class="string">"mainFrame"</span> <span class="attr">frameborder</span>=<span class="string">"x"</span> <span class="attr">scrolling</span>=<span class="string">"yes/no"</span>  <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">width</span>=<span class="string">"x"</span> <span class="attr">height</span>=<span class="string">"y"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="13-独门秘籍"><a href="#13-独门秘籍" class="headerlink" title="13. 独门秘籍"></a>13. 独门秘籍</h1><p>emment表达式:</p>
<p>同级别:  +</p>
<p>子级:  &gt;</p>
<p>属性: []</p>
<p>文本: {}</p>
<p>数量:  *n</p>
<p>分组:  ()</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>java mysql数据类型对照</title>
    <url>/2020/01/16/java-mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E7%85%A7/</url>
    <content><![CDATA[<h1 id="java-mysql数据类型对照"><a href="#java-mysql数据类型对照" class="headerlink" title="java mysql数据类型对照"></a>java mysql数据类型对照</h1><table>
<thead>
<tr>
<th><strong>类型名称</strong></th>
<th><strong>显示长度</strong></th>
<th><strong>数据库类型</strong></th>
<th><strong>JAVA类型</strong></th>
<th><strong>JDBC类型索引(int)</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>VARCHAR</strong></td>
<td><strong>L+N</strong></td>
<td><strong>VARCHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>12</strong></td>
<td></td>
</tr>
<tr>
<td><strong>CHAR</strong></td>
<td><strong>N</strong></td>
<td><strong>CHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>1</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BLOB</strong></td>
<td><strong>L+N</strong></td>
<td><strong>BLOB</strong></td>
<td><strong>java.lang.byte[]</strong></td>
<td><strong>-4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TEXT</strong></td>
<td><strong>65535</strong></td>
<td><strong>VARCHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>-1</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>INTEGER</strong></td>
<td><strong>4</strong></td>
<td><strong>INTEGER UNSIGNED</strong></td>
<td><strong>java.lang.Long</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TINYINT</strong></td>
<td><strong>3</strong></td>
<td><strong>TINYINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>-6</strong></td>
<td></td>
</tr>
<tr>
<td><strong>SMALLINT</strong></td>
<td><strong>5</strong></td>
<td><strong>SMALLINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>5</strong></td>
<td></td>
</tr>
<tr>
<td><strong>MEDIUMINT</strong></td>
<td><strong>8</strong></td>
<td><strong>MEDIUMINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BIT</strong></td>
<td><strong>1</strong></td>
<td><strong>BIT</strong></td>
<td><strong>java.lang.Boolean</strong></td>
<td><strong>-7</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BIGINT</strong></td>
<td><strong>20</strong></td>
<td><strong>BIGINT UNSIGNED</strong></td>
<td><strong>java.math.BigInteger</strong></td>
<td><strong>-5</strong></td>
<td></td>
</tr>
<tr>
<td><strong>FLOAT</strong></td>
<td><strong>4+8</strong></td>
<td><strong>FLOAT</strong></td>
<td><strong>java.lang.Float</strong></td>
<td><strong>7</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DOUBLE</strong></td>
<td><strong>22</strong></td>
<td><strong>DOUBLE</strong></td>
<td><strong>java.lang.Double</strong></td>
<td><strong>8</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DECIMAL</strong></td>
<td><strong>11</strong></td>
<td><strong>DECIMAL</strong></td>
<td><strong>java.math.BigDecimal</strong></td>
<td><strong>3</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BOOLEAN</strong></td>
<td><strong>1</strong></td>
<td><strong>同TINYINT</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>ID</strong></td>
<td><strong>11</strong></td>
<td><strong>PK (INTEGER UNSIGNED)</strong></td>
<td><strong>java.lang.Long</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>DATE</strong></td>
<td><strong>10</strong></td>
<td><strong>DATE</strong></td>
<td><strong>java.sql.Date</strong></td>
<td><strong>91</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TIME</strong></td>
<td><strong>8</strong></td>
<td><strong>TIME</strong></td>
<td><strong>java.sql.Time</strong></td>
<td><strong>92</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DATETIME</strong></td>
<td><strong>19</strong></td>
<td><strong>DATETIME</strong></td>
<td><strong>java.sql.Timestamp</strong></td>
<td><strong>93</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TIMESTAMP</strong></td>
<td><strong>19</strong></td>
<td><strong>TIMESTAMP</strong></td>
<td><strong>java.sql.Timestamp</strong></td>
<td><strong>93</strong></td>
<td></td>
</tr>
<tr>
<td><strong>YEAR</strong></td>
<td><strong>4</strong></td>
<td><strong>YEAR</strong></td>
<td><strong>java.sql.Date</strong></td>
<td><strong>91</strong></td>
<td></td>
</tr>
</tbody></table>]]></content>
      <categories>
        <category>java</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程之线程同步</title>
    <url>/2019/11/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<hr><hr><p>用一个简单的题目来说明线程同步的三种方式，题目如下：</p><p>​        模拟传智播客的三个老师同时分发80份学习笔记，每个老师相当于一个线程。</p><h3 id="同步代码块实现"><a href="#同步代码块实现" class="headerlink" title="同步代码块实现"></a>同步代码块实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synclock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(note &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>





<h3 id="同步方法实现"><a href="#同步方法实现" class="headerlink" title="同步方法实现"></a>同步方法实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynMethods</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            SendNote();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SendNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(note &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步锁实现"><a href="#同步锁实现" class="headerlink" title="同步锁实现"></a>同步锁实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line">    <span class="comment">//定义一个锁对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynCodeBlock synCodeBlock = <span class="keyword">new</span> SynCodeBlock();</span><br><span class="line">        <span class="comment">//创建并开启三个线程，模拟三个老师分发笔记</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SynMethods synMethods = <span class="keyword">new</span> SynMethods();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SynLock synLock = <span class="keyword">new</span> SynLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>同步代码块、同步方法、同步锁都是实现不同线程对同一资源的共线问题。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mySql中的事务</title>
    <url>/2020/01/15/mySql%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="一、MySql中的事务"><a href="#一、MySql中的事务" class="headerlink" title="一、MySql中的事务"></a>一、MySql中的事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul><a id="more"></a>

<h1 id="二、事务的四大特性（ACID）"><a href="#二、事务的四大特性（ACID）" class="headerlink" title="二、事务的四大特性（ACID）"></a>二、事务的四大特性（ACID）</h1><ul>
<li><p><strong>原子性（Atomicity）</strong></p>
<p>整个事务中的单元要么全部成功,要么全部失败 。</p>
<p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p><strong>一致性（Consistency）</strong></p>
<p>事务执行前后的结果必须一致 。</p>
<p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p><strong>隔离性(Isolation)</strong> </p>
<p>事务之间应该相互独立,互相不受影响 。</p>
<p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</p>
</li>
<li><p><strong>持久性(Durability)</strong> </p>
<p>一旦事务提交,就会持久化保存 ,事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p>
<p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<p>​    <em>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</em></p>
<h1 id="三、事务的两大动作"><a href="#三、事务的两大动作" class="headerlink" title="三、事务的两大动作"></a>三、事务的两大动作</h1><ul>
<li><strong>提交（commit）</strong></li>
<li><strong>回滚（rollback）</strong></li>
</ul>
<h1 id="四、事务的并发问题"><a href="#四、事务的并发问题" class="headerlink" title="四、事务的并发问题"></a>四、事务的并发问题</h1><ul>
<li><strong>脏读</strong><ul>
<li>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li>
</ul>
</li>
<li><strong>不可重复读</strong> <ul>
<li>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致 (<strong>侧重修改操作</strong>)</li>
</ul>
</li>
<li><strong>幻读</strong> <ul>
<li>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读 (<strong>侧重新增或删除</strong>)</li>
</ul>
</li>
</ul>
<h1 id="五、MySQL事务的隔离级别"><a href="#五、MySQL事务的隔离级别" class="headerlink" title="五、MySQL事务的隔离级别"></a>五、MySQL事务的隔离级别</h1><table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（read-uncommitted）</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读已提交（read-committed）</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（repeatable-read）</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化（serializable）</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<h1 id="六、mysql和oracle默认的隔离级别"><a href="#六、mysql和oracle默认的隔离级别" class="headerlink" title="六、mysql和oracle默认的隔离级别"></a>六、mysql和oracle默认的隔离级别</h1><p>​    mysql默认的隔离级别是<strong>repeatable-read</strong> </p>
<p>​    oracle默认的隔离级别是 <strong>read committed</strong></p>
<p>​    <strong>查询事务的隔离级别: select @@tx_isolation</strong> </p>
<p>​    <strong>设置事务的隔离级别: set session transaction  isolation level read committed</strong></p>
<h1 id="七、隔离级别的选择"><a href="#七、隔离级别的选择" class="headerlink" title="七、隔离级别的选择"></a>七、隔离级别的选择</h1><ul>
<li>两个极端的情况不选择<ul>
<li>read uncommitted和serializable是一般不会使用</li>
<li>一般我们会使用默认的隔离级别</li>
</ul>
</li>
</ul>
<h1 id="八、事务控制语句"><a href="#八、事务控制语句" class="headerlink" title="八、事务控制语句"></a>八、事务控制语句</h1><ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li>
</ul>
<h1 id="九、MYSQL-事务处理主要有两种方法："><a href="#九、MYSQL-事务处理主要有两种方法：" class="headerlink" title="九、MYSQL 事务处理主要有两种方法："></a>九、MYSQL 事务处理主要有两种方法：</h1><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>
</ul>
<h1 id="十、jdbc操作事务"><a href="#十、jdbc操作事务" class="headerlink" title="十、jdbc操作事务"></a>十、jdbc操作事务</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Statement statement;</span><br><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/*贾连欲执事*/</span></span><br><span class="line">    <span class="comment">//加载驱动</span></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//操作事务</span></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db2"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    statement = conn.createStatement();</span><br><span class="line">    ShiWuCaoZuo(<span class="number">500</span>, <span class="string">"xiaoming"</span>, <span class="string">"xiaohua"</span>);</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShiWuCaoZuo</span><span class="params">(Integer money, String from, String to)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">    ResultSet resultSet = statement.executeQuery(<span class="string">"select balance from account WHERE name='"</span> + from + <span class="string">"'"</span>);</span><br><span class="line">    <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">        <span class="keyword">int</span> balance = resultSet.getInt(<span class="string">"balance"</span>);</span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= money) &#123;</span><br><span class="line">            statement.execute(<span class="string">"update account set balance=balance-"</span> + money + <span class="string">" where name='"</span> + from + <span class="string">"'"</span>);</span><br><span class="line">            statement.execute(<span class="string">"update account set balance=balance+"</span> + money + <span class="string">" where name='"</span> + to + <span class="string">"'"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            conn.rollback();<span class="comment">//回滚</span></span><br><span class="line">            System.out.println(<span class="string">"转账失败...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    conn.commit();<span class="comment">//提交事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql笔记整理</title>
    <url>/2019/11/26/mysql%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="Windows服务"><a href="#Windows服务" class="headerlink" title="Windows服务"></a>Windows服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 启动MySQL</span><br><span class="line">    net start mysql</span><br><span class="line">-- 创建Windows服务</span><br><span class="line">    sc create mysql binPath = mysqld_bin_path(注意：等号与值之间有空格)</span><br></pre></td></tr></table></figure><h3 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"> </span><br><span class="line">SHOW PROCESSLIST -- 显示哪些线程正在运行</span><br><span class="line">SHOW VARIABLES -- 显示系统变量信息</span><br></pre></td></tr></table></figure><a id="more"></a>



<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">    SELECT DATABASE();</span><br><span class="line">-- 显示当前时间、用户名、数据库版本</span><br><span class="line">    SELECT now(), user(), version();</span><br><span class="line">-- 创建库</span><br><span class="line">    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        CHARACTER SET charset_name</span><br><span class="line">        COLLATE collation_name</span><br><span class="line">-- 查看已有库</span><br><span class="line">    SHOW DATABASES[ LIKE &apos;PATTERN&apos;]</span><br><span class="line">-- 查看当前库信息</span><br><span class="line">    SHOW CREATE DATABASE 数据库名</span><br><span class="line">-- 修改库的选项信息</span><br><span class="line">    ALTER DATABASE 库名 选项信息</span><br><span class="line">-- 删除库</span><br><span class="line">    DROP DATABASE[ IF EXISTS] 数据库名</span><br></pre></td></tr></table></figure>

<h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &apos;string&apos;]</span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line">        DATA DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        INDEX DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = &apos;string&apos;</span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION BY ... (详细见手册)</span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ LIKE &apos;pattern&apos;]</span><br><span class="line">    SHOW TABLES FROM 表名</span><br><span class="line">-- 查看表机构</span><br><span class="line">    SHOW CREATE TABLE 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &apos;PATTERN&apos;]</span><br><span class="line">    SHOW TABLE STATUS [FROM db_name] [LIKE &apos;pattern&apos;]</span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        ALTER TABLE 表名 表的选项</span><br><span class="line">        eg: ALTER TABLE 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        RENAME TABLE 原表名 TO 新表名</span><br><span class="line">        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- RENAME可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span><br><span class="line">        ALTER TABLE 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            ADD[ COLUMN] 字段定义       -- 增加字段</span><br><span class="line">                AFTER 字段名          -- 表示增加在该字段名后面</span><br><span class="line">                FIRST               -- 表示增加在第一个</span><br><span class="line">            ADD PRIMARY KEY(字段名)   -- 创建主键</span><br><span class="line">            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引</span><br><span class="line">            ADD INDEX [索引名] (字段名) -- 创建普通索引</span><br><span class="line">            DROP[ COLUMN] 字段名      -- 删除字段</span><br><span class="line">            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            DROP INDEX 索引名 -- 删除索引</span><br><span class="line">            DROP FOREIGN KEY 外键    -- 删除外键</span><br><span class="line">-- 删除表</span><br><span class="line">    DROP TABLE[ IF EXISTS] 表名 ...</span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [TABLE] 表名</span><br><span class="line">-- 复制表结构</span><br><span class="line">    CREATE TABLE 表名 LIKE 要复制的表名</span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名</span><br><span class="line">-- 检查表是否有错误</span><br><span class="line">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">-- 优化表</span><br><span class="line">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br><span class="line">-- 修复表</span><br><span class="line">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span><br><span class="line">-- 分析表</span><br><span class="line">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 增</span><br><span class="line">    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]</span><br><span class="line">        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span><br><span class="line">        -- 可同时插入多条数据记录！</span><br><span class="line">        REPLACE 与 INSERT 完全一样，可互换。</span><br><span class="line">    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]</span><br><span class="line">-- 查</span><br><span class="line">    SELECT 字段列表 FROM 表名[ 其他子句]</span><br><span class="line">        -- 可来自多个表的多个字段</span><br><span class="line">        -- 其他子句可以不使用</span><br><span class="line">        -- 字段列表可以用*代替，表示所有字段</span><br><span class="line">-- 删</span><br><span class="line">    DELETE FROM 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line">-- 改</span><br><span class="line">    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</span><br></pre></td></tr></table></figure>

<h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL、数据库、表、字段均可设置编码</span><br><span class="line">-- 数据编码与客户端编码不需一致</span><br><span class="line">SHOW VARIABLES LIKE &apos;character_set_%&apos;   -- 查看所有字符集编码项</span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line">SET 变量名 = 变量值</span><br><span class="line">    SET character_set_client = gbk;</span><br><span class="line">    SET character_set_results = gbk;</span><br><span class="line">    SET character_set_connection = gbk;</span><br><span class="line">SET NAMES GBK;  -- 相当于完成以上三个设置</span><br><span class="line">-- 校对集</span><br><span class="line">    校对集用以排序</span><br><span class="line">    SHOW CHARACTER SET [LIKE &apos;pattern&apos;]/SHOW CHARSET [LIKE &apos;pattern&apos;]   查看所有字符集</span><br><span class="line">    SHOW COLLATION [LIKE &apos;pattern&apos;]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    COLLATE 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure>

<h3 id="数据类型（列类型）"><a href="#数据类型（列类型）" class="headerlink" title="数据类型（列类型）"></a>数据类型（列类型）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数值类型</span><br><span class="line"> </span><br><span class="line">-- a. 整型 ----------</span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255</span><br><span class="line">    smallint    2字节    -32768 ~ 32767</span><br><span class="line">    mediumint   3字节    -8388608 ~ 8388607</span><br><span class="line">    int         4字节</span><br><span class="line">    bigint      8字节</span><br><span class="line">    int(M)  M表示总位数</span><br><span class="line">    - 默认存在符号位，unsigned 属性修改</span><br><span class="line">    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</span><br><span class="line">        例：int(5)   插入一个数&apos;123&apos;，补填后为&apos;00123&apos;</span><br><span class="line">    - 在满足要求的情况下，越小越好。</span><br><span class="line">    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</span><br><span class="line"> </span><br><span class="line">-- b. 浮点型 ----------</span><br><span class="line">    类型             字节     范围</span><br><span class="line">    float(单精度)     4字节</span><br><span class="line">    double(双精度)    8字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填0.</span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        float(M, D)     double(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"> </span><br><span class="line">-- c. 定点数 ----------</span><br><span class="line">    decimal -- 可变长度</span><br><span class="line">    decimal(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每9位数字保存为4个字节。</span><br><span class="line"> </span><br><span class="line">2. 字符串类型</span><br><span class="line"> </span><br><span class="line">-- a. char, varchar ----------</span><br><span class="line">    char    定长字符串，速度快，但浪费空间</span><br><span class="line">    varchar 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    char,最多255个字符，与编码无关。</span><br><span class="line">    varchar,最多65535字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过65535个字节。</span><br><span class="line">        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</span><br><span class="line">    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    varchar 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。</span><br><span class="line">    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span><br><span class="line"> </span><br><span class="line">-- b. blob, text ----------</span><br><span class="line">    blob 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, blob, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给default值</span><br><span class="line"> </span><br><span class="line">-- c. binary, varbinary ----------</span><br><span class="line">    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    char, varchar, text 对应 binary, varbinary, blob.</span><br><span class="line"> </span><br><span class="line">3. 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span><br><span class="line">    date        3字节    日期         1000-01-01 到 9999-12-31</span><br><span class="line">    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span><br><span class="line">    time        3字节    时间         -838:59:59 到 838:59:59</span><br><span class="line">    year        1字节    年份         1901 - 2155</span><br><span class="line">datetime    YYYY-MM-DD hh:mm:ss</span><br><span class="line">timestamp   YY-MM-DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">date        YYYY-MM-DD</span><br><span class="line">            YY-MM-DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">time        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line">year        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br><span class="line"> </span><br><span class="line">4. 枚举和集合</span><br><span class="line"> </span><br><span class="line">-- 枚举(enum) ----------</span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为65535.</span><br><span class="line">    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    NULL值的索引是NULL。</span><br><span class="line">    空字符串错误值的索引值是0。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">-- 集合（set） ----------</span><br><span class="line">set(val1, val2, val3...)</span><br><span class="line">    create table tab ( gender set(&apos;男&apos;, &apos;女&apos;, &apos;无&apos;) );</span><br><span class="line">    insert into tab values (&apos;男, 女&apos;);</span><br><span class="line">    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，SET成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure>

<h3 id="选择类型"><a href="#选择类型" class="headerlink" title="选择类型"></a>选择类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- PHP角度</span><br><span class="line">1. 功能满足</span><br><span class="line">2. 存储空间尽量小，处理效率更高</span><br><span class="line">3. 考虑兼容问题</span><br><span class="line"> </span><br><span class="line">-- IP存储 ----------</span><br><span class="line">1. 只需存储，可用字符串</span><br><span class="line">2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned</span><br><span class="line">    1) PHP函数转换</span><br><span class="line">        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。</span><br><span class="line">        利用sprintf函数格式化字符串</span><br><span class="line">        sprintf(&quot;%u&quot;, ip2long(&apos;192.168.3.134&apos;));</span><br><span class="line">        然后用long2ip将整型转回IP字符串</span><br><span class="line">    2) MySQL函数转换(无符号整型，UNSIGNED)</span><br><span class="line">        INET_ATON(&apos;127.0.0.1&apos;) 将IP转为整型</span><br><span class="line">        INET_NTOA(2130706433) 将整型转为IP</span><br></pre></td></tr></table></figure>

<h3 id="列属性（列约束）"><a href="#列属性（列约束）" class="headerlink" title="列属性（列约束）"></a>列属性（列约束）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：create table tab ( id int, stu varchar(10), primary key (id));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    insert into tab values (null, &apos;val&apos;);</span><br><span class="line">        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    insert into tab values (default, &apos;val&apos;);    -- 此时表示强制使用默认值。</span><br><span class="line">    create table tab ( add_time timestamp default current_timestamp );</span><br><span class="line">        -- 表示将当前时间的时间戳设为默认值。</span><br><span class="line">        current_date, current_time</span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</span><br><span class="line">6. COMMENT 注释</span><br><span class="line">    例：create table tab ( id int ) comment &apos;注释内容&apos;;</span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);</span><br><span class="line">        -- 将表t1的t1_id外键关联到表t2的id字段。</span><br><span class="line">        -- 每个外键都有一个名字，可以通过 constraint 指定</span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。</span><br><span class="line">    3. restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure>

<h3 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  -- Normal Format, NF</span><br><span class="line">        - 每个表保存一个实体信息</span><br><span class="line">        - 每个具有一个ID字段作为主键</span><br><span class="line">        - ID主键 + 原子表</span><br><span class="line">    -- 1NF, 第一范式</span><br><span class="line">        字段不能再分，就满足第一范式。</span><br><span class="line">    -- 2NF, 第二范式</span><br><span class="line">        满足第一范式的前提下，不能出现部分依赖。</span><br><span class="line">        消除符合主键就可以避免部分依赖。增加单列关键字。</span><br><span class="line">    -- 3NF, 第三范式</span><br><span class="line">        满足第二范式的前提下，不能出现传递依赖。</span><br><span class="line">        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span><br><span class="line">        将一个实体信息的数据放在一个表内实现。</span><br></pre></td></tr></table></figure>

<h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</span><br><span class="line">a. select_expr</span><br><span class="line">    -- 可以用 * 表示所有字段。</span><br><span class="line">        select * from tb;</span><br><span class="line">    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span><br><span class="line">        select stu, 29+25, now() from tb;</span><br><span class="line">    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        select stu+10 as add10 from tb;</span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    -- 可以为表起别名。使用as关键字。</span><br><span class="line">        SELECT * FROM tb1 AS tt, tb2 AS bb;</span><br><span class="line">    -- from子句后，可以同时出现多个表。</span><br><span class="line">        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span><br><span class="line">        SELECT * FROM tb1, tb2;</span><br><span class="line">    -- 向优化符提示如何选择索引</span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">c. WHERE 子句</span><br><span class="line">    -- 从from获得的数据源中进行筛选。</span><br><span class="line">    -- 整型1表示真，0表示假。</span><br><span class="line">    -- 表达式由运算符和运算数组成。</span><br><span class="line">        -- 运算数：变量（字段）、值、函数返回值</span><br><span class="line">        -- 运算符：</span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br></pre></td></tr></table></figure>

<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  将多个select查询的结果组合成一个结果集合。</span><br><span class="line">    SELECT ... UNION [ALL|DISTINCT] SELECT ...</span><br><span class="line">    默认 DISTINCT 方式，即所有返回的行都是唯一的</span><br><span class="line">    建议，对每个SELECT查询加上小括号包裹。</span><br><span class="line">    ORDER BY 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">    需要各select查询的字段数量一样。</span><br><span class="line">    每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    - 子查询需用括号包裹。</span><br><span class="line">-- from型</span><br><span class="line">    from后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;</span><br><span class="line">-- where型</span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    select * from tb where money = (select max(money) from tb);</span><br><span class="line">    -- 列子查询</span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            select column1 from t1 where exists (select * from t2);</span><br><span class="line">    -- 行子查询</span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        select * from t1 where (id, gender) in (select id, gender from t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    -- 特殊运算符</span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure>

<h3 id="连接查询-join"><a href="#连接查询-join" class="headerlink" title="连接查询(join)"></a>连接查询(join)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line">-- 内连接(inner join)</span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line">    -- 交叉连接 cross join</span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        select * from tb1 cross join tb2;</span><br><span class="line">-- 外连接(outer join)</span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    -- 左外连接 left join</span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    -- 右外连接 right join</span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line">-- 自然连接(natural join)</span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br><span class="line">    </span><br><span class="line">select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;</span><br></pre></td></tr></table></figure>

<p>导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据</span><br><span class="line"> </span><br><span class="line">load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据</span><br><span class="line">    生成的数据默认的分隔符是制表符</span><br><span class="line">    local未指定，则数据文件必须在服务器上</span><br><span class="line">    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理</span><br><span class="line">-- 控制格式</span><br><span class="line">fields  控制字段格式</span><br><span class="line">默认：fields terminated by &apos;&apos; enclosed by &apos;&apos; escaped by &apos;&apos;</span><br><span class="line">    terminated by &apos;string&apos;  -- 终止</span><br><span class="line">    enclosed by &apos;char&apos;      -- 包裹</span><br><span class="line">    escaped by &apos;char&apos;       -- 转义</span><br><span class="line">    -- 示例：</span><br><span class="line">        SELECT a,b,a+b INTO OUTFILE &apos;/tmp/result.text&apos;</span><br><span class="line">        FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos;</span><br><span class="line">        LINES TERMINATED BY &apos;&apos;</span><br><span class="line">        FROM test_table;</span><br><span class="line">lines   控制行格式</span><br><span class="line">默认：lines terminated by &apos;&apos;</span><br><span class="line">    terminated by &apos;string&apos;  -- 终止</span><br></pre></td></tr></table></figure>

<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select语句获得的数据可以用insert插入。</span><br><span class="line">可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用set语法。</span><br><span class="line">    INSERT INTO tbl_name SET field=value,...；</span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (), (), ();</span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, 10+10, now());</span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, DEFAULT);</span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    INSERT INTO tbl_name SELECT ...;</span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;</span><br></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line">1，truncate 是删除表再创建，delete 是逐条删除</span><br><span class="line">2，truncate 重置auto_increment的值。而delete不会</span><br><span class="line">3，truncate 不知道删除了几条，而delete知道。</span><br><span class="line">4，当被用于带分区的表时，truncate 会保留分区。</span><br></pre></td></tr></table></figure>

<h3 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line">-- 导出</span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] ---database DB1 [DB2 DB3...]</span><br><span class="line">mysqldump [options] --all--database</span><br><span class="line">1. 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">可以-w携带WHERE条件</span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件 &gt;</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是视图：</span><br><span class="line">    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span><br><span class="line">    视图具有表结构文件，但不存在数据文件。</span><br><span class="line">    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span><br><span class="line">    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span><br><span class="line">-- 创建视图</span><br><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于SELECT语句检索的列数</span><br><span class="line">-- 查看结构</span><br><span class="line">    SHOW CREATE VIEW view_name</span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    DROP VIEW [IF EXISTS] view_name ...</span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    ALTER VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">-- 视图作用</span><br><span class="line">    1. 简化业务逻辑</span><br><span class="line">    2. 对客户端隐藏真实的表结构</span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    MERGE       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure>

<h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续SQL的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - InnoDB被称为事务安全型引擎。</span><br><span class="line">-- 事务开启</span><br><span class="line">    START TRANSACTION; 或者 BEGIN;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line">-- 事务提交</span><br><span class="line">    COMMIT;</span><br><span class="line">-- 事务回滚</span><br><span class="line">    ROLLBACK;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line">-- 事务的特性</span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line">-- 事务的实现</span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line">-- 事务的原理</span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。</span><br><span class="line">-- 注意</span><br><span class="line">    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    2. 事务不能被嵌套</span><br><span class="line">-- 保存点</span><br><span class="line">    SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">    RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br><span class="line">-- InnoDB自动提交特性设置</span><br><span class="line">    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，</span><br><span class="line">        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure>

<h3 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line">-- 锁定</span><br><span class="line">    LOCK TABLES tbl_name [AS alias]</span><br><span class="line">-- 解锁</span><br><span class="line">    UNLOCK TABLES</span><br></pre></td></tr></table></figure>

<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        INSERT：将新行插入表时激活触发程序</span><br><span class="line">        UPDATE：更改某一行时激活触发程序</span><br><span class="line">        DELETE：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line">-- 删除</span><br><span class="line">DROP TRIGGER [schema_name.]trigger_name</span><br><span class="line">可以使用old和new代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是old，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line">-- 注意</span><br><span class="line">    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line">    </span><br><span class="line">-- 字符连接函数</span><br><span class="line">concat(str1,str2,...])</span><br><span class="line">concat_ws(separator,str1,str2,...)</span><br><span class="line"> </span><br><span class="line">-- 分支语句</span><br><span class="line">if 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">else</span><br><span class="line">    执行语句</span><br><span class="line">end if;</span><br><span class="line"> </span><br><span class="line">-- 修改最外层语句结束符</span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    SQL语句</span><br><span class="line">自定义结束符号</span><br><span class="line">delimiter ;     -- 修改回原来的分号</span><br><span class="line"> </span><br><span class="line">-- 语句块包裹</span><br><span class="line">begin</span><br><span class="line">    语句块</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">-- 特殊的执行</span><br><span class="line">1. 只要添加记录，就会触发程序。</span><br><span class="line">2. Insert into on duplicate key update 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 before insert, after insert;</span><br><span class="line">    如果有重复记录并更新，会触发 before insert, before update, after update;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before insert, before update</span><br><span class="line">3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert</span><br></pre></td></tr></table></figure>

<h3 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--// 局部变量 ----------</span><br><span class="line">-- 变量声明</span><br><span class="line">    declare var_name[,...] type [default value]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。</span><br><span class="line">-- 赋值</span><br><span class="line">    使用 set 和 select into 语句为变量赋值。</span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 全局变量 ----------</span><br><span class="line">-- 定义、赋值</span><br><span class="line">set 语句可以定义并为变量赋值。</span><br><span class="line">set @var = value;</span><br><span class="line">也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。</span><br><span class="line">select @var:=20;</span><br><span class="line">select @v1:=id, @v2=name from t1 limit 1;</span><br><span class="line">select * from tbl_name where @var:=30;</span><br><span class="line">select into 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| select max(height) into @max_height from tb;</span><br><span class="line">-- 自定义变量名</span><br><span class="line">为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@var=10;</span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 控制结构 ----------</span><br><span class="line">-- if语句</span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line">end if;</span><br><span class="line">-- case语句</span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line">END</span><br><span class="line">-- while循环</span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line">end while [end_label];</span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    -- 退出循环</span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 内置函数 ----------</span><br><span class="line">-- 数值函数</span><br><span class="line">abs(x)          -- 绝对值 abs(-10.9) = 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="line">ceil(x)         -- 向上取整 ceil(10.1) = 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) = 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)       -- m%n m mod n 求余 10%3=1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)       -- m^n</span><br><span class="line">sqrt(x)         -- 算术平方根</span><br><span class="line">rand()          -- 随机数</span><br><span class="line">truncate(x, d)  -- 截取d位小数</span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                 -- 当前日期</span><br><span class="line">current_time();                 -- 当前时间</span><br><span class="line">date(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取日期部分</span><br><span class="line">time(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取时间部分</span><br><span class="line">date_format(&apos;yyyy-mm-dd hh:ii:ss&apos;, &apos;%d %y %a %d %m %b %j&apos;); -- 格式化时间</span><br><span class="line">unix_timestamp();               -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)          -- string长度，字节</span><br><span class="line">char_length(string)     -- string的字符个数</span><br><span class="line">substring(str, position [,length])      -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])   -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)           -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position]) -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)           -- 去除前端空格</span><br><span class="line">repeat(string, count)   -- 重复count次</span><br><span class="line">rpad(string, length, pad)   --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)           -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line">-- 流程函数</span><br><span class="line">case when [condition] then result [when [condition] then result ...] [else result] end   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br><span class="line"> </span><br><span class="line">--// 存储函数，自定义函数 ----------</span><br><span class="line">-- 新建</span><br><span class="line">    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 return 返回值语句。</span><br><span class="line">-- 删除</span><br><span class="line">    DROP FUNCTION [IF EXISTS] function_name;</span><br><span class="line">-- 查看</span><br><span class="line">    SHOW FUNCTION STATUS LIKE &apos;partten&apos;</span><br><span class="line">    SHOW CREATE FUNCTION function_name;</span><br><span class="line">-- 修改</span><br><span class="line">    ALTER FUNCTION function_name 函数选项</span><br><span class="line"> </span><br><span class="line">--// 存储过程，自定义功能 ----------</span><br><span class="line">-- 定义</span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。</span><br><span class="line">-- 创建</span><br><span class="line">CREATE PROCEDURE sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line">IN，表示输入型</span><br><span class="line">OUT，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 存储过程 */ ------------------</span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：CALL 过程名</span><br><span class="line">-- 注意</span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line">-- 参数</span><br><span class="line">IN|OUT|INOUT 参数名 数据类型</span><br><span class="line">IN      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line">OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line">-- 语法</span><br><span class="line">CREATE PROCEDURE 过程名 (参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">    过程体</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<h3 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- root密码重置</span><br><span class="line">1. 停止MySQL服务</span><br><span class="line">2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;amp;</span><br><span class="line">    [Windows] mysqld --skip-grant-tables</span><br><span class="line">3. use mysql;</span><br><span class="line">4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;</span><br><span class="line">5. FLUSH PRIVILEGES;</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">-- 增加用户</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &apos;user_name&apos;@&apos;192.168.1.1&apos;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line">-- 重命名用户</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&apos;密码&apos;)  -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&apos;密码&apos;) -- 为指定用户设置密码</span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER 用户名</span><br><span class="line">-- 分配权限/添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &apos;password&apos;]</span><br><span class="line">    - all privileges 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    GRANT ALL PRIVILEGES ON `pms`.* TO &apos;pms&apos;@&apos;%&apos; IDENTIFIED BY &apos;pms0817&apos;;</span><br><span class="line">-- 查看权限</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">    -- 查看当前用户权限</span><br><span class="line">    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限</span><br><span class="line">-- 权限层级</span><br><span class="line">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用REVOKE时，您必须指定与被授权列相同的列。</span><br><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER   -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE   -- 更改或取消已存储的子程序</span><br><span class="line">CREATE  -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE  -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW     -- 允许使用CREATE VIEW</span><br><span class="line">DELETE  -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE     -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX   -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT  -- 允许使用INSERT</span><br><span class="line">LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES  -- 未被实施</span><br><span class="line">RELOAD  -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT  -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES  -- 显示所有数据库</span><br><span class="line">SHOW VIEW   -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE  -- 允许使用UPDATE</span><br><span class="line">USAGE   -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br></pre></td></tr></table></figure>

<h3 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>

<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 /* 注释内容 */</span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 &apos;</span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;G&quot;, &quot;g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line">7. 清除已有语句：c</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>orange pi zero</title>
    <url>/2020/01/24/orange-pi-zero/</url>
    <content><![CDATA[<h3 id="一、可以用-Orange-Pi-Zero-做什么？"><a href="#一、可以用-Orange-Pi-Zero-做什么？" class="headerlink" title="一、可以用 Orange Pi Zero 做什么？"></a>一、可以用 Orange Pi Zero 做什么？</h3><p>我们可以用它搭建：</p><ul>
<li>一台计算机</li>
<li>一个无线网络服务器</li>
<li>游戏机</li>
<li>音乐播放器</li>
<li>高清视频播放器</li>
<li>扬声器</li>
<li>Android</li>
<li>Scratch</li>
<li>更多的各种功能，因为 Orange Pi Zero 是开源的</li>
</ul><h3 id="二、Orange-Pi-Zero-是为谁设计的？"><a href="#二、Orange-Pi-Zero-是为谁设计的？" class="headerlink" title="二、Orange Pi Zero 是为谁设计的？"></a>二、Orange Pi Zero 是为谁设计的？</h3><p>Orange Pi Zero 不仅仅是一款消费品，同时也是给任何想用技术来进行创作创新的人设计的。它是一款非常简单、有趣、实用的工具，你可以用它去打造你身边的世界。</p><a id="more"></a>


<h3 id="三、分区扩容"><a href="#三、分区扩容" class="headerlink" title="三、分区扩容"></a>三、分区扩容</h3><p>在使用win32DiskImager工具对*.img镜像进行写入，它只给rootfs分配一个g得存储空间，不够使用，需要对分区进行扩容。</p>
<p>linux下使用<strong>Gparted</strong></p>
<p>安装指令：sudo apt-get install  gparted </p>
<p>windows下使用<strong>DiskGenius</strong></p>
<p><strong>注意：</strong>DiskGenius对分区进行扩容有极大可能会造成数据丢失，从而导致系统跑不起来。建议使用Gparted工具来进行扩容。</p>
<h3 id="四、VNC远程投屏"><a href="#四、VNC远程投屏" class="headerlink" title="四、VNC远程投屏"></a>四、VNC远程投屏</h3><h4 id="安装xfce4桌面"><a href="#安装xfce4桌面" class="headerlink" title="安装xfce4桌面"></a>安装xfce4桌面</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install xfce4</span><br></pre></td></tr></table></figure>

<h4 id="安装vnc服务"><a href="#安装vnc服务" class="headerlink" title="安装vnc服务"></a>安装vnc服务</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install vnc4server</span><br></pre></td></tr></table></figure>

<h4 id="设置vnc密码"><a href="#设置vnc密码" class="headerlink" title="设置vnc密码"></a>设置vnc密码</h4><p>安装完成后对vnc4server设置密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vnc4server</span><br></pre></td></tr></table></figure>

<h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p>使用vnc viewer输入ip与端口号（默认端口号为5901）</p>
<p>登录成功后只有一个终端，并无桌面。</p>
<p>然后修改配置</p>
<p><strong>进入当前终端用户的.vnc目录：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vnc</span><br></pre></td></tr></table></figure>

<p><strong>备份好原来的 xstartup:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp xstartup xstartup-bak</span><br></pre></td></tr></table></figure>

<p><strong>xstartup配置参数如下:</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/24/1ZKNtK.png" alt="1ZKNtK.png"></p>
<h4 id="重启vnc-服务"><a href="#重启vnc-服务" class="headerlink" title="重启vnc 服务:"></a>重启vnc 服务:</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-tag">-kill</span> <span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-pseudo">:1</span></span><br></pre></td></tr></table></figure>

<h4 id="重新连接VNC"><a href="#重新连接VNC" class="headerlink" title="重新连接VNC:"></a>重新连接VNC:</h4><p>出现乱码情况</p>
<p><img src="https://s2.ax1x.com/2020/01/24/1ZKf1g.jpg" alt="1ZKf1g.jpg"></p>
<p><strong>状况：</strong>所用的<a href="https://www.centos.bz/tag/ubuntu/" target="_blank" rel="noopener">ubuntu</a>系统不支持中文，遇见中文就????。ORZ…</p>
<p><strong>目标：</strong>使系统/服务器支持中文，能够正常显示。</p>
<p>首先，安装中文支持包language-pack-zh-hans：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install language-pack-zh-hans</span></span><br></pre></td></tr></table></figure>

<p>然后，修改/etc/environment（在文件的末尾追加）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANGUAGE=&quot;zh_CN:zh:en_US:en&quot;</span><br></pre></td></tr></table></figure>

<p>再修改/var/lib/locales/supported.d/local(没有这个文件就新建，同样在末尾追加)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN GB2312</span><br></pre></td></tr></table></figure>

<p>最后，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo locale-gen</span></span><br></pre></td></tr></table></figure>

<p>对于中文乱码是空格的情况，安装中文字体解决。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming</span></span><br></pre></td></tr></table></figure>

<p><strong>感觉桌面作用不大！！！</strong></p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>Orange Pi Zero</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>ospf组网实验</title>
    <url>/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="1、网络拓扑图"><a href="#1、网络拓扑图" class="headerlink" title="1、网络拓扑图"></a>1、网络拓扑图</h1><p><img src="https://s1.ax1x.com/2020/03/22/85DWGD.png" alt="85DWGD.png"></p><h1 id="2、实验目的"><a href="#2、实验目的" class="headerlink" title="2、实验目的"></a>2、实验目的</h1><ul>
<li>OSPF的基本配置（静态路由及动态路由）</li>
<li>OSPF协议报文交互过程</li>
<li>区域划分</li>
</ul><h1 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h1><h2 id="3-1-连接拓扑并配置PC机的IP及网关"><a href="#3-1-连接拓扑并配置PC机的IP及网关" class="headerlink" title="3.1 连接拓扑并配置PC机的IP及网关"></a>3.1 连接拓扑并配置PC机的IP及网关</h2><p>PC1配置如下：（其他PC同理）</p><p><img src="https://s1.ax1x.com/2020/03/22/85shDA.png" alt="PC1"></p><h2 id="3-2-配置路由器的各个端口"><a href="#3-2-配置路由器的各个端口" class="headerlink" title="3.2 配置路由器的各个端口"></a>3.2 配置路由器的各个端口</h2><h3 id="3-2-1-AR3端口配置"><a href="#3-2-1-AR3端口配置" class="headerlink" title="3.2.1 AR3端口配置"></a>3.2.1 AR3端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R3</span></span><br><span class="line"><span class="meta">[R3]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R3-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.4.254 24</span></span><br><span class="line"><span class="attr">[R3-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:23:11-08:00 R3 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="meta">[R3-GigabitEthernet0/0/0]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R3]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R3-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.34.4 24</span></span><br></pre></td></tr></table></figure><a id="more"></a>





<h3 id="3-2-2-AR4端口配置"><a href="#3-2-2-AR4端口配置" class="headerlink" title="3.2.2 AR4端口配置"></a>3.2.2 AR4端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R4</span></span><br><span class="line"><span class="meta">[R4]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R4-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.34.3 24</span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:24:31-08:00 R4 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="meta">[R4]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R4-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.13.2 24</span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:24:52-08:00 R4 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/1]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-AR5端口配置"><a href="#3-2-3-AR5端口配置" class="headerlink" title="3.2.3 AR5端口配置"></a>3.2.3 AR5端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;Huawei&gt;sys</span>	<span class="string"></span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.	</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R5</span></span><br><span class="line"><span class="meta">[R5]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.13.1 24</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:25:55-08:00 R5 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/0]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R5]interface</span>  <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.12.1 24</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:26:19-08:00 R5 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R5-GigabitEthernet0/0/1]quit</span></span><br><span class="line"><span class="meta">[R5]interface</span> <span class="string">GigabitEthernet 0/0/2</span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/2]ip</span> <span class="string">address 192.168.11.1 24</span></span><br><span class="line"><span class="attr">[R5-GigabitEthernet0/0/2]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:26:53-08:00 R5 %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/2 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R5-GigabitEthernet0/0/2]quit</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-4-AR6端口配置"><a href="#3-2-4-AR6端口配置" class="headerlink" title="3.2.4 AR6端口配置"></a>3.2.4 AR6端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R6</span></span><br><span class="line"><span class="meta">[R6]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R6-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.12.2 24</span></span><br><span class="line"><span class="attr">[R6-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:28:20-08:00 R6 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="meta">[R6-GigabitEthernet0/0/0]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R6]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R6-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.2.254 24</span></span><br><span class="line"><span class="attr">[R6-GigabitEthernet0/0/1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:28:47-08:00 R6 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R6-GigabitEthernet0/0/1]quit</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-AR7端口配置"><a href="#3-2-5-AR7端口配置" class="headerlink" title="3.2.5 AR7端口配置"></a>3.2.5 AR7端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R7</span></span><br><span class="line"><span class="meta">[R7]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R7-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.11.2 24</span></span><br><span class="line"><span class="attr">[R7-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:29:26-08:00 R7 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R7-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="meta">[R7]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R7-GigabitEthernet0/0/1]ip</span> <span class="string">address 1.1.1.254 24</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:29:54-08:00 R7 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R7-GigabitEthernet0/0/1]quit</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-配置OSPF区域"><a href="#3-3-配置OSPF区域" class="headerlink" title="3.3 配置OSPF区域"></a>3.3 配置OSPF区域</h2><h3 id="3-3-1-在AR5上进行如下配置"><a href="#3-3-1-在AR5上进行如下配置" class="headerlink" title="3.3.1 在AR5上进行如下配置"></a>3.3.1 在AR5上进行如下配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R5]ospf</span> <span class="string">router-id 1.1.1.1  //指定AR7在OSPF中的ID</span></span><br><span class="line"><span class="meta">[R5-ospf-1]area</span> <span class="string">0 //进入骨干区域area 0</span></span><br><span class="line"><span class="meta">[R5-ospf-1-area-0.0.0.0]network</span> <span class="string">192.168.12.0 0.0.0.255 //宣告网络192.168.12.0</span></span><br><span class="line"><span class="meta">[R5-ospf-1-area-0.0.0.0]quit</span>  <span class="string">//返回上一级</span></span><br><span class="line"><span class="meta">[R5-ospf-1]area</span> <span class="string">1 //进入非骨干区域area 1</span></span><br><span class="line"><span class="meta">[R5-ospf-1-area-0.0.0.1]network</span> <span class="string">192.168.13.0 0.0.0.255 //宣告网络192.168.13.0</span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:34:59-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:07-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=ExStart)</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:07-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Ex</span></span><br><span class="line"><span class="meta">change)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:07-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[6]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Load</span></span><br><span class="line"><span class="meta">ing)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[7]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full) </span></span><br><span class="line"></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:59-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[8]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:04-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[9]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=ExStart)</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:04-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[10]:Neighbor changes ev</span></span><br><span class="line"><span class="attr">ent</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neig</span></span><br><span class="line"><span class="attr">hborEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=E</span></span><br><span class="line"><span class="meta">xchange)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:05-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[11]:Neighbor changes ev</span></span><br><span class="line"><span class="attr">ent</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neig</span></span><br><span class="line"><span class="attr">hborEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loa</span></span><br><span class="line"><span class="meta">ding)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:05-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[12]:Neighbor changes ev</span></span><br><span class="line"><span class="attr">ent</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neig</span></span><br><span class="line"><span class="attr">hborEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-在AR4上进行如下配置"><a href="#3-3-2-在AR4上进行如下配置" class="headerlink" title="3.3.2 在AR4上进行如下配置"></a>3.3.2 在AR4上进行如下配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R4]osp</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R4]ospf</span> <span class="string">router-id 3.3.3.3</span></span><br><span class="line"><span class="meta">[R4-ospf-1]area</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R4-ospf-1-area-0.0.0.1]network</span> <span class="string">192.168.13.0 0.0.0.255</span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way) </span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart) </span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Ex</span></span><br><span class="line"><span class="meta">change)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Load</span></span><br><span class="line"><span class="meta">ing)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-在AR6上进行如下配置"><a href="#3-3-3-在AR6上进行如下配置" class="headerlink" title="3.3.3 在AR6上进行如下配置"></a>3.3.3 在AR6上进行如下配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R6]ospf</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R6]ospf</span> <span class="string">router-id 2.2.2.2</span></span><br><span class="line"><span class="meta">[R6-ospf-1]area</span> <span class="string">0</span></span><br><span class="line"><span class="meta">[R6-ospf-1-area-0.0.0.0]network</span> <span class="string">192.168.12.0 0.0.0.255</span></span><br><span class="line"><span class="attr">[R6-ospf-1-area-0.0.0.0]quit</span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way) </span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart) </span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:09-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Ex</span></span><br><span class="line"><span class="meta">change)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:09-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Load</span></span><br><span class="line"><span class="meta">ing)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:09-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full) </span></span><br><span class="line"></span><br><span class="line"><span class="attr">[R6-ospf-1]quit</span></span><br></pre></td></tr></table></figure>

<p>验证：</p>
<p>使用<strong>display ospf brief</strong>命令用来查看OSPF的概要信息。</p>
<p>AR5的概要如下图：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/85xqRf.png" alt="85xqRf.png"></p>
<p>AR4的概要如下图：</p>
<p> <img src="https://s1.ax1x.com/2020/03/22/85zFzT.png" alt="85zFzT.png"></p>
<p>AR6的概要如下图：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/85zmw9.png" alt="85zmw9.png"></p>
<p> 由上图可知，AR5为ABR路由器，AR4因为连接了外部路由所以为ASBR路由器。 </p>
<h2 id="3-4-验证area-0与-area-1之间的路由是否实现区域内互通"><a href="#3-4-验证area-0与-area-1之间的路由是否实现区域内互通" class="headerlink" title="3.4  验证area 0与 area 1之间的路由是否实现区域内互通"></a>3.4  验证area 0与 area 1之间的路由是否实现区域内互通</h2><p>使用display ip routing-table查看AR4的路由表信息如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8Iri4K.png" alt="8Iri4K.png"></p>
<p>使用display ip routing-table查看AR6的路由表信息如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8IrVjH.png" alt="8IrVjH.png"></p>
<p> 由上图可知，AR4与AR6都有一条去往对方的ospf路由条目。所以area 0与area 1之间的路由，都是可以ping通的。 </p>
<h2 id="3-5-默认路由、静态路由及直连路由的配置"><a href="#3-5-默认路由、静态路由及直连路由的配置" class="headerlink" title="3.5 默认路由、静态路由及直连路由的配置"></a>3.5 默认路由、静态路由及直连路由的配置</h2><p> 由于AR5去往外网，需要配置一条默认路由，并且需要在进程ospf 1中进行默认路由注入<br>同样AR4连接了外部路由，也需要在进程ospf 1中注入静态路由，AR6则需要注入直连路由<br>配置命令如下 </p>
<h3 id="3-5-1-在AR5上配置默认路由并注入ospf中"><a href="#3-5-1-在AR5上配置默认路由并注入ospf中" class="headerlink" title="3.5.1 在AR5上配置默认路由并注入ospf中"></a>3.5.1 在AR5上配置默认路由并注入ospf中</h3><p>命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R5]ip</span> <span class="string">route-static 0.0.0.0 0.0.0.0 192.168.11.2</span></span><br><span class="line"><span class="meta">[R5]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R5-ospf-1]default-route-advertise</span> <span class="string">always cost 200 type 1</span></span><br><span class="line"><span class="attr">[R5-ospf-1]quit</span></span><br><span class="line"><span class="attr">[R5]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-2-在AR4上配置静态路由并注入ospf中"><a href="#3-5-2-在AR4上配置静态路由并注入ospf中" class="headerlink" title="3.5.2 在AR4上配置静态路由并注入ospf中"></a>3.5.2 在AR4上配置静态路由并注入ospf中</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;R4&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[R4]ip</span> <span class="string">route-static 192.168.4.0 24 192.168.34.4	</span></span><br><span class="line"><span class="meta">[R4]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R4-ospf-1]import-route</span> <span class="string">static cost 150 type 2</span></span><br><span class="line"><span class="attr">[R4-ospf-1]quit</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-3-在AR6上注入直连路由"><a href="#3-5-3-在AR6上注入直连路由" class="headerlink" title="3.5.3 在AR6上注入直连路由"></a>3.5.3 在AR6上注入直连路由</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;R6&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[R6]</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R6]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R6-ospf-1]import-route</span>  <span class="string">direct cost 50 type 2</span></span><br><span class="line"><span class="attr">[R6-ospf-1]quit</span></span><br></pre></td></tr></table></figure>

<p>命令解释：</p>
<p>命令格式如下：</p>
<p><strong>import-route</strong> <em>protocol</em> [ <em>process-id</em>  ] [ <strong>cost</strong> <em>cost</em> |  <strong>type</strong> <em>type</em> |  <strong>tag</strong> <em>tag</em> |  <strong>route-policy</strong> <em>route-policy-name</em> ] </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数说明</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td><em>protocol</em></td>
<td>可引入的源路由协议。</td>
<td>目前可为<strong>direct</strong>、<strong>bgp</strong>、<strong>unr</strong>、<strong>static</strong>、<strong>ripng</strong>、<strong>isis</strong>或<strong>ospfv3</strong>。</td>
</tr>
<tr>
<td><em>process-id</em></td>
<td>引入的源路由协议进程号，当引入路由协议为<strong>ripng</strong>、<strong>isis</strong>或<strong>ospfv3</strong>时，需要指定该值。</td>
<td>整数形式，取值范围是1～65535。</td>
</tr>
<tr>
<td><strong>cost</strong> <em>cost</em></td>
<td>引入路由的开销值。</td>
<td>整数形式，取值范围是1～16777214。</td>
</tr>
<tr>
<td><strong>type</strong> <em>type</em></td>
<td>引入路由的类型。</td>
<td>取值是1或2。缺省值是2。</td>
</tr>
<tr>
<td><strong>tag</strong> <em>tag</em></td>
<td>标识引入路由的tag值。</td>
<td>整数形式，取值范围是0～4294967295。缺省值是1。</td>
</tr>
<tr>
<td><strong>route-policy</strong> <em>route-policy-name</em></td>
<td>指定路由策略名称，只有满足指定匹配条件的路由才被引入。</td>
<td>字符串形式，长度范围是1～40个字符。</td>
</tr>
</tbody></table>
<p>命令格式如下：</p>
<p><strong>default-route-advertise</strong> [  <strong>always</strong> | <strong>cost</strong> <em>cost</em> | <strong>type</strong> <em>type</em> | <strong>tag</strong> <em>tag</em> | <strong>route-policy</strong> <em>route-policy-name</em> ] </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数说明</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td><strong>always</strong></td>
<td>无论本机是否存在激活的非OSPFv3缺省路由，都会产生并发布一个描述缺省路由的LSA。配置了<strong>always</strong>参数的交换机不再计算来自其他交换机的缺省路由。如果没有指定该关键字，本机路由表中必须有激活的非OSPFv3缺省路由时才生成缺省路由的LSA。</td>
<td>-</td>
</tr>
<tr>
<td><strong>cost</strong> <em>cost</em></td>
<td>指定该ASE LSA的度量值。</td>
<td>整数形式，取值范围是1～16777214。</td>
</tr>
<tr>
<td><strong>type</strong> <em>type</em></td>
<td>指定该ASE LSA的类型。  Type-1：第一类外部路由，到第一类外部路由的开销=本交换机到相应的ASBR的开销+ASBR到该路由目的地址的开销。 Type-2：第二类外部路由，到第二类外部路由的开销=ASBR到该路由目的地址的开销。</td>
<td>整数形式，取值范围是1～2。缺省值是2。</td>
</tr>
<tr>
<td><strong>tag</strong> <em>tag</em></td>
<td>标识VPN引入路由的tag值。</td>
<td>整数形式，取值范围是0～4294967295。缺省值是1。</td>
</tr>
<tr>
<td><strong>route-policy</strong> <em>route-policy-name</em></td>
<td>通过路由策略，实现在路由表中有匹配的非OSPFv3产生的缺省路由表项时，按路由策略所配置的参数发布缺省路由。</td>
<td>字符串形式，取值范围是1～40。</td>
</tr>
</tbody></table>
<p>验证：</p>
<p>使用<strong>display ospf routing</strong>命令用来显示OSPF路由表的信息。。</p>
<p>AR4的路由表信息如下:</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8IpZ5R.png" alt="8IpZ5R.png"></p>
<p>AR6的路由表信息如下:</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8oC6Qx.png" alt="8oC6Qx.png"></p>
<p>AR5的路由表信息如下:</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8oCGzq.png" alt="8oCGzq.png"></p>
<p>由上图可知，AR5学到了192.168.2.0和192.168.4.0的路由<br>                       AR6学到了0.0.0.0/0和192.168.4.0的路由<br>                       AR4学到了0.0.0.0/0和192.168.2.0的路由<br> 综上，路由注入成功。</p>
<h2 id="3-6-验证及报文捕获分析"><a href="#3-6-验证及报文捕获分析" class="headerlink" title="3.6 验证及报文捕获分析"></a>3.6 验证及报文捕获分析</h2><h3 id="3-6-1-验证"><a href="#3-6-1-验证" class="headerlink" title="3.6.1 验证"></a>3.6.1 验证</h3><p>PC1 Ping PC2 并在AR5的GE0/0/0端口抓包 结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8oipUe.png" alt="8oipUe.png"></p>
<p>分析原因及解决方案：</p>
<p>路由虽然注入成功，但是PC1仍然ping不通PC2，因为PC2知道了去往192.168.4.0网段的路由，但是AR3是外部路由，它并不知道如何去往ospf 内部，所以需要在AR3上配置一条默认路由，下一跳为192.168.34.3</p>
<p>在AR3上配置如下命令：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;R3&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[R3]ip</span> <span class="string">route-static 0.0.0.0 0 192.168.34.3</span></span><br></pre></td></tr></table></figure>

<p>再次进行Ping操作并在AR5的GE0/0/0端口开始捕获报文并重启该端口后的结果如下：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/2.png" class title="PC1 Ping PC2">

<p>发现可以Ping通，并发现如下几种类型的OSPF报文：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/1.png" class>

<h3 id="3-6-2-报文分析"><a href="#3-6-2-报文分析" class="headerlink" title="3.6.2 报文分析"></a>3.6.2 报文分析</h3><h4 id="3-6-2-1-LSA报文分析"><a href="#3-6-2-1-LSA报文分析" class="headerlink" title="3.6.2.1 LSA报文分析"></a>3.6.2.1 LSA报文分析</h4><ol>
<li><p><strong>报文的分类</strong></p>
<ul>
<li><strong>Router-LSA（第1类）</strong>， 由每个路由器生成，描述了路由器的链路状态和花费，传递到整个区域</li>
<li><strong>Network-LSA （第2类）</strong> ，由DR生成，描述了本网络的链路状态，传递到整个区域</li>
<li><strong>Net-Summary-LSA （第3类）</strong> ，由ABR生成，描述了到区域内某一网络的路由，传递到相关区域</li>
<li><strong>Asbr-Summary-LSA （第4类）</strong> ，由ABR生成，描述了到ASBR的路由，传递到相关区域</li>
<li><strong>AS-External-LSA （第5类）</strong> ，由ASBR生成，描述了到AS外部的路由，传递到整个AS（STUB区域除外）</li>
</ul>
</li>
<li><p>报文分析：</p>
<p>查看LS update报文结果如下图：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/update.png" class title="LS_update">

<p>发现四种类型的LSA，对其进行逐一分析：</p>
<p><strong>Router-LSA：</strong></p>
<p>报文格式如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Router%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" class title="Router报文格式">

<p> 格式字段解释如下图： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Ro1.png" class title="Ro1">

<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Ro2.png" class title="Ro2">

<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Ro3.png" class title="Ro3">

<p>捕获的具体字段如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Router.png" class title="Router">

<p><strong>Network LSA：</strong></p>
<p>报文格式如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NW%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" class title="NW报文格式">

<p> 格式字段解释如下图所示： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NW1.png" class title="NW1">

<p>捕获的具体字段如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NW.png" class title="NW">

<p> <strong>Summary LSA：</strong> </p>
<p>Network Summary LSA（Type3）:描述区域内所有网段的路由，并通告给其他相关区域。</p>
<p>​     ASBR Summary LSA（Type4）:描述到ASBR的路由，通告给除ASBR所在区域的其他相关区域。</p>
<p>​     Type3和Type4的LSA有相同的格式，他们都是由ABR产生。</p>
<p>  Summary LSA 格式如下图所示： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/SL.png" class title="SL">

<p>  Network Summary LSA格式字段解释：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NSL.png" class title="NSL">

<p> ASBR Summary LSA格式字段解释： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/ALS.png" class title="ALS">

<p>捕获的具体字段如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NASL.png" class title="NALS">

<p> <strong>AS-External LSA:</strong> </p>
<p>AS External LSA（Type5）:由ASBR产生，描述到AS外部的路由，这是五种LSA中，</p>
<p>​    唯一一种通告  给所有区域（除了Stub区域和NSSA区域）的LSA。</p>
<p>  AS External LSA格式如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/AEL.png" class title="AEL"> 

<p>  AS-External LSA格式字段解释： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/AEL1.png" class title="AEL1"> 

<p>没抓到这个类型的字段。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>OSPF实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman</title>
    <url>/2020/02/23/postman/</url>
    <content><![CDATA[<h1 id="一、Postman"><a href="#一、Postman" class="headerlink" title="一、Postman"></a>一、Postman</h1><ul>
<li><h2 id="postman简介"><a href="#postman简介" class="headerlink" title="postman简介"></a>postman简介</h2></li>
</ul><p>用户在开发或者调试网络程序或者是网页B/S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！Postman在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p><a id="more"></a>

<ul>
<li><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p><img src="https://s2.ax1x.com/2020/02/13/1Ot534.png" alt="1Ot534.png"></p>
<ul>
<li><p><strong>Get</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/meishi"</span>,method = RequestMethod.GET)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Foods <span class="title">meishi</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Foods food = <span class="keyword">new</span> Foods(<span class="string">"海底捞"</span>,<span class="string">"火锅"</span>,<span class="number">300</span>);</span><br><span class="line">       <span class="keyword">return</span> food;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1ODEeH.png" alt="1ODEeH.png"></p>
</li>
<li><p><strong>Get带参数（占位符获取）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*占位符的使用*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/meishi/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishi01</span><span class="params">(@PathVariable (value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span><span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"四川小炒"</span>, <span class="string">"尖椒肉丝"</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1Os5od.png" alt="1Os5od.png"></p>
</li>
<li><p><strong>Post</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*  数据的添加操作 */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishiAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"meishi add action!"</span>);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"陕西面馆"</span>,<span class="string">"户县软面"</span>,<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1OyPS0.png" alt="1OyPS0.png"></p>
</li>
<li><p><strong>Put</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*修改操作*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/update/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishiPut</span><span class="params">(@PathVariable (value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span><span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"meishi update  action!"</span> + id);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"四川小炒"</span>,<span class="string">"青椒肉丝"</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1Oy4XT.png" alt="1Oy4XT.png"></p>
<p>业务逻辑代码（控制台打印）结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">meishi update  action!<span class="number">123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Delete</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishiDelete</span><span class="params">(@PathVariable (value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span><span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"meishi delete  action!"</span> + id);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"四川小炒"</span>,<span class="string">"青椒肉丝"</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1O6nHg.png" alt="1O6nHg.png"></p>
<p>业务逻辑代码（控制台打印）结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">meishi delete  action!<span class="number">123</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="二、AJAX"><a href="#二、AJAX" class="headerlink" title="二、AJAX"></a>二、AJAX</h1><ul>
<li><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</strong> </p>
<p> AJAX = 异步 JavaScript 和 XML。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。</p>
<p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
</li>
<li><h3 id="SpringMVC中AJAX的应用"><a href="#SpringMVC中AJAX的应用" class="headerlink" title="SpringMVC中AJAX的应用"></a>SpringMVC中AJAX的应用</h3><p>前后端交互中使用json数据格式，需要导入json的相关依赖</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>工具</category>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SNMP实验</title>
    <url>/2020/05/24/snmp/</url>
    <content><![CDATA[<h1 id="1、实验拓扑"><a href="#1、实验拓扑" class="headerlink" title="1、实验拓扑"></a>1、实验拓扑</h1><p><a href="https://imgchr.com/i/tCOoR0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/26/tCOoR0.png" alt="tCOoR0.png"></a></p><h1 id="2、实验要求"><a href="#2、实验要求" class="headerlink" title="2、实验要求"></a>2、实验要求</h1><ol>
<li>通过eNSP里的“云”，可以使得虚拟环境中的设备访问“本机”。在本机中运行MIB Browser，访问eNSP虚拟环境中设备的MIB库。 </li>
<li>浏览设备MIB树的各个节点 。</li>
<li>还要捕获分组 ，分析协议交互过程。</li>
<li>自己手工编码/解码分组中的数据。也就是ASN.1 TLV编码解码过程。 </li>
</ol><a id="more"></a>

<h1 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h1><h2 id="3-1连通性"><a href="#3-1连通性" class="headerlink" title="3.1连通性"></a>3.1连通性</h2><p>将VMware下win7操作系统中的ensp云下的路由器与主机连通。</p>
<ul>
<li><p>关闭本机和VMware下win7下的防火墙。</p>
</li>
<li><p>将VMware的网络连接模式设置为桥接模式。</p>
</li>
<li><p>查看本机ip。</p>
</li>
<li><p>云设置：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCOOZ4.png" alt="tCOOZ4.png"></p>
<p>选择本地连接（及win7的ip地址选项）。</p>
</li>
<li><p>路由器设置：</p>
<p>配置GE0/0/0端口ip为：192.168.10.222 掩码为：255.255.255.0。</p>
</li>
<li><p>测试连通性：</p>
<p>主机和云下的路由器互Ping对方IP地址，结果入下：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCOXdJ.png" alt="tCOXdJ.png"></p>
<p>云内网设备可以互通。</p>
</li>
</ul>
<h2 id="3-2-SNMP工作机制"><a href="#3-2-SNMP工作机制" class="headerlink" title="3.2 SNMP工作机制"></a>3.2 SNMP工作机制</h2><p>SNMP分为NMS和Agent两部分：</p>
<ul>
<li><p>NMS （Network Management Station,网络管理站）是运行客户端程序的工作站，目前常用的网管平台有Qidviwv. Sun NotManer和IBM NetvieI。</p>
</li>
<li><p>Agent 是运行在网络设备(如交换机)上的服务器端软件。 </p>
<p>​        NMS可以向Agent发出GetRequest、GetNextRequest和SetRequest报文, Agent 接收到NMS 的这些请求报文后，根据报文类型对管理对象(MIB, Management Information Base， 管理信息库)进行Read或Write操作，生成Response报文, 并将报文返回给NMS。</p>
<p>​       Agent在设备发生异常情况或状态改变时(如设备重新启动)，也会主动向NMS 发送Trap报文，向NMS汇报所发生的事件。  </p>
</li>
</ul>
<p><strong>注意：</strong>在此使用的是MIB  Browser 不是SNMP管理站，不能接收Trap报文,故在Agent中不用配置允许设备向管理站发送Trap报文的命令。</p>
<h2 id="3-3SNMP-Agent配置"><a href="#3-3SNMP-Agent配置" class="headerlink" title="3.3SNMP-Agent配置"></a>3.3SNMP-Agent配置</h2><p>对云下的路由器进行如下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string"></span></span><br><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string">sys-info version all</span></span><br><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string">community read public</span></span><br><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string">community write public</span></span><br><span class="line"><span class="meta">[Huawei]</span> <span class="string">snmp-agent sys-info contact LiSongBai-Tel:152********</span></span><br><span class="line"><span class="meta">[Huawei]</span> <span class="string">snmp-agent sys-info location ShanXi-Xi an</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4MIB-Browser使用"><a href="#3-4MIB-Browser使用" class="headerlink" title="3.4MIB-Browser使用"></a>3.4MIB-Browser使用</h2><p><img src="https://s1.ax1x.com/2020/05/26/tCXSRx.png" alt="tCXSRx.png"></p>
<ol>
<li><p>选择Agent中配置的snmp版本。</p>
</li>
<li><p>输入ensp中云下的路由器网关ip。</p>
</li>
<li><p>连接，成功如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXPsO.png" alt="tCXPsO.png"></p>
</li>
<li><p>通过GetRequest/GetNextRequest请求获取Agent的相关信息</p>
<p>通过GetRequest请求获取：</p>
<ul>
<li>获取设备名：</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXQOS.png" alt="tCXQOS.png"></p>
<ul>
<li><p>获取设备位置：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXBmF.png" alt="tCXBmF.png"></p>
</li>
</ul>
<p>通过GetNextRequest请求获取：</p>
<ul>
<li><p>获取设备的管理员信息：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCX6YR.png" alt="tCX6YR.png"></p>
<p>在sysUpTime上通过GetNextRequest请求获取sysContact的信息，结果如下：</p>
<p><a href="https://imgchr.com/i/tCXcf1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/26/tCXcf1.png" alt="tCXcf1.png"></a></p>
</li>
</ul>
</li>
<li><p>通过SetRequest请求修改设备的相关信息。</p>
<p>如：修改设备名：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXfOO.png" alt="tCXfOO.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXvnS.png" alt="tCXvnS.png"></p>
<p>在ensp中查看路由器设备名，结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjipq.png" alt="tCjipq.png"></p>
<p>可见，修改成功。</p>
</li>
</ol>
<h2 id="3-4报文分析"><a href="#3-4报文分析" class="headerlink" title="3.4报文分析"></a>3.4报文分析</h2><p>对sysName(sysName的下一项为sysLocation)进行Get/GetNext/Set在路由器GE0/0/0端口捕获报文信息如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjnAJ.png" alt="tCjnAJ.png"></p>
<ul>
<li><p>Get-request</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjBgP.png" alt="tCjBgP.png"></p>
<p>从报文中可以看出SNMP协议底层采用UDP实现的，且Agent方的默认端口号为161，从报文中可以看出采用的SNMP版本是v2c ，社团名为public，请求id为38，值为null。</p>
</li>
<li><p>Get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjQ91.png" alt="tCjQ91.png"></p>
<p>其他同上，响应值为415232，表示AR2。</p>
</li>
<li><p>Get-next-request</p>
<p><a href="https://imgchr.com/i/tCjsu8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/26/tCjsu8.png" alt="tCjsu8.png"></a></p>
</li>
<li><p>Get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvpDO.png" alt="tCvpDO.png"></p>
</li>
<li><p>Set-request</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvPVe.png" alt="tCvPVe.png"></p>
</li>
<li><p>Get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCviUH.png" alt="tCviUH.png"></p>
</li>
</ul>
<h2 id="3-5ASN-1编码值对应的解释"><a href="#3-5ASN-1编码值对应的解释" class="headerlink" title="3.5ASN.1编码值对应的解释"></a>3.5ASN.1编码值对应的解释</h2><p>用3.4中的get-next-request和对应的response作分析。</p>
<ul>
<li><p>get-next-request</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvF5d.png" alt="tCvF5d.png"></p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>表示SNMP协议报文(整个报文是一个SEQUENCE)</td>
</tr>
<tr>
<td>26</td>
<td>消息长度38字节(表示后面还有38个字节的内容)</td>
</tr>
<tr>
<td>02 01 01</td>
<td>协议版本(2c)(前两个字节02表示INTEGER类型01是指1个字节长度，最后的01是值01)</td>
</tr>
<tr>
<td>04</td>
<td>参数类型(OCTSTR)</td>
</tr>
<tr>
<td>06</td>
<td>群体(community)名长度</td>
</tr>
<tr>
<td>70 75 62 6c 69 63</td>
<td>群体名public的assic码值</td>
</tr>
<tr>
<td>a1</td>
<td>PUD类型get-next-request</td>
</tr>
<tr>
<td>19</td>
<td>snmp pdu的长度为25个OctStr(后面的内容25字节)</td>
</tr>
<tr>
<td>02 01 27</td>
<td>请求标识符Request ID</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-state为0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-index为0</td>
</tr>
<tr>
<td>30 0e</td>
<td>表示后面变量绑定是SEQUENCE类型14个字节长度</td>
</tr>
<tr>
<td>30 0c</td>
<td>表示(变量名1item)</td>
</tr>
<tr>
<td>06</td>
<td>表示该字段是OID类型</td>
</tr>
<tr>
<td>08</td>
<td>OID长度8字节</td>
</tr>
<tr>
<td>2b 06 01 02 01</td>
<td>1.3.6.1.2.1(标识1.3被合并为2B)</td>
</tr>
<tr>
<td>01 05 00</td>
<td>1.5.0</td>
</tr>
<tr>
<td>05 00</td>
<td>表示NULL</td>
</tr>
</tbody></table>
</li>
<li><p>get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvMVg.png" alt="tCvMVg.png"></p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>表示SNMP协议报文(整个报文是一个SEQUENCE)</td>
</tr>
<tr>
<td>32</td>
<td>消息长度50字节(表示后面还有50个字节的内容)</td>
</tr>
<tr>
<td>02 01 01</td>
<td>协议版本(2c)(前两个字节02 01 表示INTEGER类型)</td>
</tr>
<tr>
<td>04</td>
<td>参数类型(OCTSTR)</td>
</tr>
<tr>
<td>06</td>
<td>群体(community)名长度</td>
</tr>
<tr>
<td>70 75 62 6c 69 63</td>
<td>群体名public的assic码值</td>
</tr>
<tr>
<td>a2</td>
<td>PUD类型get-response</td>
</tr>
<tr>
<td>25</td>
<td>snmp pdu的长度为37个OctStr(后面的内容37字节)</td>
</tr>
<tr>
<td>02 01 27</td>
<td>请求标识符Request ID</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-state为0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-index为0</td>
</tr>
<tr>
<td>30 1a</td>
<td>表示后面变量绑定是SEQUENCE类型26个字节长度</td>
</tr>
<tr>
<td>30 18</td>
<td>表示(变量名1 item)</td>
</tr>
<tr>
<td>06</td>
<td>表示该字段是OID类型</td>
</tr>
<tr>
<td>08</td>
<td>OID长度8字节</td>
</tr>
<tr>
<td>2b 06 01 02 01</td>
<td>1.3.6.1.2.1(标识1.3被合并为2B)</td>
</tr>
<tr>
<td>01 06 00</td>
<td>1.6.0</td>
</tr>
<tr>
<td>04</td>
<td>表示这是一个字符串</td>
</tr>
<tr>
<td>0c</td>
<td>表示字符串长度为12</td>
</tr>
<tr>
<td>53 68 61 6e 58 69 2d 58 69 20 61 6e</td>
<td>表示字符串内容为“ShanXi-Xi an”</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>SNMP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-20.04-mate-for-server</title>
    <url>/2020/06/16/ubuntu-20-04-mate-for-server/</url>
    <content><![CDATA[<h1 id="一、换源"><a href="#一、换源" class="headerlink" title="一、换源"></a>一、换源</h1><p>在设置中选择系统设置，找到Software Updater，点击进入，再点击Settings按钮，</p><p><img src="https://i.loli.net/2020/06/16/T2oMNG86Xr5wILW.png" alt="image-20200616092916772"></p><p><img src="https://i.loli.net/2020/06/16/8OU6e1VxjuyDHm7.png" alt="image-20200616093031282"></p><p><img src="https://i.loli.net/2020/06/16/qAn1YptUaRHFrLP.png" alt="image-20200616093227130"></p><p><img src="https://i.loli.net/2020/06/16/Y4IUR98sBaWo5Su.png" alt="image-20200616093307249"></p><p>选择Reload重新加载源。</p><p>在终端输入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>更新源和软件。</p><h1 id="二、为ensp搭建各种服务器"><a href="#二、为ensp搭建各种服务器" class="headerlink" title="二、为ensp搭建各种服务器"></a>二、为ensp搭建各种服务器</h1><h2 id="2-1准备工作"><a href="#2-1准备工作" class="headerlink" title="2.1准备工作"></a>2.1准备工作</h2><p><strong>关闭防火墙，测试网路连通性。</strong></p><a id="more"></a>










<p>关闭命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span> //关闭防火墙</span><br><span class="line">sudo ufw status  //查看防护墙状态</span><br></pre></td></tr></table></figure>

<p>win也需要关闭防护墙。</p>
<p>测试连通性：</p>
<p><img src="https://i.loli.net/2020/06/16/DbQxdyCL5vPEltU.png" alt="image-20200616094011730"></p>
<h2 id="2-2搭建web服务器"><a href="#2-2搭建web服务器" class="headerlink" title="2.2搭建web服务器"></a>2.2搭建web服务器</h2><p><strong>安装nginx服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p><strong>调整防火墙</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw app list</span><br><span class="line">  CUPS</span><br><span class="line">  Nginx Full</span><br><span class="line">  Nginx HTTP</span><br><span class="line">  Nginx HTTPS</span><br></pre></td></tr></table></figure>

<p>正如你所看到的，Nginx有三个配置文件可用：Nginx Full、Nginx HTTP、Nginx HTTPS</p>
<p>Nginx Full ：此配置文件打开端口80（正常，未加密的网络流量）和端口443（TLS / SSL加密流量）</p>
<p>Nginx HTTP ：此配置文件仅打开端口80（正常，未加密的网络流量）</p>
<p>Nginx HTTPS ：此配置文件仅打开端口443（TLS / SSL加密流量）</p>
<p>输入以下命令以查看防火墙状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p>可以看到允许通过的服务有哪些：</p>
<p><img src="https://i.loli.net/2020/06/16/NhQq761kTlcia8e.png" alt="image-20200616154638847"></p>
<p>Ubuntu 20.04上的Nginx默认启用了一个服务器模块，该模块被配置为在<code>/var/www/html</code>目录下提供文档。将写好的项目复制至/var/www/html目录下。</p>
<p>测试：在浏览器中输入<a href="http://192.168.10.121" target="_blank" rel="noopener">http://192.168.10.121</a></p>
<p><img src="https://i.loli.net/2020/06/16/3Ice8vWAhPpoCO2.png" alt="image-20200616154344810"></p>
<h2 id="2-3FTP服务器"><a href="#2-3FTP服务器" class="headerlink" title="2.3FTP服务器"></a>2.3FTP服务器</h2><p>服务为win10提供，服务端配置：</p>
<p><img src="https://i.loli.net/2020/06/16/eYyRwafv29LzCFJ.png" alt="image-20200616155309043"></p>
<p>ensp中连接如下：</p>
<p><img src="https://i.loli.net/2020/06/16/7bMz1ApBlfdSEHc.png" alt="image-20200616155420223"></p>
<h2 id="2-4telnet"><a href="#2-4telnet" class="headerlink" title="2.4telnet"></a>2.4telnet</h2><p><img src="https://i.loli.net/2020/06/16/pVEIn3TKQflMb7J.png" alt="image-20200616160734107"></p>
<p>貌似已经不支持了，在ensp中有设置。</p>
<h2 id="2-5SSH安装配置"><a href="#2-5SSH安装配置" class="headerlink" title="2.5SSH安装配置"></a>2.5SSH安装配置</h2><p> <strong>使用apt工具下载并安装openssh-server</strong></p>
<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/RCn267brXeU4lEv.png" alt="image-20200616161058823"></p>
<p>等待安装结束即可。然后再次查看服务有没有启动，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://i.loli.net/2020/06/16/io7a8QJWSdN2kOj.png" alt="image-20200616161259612"></p>
<p>再次确认或者没有图中的结果，使用如下命令来启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh status</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/LwJMf76dZ4t8DyC.png" alt="image-20200616161426284"></p>
<p>ssh服务端已经开启，在xshell中进行远程登陆测试。</p>
<p><img src="https://i.loli.net/2020/06/16/8BZLinq6XrVH7QY.png" alt="image-20200616161545290"></p>
<p>在主机栏填入开启ssh服务端的主机ip，点击确定进入如下界面：</p>
<p><img src="https://i.loli.net/2020/06/16/kxpV1fbLr6HdZcm.png" alt="image-20200616161709692"></p>
<p>这是密钥和算法协商阶段：</p>
<p>客户请求连接-服务器将对应公钥、生成会话ID发给客户端、客户端生成会话密钥，并将会话密钥与会话ID进行xor逻辑运算后的值，使用服务器公钥加密发送给服务器、服务器采用私钥解密后，通过xor运算得到会话密钥-之后所有传输都会被会话密钥加密与解密。</p>
<p>点击接受并保存后，进入认证阶段：</p>
<p>password认证-输入用户名与密码，服务器验证是否合法。</p>
<p>publickey认证-数字签名认证，客户端发送用户名、公共密钥、公共密钥算法的publickey认证请求给服务器端，服务器验证是否合法。使用ssh-keygen程序生成公钥 id_dsa.pub 和私钥 id_dsa。</p>
<p><img src="https://i.loli.net/2020/06/16/7YbxIvFL9Jg8psr.png" alt="image-20200616161924769"></p>
<p><img src="https://i.loli.net/2020/06/16/4PrdZ6DmenCAfg8.png" alt="image-20200616161949478"></p>
<p>输入正确的用户名密码后，xshell界面如下：</p>
<p><img src="https://i.loli.net/2020/06/16/9rHSfgCceAbZLaT.png" alt="image-20200616162022133"></p>
<h2 id="2-6VPN服务器（PPTP）"><a href="#2-6VPN服务器（PPTP）" class="headerlink" title="2.6VPN服务器（PPTP）"></a>2.6VPN服务器（PPTP）</h2><h3 id="安装PPTPD"><a href="#安装PPTPD" class="headerlink" title="安装PPTPD"></a>安装PPTPD</h3><p>第一步当然是安装这个软件包了。（下面所有的代码，如果需要修改的，我会特别标记出来的，其他都表示可以直接复制）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/igebY2qfOFyJ81I.png" alt="image-20200617100516932"></p>
<h3 id="编辑PPTPD-CONF文件"><a href="#编辑PPTPD-CONF文件" class="headerlink" title="编辑PPTPD.CONF文件"></a>编辑PPTPD.CONF文件</h3><p>打开这个文件并进入编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/IXBjQ6aAMZSmh9t.png" alt="image-20200617102931169"></p>
<p>localip:表示PPTP服务地址及本机IP。</p>
<p>remoteip：当客户机通过pptp连接到vpn后所能拿到的ip地址范围，默认从第一个开始分配给客户</p>
<h3 id="修改CHAP-SECRETS文件，添加可以登录的用户"><a href="#修改CHAP-SECRETS文件，添加可以登录的用户" class="headerlink" title="修改CHAP-SECRETS文件，添加可以登录的用户"></a>修改CHAP-SECRETS文件，添加可以登录的用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Noq3EBz6cGMklhQ.png" alt="image-20200617101228399"></p>
<p>client：连接用户名<br>server：连接的服务<br>secret：连接密码<br>IP addresses：可连接的IP，*表示所有</p>
<h3 id="修改远程连接用户的DNS"><a href="#修改远程连接用户的DNS" class="headerlink" title="修改远程连接用户的DNS"></a>修改远程连接用户的DNS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Gsk7SRaUxf6dnJX.png" alt="image-20200617101414509"></p>
<h3 id="开启网络转发功能"><a href="#开启网络转发功能" class="headerlink" title="开启网络转发功能"></a>开启网络转发功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctil.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/SEI5OkULVhHiyjJ.png" alt="image-20200617101751708"></p>
<p>去掉两行对应的注释，提供ipv4和ipv6的转发功能。</p>
<p>更新配置命令如下：</p>
<p><img src="https://i.loli.net/2020/06/17/MLXForGbRWD2CgK.png" alt="image-20200617102036260"></p>
<h3 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h3><p><strong>开启gre协议</strong></p>
<p>输入下面的指令，开启gre协议，并打开服务器47,1723号端口。</p>
<p>使用VPN需要开启gre协议，而gre协议需要使用服务器的47和1723号端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p gre -j ACCEPT </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 1723 -j ACCEPT   </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 47 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>开启NAT转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.10.121/24 -o ens33 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>上面指令中ip要填写部署pptp步骤中第1.2步中设置的localip，也就是虚拟vpn的主机的ip。</p>
<p>ens33表示当前服务器的网卡，这里不同机器可能不一样，可以通过ifconfig指令进行查询，之后修改成对应的设备名称即可。<br>POSTROUTING参数表示，指定当数据包离开服务器的时候，对数据包进行处理。<br>MASQUERADE这个参数的意思就是即将从服务器封包出去(-o)的那块网卡上的IP，由于实验室的服务器是固定ip，所以这里修改成服务器的虚拟ip也是可以的。</p>
<p>通过上面的指令，iptables做了这样一件事情：将所有从服务器上传出的源地址为10.1.1.1-255之中的ip数据包的源ip改成服务器的ip。如果不做这个操作，服务器通过VPN传回的数据包将不包含服务器自己的源ip，所以远程访问主机的回复ip包会丢失。</p>
<h3 id="重启PPTP服务并查看状态"><a href="#重启PPTP服务并查看状态" class="headerlink" title="重启PPTP服务并查看状态"></a>重启PPTP服务并查看状态</h3><p><img src="https://i.loli.net/2020/06/17/2b8jyBToNMIUscR.png" alt="image-20200617103114973"></p>
<h3 id="配置客户端，连接VPN"><a href="#配置客户端，连接VPN" class="headerlink" title="配置客户端，连接VPN"></a>配置客户端，连接VPN</h3><p><img src="https://i.loli.net/2020/06/17/oij7bdWNUpSvr6g.png" alt="image-20200617110012250"></p>
<p>进行连接测试</p>
<p><img src="https://i.loli.net/2020/06/17/2l78AzI6rQqgkSM.jpg" alt="img"></p>
<p>连接成功之后查看一下获取到的IP地址</p>
<p><img src="https://i.loli.net/2020/06/17/Ka4FzQTliIydRk1.png" alt="image-20200617235356285"></p>
]]></content>
      <categories>
        <category>linux</category>
        <category>ubuntu-20.04-mate</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>solidity学习笔记</title>
    <url>/2020/06/21/solidity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、Solidity-语言"><a href="#一、Solidity-语言" class="headerlink" title="一、Solidity 语言"></a>一、Solidity 语言</h2><p><a href="https://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener">Solidity</a> 是一种智能合约高级语言，运行在 Ethereum 虚拟机（EVM：Ethereum Virtual Machine）之上。<br> Solidity 的语法接近于 Javascript，是一种面向对象的语言，而且围绕着 Solidity 的各种开发工具链，都是使用属于 Javascript 生态系的 <a href="https://www.npmjs.com/get-npm" target="_blank" rel="noopener">npm</a> 来提供的。</p><a id="more"></a>
<blockquote>
<p>Solidity语言：<a href="http://www.tryblockchain.org" target="_blank" rel="noopener">http://www.tryblockchain.org</a><br> Solidity documentation：<a href="https://solidity.readthedocs.org" target="_blank" rel="noopener">https://solidity.readthedocs.org</a><br> GitHub：<a href="https://github.com/ethereum/solidity" target="_blank" rel="noopener">https://github.com/ethereum/solidity</a></p>
</blockquote>
<h2 id="二、编辑器"><a href="#二、编辑器" class="headerlink" title="二、编辑器"></a>二、编辑器</h2><p>我目前是使用 <a href="https://atom.io" target="_blank" rel="noopener">Atom</a> 搭配 solidity（linter-solium和autocomplete-solidity） 插件来开发。</p>
<h2 id="三、Truffle-框架"><a href="#三、Truffle-框架" class="headerlink" title="三、Truffle 框架"></a>三、Truffle 框架</h2><p><a href="http://truffleframework.com" target="_blank" rel="noopener">Truffle</a> 是针对基于以太坊的 Solidity 语言的一套开发框架，本身基于 Javascript。</p>
<h2 id="四、工具安装"><a href="#四、工具安装" class="headerlink" title="四、工具安装"></a>四、工具安装</h2><p>见另一篇博客<a href="https://lisongbai.top/2020/02/23/windows10%E6%90%AD%E5%BB%BAtruffle%E5%8F%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">win10搭建以太坊开发环境及truffle框架</a></p>
<h2 id="五、启动-Ganache客户端"><a href="#五、启动-Ganache客户端" class="headerlink" title="五、启动 Ganache客户端"></a>五、启动 Ganache客户端</h2><p><img src="https://i.loli.net/2020/06/21/5AYqy1VvoKt2DG6.png" alt="image-20200621100049242"></p>
<p>可以看到启动后自动建立了10个帐号（Accounts），与每个帐号对应的私钥（Private Key）。每个帐号中都有100个测试用的以太币（Ether）。</p>
<h2 id="六、创建初始化项目"><a href="#六、创建初始化项目" class="headerlink" title="六、创建初始化项目"></a>六、创建初始化项目</h2><p>在空目录下打开cmd输入 truffle init 构建初始化项目。</p>
<p>目录结构：</p>
<ul>
<li><code>contracts/</code>：Truffle默认的合约文件存放地址；</li>
<li><code>migrations/</code>：存放发布的脚本文件；</li>
<li><code>test/</code>：存放测试应用和合约的测试文件；</li>
<li><code>truffle.js 和 truffle-config.js</code>：Truffle的配置文件。</li>
</ul>
<h2 id="七、新建-HelloWorld-合约"><a href="#七、新建-HelloWorld-合约" class="headerlink" title="七、新建 HelloWorld 合约"></a>七、新建 HelloWorld 合约</h2><p>在 <code>contracts</code> 文件夹下新建 Demo.sol 文件，合约内容如下：</p>
<p><img src="https://i.loli.net/2020/06/21/faMwgiQSCtKsP8e.png" alt="image-20200621100413979"></p>
<p>讲解：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pragma</span> <span class="selector-tag">solidity</span> 0<span class="selector-class">.5</span><span class="selector-class">.16</span>;</span><br></pre></td></tr></table></figure>

<p>第一行指名目前使用的 solidity 版本，不同版本的 solidity 可能会编译出不同的 bytecode。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Demo&#123;</span><br><span class="line">  //构造方法</span><br><span class="line">  constructor() public &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  //sayHello  写死</span><br><span class="line">  function sayHello() public pure returns (string memory)&#123;</span><br><span class="line">    return (&quot;hello world!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //echo 接受一个参数 然后返回</span><br><span class="line">  function echo(string memory _name) public pure returns (string memory)&#123;</span><br><span class="line">    return _name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>contract</code> 关键字类似于其他语言中较常见的 <code>class</code>。因为solidity 是专为智能合约（Contact）设计的语言，声明 <code>contract</code> 后即内置了开发智能合约所需的功能。也可以把这句理解为 <code>class Demo extends Contract</code>。</p>
<p>函数的结构与其他程序类似，但如果有传入的参数或回传值，需要指定参数或回传值的类型（<code>type</code>）。</p>
<h2 id="八、编译合约"><a href="#八、编译合约" class="headerlink" title="八、编译合约"></a>八、编译合约</h2><p>现在执行 <code>truffle compile</code> 命令，我们可以将 <code>HelloWorld.sol</code> 原始码编译成 <code>Ethereum bytecode</code>：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ..`</span><br><span class="line"> `$ truffle compile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>命令运行成功后会多出一个 <code>build</code> 的目录，如下：</p>
<p><img src="https://i.loli.net/2020/06/21/PLz7U8byR25ajeQ.png" alt="image-20200621101128429"></p>
<p>build 目录</p>
<p>在 <code>HelloWorld</code> 文件夹下面的 <code>build/contracts</code> 文件夹下面会看见 <code>HelloWorld.json</code> 文件：</p>
<p><img src="https://i.loli.net/2020/06/21/6wnRoSe9gETpisV.png" alt="image-20200621101435329"></p>
<p>Demo.json</p>
<h2 id="十、修改-truffle-js-文件内容："><a href="#十、修改-truffle-js-文件内容：" class="headerlink" title="十、修改 truffle.js 文件内容："></a>十、修改 truffle.js 文件内容：</h2><p>添加以下内容到 truffle.js 文件并保存 :</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">networks</span>: &#123;</span><br><span class="line">        <span class="attribute">development</span>: &#123;</span><br><span class="line">            host:<span class="string">"localhost"</span>,</span><br><span class="line">            port:<span class="number">7545</span>,</span><br><span class="line">            network_id:<span class="string">"*"</span>  // 匹配任何network id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>修改 truffle.js 文件</p>
<h2 id="十一、部署合约"><a href="#十一、部署合约" class="headerlink" title="十一、部署合约"></a>十一、部署合约</h2><p>在 <code>migrations</code> 目录下创建移植文件：</p>
<p><img src="https://i.loli.net/2020/06/21/r9jhM3WgIS6UQpw.png" alt="image-20200621101633945"></p>
<p>创建移植文件</p>
<p>修改文件内容如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Demo = artifacts.require(<span class="string">"Demo"</span>);</span><br><span class="line"><span class="comment">//使用 artifacts.require 语句来取得准备部署的合约</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>)</span>&#123;</span><br><span class="line">  deployer.deploy(Demo);</span><br><span class="line">  <span class="comment">//使用deployer.deploy 语句将合约部署到区块链上。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>修改移植文件内容</p>
<p>使用 <code>artifacts.require</code> 语句来取得准备部署的合约。<br> 使用<code>deployer.deploy</code> 语句将合约部署到区块链上。<br> 这边<code>Demo</code> 是 <code>contract</code> 的名称而不是文件名。<br> 因此可以用此语法读入任一 <code>.sol</code> 文件中的任一合约。</p>
<p>现在执行 <code>truffle migrate</code> 命令：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ truffle migrate</span><br></pre></td></tr></table></figure>
</blockquote>
<p>部署合约</p>
<p>部署成功你会看到 Ganache中生成了新的区块，表示已经将合约部署到区块链上了。</p>
<p><img src="https://i.loli.net/2020/06/21/roODI2PEgwJkXp4.png" alt="image-20200621101919044"></p>
<h2 id="十二、与合约互动"><a href="#十二、与合约互动" class="headerlink" title="十二、与合约互动"></a>十二、与合约互动</h2><p>Truffle 提供命令行工具，执行 <code>truffle console</code> 命令后，可用Javascript 来和刚刚部署的合约互动：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ..`</span><br><span class="line"> `$ truffle console`</span><br><span class="line"> `$ Demo.deployed().then(instance =&gt; c = instance)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>与合约互动</p>
<p><img src="https://i.loli.net/2020/06/21/DZ1wM32A8rOTIGN.png" alt="image-20200621102333408"></p>
<p>讲解：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Demo.deployed().then(instance =&gt; c = instance)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>truffle console</code> 中预载了 <code>truffle-contract</code> 函数库，以方便操作部署到区块链上的合约。<br> 这边使用 <code>Demo.deployed().then</code> 语句来取得 <code>Demo</code>合约的 <code>Instance</code>（实例），并存到 <code>contract</code> 变量中，以方便后续的调用。</p>
<p>输入以下命令：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.echo(&quot;hello solidity&quot;)</span><br><span class="line">c.sayHello()</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://i.loli.net/2020/06/21/aJOfp2vjVIUlDS5.png" alt="image-20200621102546448"></p>
<p>这里直接呼叫 <code>contract.sayHello.call()</code> 也会得到一样的结果。<code>truffle-contract</code> 提供使用 <code>call()</code> 来读取只读 <code>（read only）</code> 的数据，这样就不需提供 <code>gas</code>。因此如果遇到的操作需要向区块链写入数据，我们就不能用 <code>call</code> 语句了。</p>
<p>如此一来，我们已写好并部署完成了第一个智能合约，也验证了合约确实可以运作。</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣每日一题之合并两个有序链表</title>
    <url>/2020/06/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><h1 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h1 id="3、思路"><a href="#3、思路" class="headerlink" title="3、思路"></a>3、思路</h1><p>在循环中比较两个升序链表的节点元素大小，将值较小的节点（必定是表头）移除，添加至new的节点后面。当其中一条链表为null时，将另一条链表接在重排序的链表后面，排序完成，但是多出一个新创建的头节点，故输出listNode4.next。</p><a id="more"></a>



<h1 id="4、代码及测试"><a href="#4、代码及测试" class="headerlink" title="4、代码及测试"></a>4、代码及测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.leetCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.soap.Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo21</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode4 <span class="title">mergeTwoLists</span><span class="params">(ListNode4 l1, ListNode4 l2)</span> </span>&#123;</span><br><span class="line">        ListNode4 listNode4 = <span class="keyword">new</span> ListNode4(-<span class="number">1</span>);</span><br><span class="line">        ListNode4 re = listNode4;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">                re.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                re.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            re = re.next;</span><br><span class="line">        &#125;</span><br><span class="line">        re.next = l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">return</span> listNode4.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode4 node = <span class="keyword">new</span> ListNode4(<span class="number">1</span>);</span><br><span class="line">        ListNode4  node1= <span class="keyword">new</span> ListNode4(<span class="number">2</span>);</span><br><span class="line">        ListNode4 node2 = <span class="keyword">new</span> ListNode4(<span class="number">4</span>);</span><br><span class="line">        node.next = node1;</span><br><span class="line">        node1.next = node2;</span><br><span class="line"></span><br><span class="line">        ListNode4 nod = <span class="keyword">new</span> ListNode4(<span class="number">1</span>);</span><br><span class="line">        ListNode4  nod1= <span class="keyword">new</span> ListNode4(<span class="number">3</span>);</span><br><span class="line">        ListNode4 nod2 = <span class="keyword">new</span> ListNode4(<span class="number">4</span>);</span><br><span class="line">        nod.next = nod1;</span><br><span class="line">        nod1.next = nod2;</span><br><span class="line"></span><br><span class="line">        ListNode4 node4 = mergeTwoLists(node, nod);</span><br><span class="line">        <span class="keyword">while</span> (node4.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(node4.val);</span><br><span class="line">            node4 = node4.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(node4.val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果：</strong></p>
<p><img src="https://i.loli.net/2020/06/21/lLq1CgPZNBHpJD2.png" alt="image-20200621160908070"></p>
<p><a href="https://github.com/yym08090809/my-java-demo/blob/master/src/main/java/com/lcx/leetCode/Demo21.java" target="_blank" rel="noopener">代码已上传至github</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>vlan间通讯</title>
    <url>/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h1 id="1-vlan拓扑图"><a href="#1-vlan拓扑图" class="headerlink" title="1.vlan拓扑图"></a>1.vlan拓扑图</h1><p><img src="https://s2.ax1x.com/2020/03/02/3Rmj76.png" alt="3Rmj76.png"></p><h1 id="2-配置交换机"><a href="#2-配置交换机" class="headerlink" title="2.配置交换机"></a>2.配置交换机</h1><h2 id="2-1配置S1命令如下-S2同理-："><a href="#2-1配置S1命令如下-S2同理-：" class="headerlink" title="2.1配置S1命令如下(S2同理)："></a>2.1配置S1命令如下(S2同理)：</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&lt;Huawei&gt;system-view</span></span><br><span class="line"><span class="attr">sysname</span> <span class="string">S1</span></span><br><span class="line"><span class="meta">[S1]vlan</span> <span class="string">batch 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">default vlan 2     #将该端口加入到VLAN 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/2</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">default vlan 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/3</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">link-type trunk</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">trunk allow-pass vlan 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只在S1中进行配置</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 2</span></span><br><span class="line"><span class="meta">[S1-Vlanif10]ip</span> <span class="string">address 192.168.2.254 24</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif20]ip</span> <span class="string">address 192.168.3.254 24</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<h2 id="2-2在交换机上查看vlan划分情况："><a href="#2-2在交换机上查看vlan划分情况：" class="headerlink" title="2.2在交换机上查看vlan划分情况："></a>2.2在交换机上查看vlan划分情况：</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">display</span> <span class="string">vlan</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3Re4RH.png" alt="3Re4RH.png"></p>
<h1 id="3-测试vlan间通讯"><a href="#3-测试vlan间通讯" class="headerlink" title="3.测试vlan间通讯"></a>3.测试vlan间通讯</h1><h2 id="3-1同一交换机下不同vlan下的机器进行ping操作"><a href="#3-1同一交换机下不同vlan下的机器进行ping操作" class="headerlink" title="3.1同一交换机下不同vlan下的机器进行ping操作"></a>3.1同一交换机下不同vlan下的机器进行ping操作</h2><p><strong>pc1Pingpc2：</strong></p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3Rifjf.png" alt="3Rifjf.png"></p>
<p>在端口<strong>0/0/2</strong>上捕获报文如下：</p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3Rk3FJ.png" alt="3Rk3FJ.png"></p>
<h2 id="3-2不同交换机下不同vlan下的机器进行ping操作"><a href="#3-2不同交换机下不同vlan下的机器进行ping操作" class="headerlink" title="3.2不同交换机下不同vlan下的机器进行ping操作"></a>3.2不同交换机下不同vlan下的机器进行ping操作</h2><p><strong>pc3pingpc2：</strong></p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3RZfvn.png" alt="3RZfvn.png"></p>
<p>在端口<strong>0/0/3</strong>上捕获报文如下：</p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3ReZrt.png" alt="3ReZrt.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>vlan间通讯</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>whiter-jotter</title>
    <url>/2020/03/08/whiter-jotter/</url>
    <content><![CDATA[<h1 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1.项目概述"></a>1.项目概述</h1><p> 这个项目我把它命名为 <strong>“白卷”</strong>，因为它随着开发的进展逐渐完善，象征着知识的从无到有，从有到多。另外我还给它起了一个英文名字，叫 <strong>White Jotter</strong>（白色笔记本），纯粹是为了谐音。 </p><p> 我选用 Vue.js + Spring Boot 来开发这个项目 ， 是因为这两种框架当下比较热门，也是实现所谓 <strong>前后端分离</strong> 的最佳选择之一。 </p><a id="more"></a>

<h2 id="1-1前端项目基本结构"><a href="#1-1前端项目基本结构" class="headerlink" title="1.1前端项目基本结构"></a>1.1前端项目基本结构</h2><p><img src="https://s2.ax1x.com/2020/03/08/3x9BdS.png" alt="3x9BdS.png"></p>
<p>ps：目前只完成了登录页面和图书馆页面</p>
<h3 id="登录页面："><a href="#登录页面：" class="headerlink" title="登录页面："></a>登录页面：</h3><p><img src="https://s2.ax1x.com/2020/03/08/3xCBOx.png" alt="3xCBOx.png"></p>
<h3 id="图书馆页面："><a href="#图书馆页面：" class="headerlink" title="图书馆页面："></a>图书馆页面：</h3><p><img src="https://s2.ax1x.com/2020/03/08/3xCWpd.png" alt="3xCWpd.png"></p>
<h2 id="1-2后端项目基本结构"><a href="#1-2后端项目基本结构" class="headerlink" title="1.2后端项目基本结构"></a>1.2后端项目基本结构</h2><ul>
<li><p>后台管理模块的常见功能与布局（内容管理、用户\权限管理、运维监控）</p>
</li>
<li><p>用户身份验证、授权、会话管理与信息加密存储</p>
</li>
<li><p>Shiro 框架的使用</p>
</li>
<li><p>实现不同粒度的访问控制（动态菜单、功能控制、数据控制）</p>
<p>后台基本结构如下： </p>
</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/03/08/3xiOLq.png" alt="3xiOLq.png"></p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2.技术栈"></a>2.技术栈</h1><p>目前用到的技术如下所示：</p>
<h2 id="2-1前端技术栈"><a href="#2-1前端技术栈" class="headerlink" title="2.1前端技术栈"></a>2.1前端技术栈</h2><ul>
<li>Vue.js</li>
<li>ElementUI</li>
<li>axios</li>
</ul>
<p>ps：没有系统的学过vue框架，开发过程中查阅了相当多的资料。</p>
<h2 id="2-2后端技术栈"><a href="#2-2后端技术栈" class="headerlink" title="2.2后端技术栈"></a>2.2后端技术栈</h2><ul>
<li>SpringBoot</li>
<li>SpringData + JPA</li>
<li>MySQL5.5</li>
</ul>
<h1 id="3-目前项目进展"><a href="#3-目前项目进展" class="headerlink" title="3.目前项目进展"></a>3.目前项目进展</h1><p>实现了登录、图书展示功能，后端采用JPA实现了书本数据的增删改查，通过外键建立书本表和分类表的关系，对书本数据进行分类展示。下一步计采用Shiro 实现用户信息加密与登录认证。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10搭建truffle及出现问题的解决方案</title>
    <url>/2020/02/23/windows10%E6%90%AD%E5%BB%BAtruffle%E5%8F%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="1-版本信息"><a href="#1-版本信息" class="headerlink" title="1.版本信息"></a>1.版本信息</h1><h2 id="1-1-node"><a href="#1-1-node" class="headerlink" title="1.1 node"></a>1.1 node</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">v12.15.0</span><br></pre></td></tr></table></figure><h2 id="1-2-npm"><a href="#1-2-npm" class="headerlink" title="1.2 npm"></a>1.2 npm</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line">6.13.4</span><br><span class="line"><span class="meta">#</span><span class="bash">换源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm config list</span><br><span class="line">; cli configs</span><br><span class="line">metrics-registry = "https://registry.npm.taobao.org/"</span><br><span class="line">scope = ""</span><br><span class="line">user-agent = "npm/6.13.4 node/v12.15.0 win32 x64"</span><br><span class="line"></span><br><span class="line">; userconfig C:\Users\12173\.npmrc</span><br><span class="line">registry = "https://registry.npm.taobao.org/"</span><br><span class="line"></span><br><span class="line">; builtin config undefined</span><br><span class="line">prefix = "C:\\Users\\12173\\AppData\\Roaming\\npm"</span><br><span class="line"></span><br><span class="line">; node bin location = E:\Program Files\nodejs\node.exe</span><br><span class="line">; cwd = C:\Users\12173</span><br><span class="line">; HOME = C:\Users\12173</span><br><span class="line">; "npm config ls -l" to show all defaults.</span><br></pre></td></tr></table></figure><a id="more"></a>



<h2 id="1-3-git"><a href="#1-3-git" class="headerlink" title="1.3 git"></a>1.3 git</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure>

<h2 id="1-4-安装ganache-cli节点仿真器"><a href="#1-4-安装ganache-cli节点仿真器" class="headerlink" title="1.4 安装ganache-cli节点仿真器"></a>1.4 安装ganache-cli节点仿真器</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1 简介"></a>1.4.1 简介</h3><p>用于测试和开发的快速以太坊RPC客户端。</p>
<p>注意：testrpc 是现在的ganache-cli。 像使用testrpc一样去使用它。</p>
<p> 为了快速开发和测试以太坊DApp，我们通常使用以太坊节点仿真器来模拟区块链，最流行的节点仿真器就是Ganache，之前被称为TeseRPC。 </p>
<h3 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g ganache-cli</span><br><span class="line"></span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\ganache-cli -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\ganache-cli\cli.js</span><br><span class="line">+ ganache-cli@6.9.1</span><br><span class="line">updated 1 package in 5.506s</span><br><span class="line"></span><br><span class="line">ganache-cli --version</span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br></pre></td></tr></table></figure>

<h2 id="1-5-安装solidity编译器"><a href="#1-5-安装solidity编译器" class="headerlink" title="1.5 安装solidity编译器"></a>1.5 安装solidity编译器</h2><h3 id="1-5-1-简介"><a href="#1-5-1-简介" class="headerlink" title="1.5.1 简介"></a>1.5.1 简介</h3><p> solidity是开发以太坊智能合约的编程语言。[ 官网 ] : <a href="https://solidity.readthedocs.io/en/v0.6.3/" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/v0.6.3/</a> </p>
<h3 id="1-5-2-安装"><a href="#1-5-2-安装" class="headerlink" title="1.5.2 安装"></a>1.5.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g solc</span><br><span class="line"></span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\solcjs -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\solc\solcjs</span><br><span class="line">+ solc@0.6.3</span><br><span class="line">added 25 packages from 15 contributors in 39.318s</span><br><span class="line"></span><br><span class="line">solcjs -V</span><br><span class="line">0.6.3+commit.8dda9521.Emscripten.clang</span><br></pre></td></tr></table></figure>

<h2 id="1-6-Web3"><a href="#1-6-Web3" class="headerlink" title="1.6 Web3"></a>1.6 Web3</h2><h3 id="1-6-1-简介"><a href="#1-6-1-简介" class="headerlink" title="1.6.1 简介"></a>1.6.1 简介</h3><p> web3.js是一个库集合，你可以使用HTTP或IPC连接本地或远程以太它节点进行交互。 web3的JavaScript库能够与以太坊区块链交互。 它可以检索用户帐户，发送交易，与智能合约交互等。 </p>
<h3 id="1-6-2-安装"><a href="#1-6-2-安装" class="headerlink" title="1.6.2 安装"></a>1.6.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g web3@0.20.2</span><br><span class="line">+ web3@0.20.2</span><br><span class="line">added 6 packages from 9 contributors in 44.408s</span><br><span class="line"></span><br><span class="line">node -p 'require("web3")'</span><br><span class="line">require(web3)</span><br></pre></td></tr></table></figure>

<h2 id="1-7-Truffle"><a href="#1-7-Truffle" class="headerlink" title="1.7 Truffle"></a>1.7 Truffle</h2><h3 id="1-7-1-简介"><a href="#1-7-1-简介" class="headerlink" title="1.7.1 简介"></a>1.7.1 简介</h3><p> Truffle是针对基于以太坊的Solidity语言的一套开发框架。  本身基于Javascript </p>
<h3 id="1-7-2-安装"><a href="#1-7-2-安装" class="headerlink" title="1.7.2 安装"></a>1.7.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g truffle</span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\truffle -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\truffle\build\cli.bundled.js</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> truffle@5.1.14 postinstall C:\Users\12173\AppData\Roaming\npm\node_modules\truffle</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node ./scripts/postinstall.js</span></span><br><span class="line"></span><br><span class="line">- Fetching solc version list from solc-bin. Attempt #1</span><br><span class="line">- Fetching solc version list from solc-bin. Attempt #2</span><br><span class="line">- Fetching solc version list from solc-bin. Attempt #3</span><br><span class="line">+ truffle@5.1.14</span><br><span class="line">added 27 packages from 439 contributors in 121.064s</span><br><span class="line"></span><br><span class="line">truffle --version</span><br><span class="line">Truffle v5.1.14 - a development framework for Ethereum</span><br><span class="line"></span><br><span class="line">Usage: truffle &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build     Execute build pipeline (if configuration present)</span><br><span class="line">  compile   Compile contract source files</span><br><span class="line">  config    Set user-level configuration options</span><br><span class="line">  console   Run a console with contract abstractions and commands available</span><br><span class="line">  create    Helper to create new contracts, migrations and tests</span><br><span class="line">  debug     Interactively debug any transaction on the blockchain (experimental)</span><br><span class="line">  deploy    (alias for migrate)</span><br><span class="line">  develop   Open a console with a local development blockchain</span><br><span class="line">  exec      Execute a JS module within this Truffle environment</span><br><span class="line">  help      List all commands or provide information about a specific command</span><br><span class="line">  init      Initialize new and empty Ethereum project</span><br><span class="line">  install   Install a package from the Ethereum Package Registry</span><br><span class="line">  migrate   Run migrations to deploy contracts</span><br><span class="line">  networks  Show addresses for deployed contracts on each network</span><br><span class="line">  obtain    Fetch and cache a specified compiler</span><br><span class="line">  opcode    Print the compiled opcodes for a given contract</span><br><span class="line">  publish   Publish a package to the Ethereum Package Registry</span><br><span class="line">  run       Run a third-party command</span><br><span class="line">  test      Run JavaScript and Solidity tests</span><br><span class="line">  unbox     Download a Truffle Box, a pre-built Truffle project</span><br><span class="line">  version   Show version number and exit</span><br><span class="line">  watch     Watch filesystem for changes and rebuild the project automatically</span><br><span class="line"></span><br><span class="line">See more at http://truffleframework.com/docs</span><br></pre></td></tr></table></figure>

<h2 id="1-8webpack"><a href="#1-8webpack" class="headerlink" title="1.8webpack"></a>1.8webpack</h2><h3 id="1-8-1简介"><a href="#1-8-1简介" class="headerlink" title="1.8.1简介"></a>1.8.1简介</h3><p> 本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。 </p>
<h3 id="1-8-2安装"><a href="#1-8-2安装" class="headerlink" title="1.8.2安装"></a>1.8.2安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> npm install -g webpack@3.11.0</span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\webpack -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\webpack\bin\webpack.js</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> uglifyjs-webpack-plugin@0.4.6 postinstall C:\Users\12173\AppData\Roaming\npm\node_modules\webpack\node_modules\uglifyjs-webpack-plugin</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node lib/post_install.js</span></span><br><span class="line"></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\webpack\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">+ webpack@3.11.0</span><br><span class="line">added 333 packages from 285 contributors in 26.975s</span><br><span class="line"></span><br><span class="line">webpack -v</span><br><span class="line">3.11.0</span><br></pre></td></tr></table></figure>

<h1 id="2-相关知识"><a href="#2-相关知识" class="headerlink" title="2.相关知识"></a>2.相关知识</h1><h2 id="2-1-Truffle与web3初始"><a href="#2-1-Truffle与web3初始" class="headerlink" title="2.1 Truffle与web3初始"></a>2.1 Truffle与web3初始</h2><p><strong>Truffle提供功能如下</strong></p>
<ol>
<li><p>内置智能合约编译、链接、部署和二进制字节码管理</p>
</li>
<li><p>针对快速迭代开发的自动化合约</p>
</li>
<li><p>可脚本化、可扩展部署和迁移框架</p>
</li>
<li><p>网络管理，可部署到任意数量的公共网络和私有网络</p>
</li>
<li><p>使用EthPM和NPM进行包安装管理</p>
</li>
<li><p>用于直接与合约通信的交互式控制台</p>
</li>
<li><p>支持持续集成可配置构建管道</p>
</li>
<li><p>外部脚本运行程序可以在Truffle环境中执行脚本</p>
</li>
<li><p>提供合约抽象接口，可以直接通过var instance = Storage.deployed()拿到合约对象，然后在JavaScript中直接操作对应的合约函数。</p>
</li>
</ol>
<p>*<em>web3.js *</em></p>
<ol>
<li><p>web3.js提供了用于和geth通信的javascript API,其内部使用了JSON-RPC与geth通信。</p>
</li>
<li><p>JSON-RPC是一个无状态且轻量级的远程过程调用，允许使用socket,http等协议进行通信。使用JSON作为数据格式。</p>
</li>
<li><p>web3.js可以与所有支持JSON-RPC的节点通信。不仅支持ETH中的API，还支持ETH生态中其他系统的API，比如whispir</p>
</li>
<li><p>whispir是一个集成进ETH的消息系统 ， 允许DApp发送小量信息进行非实时通信。</p>
</li>
</ol>
<h1 id="3-Truffle项目构建"><a href="#3-Truffle项目构建" class="headerlink" title="3. Truffle项目构建"></a>3. Truffle项目构建</h1><h2 id="3-1初始化项目（truffle-unbox-webpack）"><a href="#3-1初始化项目（truffle-unbox-webpack）" class="headerlink" title="3.1初始化项目（truffle unbox webpack）"></a>3.1初始化项目（truffle unbox webpack）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truffle unbox webpack</span><br><span class="line">This directory is non-empty...</span><br><span class="line">? Proceed anyway? (Y/n)</span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">? Proceed anyway? Yes</span><br><span class="line">√ Preparing to download box</span><br><span class="line">√ Downloading</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! find Python Python is not set from command line or npm configuration</span><br><span class="line">gyp ERR! find Python Python is not set from environment variable PYTHON</span><br><span class="line">gyp ERR! find Python checking if "python" can be used</span><br><span class="line">gyp ERR! find Python - "python" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python2" can be used</span><br><span class="line">gyp ERR! find Python - "python2" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python3" can be used</span><br><span class="line">gyp ERR! find Python - "python3" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if the py launcher can be used to find Python 2</span><br><span class="line">gyp ERR! find Python - "py.exe" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python27\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python27\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python37\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python37\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python You need to install the latest version of Python.</span><br><span class="line">gyp ERR! find Python Node-gyp should be able to find and use Python. If not,</span><br><span class="line">gyp ERR! find Python you can try one of the following options:</span><br><span class="line">gyp ERR! find Python - Use the switch --python="C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python   (accepted by both node-gyp and npm)</span><br><span class="line">gyp ERR! find Python - Set the environment variable PYTHON</span><br><span class="line">gyp ERR! find Python - Set the npm configuration variable python:</span><br><span class="line">gyp ERR! find Python   npm config set python "C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python For more information consult the documentation at:</span><br><span class="line">gyp ERR! find Python https://github.com/nodejs/node-gyp#installation</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Could not find any Python installation to use</span><br><span class="line">gyp ERR! stack     at PythonFinder.fail (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:307:47)</span><br><span class="line">gyp ERR! stack     at PythonFinder.runChecks (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:136:21)</span><br><span class="line">gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:225:16)</span><br><span class="line">gyp ERR! stack     at PythonFinder.execFileCallback (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:271:16)</span><br><span class="line">gyp ERR! stack     at exithandler (child_process.js:302:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.errorhandler (child_process.js:314:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:223:5)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:270:12)</span><br><span class="line">gyp ERR! stack     at onErrorNT (internal/child_process.js:456:16)</span><br><span class="line">gyp ERR! stack     at processTicksAndRejections (internal/process/task_queues.js:81:21)</span><br><span class="line">gyp ERR! System Windows_NT 10.0.16299</span><br><span class="line">gyp ERR! command "E:\\Program Files\\nodejs\\node.exe" "E:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js" "rebuild"</span><br><span class="line">gyp ERR! cwd E:\Dapp\hello\app\node_modules\keccak</span><br><span class="line">gyp ERR! node -v v12.15.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.5</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">/ Downloading</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! keccak@2.1.0 rebuild: `node-gyp rebuild`</span><br><span class="line"></span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the keccak@2.1.0 rebuild script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm WARN Local package.json exists, but node_modules missing, did you mean to install?</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\12173\AppData\Roaming\npm-cache\_logs\2020-02-22T17_26_38_700Z-debug.log</span><br><span class="line">gyp ERR! find Python</span><br><span class="line"></span><br><span class="line">gyp ERR! find Python Python is not set from environment variable PYTHON</span><br><span class="line">gyp ERR! find Python checking if "python" can be used</span><br><span class="line">gyp ERR! find Python - "python" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python2" can be used</span><br><span class="line">gyp ERR! find Python - "python2" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python3" can be used</span><br><span class="line">gyp ERR! find Python - "python3" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if the py launcher can be used to find Python 2</span><br><span class="line">gyp ERR! find Python - "py.exe" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python27\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python27\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python37\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python37\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python You need to install the latest version of Python.</span><br><span class="line">gyp ERR! find Python Node-gyp should be able to find and use Python. If not,</span><br><span class="line">gyp ERR! find Python you can try one of the following options:</span><br><span class="line">gyp ERR! find Python - Use the switch --python="C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python   (accepted by both node-gyp and npm)</span><br><span class="line">gyp ERR! find Python - Set the environment variable PYTHON</span><br><span class="line">gyp ERR! find Python - Set the npm configuration variable python:</span><br><span class="line">gyp ERR! find Python   npm config set python "C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python For more information consult the documentation at:</span><br><span class="line">gyp ERR! find Python https://github.com/nodejs/node-gyp#installation</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Could not find any Python installation to use</span><br><span class="line">gyp ERR! stack     at PythonFinder.fail (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:307:47)</span><br><span class="line">gyp ERR! stack     at PythonFinder.runChecks (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:136:21)</span><br><span class="line">gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:225:16)</span><br><span class="line">gyp ERR! stack     at PythonFinder.execFileCallback (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:271:16)</span><br><span class="line">gyp ERR! stack     at exithandler (child_process.js:302:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.errorhandler (child_process.js:314:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:223:5)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:270:12)</span><br><span class="line">gyp ERR! stack     at onErrorNT (internal/child_process.js:456:16)</span><br><span class="line">gyp ERR! stack     at processTicksAndRejections (internal/process/task_queues.js:81:21)</span><br><span class="line">gyp ERR! System Windows_NT 10.0.16299</span><br><span class="line">gyp ERR! command "E:\\Program Files\\nodejs\\node.exe" "E:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js" "rebuild"</span><br><span class="line">gyp ERR! cwd E:\Dapp\hello\app\node_modules\secp256k1</span><br><span class="line">gyp ERR! node -v v12.15.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.5</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! secp256k1@3.7.1 rebuild: `node-gyp rebuild`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the secp256k1@3.7.1 rebuild script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm WARN Local package.json exists, but node_modules missing, did you mean to install?</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\12173\AppData\Roaming\npm-cache\_logs\2020-02-22T17_26_39_779Z-debug.log</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">√ cleaning up temporary files</span><br><span class="line">√ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful, sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile:              truffle compile</span><br><span class="line">  Migrate:              truffle migrate</span><br><span class="line">  Test contracts:       truffle test</span><br><span class="line">  Run dev server:       cd app &amp;&amp; npm run dev</span><br><span class="line">  Build for production: cd app &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>

<p>解决没有python环境的问题：</p>
<p>我们选择安装windows-build-tools,他的依赖中包含一些Visual Studio Build Tools以及python2.7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global --production windows-build-tools </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> windows-build-tools@5.2.2 postinstall C:\Users\12173\AppData\Roaming\npm\node_modules\windows-build-tools</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node ./dist/index.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading python-2.7.15.amd64.msi</span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">                                            ] 0.0% (0 B/s)</span></span><br><span class="line">Downloaded python-2.7.15.amd64.msi. Saved to C:\Users\12173\.windows-build-tools\python-2.7.15.amd64.msi.</span><br><span class="line">Downloading vs_BuildTools.exe</span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">                                            ] 0.0% (0 B/s)</span></span><br><span class="line">Downloaded vs_BuildTools.exe. Saved to C:\Users\12173\.windows-build-tools\vs_BuildTools.exe.</span><br><span class="line"></span><br><span class="line">Starting installation...</span><br><span class="line">Launched installers, now waiting for them to finish.</span><br><span class="line">This will likely take some time - please be patient!</span><br><span class="line"></span><br><span class="line">Status from the installers:</span><br><span class="line">---------- Visual Studio Build Tools ----------</span><br><span class="line">Successfully installed Visual Studio Build Tools.</span><br><span class="line">------------------- Python --------------------</span><br><span class="line">Action ended 12:45:23: MsiUnpublishAssemblies. Return value 1.</span><br><span class="line">Action start 12:45:23: UnpublishFeatures.</span><br><span class="line">Action ended 12:45:23: UnpublishFeatures. Return value 1.</span><br><span class="line">Action start 12:45:23: StopServices.</span><br><span class="line">Action ended 12:45:23: StopServices. Return value 1.</span><br><span class="line"></span><br><span class="line">Now configuring the Visual Studio Build Tools and Python...</span><br><span class="line"></span><br><span class="line">All done!</span><br><span class="line"></span><br><span class="line">+ windows-build-tools@5.2.2</span><br><span class="line">updated 1 package in 15.463s</span><br></pre></td></tr></table></figure>

<p><strong>配置python2.7的环境变量</strong></p>
<p>在系统变量path下添加如下内容：</p>
<p>C:\Users\12173.windows-build-tools\python27</p>
<p>初始化成功结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle unbox webpack</span></span><br><span class="line"></span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">- Preparing to download box</span><br><span class="line">√ Preparing to download box</span><br><span class="line">- Downloading</span><br><span class="line">√ Downloading</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">- cleaning up temporary files</span><br><span class="line">√ cleaning up temporary files</span><br><span class="line">- Setting up box</span><br><span class="line">√ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful, sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile:              truffle compile</span><br><span class="line">  Migrate:              truffle migrate</span><br><span class="line">  Test contracts:       truffle test</span><br><span class="line">  Run dev server:       cd app &amp;&amp; npm run dev</span><br><span class="line">  Build for production: cd app &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>



<h2 id="3-2-修改truffle配置"><a href="#3-2-修改truffle配置" class="headerlink" title="3.2 修改truffle配置"></a>3.2 修改truffle配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">development: &#123;</span><br><span class="line"> host: <span class="string">"127.0.0.1"</span>,     <span class="comment">// Localhost (default: none)</span></span><br><span class="line"> port: <span class="number">8545</span>,            <span class="comment">// Standard Ethereum port (default: none)</span></span><br><span class="line"> network_id: <span class="string">"*"</span>,       <span class="comment">// Any network (default: none)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="3-3启动节点（-ganache-cli-）"><a href="#3-3启动节点（-ganache-cli-）" class="headerlink" title="3.3启动节点（ ganache-cli ）"></a>3.3启动节点（ ganache-cli ）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ganache-cli</span></span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7 (100 ETH)</span><br><span class="line">(1) 0xd188bc0a7BEE5890dcd0D59d384199520D75665D (100 ETH)</span><br><span class="line">(2) 0xC7be8b832cb3A3285803a006648Fe4dB0E0e4dD9 (100 ETH)</span><br><span class="line">(3) 0xe1F1B3C361fd5361ad131aA9BBfDef9BaC3f009C (100 ETH)</span><br><span class="line">(4) 0x2d8AfB48dA53BDFFd25B52d7f89A1455769571C7 (100 ETH)</span><br><span class="line">(5) 0x8Ce8ceF65b854A49df75D7f9DcCd2a8017E263B8 (100 ETH)</span><br><span class="line">(6) 0x87d5646Fcb48DBB8d0453104EDe3bb8b75fc75b6 (100 ETH)</span><br><span class="line">(7) 0x6B950A801d325a08Fe7d064E2D1A60A700dA0812 (100 ETH)</span><br><span class="line">(8) 0x74C29Af89F6ABD921059B3666168CD78F9144aE7 (100 ETH)</span><br><span class="line">(9) 0x96708eaE55B8D3749493b7069692E31BDc9B4465 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0xe71b27443128f13736d4abf56be959231a495e240827fecda3e89671ddaf03c2</span><br><span class="line">(1) 0xc6d43777cce13673ffce12406437e97d85f10809704643a6b348c00cb7bbeea3</span><br><span class="line">(2) 0x9bdcbb3a51e3645c4788091f27fa33043f6a1c7ad078c654482bc04c847bd41b</span><br><span class="line">(3) 0x0978ac0611e532bac1697beca2b7494981bababc9680a0d8176df3ef8a7f9e13</span><br><span class="line">(4) 0xf0e5af8777fee7fc5aa1dff3ffac6f41f9f28a3da4abd300e9b5439b309822d3</span><br><span class="line">(5) 0x9475d9b1047e2d52be6d9ab4c0eaeba2d0ecc54a305d3e75874551d0308d83cf</span><br><span class="line">(6) 0x496a8ceed4f5c273905ade586e654c1504cbeaab61128e0197aa81bcfa0badd9</span><br><span class="line">(7) 0xea4a812229f425bcab97c684b7aade7399e35bbe3f27971ff6c4d394d862a64f</span><br><span class="line">(8) 0xba0a1f75915f771b4e24ceee2a96841e7d2f57849569b3da4d6e567b3206f278</span><br><span class="line">(9) 0x79fa9edf9864b0f90c0b0e88e69cb56eb7a01e33f07c669b82ee053bd1248d3d</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      deputy explain stock just boat year health desk arrive double almost depend</span><br><span class="line">Base HD Path:  m/44'/60'/0'/0/&#123;account_index&#125;</span><br><span class="line"></span><br><span class="line">Gas Price</span><br><span class="line">==================</span><br><span class="line">20000000000</span><br><span class="line"></span><br><span class="line">Gas Limit</span><br><span class="line">==================</span><br><span class="line">6721975</span><br><span class="line"></span><br><span class="line">Call Gas Limit</span><br><span class="line">==================</span><br><span class="line">9007199254740991</span><br><span class="line"></span><br><span class="line">Listening on 127.0.0.1:8545</span><br></pre></td></tr></table></figure>

<p> 成功之后，会给自动建立10个账户，必须先启动这个之后才能合约的编译与部署。否则部署不成功。 </p>
<h2 id="3-4-安装项目依赖的NPM包"><a href="#3-4-安装项目依赖的NPM包" class="headerlink" title="3.4 安装项目依赖的NPM包"></a>3.4 安装项目依赖的NPM包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm WARN saveError ENOENT: no such file or directory, open 'E:\Dapp\myproject\package.json'</span><br><span class="line">npm WARN enoent ENOENT: no such file or directory, open 'E:\Dapp\myproject\package.json'</span><br><span class="line">npm WARN myproject No description</span><br><span class="line">npm WARN myproject No repository field.</span><br><span class="line">npm WARN myproject No README data</span><br><span class="line">npm WARN myproject No license field.</span><br><span class="line"></span><br><span class="line">up to date in 0.418s</span><br></pre></td></tr></table></figure>

<p><strong>出错原因：</strong></p>
<p>缺少<strong>package.json</strong>文件。</p>
<p>解决办法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化项目</span></span><br><span class="line">npm init -f</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装依赖</span></span><br><span class="line">npm install formidable --save</span><br></pre></td></tr></table></figure>

<p><code>-f</code>表示force的意思，不加这个，npm会让你输入一堆信息，比如name、version之类，如果只是做做实验小demo，直接<code>-f</code>，npm帮你初始化package.json，并填充各种默认值，省事。</p>
<p><code>--save</code>表示将安装的包加入依赖列表的意思，可以看下package.json 里的<code>dependencies</code>字段。后面再运行 <code>npm install</code>，就会把所有依赖安装下来。如果不加<code>--save</code>，什么都不会安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -f</span><br><span class="line">npm WARN using --force I sure hope you know what you are doing.</span><br><span class="line">Wrote to E:\Dapp\myproject\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "myproject",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "truffle-config.js",</span><br><span class="line">  "directories": &#123;</span><br><span class="line">    "test": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC"</span><br><span class="line">  </span><br><span class="line">npm install formidable --save</span><br><span class="line">npm WARN myproject@1.0.0 No description</span><br><span class="line">npm WARN myproject@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ formidable@1.2.1</span><br><span class="line">added 1 package in 0.438s</span><br></pre></td></tr></table></figure>

<p><strong>错误描述：</strong></p>
<p>缺少描述、缺少仓库。</p>
<p><strong>解决办法：</strong></p>
<p>修改package.内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"myproject"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"my first project"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"truffle-config.js"</span>,</span><br><span class="line">  <span class="attr">"directories"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"formidable"</span>: <span class="string">"^1.2.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install formidable --save</span><br><span class="line">+ formidable@1.2.1</span><br><span class="line">updated 1 package in 0.353s</span><br></pre></td></tr></table></figure>

<h2 id="3-5编译合约（truffle-compile）"><a href="#3-5编译合约（truffle-compile）" class="headerlink" title="3.5编译合约（truffle compile）"></a>3.5编译合约（truffle compile）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Dapp\myproject&gt;truffle compile</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\ConvertLib.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\MetaCoin.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to E:\Dapp\myproject\build\contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure>

<h2 id="3-6部署合约（truffle-migrate）"><a href="#3-6部署合约（truffle-migrate）" class="headerlink" title="3.6部署合约（truffle migrate）"></a>3.6部署合约（truffle migrate）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Dapp\myproject&gt;truffle migrate</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\ConvertLib.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\MetaCoin.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to E:\Dapp\myproject\build\contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">'development'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      1582444858253</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 0x6691b7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying 'Migrations'</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xe0b8512e708ca45c8b2e7237f689f61f658b4075f149f76cb8c842363f848af0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x9A73F98453dF48993F7a252C1e7810C05C976891</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        1</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1582446022</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.9967165</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            164175</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0032835 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:           0.0032835 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying 'ConvertLib'</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xb5e1469996cbd6f1592edce0d68c9661abb9c6d47d1b9af3b9121e7273c4c987</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xe8b65D954EC3dB61A068184DAFAEcc7a4Ce3784E</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        3</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1582446023</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.99396028</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            95470</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0019094 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   Linking</span><br><span class="line">   -------</span><br><span class="line">   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib (at address: 0xe8b65D954EC3dB61A068184DAFAEcc7a4Ce3784E)</span><br><span class="line"></span><br><span class="line">   Deploying 'MetaCoin'</span><br><span class="line">   --------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0x411669a9e6bb3c8986d411433ce92e4c2a89228069221b2d2f25efe01764bc9b</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xC0B8C2A1384b4bacE94FA448B7cA1fD01C012f68</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        4</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1582446023</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.98822898</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            286565</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0057313 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:           0.0076407 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total deployments:   3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Final cost:          0.0109242 ETH</span></span><br></pre></td></tr></table></figure>

<h2 id="3-7启动Dapp（npm-run-dev）"><a href="#3-7启动Dapp（npm-run-dev）" class="headerlink" title="3.7启动Dapp（npm run dev）"></a>3.7启动Dapp（npm run dev）</h2><p><strong>注意：</strong>需要在app目录下执行，或者在当前目录执行cd app &amp;&amp; npm run dev</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line">npm ERR! missing script: dev</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\12173\AppData\Roaming\npm-cache\_logs\2020-02-23T08_21_47_877Z-debug.log</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Dapp\webpacktest\app&gt;npm run dev</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> app@1.0.0 dev E:\Dapp\webpacktest\app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> webpack-dev-server</span></span><br><span class="line"></span><br><span class="line">i ｢wds｣: Project is running at http://localhost:8080/</span><br><span class="line">i ｢wds｣: webpack output is served from /</span><br><span class="line">i ｢wds｣: Content not from webpack is served from E:\Dapp\webpacktest\app\dist</span><br><span class="line">× ｢wdm｣: Hash: 438dc1a71410c6fb5b06</span><br><span class="line">Version: webpack 4.41.2</span><br><span class="line">Time: 1794ms</span><br><span class="line">Built at: 2020-02-23 16:52:17</span><br><span class="line">     Asset       Size  Chunks             Chunk Names</span><br><span class="line">index.html  879 bytes          [emitted]</span><br><span class="line">  index.js   2.37 MiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = index.js</span><br><span class="line">[0] multi (webpack)-dev-server/client?http://localhost:8080 ./src/index.js 40 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/ansi-html/index.js] 4.16 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/html-entities/index.js] 231 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/loglevel/lib/loglevel.js] 8.36 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/web3/src/index.js] 2.01 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/index.js?http://localhost:8080] (webpack)-dev-server/client?http://localhost:8080 4.29 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.51 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.53 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/createSocketUrl.js] (webpack)-dev-server/client/utils/createSocketUrl.js 2.89 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/log.js] (webpack)-dev-server/client/utils/log.js 964 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/reloadApp.js] (webpack)-dev-server/client/utils/reloadApp.js 1.59 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/sendMessage.js] (webpack)-dev-server/client/utils/sendMessage.js 402 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js] (webpack)-dev-server/node_modules/strip-ansi/index.js 161 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack/hot sync ^\.\/log$] (webpack)/hot sync nonrecursive ^\.\/log$ 170 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/index.js] 2.08 KiB &#123;main&#125; [built]</span><br><span class="line">    + 349 hidden modules</span><br><span class="line"></span><br><span class="line">ERROR in ./src/index.js</span><br><span class="line">Module not found: Error: Can't resolve '../../build/contracts/MetaCoin.json' in 'E:\Dapp\webpacktest\app\src'</span><br><span class="line"> @ ./src/index.js 2:0-67 15:30-46 17:8-24</span><br><span class="line">i ｢wdm｣: Failed to compile.</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://s2.ax1x.com/2020/02/23/3188K0.png" alt="3188K0.png"></p>
<p>注：<strong>从3.3以后的操作都在项目工程的app目录下进行</strong></p>
<h1 id="4-以太坊宠物商店‘"><a href="#4-以太坊宠物商店‘" class="headerlink" title="4. 以太坊宠物商店‘"></a>4. 以太坊宠物商店‘</h1><h2 id="4-1初始化项目（truffle-unbox-pet-shop）"><a href="#4-1初始化项目（truffle-unbox-pet-shop）" class="headerlink" title="4.1初始化项目（truffle unbox pet-shop）"></a>4.1初始化项目（truffle unbox pet-shop）</h2><p>在指定目录下执行<strong>truffle unbox pet-shop</strong>命令初始化项目。生成目录如下：</p>
<p><img src="https://s2.ax1x.com/2020/02/26/3NA3DS.png" alt="pet-shop.png"></p>
<h2 id="4-2编写智能合约"><a href="#4-2编写智能合约" class="headerlink" title="4.2编写智能合约"></a>4.2编写智能合约</h2><p>在contracts目录下创建新合约文件<strong>Adoption.sol</strong>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.21 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract Adoption &#123;</span><br><span class="line">	//定义变量 数组类型的 adopters   保存领养者地址</span><br><span class="line">	address[16] public adopters;</span><br><span class="line">	</span><br><span class="line">	// 定义方法  </span><br><span class="line">	//Adopting a pet 领养宠物</span><br><span class="line">	function adopt(uint petId) public returns (uint) &#123;</span><br><span class="line">		require(petId &gt;= 0 &amp;&amp; petId &lt;= 15);</span><br><span class="line"></span><br><span class="line">		adopters[petId] = msg.sender;</span><br><span class="line"></span><br><span class="line">	return petId;</span><br><span class="line">	&#125;</span><br><span class="line">	// Retrieving the adopters  检索领养者</span><br><span class="line">	function getAdopters() public view returns (address[16] memory) &#123;</span><br><span class="line">		return adopters;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3编译和迁移智能合约"><a href="#4-3编译和迁移智能合约" class="headerlink" title="4.3编译和迁移智能合约"></a>4.3编译和迁移智能合约</h2><h3 id="4-3-1汇编"><a href="#4-3-1汇编" class="headerlink" title="4.3.1汇编"></a>4.3.1汇编</h3><p>Solidity是一种编译语言，这意味着我们需要将Solidity编译为字节代码，以供以太坊虚拟机（EVM）执行。将其视为将人类可读的Solidity转换为EVM可以理解的东西。</p>
<ol>
<li><p>在项目根目录下执行<strong>truffle compile</strong></p>
<p>可以看到如下输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle compile</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Adoption.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to E:\Dapp\guide-pet-shop\build\contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-3-2迁移"><a href="#4-3-2迁移" class="headerlink" title="4.3.2迁移"></a>4.3.2迁移</h3><p>在成功编译合约后，需将合约迁移到区块链上。</p>
<p> <strong>迁移是一种部署脚本，旨在更改应用程序合同的状态</strong>，将其从一种状态转移到另一种状态。对于第一次迁移，您可能只是在部署新代码，但是随着时间的推移，其他迁移可能会移动数据或用新合同替换合同。 </p>
<p>您将在<code>migrations/</code>目录中看到一个JavaScript文件：<code>1_initial_migration.js</code>。这将处理部署<code>Migrations.sol</code>合同以观察后续的智能合同迁移，并确保我们将来不会重复迁移未更改的合同。</p>
<p>现在，我们准备创建自己的迁移脚本。</p>
<ol>
<li><p>在<code>migrations/</code>目录中创建一个新的js文件命名为 <strong>2_deploy_contracts.js</strong> 。 </p>
</li>
<li><p>添加如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Adoption = artifacts.require(<span class="string">"Adoption"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Adoption);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在将合同迁移到区块链之前，我们需要运行一个区块链。在此我使用的是ganache</p>
<p>运行ganache</p>
<p><img src="https://s2.ax1x.com/2020/02/26/3Nu4W4.png" alt="3Nu4W4.png"></p>
</li>
</ol>
<ol start="4">
<li>回到我们的终端，将合同迁移到区块链(truffle migrate)。 </li>
</ol>
<pre><code>在打开的 Ganache 里可以看到区块链状态的变化，现在产生了 4 个区块。 </code></pre><p>   <img src="https://s2.ax1x.com/2020/02/26/3NKuXn.png" alt="3NKuXn.png"></p>
<h2 id="4-4测试智能合约"><a href="#4-4测试智能合约" class="headerlink" title="4.4测试智能合约"></a>4.4测试智能合约</h2><p> Truffle在智能合约测试方面非常灵活，因为测试可以用JavaScript或Solidity编写。在此，我们将使用Solidity编写测试。 </p>
<ol>
<li><p>在<code>test/</code>目录中创建一个新文件 <code>TestAdoption.sol</code>。 </p>
</li>
<li><p>写入内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.5.16;</span><br><span class="line"></span><br><span class="line">import &quot;truffle/Assert.sol&quot;;   // 引入的断言</span><br><span class="line">import &quot;truffle/DeployedAddresses.sol&quot;;  // 用来获取被测试合约的地址</span><br><span class="line">import &quot;../contracts/Adoption.sol&quot;;      // 被测试合约</span><br><span class="line"></span><br><span class="line">contract TestAdoption &#123;</span><br><span class="line">  Adoption adoption = Adoption(DeployedAddresses.Adoption());</span><br><span class="line"></span><br><span class="line">  // 领养测试用例</span><br><span class="line">  function testUserCanAdoptPet() public &#123;</span><br><span class="line">    uint returnedId = adoption.adopt(8);</span><br><span class="line"></span><br><span class="line">    uint expected = 8;</span><br><span class="line">    Assert.equal(returnedId, expected, &quot;Adoption of pet ID 8 should be recorded.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 宠物所有者测试用例</span><br><span class="line">  function testGetAdopterAddressByPetId() public &#123;</span><br><span class="line">    // 期望领养者的地址就是本合约地址，因为交易是由测试合约发起交易，</span><br><span class="line">    address expected = this;</span><br><span class="line">    address adopter = adoption.adopters(8);</span><br><span class="line">    Assert.equal(adopter, expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    // 测试所有领养者</span><br><span class="line">  function testGetAdopterAddressByPetIdInArray() public &#123;</span><br><span class="line">  // 领养者的地址就是本合约地址</span><br><span class="line">    address expected = this;</span><br><span class="line">    address[16] memory adopters = adoption.getAdopters();</span><br><span class="line">    Assert.equal(adopters[8], expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle <span class="built_in">test</span></span></span><br><span class="line">Using network 'development'.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Adoption.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\<span class="built_in">test</span>\TestAdoption.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to C:\Users\12173\AppData\Local\Temp\<span class="built_in">test</span>-2020126-25536-1azqqoo.mstk</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  TestAdoption</span><br><span class="line">    1) "before all" hook: prepare suite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  0 passing (320ms)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1) TestAdoption</span><br><span class="line">       "before all" hook: prepare suite:</span><br><span class="line">     TypeError: Error parsing E:/Dapp/guide-pet-shop/contracts/Adoption.sol: Cannot destructure property `body` of 'undefined' or 'null'.</span><br><span class="line">      at getImports (C:\Users\12173\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\compile-solidity\profiler\getImports.js:5:1)</span><br><span class="line">      at C:\Users\12173\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\compile-solidity\profiler\index.js:145:1</span><br></pre></td></tr></table></figure>

<p><strong>Cannot destructure property <code>body</code> of ‘undefined’ or ‘null’</strong></p>
<p>暂无解决方案。无法进行智能合约测试，但不影响正常使用。</p>
</li>
</ol>
<h2 id="4-5创建用户界面以与智能合约进行交互"><a href="#4-5创建用户界面以与智能合约进行交互" class="headerlink" title="4.5创建用户界面以与智能合约进行交互"></a>4.5创建用户界面以与智能合约进行交互</h2><p>现在我们已经创建了智能合约，并将其部署到本地测试区块链中，并确认我们可以通过控制台与之交互，是时候创建一个UI，以便Pete可以在他的宠物店中使用它了！</p>
<p><code>pet-shop</code>truffle盒中包含该应用程序前端的代码。该代码存在于<code>src/</code>目录中。</p>
<h3 id="4-5-1实例化web3"><a href="#4-5-1实例化web3" class="headerlink" title="4.5.1实例化web3"></a>4.5.1实例化web3</h3><ol>
<li><code>/src/js/app.js</code>在文本编辑器中打开。</li>
<li>检查文件。请注意，存在一个全局<code>App</code>对象来管理我们的应用程序，将数据加载到其中<code>init()</code>，然后调用函数<code>initWeb3()</code>。该<a href="https://github.com/ethereum/web3.js/" target="_blank" rel="noopener">WEB3 JavaScript库</a>交互与复仇blockchain。它可以检索用户帐户，发送交易，与智能合约进行交互等等。</li>
<li>从内部删除多行注释，<code>initWeb3</code>并将其替换为以下内容：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ethereum) &#123;</span><br><span class="line">  App.web3Provider = <span class="built_in">window</span>.ethereum;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Request account access</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">window</span>.ethereum.enable();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// User denied account access...</span></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"User denied account access"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Legacy dapp browsers...</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.web3) &#123;</span><br><span class="line">  App.web3Provider = <span class="built_in">window</span>.web3.currentProvider;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If no injected web3 instance is detected, fall back to Ganache</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  App.web3Provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://localhost:7545'</span>);</span><br><span class="line">&#125;</span><br><span class="line">web3 = <span class="keyword">new</span> Web3(App.web3Provider);</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>首先，我们检查，如果我们使用现代DAPP浏览器或更近的版本<a href="https://github.com/MetaMask" target="_blank" rel="noopener">MetaMask</a>其中一个<code>ethereum</code>供应商被注入<code>window</code>对象。如果是这样，我们将使用它来创建我们的web3对象，但是我们还需要通过显式请求访问帐户<code>ethereum.enable()</code>。</li>
<li>如果<code>ethereum</code>对象不存在，则检查注入的<code>web3</code>实例。如果存在，则表明我们使用的是较旧的dapp浏览器（如<a href="https://github.com/ethereum/mist" target="_blank" rel="noopener">Mist</a>或较旧的MetaMask版本）。如果是这样，我们将获得其提供程序并使用它来创建我们的web3对象。</li>
<li>如果不存在注入的web3实例，我们将基于本地提供程序创建web3对象。（这种后备方式适用于开发环境，但不安全且不适合生产。）</li>
</ul>
<h3 id="4-5-2实例化合同"><a href="#4-5-2实例化合同" class="headerlink" title="4.5.2实例化合同"></a>4.5.2实例化合同</h3><p> 现在我们可以通过web3与以太坊进行交互，我们需要实例化我们的智能合约，以便web3知道在哪里可以找到它以及它是如何工作的。truffle有一个名为的库来帮助您解决此问题<code>truffle-contract</code>。它使有关合同的信息与迁移保持同步，因此您无需手动更改合同的部署地址。 </p>
<ol>
<li><p>仍在中<code>/src/js/app.js</code>，从内部删除多行注释，<code>initContract</code>并将其替换为以下内容： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.getJSON(<span class="string">'Adoption.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Get the necessary contract artifact file and instantiate it with truffle-contract</span></span><br><span class="line">  <span class="keyword">var</span> AdoptionArtifact = data;</span><br><span class="line">  App.contracts.Adoption = TruffleContract(AdoptionArtifact);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the provider for our contract</span></span><br><span class="line">  App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use our contract to retrieve and mark the adopted pets</span></span><br><span class="line">  <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>我们首先检索智能合约的工件文件。<strong>工件是有关我们合同的信息，例如其部署地址和应用程序二进制接口（ABI）</strong>。<strong>ABI是一个JavaScript对象，定义了如何与合同进行交互，包括其变量，函数及其参数。</strong></li>
<li>回调中包含工件后，便将它们传递给<code>TruffleContract()</code>。这将创建一个我们可以与之交互的合同实例。</li>
<li>实例化合同后，我们使用<code>App.web3Provider</code>设置web3时存储的值来设置其web3提供程序。</li>
<li>然后<code>markAdopted()</code>，如果以前访问过任何宠物，我们都会调用该应用程序的功能。我们将其封装在一个单独的函数中，因为每次更改智能合约的数据时都需要更新UI。</li>
</ul>
<h3 id="4-5-3获取被收养的宠物并更新UI"><a href="#4-5-3获取被收养的宠物并更新UI" class="headerlink" title="4.5.3获取被收养的宠物并更新UI"></a>4.5.3获取被收养的宠物并更新UI</h3><ol>
<li><p>仍在中<code>/src/js/app.js</code>，从中删除多行注释，<code>markAdopted</code>并将其替换为以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">  adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> adoptionInstance.getAdopters.call();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">adopters</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; adopters.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (adopters[i] !== <span class="string">'0x0000000000000000000000000000000000000000'</span>) &#123;</span><br><span class="line">      $(<span class="string">'.panel-pet'</span>).eq(i).find(<span class="string">'button'</span>).text(<span class="string">'Success'</span>).attr(<span class="string">'disabled'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>我们访问已部署的<code>Adoption</code>合同，然后调用<code>getAdopters()</code>该实例。</li>
<li>我们首先<code>adoptionInstance</code>在智能合约调用之外声明变量，以便在最初检索实例后可以访问该实例。</li>
<li>使用<strong>call（）</strong>允许我们从区块链读取数据，而不必发送完整的交易，这意味着我们不必花费任何以太币。</li>
<li>致电后<code>getAdopters()</code>，我们将遍历所有这些对象，检查是否为每个宠物存储了地址。由于数组包含地址类型，因此以太坊使用16个空地址初始化数组。这就是为什么我们检查一个空的地址字符串而不是null或其他虚假值的原因。</li>
<li>一旦<code>petId</code>找到具有相应地址的，我们将禁用其采用按钮，并将按钮文本更改为“成功”，以便用户获得一些反馈。</li>
<li>任何错误都会记录到控制台。</li>
</ul>
<h3 id="4-5-4处理take（）函数"><a href="#4-5-4处理take（）函数" class="headerlink" title="4.5.4处理take（）函数"></a>4.5.4处理take（）函数</h3><ol>
<li><p>仍在中<code>/src/js/app.js</code>，从中删除多行注释，<code>handleAdopt</code>并将其替换为以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">web3.eth.getAccounts(<span class="function"><span class="keyword">function</span>(<span class="params">error, accounts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> account = accounts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">    adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute adopt as a transaction by sending account</span></span><br><span class="line">    <span class="keyword">return</span> adoptionInstance.adopt(petId, &#123;<span class="attr">from</span>: account&#125;);</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>我们使用web3获取用户的帐户。在错误检查后的回调中，我们选择第一个帐户。</li>
<li>从那里，我们像上面一样获得已部署的合同，并将实例存储在中<code>adoptionInstance</code>。不过这次，我们将发送<strong>交易</strong>而不是致电。交易需要一个“发件人”地址，并具有相关的成本。这种以醚支付的费用称为<strong>煤气</strong>。气体成本是在智能合约中执行计算和/或存储数据的费用。我们通过<code>adopt()</code>同时使用宠物ID和包含帐户地址的对象执行该函数来发送交易，该地址先前存储在中<code>account</code>。</li>
<li>发送交易的结果是交易对象。如果没有错误，我们将继续调用<code>markAdopted()</code>函数以将UI与新存储的数据同步。</li>
</ul>
<h3 id="4-5-5dapp与浏览器中的交互"><a href="#4-5-5dapp与浏览器中的交互" class="headerlink" title="4.5.5dapp与浏览器中的交互"></a>4.5.5dapp与浏览器中的交互</h3><ul>
<li><p><strong>安装和配置MetaMask</strong></p>
</li>
<li><p><strong>安装和配置Lite服务器</strong></p>
<p>现在，我们可以启动本地Web服务器并使用dapp。我们正在使用该<code>lite-server</code>库来提供我们的静态文件。这是<code>pet-shop</code>松露盒随附的，但让我们看一下它是如何工作的。</p>
<ol>
<li><p><code>bs-config.json</code>在文本编辑器（在项目的根目录中）中打开并检查内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"server"</span>: &#123;</span><br><span class="line">    <span class="string">"baseDir"</span>: [<span class="string">"./src"</span>, <span class="string">"./build/contracts"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这告诉<code>lite-server</code>哪些文件要包含在我们的基本目录中。我们<code>./src</code>为网站文件添加目录，<code>./build/contracts</code>为合同工件添加目录。</p>
<p>我们还向项目根目录中文件中的对象添加了<code>dev</code>命令。该对象允许我们将控制台命令别名为单个npm命令。在这种情况下，我们仅执行单个命令，但是可能具有更复杂的配置。这是您的样子：<code>scripts``package.json``scripts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"lite-server"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>这告诉npm 从控制台<code>lite-server</code>执行时运行本地安装<code>npm run dev</code>。</p>
</li>
</ol>
</li>
</ul>
<h3 id="4-6使用dapp"><a href="#4-6使用dapp" class="headerlink" title="4.6使用dapp"></a>4.6使用dapp</h3><ol>
<li><p>启动本地Web服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>开发服务器将启动并自动打开一个包含您的dapp的新浏览器选项卡。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/dapp.png" alt="皮特的宠物店"></p>
<p>皮特的宠物店</p>
</li>
<li><p>应该会出现一个MetaMask弹出窗口，要求您批准，以允许Pete的Pet Shop连接到您的MetaMask钱包。未经明确批准，您将无法与dapp进行交互。单击<strong>连接</strong>。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/metamask-transactionconfirm.png" alt="MetaMask批准请求"></p>
<p>MetaMask批准请求</p>
</li>
<li><p>要使用dapp，请在您选择的宠物上单击“ <strong>采用”</strong>按钮。</p>
</li>
<li><p>MetaMask将自动提示您批准交易。单击<strong>提交</strong>以批准交易。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/metamask-transactionconfirm.png" alt="收养交易审查"></p>
<p>收养交易审查</p>
</li>
<li><p>正如我们指定的那样，您将看到已收养宠物旁边的按钮更改为“成功”并被禁用，因为该宠物现已被收养。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/dapp-success.png" alt="收养成功"></p>
<p>收养成功</p>
</li>
</ol>
]]></content>
      <categories>
        <category>truffle</category>
      </categories>
      <tags>
        <tag>truffle</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣每日一题之有效的括号</title>
    <url>/2020/06/18/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h1 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h1><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><a id="more"></a>






<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>示例 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>示例 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h1 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3.算法分析"></a>3.算法分析</h1><p>采用栈的特性，对括号进行匹配，左括号入栈，将即将插入的元素与栈顶元素进行匹配，如果未</p>
<p>栈顶元素的另一半则，弹出栈顶元素，最后若栈为空则返回true，否则返回false。</p>
<ol>
<li><p>初始化栈 S。</p>
</li>
<li><p>一次处理表达式的每个括号。</p>
</li>
<li><p>如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地</p>
<p>转到前面的 子表达式。</p>
</li>
<li><p>如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左</p>
<p>括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。</p>
</li>
<li><p>如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</p>
</li>
</ol>
<h1 id="4、代码实现及测试结果"><a href="#4、代码实现及测试结果" class="headerlink" title="4、代码实现及测试结果"></a>4、代码实现及测试结果</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.leetCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo20</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character, Character&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo20</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line">        map.put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">        map.put(<span class="string">'&#125;'</span>, <span class="string">'&#123;'</span>);</span><br><span class="line">        map.put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.map.containsKey(c)) &#123;</span><br><span class="line">                <span class="comment">//获取栈中的栈顶元素，若栈顶元素为空则设置为‘#’</span></span><br><span class="line">                <span class="keyword">char</span> topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (topElement != <span class="keyword">this</span>.map.get(c)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"()[]&#123;&#125;"</span>;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Demo20().isValid(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"><span class="string">"E:\Program Files\Java\jdk1.8.0_201\bin\java.exe"</span></span><br></pre></td></tr></table></figure>
<p>true<br>```</p>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣每日一题之快乐数</title>
    <url>/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 True ；不是，则返回 False 。</p><a id="more"></a>


<h1 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure>

<h1 id="3、算法分析"><a href="#3、算法分析" class="headerlink" title="3、算法分析"></a>3、算法分析</h1><p> 第 1 部分我们按照题目的要求做数位分离，求平方和。 </p>
<p> 第 2 部分按照一系列的数字来判断我们是否进入了一个循环。</p>
<p>存在两种情况：</p>
<ul>
<li>收敛于1</li>
</ul>
<img src="/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/1.png" class title="Router">

<ul>
<li>陷入循环</li>
</ul>
<img src="/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/2.png" class title="Router">

<p>通过反复调用getnum(n)得到的是一个隐式链表。隐式意味着我们没有实际的链表节点和指针，但数据仍然形成链表结构。起始数字是链表的头 “节点”，链中的所有其他数字都是节点。next 指针是通过调用 getnum(n) 函数获得。</p>
<p>意识到我们实际有个链表，那么这个问题就可以转换为检测一个链表是否有环。因此我们在这里可以使用弗洛伊德循环查找算法。这个算法是两个奔跑选手，一个跑的快，一个跑得慢。在龟兔赛跑的寓言中，跑的快的称为 “乌龟”，跑得快的称为 “兔子”。</p>
<p> 不管乌龟和兔子在循环中从哪里开始，它们最终都会相遇。这是因为兔子每走一步就向乌龟靠近一个节点（在它们的移动方向上）。 </p>
<p>如下图所示：</p>
<img src="/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/1.gif" class title="Router">

<p>我们不是只跟踪链表中的一个值，而是跟踪两个值，称为快跑者和慢跑者。在算法的每一步中，慢速在链表中前进 1 个节点，快跑者前进 2 个节点（对 getnum(n) 函数的嵌套调用）。</p>
<p>如果 n 是一个快乐数，即没有循环，那么快跑者最终会比慢跑者先到达数字 1。</p>
<p>如果 n 不是一个快乐的数字，那么最终快跑者和慢跑者将在同一个数字上相遇。</p>
<h1 id="4-代码如下："><a href="#4-代码如下：" class="headerlink" title="4.代码如下："></a>4.代码如下：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = n, fast;</span><br><span class="line">        slow = getsum(slow);</span><br><span class="line">        fast = getsum(slow);</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="number">1</span> &amp;&amp; slow != fast) &#123;</span><br><span class="line">            slow = getsum(slow);</span><br><span class="line">            fast = getsum(getsum(fast));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个各个位数平方和的结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            sum += temp * temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isHappy(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04系统移植过及程序焼写</title>
    <url>/2020/01/08/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<h1 id="ubuntu18-04系统移植过及程序焼写"><a href="#ubuntu18-04系统移植过及程序焼写" class="headerlink" title="ubuntu18.04系统移植过及程序焼写"></a>ubuntu18.04系统移植过及程序焼写</h1><h2 id="ubuntu18-04系统移植（目标版为contex-A系列）"><a href="#ubuntu18-04系统移植（目标版为contex-A系列）" class="headerlink" title="ubuntu18.04系统移植（目标版为contex A系列）"></a>ubuntu18.04系统移植（目标版为contex A系列）</h2><h3 id="一、tftp文件服务器"><a href="#一、tftp文件服务器" class="headerlink" title="一、tftp文件服务器"></a>一、tftp文件服务器</h3><ul>
<li><strong>tftp的作用</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在嵌入式系统开发中，经常需要从主机上传送映像、文件等到目标机上。实现的方法有很多。如tftp，scp等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TFTP（Trivial File Transfer Protocol）是用来下载远程文件的最简单的网络协议，它基于UDP协议而实现。</li>
<li><strong>安装tftp-hpa</strong></li>
</ul><a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftp-hpa</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tftp-hpa是客户端，作用是从别人的TFTP服务器端上传/下载东西。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftpd-hpa</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tftpd-hpa是服务端，字母d代表daemon，作用是为别人提供TFTP服务，供别人上传/下载东西。</p>
<ul>
<li><strong>创建TFTP目录</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在此我使用的是默认文件夹。</li>
<li><strong>修改配置文件</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/tftpd-hpa</span><br></pre></td></tr></table></figure>

<p>更改后内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 # /etc/default/tftpd-hpa                                                    </span><br><span class="line">2 </span><br><span class="line">3 TFTP_USERNAME=&quot;tftp&quot;</span><br><span class="line">4 TFTP_DIRECTORY=&quot;/var/lib/tftpboot&quot;  // 指定tftp的共享目录 </span><br><span class="line">5 TFTP_ADDRESS=&quot;0.0.0.0:69&quot;</span><br><span class="line">6 TFTP_OPTIONS=&quot;-c -s -l&quot;</span><br></pre></td></tr></table></figure>

<p>修改配置后重启tfti服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service tftpd-hpa restart</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>上传文件时注意权限<br>建议给最大权限（777）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R  777  目录名</span><br></pre></td></tr></table></figure>

<h3 id="二、nfs网络文件系统"><a href="#二、nfs网络文件系统" class="headerlink" title="二、nfs网络文件系统"></a>二、nfs网络文件系统</h3><ul>
<li><strong>nfs的作用</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个嵌入式操作系统的核心组成部分：内核和文件系统。在本次课设中，使用的内核是别人提供的，使用的操作系统是nfs网络文件系统。在内核中应添加对nfs的支持，实质是在内核启动过程中，启动了一个nfs客户端通过配置文件去读取nfs服务端上的文件系统。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将pcNFS是由Sun开发并发展起来的一项在不同机器、不同操作系统之间通过网络共享文件的技术。在嵌入式Linux系统的开发调试阶段，可以利用该技术在主机上建立基于NFS 的根文件系统，挂载到嵌入式设备，可以很方便地修改根文件系统的内容。以上讨论的都是基于存储设备的文件系统(memory-based file system)，它们都可用作Linux的根文件系统。实际上，Linux还支持逻辑的或伪文件系统(logical or pseudo file system)，例如procfs(proc文件系统)，用于获取系统信息，以及devfs(设备文件系统)和sysfs，用于维护设备文件。<br><strong>安装nfs服务器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server</span><br></pre></td></tr></table></figure>

<p><strong>配置nfs服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/exports</span><br></pre></td></tr></table></figure>

<p>更改后内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 # /etc/exports: the access control list for filesystems which may be exporte    d                                                                           </span><br><span class="line"> 2 #       to NFS clients.  See exports(5).</span><br><span class="line"> 3 #</span><br><span class="line"> 4 # Example for NFSv2 and NFSv3:</span><br><span class="line"> 5 # /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_    subtree_check)</span><br><span class="line"> 6 #</span><br><span class="line"> 7 # Example for NFSv4:</span><br><span class="line"> 8 # /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class="line"> 9 # /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class="line">10 #</span><br><span class="line">11 /home/source/rootfs *(rw,sync,no_root_squash)</span><br><span class="line"># 指定共享目录为/home/source/rootfs  权限为读写 ...</span><br></pre></td></tr></table></figure>

<p><strong>复制文件系统压缩包至指定目录并解压</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将根文件系统的压缩包rootfs.tar.xz拷贝至/home/source，然后解压，注意权限<br><strong>解压指令:</strong>sudo tar -xvf  rootfs.tar.xz<br><strong>重启NFS服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nfs-kernel-server restart</span><br></pre></td></tr></table></figure>

<p><strong>进行挂载测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount -t nfs localhost:/source/rootfs /mnt</span><br><span class="line">ls -l /mnt</span><br></pre></td></tr></table></figure>

<p><strong>卸载测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt/</span><br></pre></td></tr></table></figure>

<h3 id="三、开发板的环境搭建（contex-A系列）"><a href="#三、开发板的环境搭建（contex-A系列）" class="headerlink" title="三、开发板的环境搭建（contex A系列）"></a>三、开发板的环境搭建（contex A系列）</h3><ul>
<li><strong>查看串口驱动</strong><br><strong>指令如下：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ cd /dev/</span><br><span class="line">lcx@lcx-linux:/dev$ ls ttyUSB*</span><br><span class="line">crw-rw-rw- 1 root dialout 188, 0 2020-01-08 10:38 ttyUSB0</span><br><span class="line">lcx@lcx-linux:/dev$</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装传串口通讯软件（putty ）</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install putty</span><br></pre></td></tr></table></figure>

<p>设置端口：位/秒 115200，数据位 8，奇偶校验 无，停止位 1，数据流控制 无</p>
<ul>
<li><strong>连接串口线到开发板</strong><br>给开发板上电，应该能从putty看到串口信息。</li>
<li><strong>配置开发板的环境变量</strong><br>setenv ipaddr 192.168.1.3—-&gt;开发板IP<br>setenv serverip 192.168.1.2—&gt;nfs服务器IP<br><strong>ping 测试</strong><br>开发板ping 192.168.1.2<br>显示alive ping通了  也可用主机ping开发板<br><strong>系统启动参数</strong><br>setenv bootcmd tftp 41000000 uImage;tftp 42000000 exynos4412-fs4412.dtb;bootm 41000000 - 42000000<br><strong>内核启动nfs文件系统参数</strong><br>setenv bootargs root=/dev/nfs nfsroot=192.168.1.2:/home/source/rootfs rw ip=192.168.1.3 console=ttySAC2,115200 init=/linuxrc</li>
</ul>
<h3 id="四、交叉编译工具链"><a href="#四、交叉编译工具链" class="headerlink" title="四、交叉编译工具链"></a>四、交叉编译工具链</h3><ul>
<li><strong>交叉编译工具链的作用：</strong><br>arm交叉编译工具链是用于在一种平台上编译出能运行在体系结构不同的另一种平台上的程序，比如在PC平台（X86 CPU）上编译出能运行在以ARM为内核的CPU平台上的程序，编译得到的程序在X86 CPU平台上是不能运行的，必须放到ARM CPU平台上才能运行，虽然两个平台用的都是Linux系统。</li>
<li><strong>下载交叉编译链工具</strong><br><strong>方法一：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载指令：</span><br><span class="line">sudo apt-get install gcc-arm-linux-gnueabihf </span><br><span class="line">卸载指令：</span><br><span class="line">sudo apt-get remove gcc-arm-linux-gnueabihf</span><br></pre></td></tr></table></figure>

<p>这种方法不需要配置环境  但是可能出现not found的问题   该问题是因为你的linux系统是64位的系统的而你安装的arm-linux-gcc-4.4.3是32位的软件，虽然64位系统可以运行32位的软件，但需要安装32位的运行库，你没安装32位运行库就不能使用。<br><strong>方法二：</strong><br>1.从网上下载对应版本的交叉编译工具。<br>2.使用tar命令解压安装包，即在Terminal中输入以下命令：（前面的sudo表示使用root权限执行该命令）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~/下载$ sudo tar -xvf gcc-4.6.4.tar.xz</span><br></pre></td></tr></table></figure>

<p>3.查看解压后bin目录的全路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ cd 下载/gcc-4.6.4/bin/</span><br><span class="line">lcx@lcx-linux:~/下载/gcc-4.6.4/bin$ pwd</span><br><span class="line">/home/lcx/下载/gcc-4.6.4/bin</span><br><span class="line">lcx@lcx-linux:~/下载/gcc-4.6.4/bin$</span><br></pre></td></tr></table></figure>

<p>4.添加环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ vim .bashrc</span><br></pre></td></tr></table></figure>

<p>最后一行添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 交叉编译工具链</span><br><span class="line"> export PATH=$PATH:/home/lcx/下载/gcc-4.6.4/bin</span><br></pre></td></tr></table></figure>

<p>执行如下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ source .bashrc</span><br></pre></td></tr></table></figure>

<h2 id="程序的烧写"><a href="#程序的烧写" class="headerlink" title="程序的烧写"></a>程序的烧写</h2><h3 id="一、文件拷贝项目"><a href="#一、文件拷贝项目" class="headerlink" title="一、文件拷贝项目"></a>一、文件拷贝项目</h3><p>1.将项目程序拷贝至nfs文件系统中<br>2.在ubuntu18.04中将项目程序使用交叉编译工具链进行编译<br>代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:/home/source/rootfs$ arm-none-linux-gnueabi-gcc-4.6.4 -o write write.c</span><br></pre></td></tr></table></figure>

<p>3.在开发板上执行程序<br>代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@farsight ]# ./write 1.txt 2.txt</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open source file ok!</span><br><span class="line">Create new file successfully!</span><br><span class="line">Write ok!</span><br></pre></td></tr></table></figure>

<p>项目代码如下（实现文件拷贝功能）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">6</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> <span class="number">7</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="number">8</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="meta"># <span class="meta-keyword">define</span> BUF_SIZE 20</span></span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="keyword">int</span> fd,fd1;</span><br><span class="line"><span class="number">14</span>     <span class="keyword">char</span> bufs[<span class="number">20</span>];</span><br><span class="line"><span class="number">15</span>     <span class="keyword">int</span> len;</span><br><span class="line"><span class="number">16</span>     <span class="keyword">if</span>(argc != <span class="number">3</span>)&#123;</span><br><span class="line"><span class="number">17</span>         <span class="built_in">printf</span>(<span class="string">"please input file name!\n"</span>);</span><br><span class="line"><span class="number">18</span>         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span>     <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">21</span>         <span class="comment">//1 打开源文件</span></span><br><span class="line"><span class="number">22</span>         fd = open(argv[<span class="number">1</span>],O_RDONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">23</span>         <span class="keyword">if</span>(<span class="number">-1</span> == fd)&#123;</span><br><span class="line"><span class="number">24</span>             perror(<span class="string">"open read file error!\n"</span>);</span><br><span class="line"><span class="number">25</span>             <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">26</span>         &#125;</span><br><span class="line"><span class="number">27</span>         <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">28</span>             <span class="built_in">printf</span>(<span class="string">"open source file ok!\n"</span>);</span><br><span class="line"><span class="number">29</span>         <span class="comment">//2 打开目标文件 </span></span><br><span class="line"><span class="number">30</span>             <span class="comment">//如果目标文件不存在  则创建目标文件</span></span><br><span class="line"><span class="number">31</span>             fd1 = open(argv[<span class="number">2</span>],O_WRONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">32</span>             <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line"><span class="number">33</span>                 <span class="comment">//创建目标文件</span></span><br><span class="line"><span class="number">34</span>                 fd1 = creat(argv[<span class="number">2</span>],<span class="number">0775</span>);</span><br><span class="line"><span class="number">35</span>                 <span class="built_in">printf</span>(<span class="string">"Create new file successfully!\n"</span>);</span><br><span class="line"><span class="number">36</span>                 fd1 = open(argv[<span class="number">2</span>],O_WRONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">37</span>             <span class="comment">// cp</span></span><br><span class="line"><span class="number">38</span>                 <span class="keyword">while</span>((len = read(fd,bufs,BUF_SIZE))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">39</span>                       write(fd1,bufs,len);</span><br><span class="line"><span class="number">40</span>                 &#125;</span><br><span class="line"><span class="number">41</span>                 <span class="built_in">printf</span>(<span class="string">"Write ok!\n"</span>);</span><br><span class="line"><span class="number">42</span> </span><br><span class="line"><span class="number">43</span>                 <span class="keyword">if</span>(<span class="number">-1</span> == fd1)</span><br><span class="line"><span class="number">44</span>                 &#123;</span><br><span class="line"><span class="number">45</span>                 perror(<span class="string">"open write file error!\n"</span>);</span><br><span class="line"><span class="number">46</span>                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">47</span>                 &#125;                                                                                                                                                                                             </span><br><span class="line"><span class="number">48</span>             &#125;</span><br><span class="line"><span class="number">49</span>             <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">50</span>                 <span class="built_in">printf</span>(<span class="string">"open destination file ok!\n"</span>);</span><br><span class="line"><span class="number">51</span>         <span class="comment">//3  如果存在 则复制到目标文件</span></span><br><span class="line"><span class="number">52</span>                 <span class="keyword">while</span>((len = read(fd,bufs,BUF_SIZE))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">53</span>                     write(fd1,bufs,len);</span><br><span class="line"><span class="number">54</span> </span><br><span class="line"><span class="number">55</span>                 &#125;</span><br><span class="line"><span class="number">56</span>                 <span class="built_in">printf</span>(<span class="string">"write ok!\n"</span>);</span><br><span class="line"><span class="number">57</span>             &#125;</span><br><span class="line"><span class="number">58</span>             close(fd);</span><br><span class="line"><span class="number">59</span>             close(fd1);</span><br><span class="line"><span class="number">60</span>             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">61</span>         &#125;</span><br><span class="line"><span class="number">62</span>     &#125;</span><br><span class="line"><span class="number">63</span> &#125;</span><br></pre></td></tr></table></figure>

<p>由于开发板不支持中文格式，故将测试源文件命名为1.txt，内容为舌尖上的中国英译版文案 ,在此不创建目标文件。（拷贝时创建）<br>测试结果如下：<br><img src="https://s2.ax1x.com/2020/01/08/l26KL6.png" alt="运行编译后的可执行文件.png"><br><img src="https://s2.ax1x.com/2020/01/08/l26koF.png" alt="2.txt.png"></p>
<h3 id="二、百度网盘项目"><a href="#二、百度网盘项目" class="headerlink" title="二、百度网盘项目"></a>二、百度网盘项目</h3><ul>
<li><strong>项目简介及使用</strong><br>由两个c程序实现网盘文件传输功能，是基于tcp协议的文件传输程序。其功能是使用TCP协议从client端向server端传输文件。将server程序通过gcc编译运行在开发机上，将client程序通过交叉编译链编译运行在开发板上。<br>具体用法如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> 编译：</span><br><span class="line"></span><br><span class="line">     lcx@lcx-linux:~/test/百度网盘低配版$ gcc -o server server.c </span><br><span class="line">lcx@lcx-linux:~/test/百度网盘低配版$ arm-none-linux-gnueabi-gcc-4.6.4 -o client client.c </span><br><span class="line"></span><br><span class="line">     运行：</span><br><span class="line"></span><br><span class="line">           client端：./client  server IP  端口号  上传文件名</span><br><span class="line">           server端：./server   端口号   保存为文件名</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>知识储备</strong><br>tcp传输协议、网络套接字编程、c语言。</li>
<li><strong>测试结果如下</strong><br><img src="https://s2.ax1x.com/2020/01/09/lR4sje.png" alt="客户端"><br><strong>注意</strong>  先打开server程序 设置好端口号，再打开client程序。图中上半部分为错误案例。<br><img src="https://s2.ax1x.com/2020/01/09/lR5SvF.png" alt="服务端"><br>接收到的文件名指定为1.txt<br>打开1.txt如下图所示：<br><img src="https://s2.ax1x.com/2020/01/09/lR5Ban.png" alt="lR5Ban.png"></li>
<li><strong>代码如下</strong><br><strong>client.c</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE        1024</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"usage :%s ipaddr portnum filename\n"</span>, command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span>                   buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span>                    sock_id;</span><br><span class="line">    <span class="keyword">int</span>                    read_len;</span><br><span class="line">    <span class="keyword">int</span>                    send_len;</span><br><span class="line">    FILE                   *fp;</span><br><span class="line">    <span class="keyword">int</span>                    i_ret;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">        usage(argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* open the file to be transported commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">3</span>],<span class="string">"r"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Open file failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* create the socket commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">if</span> ((sock_id = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Create socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;serv_addr.sin_addr);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* connect the server commented by guoqingbo*/</span></span><br><span class="line">    i_ret = connect(sock_id, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(struct sockaddr));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == i_ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Connect socket failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* transported the file commented by guoqingbo*/</span></span><br><span class="line">    bzero(buf, MAXLINE);</span><br><span class="line">    <span class="keyword">while</span> ((read_len = fread(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), MAXLINE, fp)) &gt;<span class="number">0</span> ) &#123;</span><br><span class="line">        send_len = send(sock_id, buf, read_len, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( send_len &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            perror(<span class="string">"Send file failed\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buf, MAXLINE);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    close(sock_id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Send Finish\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>server.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE        1024</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"usage :%s portnum filename\n"</span>, command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span>                   buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span>                    sock_id;</span><br><span class="line">    <span class="keyword">int</span>                    link_id;</span><br><span class="line">    <span class="keyword">int</span>                    recv_len;</span><br><span class="line">    <span class="keyword">int</span>                    write_leng;</span><br><span class="line">    <span class="keyword">int</span>                    clie_addr_len;</span><br><span class="line">    FILE                   *fp;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        usage(argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">2</span>], <span class="string">"w"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Open file failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((sock_id = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Create socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*fill the server sockaddr_in struct commented by guoqingbo*/</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (bind(sock_id, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"Bind socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == listen(sock_id, <span class="number">10</span>)) &#123;</span><br><span class="line">        perror(<span class="string">"Listen socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* server part commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">        link_id = accept(sock_id, (struct sockaddr *)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == link_id) &#123;</span><br><span class="line">            perror(<span class="string">"Accept socket failed\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buf, MAXLINE);</span><br><span class="line">        <span class="keyword">while</span> (recv_len = recv(link_id, buf, MAXLINE, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* receiver data part commented by guoqingbo*/</span></span><br><span class="line">            <span class="keyword">if</span>(recv_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Recieve Data From Server Failed!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">            write_leng = fwrite(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), recv_len, fp);</span><br><span class="line">            <span class="keyword">if</span> (write_leng &lt; recv_len) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Write file failed\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bzero(buf,MAXLINE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nFinish Recieve\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        close(link_id);</span><br><span class="line">    &#125;</span><br><span class="line">    close(sock_id); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><strong>注意事项</strong><br>在使用开发板前，应打开tftp服务器和nfs服务器。<br>开发板属于热插拔器件，应断电后插拔。<br>在使用nfs网络文件系统时，应注意在编译内核的过程中，选择nfs选项，使得在内核启动过程中去创建一个nfs客户端去连接服务端 获取文件系统。</li>
<li><strong>可能出现的问题</strong><br>在内核启动过程中无法加在nfs文件系统。<br>应从以下几个方面去查错：<br>1.内核编译时是否选择nfs文件系统选项。<br>2.nfs服务器是否搭建完成。（需要做本机挂载测试）<br>3.网络是否通畅。（ping 命令查看）<br>4.nfs参数配置是否正确。</li>
<li><strong>最严重的问题</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VFS: Unable to mount root fs via NFS, trying floppy.</span><br><span class="line">VFS: Cannot open root device &quot;nfs&quot; or unknown-block(2,0): error -6</span><br><span class="line">Please append a correct &quot;root=&quot; boot option; here are the available partitions:</span><br><span class="line">1f00             256 mtdblock0  (driver?)</span><br><span class="line">1f01             128 mtdblock1  (driver?)</span><br><span class="line">1f02            2048 mtdblock2  (driver?)</span><br><span class="line">1f03          259712 mtdblock3  (driver?)</span><br><span class="line">Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0)</span><br></pre></td></tr></table></figure>

<p>查找资料发现从Ubuntu17.04开始，nfs默认只支持协议3和协议4，而kernel中默认支持协议2，所以才会出现挂载失败的情况，现有两种方法可以解决该问题：</p>
<ol>
<li>设置Ubuntu18.04系统中的nfs服务支持协议2，修改nfs配置文件 /etc/default/nfs-kernel-server,在文件末尾加入一句：RPCNFSDOPTS=”–nfs-version 2,3,4 –debug –syslog”。</li>
<li>如果kernel版本较高支持nfs协议3的话，可以在Uboot传到Kernel的bootargs参数中加入’nfsvers=3’,使kernel使用nfs协议3。</li>
</ol>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>系统移植</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客刷题之洗牌</title>
    <url>/2020/06/21/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E4%B9%8B%E6%B4%97%E7%89%8C/</url>
    <content><![CDATA[<h1 id="一、洗牌"><a href="#一、洗牌" class="headerlink" title="一、洗牌"></a>一、洗牌</h1><p><a href="https://www.nowcoder.com/questionTerminal/5a0a2c7e431e4fbbbb1ff32ac6e8dfa0" target="_blank" rel="noopener">题目链接</a></p><p>洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。首先，我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。接着就开始洗牌的过程，先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，直到最后放下左手的第一张牌。接着把牌合并起来就可以了。 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3；右手拿着4,5,6。在洗牌过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。 现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列。</p><a id="more"></a>

<h1 id="二、输入描述"><a href="#二、输入描述" class="headerlink" title="二、输入描述"></a>二、输入描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个数T(T ≤ 100)，表示数据组数。对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，接下来一行有2n个数a1,a2,...,a2n(1 ≤ ai ≤ 1000000000)。表示原始牌组从上到下的序列。</span><br></pre></td></tr></table></figure>

<h1 id="三、输出描述"><a href="#三、输出描述" class="headerlink" title="三、输出描述"></a>三、输出描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末输出多余的空格。</span><br></pre></td></tr></table></figure>

<h1 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.niuke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//洗牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shuffle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//input</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> T = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                ArrayList&lt;Integer&gt; card = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * n; j++) &#123;</span><br><span class="line">                    card.add(sc.nextInt());</span><br><span class="line">                &#125;</span><br><span class="line">                ShuffleCord(card, k, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShuffleCord</span><span class="params">(ArrayList&lt;Integer&gt; card, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; LeftCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; RightCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//初始化左边手牌</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                LeftCard.add(card.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">                RightCard.add(card.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//洗牌   洗牌前将cord清空 否则洗牌后的顺序将在index=7的位置添加</span></span><br><span class="line">            card.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                card.add(LeftCard.get(i));</span><br><span class="line">                card.add(RightCard.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">            <span class="comment">//同理 完成一波洗牌后 将左右手牌清空</span></span><br><span class="line">            LeftCard.clear();</span><br><span class="line">            RightCard.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r:card) &#123;</span><br><span class="line">            System.out.print(r+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客刷题之兔子繁殖</title>
    <url>/2020/06/25/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E4%B9%8B%E5%85%94%E5%AD%90%E7%B9%81%E6%AE%96/</url>
    <content><![CDATA[<h1 id="一、兔子繁殖"><a href="#一、兔子繁殖" class="headerlink" title="一、兔子繁殖"></a>一、兔子繁殖</h1><p><a href="https://www.nowcoder.com/questionTerminal/1221ec77125d4370833fd3ad5ba72395" target="_blank" rel="noopener">题目链接</a></p><p>有一只兔子，从出生后第3个月起每个月都生一只兔子，小兔子长到第三个月后每个月又生一只兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计出兔子总数。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> monthCount 第几个月</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 兔子总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(<span class="keyword">int</span> monthCount)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a>



<h1 id="二、输入描述"><a href="#二、输入描述" class="headerlink" title="二、输入描述"></a>二、输入描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入int型表示month</span><br></pre></td></tr></table></figure>

<h1 id="三、输出描述"><a href="#三、输出描述" class="headerlink" title="三、输出描述"></a>三、输出描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出兔子总数int型</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<p>输入：12</p>
<p>输出：144</p>
<h1 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.niuke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(<span class="keyword">int</span> monthCount)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>;</span><br><span class="line">            map.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            map.put(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= monthCount; i++) &#123;</span><br><span class="line">            map.put(i,map.get(i-<span class="number">1</span>)+map.get(i-<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(monthCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">int</span> mountCount = scanner.nextInt();</span><br><span class="line">            System.out.println(getTotalCount(mountCount));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、思路"><a href="#五、思路" class="headerlink" title="五、思路"></a>五、思路</h1><p>经过列表分析，得到规律，是斐波那契数列，采用map集合将月份与兔子总数一一对应。</p>
<p>采用消耗空间的办法，来减少程序运行时间。</p>
<p><a href="https://github.com/yym08090809/my-java-demo/blob/master/src/main/java/com/lcx/niuke/Rabbit.java" target="_blank" rel="noopener">代码已上传至github</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线编程之剑指</title>
    <url>/2019/11/18/%E7%89%9B%E5%AE%A2%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%89%91%E6%8C%87/</url>
    <content><![CDATA[<h1 id="一、栈的压入、弹出序列"><a href="#一、栈的压入、弹出序列" class="headerlink" title="一、栈的压入、弹出序列"></a>一、栈的压入、弹出序列</h1><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><a id="more"></a>
<h6 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h6><p>​        用一个栈来模拟入栈和出栈的过程。</p>
<h6 id="Stack包中常用的方法："><a href="#Stack包中常用的方法：" class="headerlink" title="Stack包中常用的方法："></a>Stack包中常用的方法：</h6><p>​        push(); 将一个项目推到这个堆栈的顶部。(给堆栈里添加元素，也就是入栈。)</p>
<p>​        pop():在这个堆栈的顶部删除队形，并返回该对象的值作为该函数的返回值。（即弹栈）</p>
<p>​        peek():查看此堆栈顶部的对象。（即查看栈顶元素）</p>
<p><strong>注：栈的弹栈特点是先进后出。</strong></p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">//导入 栈的包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//如果pushA，popA之间有一个是空的，则是不合法的，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(pushA == <span class="keyword">null</span> &amp;&amp; popA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个辅助栈来模拟入栈出栈的过程</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//定义一个index来记录出栈popA的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环，一直到所有内容入栈完毕</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; pushA.length;i++)&#123;</span><br><span class="line">            stack.push(pushA[i]);</span><br><span class="line">            <span class="comment">//如果目前的栈顶与出栈的队列相同则出栈，然后index++</span></span><br><span class="line">            <span class="comment">//如果栈不为空，继续出栈。</span></span><br><span class="line">            <span class="keyword">while</span>((!stack.isEmpty()) &amp;&amp; stack.peek() == popA[index])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果最后栈为空，则返回true</span></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、从上往下打印二叉树"><a href="#二、从上往下打印二叉树" class="headerlink" title="二、从上往下打印二叉树"></a>二、从上往下打印二叉树</h1><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        从上往下打印出二叉树的每个节点，通层节点从左至右打印。</p>
<h6 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h6><p>​        层次遍历,用arraylist模拟一个队列来存储相应的TreeNode。</p>
<h6 id="ArrayList和LinkedList包中的常用方法："><a href="#ArrayList和LinkedList包中的常用方法：" class="headerlink" title="ArrayList和LinkedList包中的常用方法："></a>ArrayList和LinkedList包中的常用方法：</h6><p>​        ArrayList和LinkedList都继承了List类，其中add（）方法就是继承自List类的。</p>
<p>​        add():添加对象至集合(List、ArrayList、LinkedList)中。</p>
<p>​        isEmpty():用来判断集合中是否包含元素对象。返回值类型为Boolean。</p>
<p>​        removeFirst():移除并返回集合的第一个元素对象。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果二叉树为空则返回一个空的arrayList</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.定义一个ArrayList对象用来存储二叉树的节点值val</span></span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.定义一个LinkedList对象来做层序遍历</span></span><br><span class="line">        LinkedList&lt;TreeNode&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        linkedList.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!linkedList.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = linkedList.removeFirst();</span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            arrayList.add(temp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、二叉搜索树的后序遍历序列"><a href="#三、二叉搜索树的后序遍历序列" class="headerlink" title="三、二叉搜索树的后序遍历序列"></a>三、二叉搜索树的后序遍历序列</h1><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<h6 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h6><p>​        递归调用。</p>
<p>​        对于一个序列S，最后一个元素是last（即就是根节点元素），设去掉last元素后的序列为T，那么T必定满足：可以分为两段，前一段（即左子树）小于last，后一段（右子树）大于last，且两段都是合法的后序序列。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="keyword">int</span> [] sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> judge(sequence,<span class="number">0</span>,sequence.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> [] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= last)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后序遍历，最后的一个位置元素即是根节点</span></span><br><span class="line">        <span class="keyword">int</span> i = last;</span><br><span class="line">        <span class="comment">//找到的i即是分割左子树与右子树的位置。i-1的位置到start为左子树，i到last-1位置为右子树</span></span><br><span class="line">        <span class="comment">//因为二叉树的左子树的所有元素小于根节点的值，右子树的所有元素的值大于根节点的值</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt; start &amp;&amp; arr[i-<span class="number">1</span>] &gt; arr[last])&#123;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左子树的所有元素值都要小于根节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= start;--j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[last])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在递归的时候判断左子树和右子树是否满足后序遍历</span></span><br><span class="line">        <span class="keyword">return</span>(judge(arr,start,i-<span class="number">1</span>) &amp;&amp; judge(arr,i,last-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、把数组排成最小的数"><a href="#四、把数组排成最小的数" class="headerlink" title="四、把数组排成最小的数"></a>四、把数组排成最小的数</h1><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>
<h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h6><p>​        冒泡排序</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;numbers.length;j++)&#123;</span><br><span class="line">                String s1= numbers[i]+<span class="string">""</span>+numbers[j];</span><br><span class="line">                String s2= numbers[j]+<span class="string">""</span>+numbers[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(s1.compareTo(s2)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    temp = numbers[j];</span><br><span class="line">                    numbers[j]=numbers[i];</span><br><span class="line">                    numbers[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            str += String.valueOf(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结归纳</title>
    <url>/2020/03/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<hr><h1 id="1、排序的定义"><a href="#1、排序的定义" class="headerlink" title="1、排序的定义"></a>1、排序的定义</h1><p> 对一序列对象根据某个关键字进行排序。 </p><h1 id="2、排序算法表"><a href="#2、排序算法表" class="headerlink" title="2、排序算法表"></a>2、排序算法表</h1><p><img src="https://s1.ax1x.com/2020/03/20/8cBdkn.jpg" alt="8cBdkn.jpg"></p><p><strong>图片名词解释：</strong></p><ul>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存</li>
</ul><h1 id="3、术语说明"><a href="#3、术语说明" class="headerlink" title="3、术语说明"></a>3、术语说明</h1><ul>
<li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； </li>
<li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面； </li>
<li><strong>内排序</strong>：所有排序操作都在内存中完成； </li>
<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行； </li>
<li><strong>时间复杂度：</strong> 一个算法执行所耗费的时间。 </li>
<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。 </li>
</ul><a id="more"></a>





<h1 id="4、算法的分类"><a href="#4、算法的分类" class="headerlink" title="4、算法的分类"></a>4、算法的分类</h1><p><img src="https://s1.ax1x.com/2020/03/20/8cDmcT.jpg" alt="8cDmcT.jpg"></p>
<h1 id="5、比较和非比较的区别"><a href="#5、比较和非比较的区别" class="headerlink" title="5、比较和非比较的区别"></a>5、比较和非比较的区别</h1><p> <strong>常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。</strong>在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。 </p>
<p> 在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。<strong>在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。</strong> </p>
<p> 比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。<strong>可以说，比较排序适用于一切需要排序的情况。</strong> </p>
<p> <strong>计数排序、基数排序、桶排序则属于非比较排序。</strong>非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。 </p>
<h1 id="6、排序算法的简述及java代码实现"><a href="#6、排序算法的简述及java代码实现" class="headerlink" title="6、排序算法的简述及java代码实现"></a>6、排序算法的简述及java代码实现</h1><h2 id="6-1-冒泡排序（Bubble-Sort）"><a href="#6-1-冒泡排序（Bubble-Sort）" class="headerlink" title="6.1 冒泡排序（Bubble Sort）"></a>6.1 冒泡排序（Bubble Sort）</h2><h3 id="6-1-1-概述"><a href="#6-1-1-概述" class="headerlink" title="6.1.1 概述"></a>6.1.1 概述</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p>
<h3 id="6-1-2-算法描述"><a href="#6-1-2-算法描述" class="headerlink" title="6.1.2 算法描述"></a>6.1.2 算法描述</h3><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个； </li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； </li>
<li>针对所有的元素重复以上的步骤，除了最后一个； </li>
<li>重复步骤1~3，直到排序完成。 </li>
</ul>
<h3 id="6-1-3-动图演示"><a href="#6-1-3-动图演示" class="headerlink" title="6.1.3 动图演示"></a>6.1.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8crNin.gif" alt="8crNin.gif"></p>
<h3 id="6-1-4-代码实现"><a href="#6-1-4-代码实现" class="headerlink" title="6.1.4 代码实现"></a>6.1.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">    <span class="keyword">if</span>(array.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j]&gt;array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] =array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = bubbleSort(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-1-5-算法分析"><a href="#6-1-5-算法分析" class="headerlink" title="6.1.5 算法分析"></a>6.1.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n)  最差情况：T(n) = O(n^2)  平均情况：T(n) = O(n^2)</strong>==</p>
<h2 id="6-2-选择排序（Selection-Sort）"><a href="#6-2-选择排序（Selection-Sort）" class="headerlink" title="6.2 选择排序（Selection Sort）"></a>6.2 选择排序（Selection Sort）</h2><h3 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h3><p><strong>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。</strong>唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>
<p> 选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。  </p>
<h3 id="6-2-2-算法描述"><a href="#6-2-2-算法描述" class="headerlink" title="6.2.2 算法描述"></a>6.2.2 算法描述</h3><p> n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下： </p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空； </li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区； </li>
<li>n-1趟结束，数组有序化了。 </li>
</ul>
<h3 id="6-2-3-动图演示"><a href="#6-2-3-动图演示" class="headerlink" title="6.2.3 动图演示"></a>6.2.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8ccDpR.gif" alt="8ccDpR.gif"></p>
<h3 id="6-2-4-代码实现"><a href="#6-2-4-代码实现" class="headerlink" title="6.2.4 代码实现"></a>6.2.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[index])&#123;<span class="comment">//找到最小的数</span></span><br><span class="line">                index = j;<span class="comment">//将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[index];</span><br><span class="line">        arr[index] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = selectionSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-5-算法分析"><a href="#6-2-5-算法分析" class="headerlink" title="6.2.5 算法分析"></a>6.2.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n^2)  最差情况：T(n) = O(n^2)  平均情况：T(n) = O(n^2)</strong>==</p>
<h2 id="6-3-插入排序（Insertion-Sort）"><a href="#6-3-插入排序（Insertion-Sort）" class="headerlink" title="6.3 插入排序（Insertion Sort）"></a>6.3 插入排序（Insertion Sort）</h2><h3 id="6-3-1-概述"><a href="#6-3-1-概述" class="headerlink" title="6.3.1 概述"></a>6.3.1 概述</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="6-3-2-算法描述"><a href="#6-3-2-算法描述" class="headerlink" title="6.3.2 算法描述"></a>6.3.2 算法描述</h3><p> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下： </p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序； </li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描； </li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置； </li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； </li>
<li>将新元素插入到该位置后； </li>
<li>重复步骤2~5。 </li>
</ul>
<h3 id="6-3-3-动图演示"><a href="#6-3-3-动图演示" class="headerlink" title="6.3.3 动图演示"></a>6.3.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8cRJXt.gif" alt="8cRJXt.gif"></p>
<h3 id="6-3-4-代码实现"><a href="#6-3-4-代码实现" class="headerlink" title="6.3.4 代码实现"></a>6.3.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        current = arr[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> preIndex = i;</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[preIndex])&#123;</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] =current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">18</span>,<span class="number">4</span>,<span class="number">35</span>,<span class="number">22</span>,<span class="number">72</span>,<span class="number">17</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = insertionSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">11</span> <span class="number">17</span> <span class="number">18</span> <span class="number">22</span> <span class="number">35</span> <span class="number">72</span> <span class="number">99</span> <span class="number">101</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-5-算法分析"><a href="#6-3-5-算法分析" class="headerlink" title="6.3.5 算法分析"></a>6.3.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n)  最差情况：T(n) = O(n^2)  平均情况：T(n) = O(n^2)</strong>==</p>
<h2 id="6-4-希尔排序（Shell-Sort）"><a href="#6-4-希尔排序（Shell-Sort）" class="headerlink" title="6.4 希尔排序（Shell Sort）"></a>6.4 希尔排序（Shell Sort）</h2><h3 id="6-4-1-概述"><a href="#6-4-1-概述" class="headerlink" title="6.4.1 概述"></a>6.4.1 概述</h3><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>
<p>==<strong>希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</strong>==</p>
<h3 id="6-4-2-算法描述"><a href="#6-4-2-算法描述" class="headerlink" title="6.4.2 算法描述"></a>6.4.2 算法描述</h3><p><strong>我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。</strong>希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li>
<li>按增量序列个数k，对序列进行k 趟排序； </li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。 </li>
</ul>
<h3 id="6-4-3-过程演示"><a href="#6-4-3-过程演示" class="headerlink" title="6.4.3 过程演示"></a>6.4.3 过程演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8cq97d.jpg" alt="8cq97d.jpg"></p>
<h3 id="6-4-4-代码演示"><a href="#6-4-4-代码演示" class="headerlink" title="6.4.4 代码演示"></a>6.4.4 代码演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">int</span> temp,gap = len/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> preIndex = i - gap;</span><br><span class="line">            <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex]&gt;temp)&#123;</span><br><span class="line">                arr[preIndex + gap] = arr[preIndex];</span><br><span class="line">                preIndex -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[preIndex + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        gap /=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr  = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = shellSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">56</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-5-算法分析"><a href="#6-4-5-算法分析" class="headerlink" title="6.4.5 算法分析"></a>6.4.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(nlog2 n)  最坏情况：T(n) = O(nlog2 n)  平均情况：T(n) =O(nlog2n)</strong>==</p>
<h2 id="6-5-归并排序（Merge-Sort）"><a href="#6-5-归并排序（Merge-Sort）" class="headerlink" title="6.5 归并排序（Merge Sort）"></a>6.5 归并排序（Merge Sort）</h2><h3 id="6-5-1-概述"><a href="#6-5-1-概述" class="headerlink" title="6.5.1 概述"></a>6.5.1 概述</h3><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。</p>
<p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p>
<h3 id="6-5-2-算法描述"><a href="#6-5-2-算法描述" class="headerlink" title="6.5.2 算法描述"></a>6.5.2 算法描述</h3><ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列； </li>
<li>对这两个子序列分别采用归并排序； </li>
<li>将两个排序好的子序列合并成一个最终的排序序列。 </li>
</ul>
<h3 id="6-5-3-动图演示"><a href="#6-5-3-动图演示" class="headerlink" title="6.5.3 动图演示"></a>6.5.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8cveTe.gif" alt="8cveTe.gif"></p>
<h3 id="6-5-4-代码实现"><a href="#6-5-4-代码实现" class="headerlink" title="6.5.4 代码实现"></a>6.5.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = arr.length / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//copyOfRange方法复制的数组不包含mid，及[0,mid)</span></span><br><span class="line">    <span class="keyword">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">int</span>[] right = Arrays.copyOfRange(arr, mid, arr.length);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] re = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>; index &lt; re.length; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= left.length) &#123;</span><br><span class="line">            re[index] = right[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= right.length) &#123;</span><br><span class="line">            re[index] = left[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left[i] &gt; right[j]) &#123;</span><br><span class="line">            re[index] = right[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            re[index] = left[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = mergeSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-5-5-算法分析"><a href="#6-5-5-算法分析" class="headerlink" title="6.5.5 算法分析"></a>6.5.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n)  最差情况：T(n) = O(nlogn)  平均情况：T(n) = O(nlogn)</strong>==</p>
<h2 id="6-6-快速排序（Quick-Sort）"><a href="#6-6-快速排序（Quick-Sort）" class="headerlink" title="6.6 快速排序（Quick Sort）"></a>6.6 快速排序（Quick Sort）</h2><h3 id="6-6-1-概述"><a href="#6-6-1-概述" class="headerlink" title="6.6.1 概述"></a>6.6.1 概述</h3><p> 快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。 </p>
<h3 id="6-6-2-算法描述"><a href="#6-6-2-算法描述" class="headerlink" title="6.6.2 算法描述"></a>6.6.2 算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（==<strong>pivot</strong>==）； </li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作； </li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。 </li>
</ul>
<h3 id="6-6-3-动图演示"><a href="#6-6-3-动图演示" class="headerlink" title="6.6.3 动图演示"></a>6.6.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8gDqOO.gif" alt="8gDqOO.gif"></p>
<h3 id="6-6-4-代码实现"><a href="#6-6-4-代码实现" class="headerlink" title="6.6.4 代码实现"></a>6.6.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">1</span> || start &lt; <span class="number">0</span> || end &gt;= arr.length || start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> smallIndex = partition(arr, start, end);</span><br><span class="line">    <span class="keyword">if</span>(smallIndex &gt; start)&#123;</span><br><span class="line">        quickSort(arr,start,smallIndex-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(smallIndex &lt;end)&#123;</span><br><span class="line">        quickSort(arr,smallIndex+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = (<span class="keyword">int</span>) (start + Math.random() * (end - start + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> smallIndex = start - <span class="number">1</span>;</span><br><span class="line">    swap(arr, pivot, end);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[end]) &#123;</span><br><span class="line">            smallIndex++;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; smallIndex) &#123;</span><br><span class="line">                swap(arr, i, smallIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smallIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] re = quickSort(arr,start,end);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-6-5-算法分析"><a href="#6-6-5-算法分析" class="headerlink" title="6.6.5 算法分析"></a>6.6.5 算法分析</h3><p> ==<strong>最佳情况：T(n) = O(nlogn)  最差情况：T(n) = O(n2)  平均情况：T(n) = O(nlogn)</strong>==　 </p>
<h2 id="6-7-堆排序（Heap-Sort）"><a href="#6-7-堆排序（Heap-Sort）" class="headerlink" title="6.7 堆排序（Heap Sort）"></a>6.7 堆排序（Heap Sort）</h2><h3 id="6-7-1-概述"><a href="#6-7-1-概述" class="headerlink" title="6.7.1 概述"></a>6.7.1 概述</h3><p> 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。 </p>
<h3 id="6-7-2-算法描述"><a href="#6-7-2-算法描述" class="headerlink" title="6.7.2 算法描述"></a>6.7.2 算法描述</h3><ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区； </li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]； </li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li>
</ul>
<h3 id="6-7-3-动图演示"><a href="#6-7-3-动图演示" class="headerlink" title="6.7.3 动图演示"></a>6.7.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8gouOH.gif" alt="8gouOH.gif"></p>
<h3 id="6-7-4-代码实现"><a href="#6-7-4-代码实现" class="headerlink" title="6.7.4 代码实现"></a>6.7.4 代码实现</h3><p>==注意：这里用到了完全二叉树的部分性质。== </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明全局变量，用于记录数组array的长度；</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    len = arr.length;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.构建一个最大堆</span></span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line">    <span class="comment">//2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class="line">    <span class="keyword">while</span> (len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        swap(arr,<span class="number">0</span>,len-<span class="number">1</span>);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(arr,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (len -<span class="number">1</span>)/<span class="number">2</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(arr,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调整使之成为最大堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxIndex = i;</span><br><span class="line">    <span class="comment">//如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> &lt; len &amp;&amp; arr[i * <span class="number">2</span>] &gt; arr[maxIndex])&#123;</span><br><span class="line">        maxIndex = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt; len &amp;&amp; arr[i * <span class="number">2</span> + <span class="number">1</span>] &gt; arr[maxIndex])&#123;</span><br><span class="line">        maxIndex = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class="line">    <span class="keyword">if</span> (maxIndex != i) &#123;</span><br><span class="line">        swap(arr, maxIndex, i);</span><br><span class="line">        adjustHeap(arr, maxIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = heapSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-7-5-算法分析"><a href="#6-7-5-算法分析" class="headerlink" title="6.7.5 算法分析"></a>6.7.5 算法分析</h3><p> ==<strong>最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn)</strong>==</p>
<h2 id="6-8-计数排序（Counting-Sort）"><a href="#6-8-计数排序（Counting-Sort）" class="headerlink" title="6.8 计数排序（Counting Sort）"></a>6.8 计数排序（Counting Sort）</h2><h3 id="6-8-1-概述"><a href="#6-8-1-概述" class="headerlink" title="6.8.1 概述"></a>6.8.1 概述</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<p>计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。</p>
<h3 id="6-8-2-算法描述"><a href="#6-8-2-算法描述" class="headerlink" title="6.8.2 算法描述"></a>6.8.2 算法描述</h3><ul>
<li>找出待排序的数组中最大和最小的元素； </li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项； </li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）； </li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。 </li>
</ul>
<h3 id="6-8-3-动图演示"><a href="#6-8-3-动图演示" class="headerlink" title="6.8.3 动图演示"></a>6.8.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8gOm59.gif" alt="8gOm59.gif"></p>
<h3 id="6-8-4-代码实现"><a href="#6-8-4-代码实现" class="headerlink" title="6.8.4 代码实现"></a>6.8.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bias,min = arr[<span class="number">0</span>],max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;min)&#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bias = <span class="number">0</span> - min;</span><br><span class="line">    <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max - min +<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(bucket,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        bucket[arr[i]+bias]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>,i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index&lt;arr.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bucket[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            arr[index] = i -bias;</span><br><span class="line">            bucket[i]--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = countingSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-8-5-算法分析"><a href="#6-8-5-算法分析" class="headerlink" title="6.8.5 算法分析"></a>6.8.5 算法分析</h3><p>当输入的元素是n 个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。 </p>
<p> ==<strong>最佳情况：T(n) = O(n+k)  最差情况：T(n) = O(n+k)  平均情况：T(n) = O(n+k)</strong>== </p>
<h2 id="6-9-桶排序（Bucket-Sort）"><a href="#6-9-桶排序（Bucket-Sort）" class="headerlink" title="6.9 桶排序（Bucket Sort）"></a>6.9 桶排序（Bucket Sort）</h2><h3 id="6-9-1-概述"><a href="#6-9-1-概述" class="headerlink" title="6.9.1 概述"></a>6.9.1 概述</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>
<p>桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排。</p>
<h3 id="6-9-2-算法描述"><a href="#6-9-2-算法描述" class="headerlink" title="6.9.2 算法描述"></a>6.9.2 算法描述</h3><ul>
<li><p>人为设置一个BucketSize，作为每个桶所能放置多少个不同数值（例如当BucketSize==5时，该桶可以存放｛1,2,3,4,5｝这几种数字，但是容量不限，即可以存放100个3）； </p>
</li>
<li><p>遍历输入数据，并且把数据一个一个放到对应的桶里去； </p>
</li>
<li><p>对每个不是空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序； </p>
</li>
<li><p>从不是空的桶里把排好序的数据拼接起来。  </p>
<p><strong>注意，如果递归使用桶排序为各个桶排序，则当桶数量为1时要手动减小BucketSize增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。</strong> </p>
</li>
</ul>
<h3 id="6-9-3-图片演示"><a href="#6-9-3-图片演示" class="headerlink" title="6.9.3 图片演示"></a>6.9.3 图片演示</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/zxoLaeCI28RgPBKvBRIiaribLhcBenhoVWvXPkViccgjmetibPRUWzib63lYHH8rBqbR2NBUkMCLTYExtVbXOnJMEsg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<h3 id="6-9-4-代码实现"><a href="#6-9-4-代码实现" class="headerlink" title="6.9.4 代码实现"></a>6.9.4 代码实现</h3>]]></content>
      <categories>
        <category>java</category>
        <category>排序算法总结</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>笔试题总结</title>
    <url>/2020/02/21/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-编程题"><a href="#1-编程题" class="headerlink" title="1.编程题"></a>1.编程题</h2><h3 id="1-1倒序数："><a href="#1-1倒序数：" class="headerlink" title="1.1倒序数："></a>1.1倒序数：</h3><p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。<br>给定 x = 123，返回 321 </p><p>给定 x = -123，返回 -321</p><p>思路；通过取余取得最后一位 然后除以十再取最后一位(相当于往前取一位) ,用一个数保存，每次取得都乘十并加上取得的数字（相当于往前挤一位），</p><a id="more"></a>


<pre><code>直至原数不能再被十整除或者反转结果已经溢出则结束循环</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.bigdata.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daoxu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">outNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = c; <span class="comment">//临时记录c 用于判断是否溢出</span></span><br><span class="line">            c = c * <span class="number">10</span>  + n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(c/<span class="number">10</span> != temp)&#123;<span class="comment">//如果c/10和临时记录并不相等，说明已经溢出了 结束循环</span></span><br><span class="line">                c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i = outNumber(n);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>c = c * 10  + n % 10</strong></p>
<p><strong>c = c * 10  + n % 10</strong></p>
<p><strong>c = c * 10  + n % 10</strong></p>
<p>真滴蠢！！！</p>
<h3 id="1-2跳台阶："><a href="#1-2跳台阶：" class="headerlink" title="1.2跳台阶："></a>1.2跳台阶：</h3><p> 一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">1</span> || target == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JumpFloor(target - <span class="number">1</span>)+JumpFloor(target -<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>笔试总结</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线编程之数据库SQL实战</title>
    <url>/2019/11/19/%E7%89%9B%E5%AE%A2%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="一、查询最晚入职员工的所有信息"><a href="#一、查询最晚入职员工的所有信息" class="headerlink" title="一、查询最晚入职员工的所有信息"></a>一、查询最晚入职员工的所有信息</h1><ul>
<li><strong>题目描述</strong></li>
</ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找最晚入职员工的所有信息</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure><a id="more"></a>


<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> hire_date = (<span class="keyword">select</span> <span class="keyword">max</span>(hire_date)<span class="keyword">from</span> employees);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>考察select语句的嵌套使用</p>
</li>
</ul>
<h1 id="二、查找入职员工时间排名倒数第三名的员工所有信息"><a href="#二、查找入职员工时间排名倒数第三名的员工所有信息" class="headerlink" title="二、查找入职员工时间排名倒数第三名的员工所有信息"></a>二、查找入职员工时间排名倒数第三名的员工所有信息</h1><ul>
<li><strong>题目描述</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找入职员工时间排名倒数第三的员工所有信息</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>*</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> </span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>order by作用：</p>
<p>对记录进行排序（默认升序），desc为降序，asc为升序。</p>
<p>limit作用：</p>
<p>用于限制显示的条数。</p>
<p>Limit [offset,] N<br> Offset: 偏移量,即跳过几行，0可不写<br> N: 取出条目</p>
<p><conter> <img src="https://s2.ax1x.com/2019/11/19/Mg0c01.png" alt="Mg0c01.png"></conter></p>
</li>
</ul>
<h1 id="三、查找当前薪水详情以及部门编号"><a href="#三、查找当前薪水详情以及部门编号" class="headerlink" title="三、查找当前薪水详情以及部门编号"></a>三、查找当前薪水详情以及部门编号</h1><ul>
<li><strong>题目描述</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找各个部门当前(to_date=&apos;9999-01-01&apos;)领导当前薪水详情以及其对应部门编号dept_no</span><br><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">`dept_no` char(4) NOT NULL,</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`salary` int(11) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salaries.*,dept_manager.dept_no </span><br><span class="line"><span class="keyword">from</span> salaries, dept_manager </span><br><span class="line"><span class="keyword">where</span> salaries.emp_no = dept_manager.emp_no</span><br><span class="line"><span class="keyword">and</span> salaries.to_date = <span class="string">"9999-01-01"</span></span><br><span class="line"><span class="keyword">and</span> dept_manager.to_date = <span class="string">"9999-01-01"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>多条件查询。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全综合实验篇</title>
    <url>/2020/06/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E7%AF%87/</url>
    <content><![CDATA[<h1 id="网络安全综合实验篇"><a href="#网络安全综合实验篇" class="headerlink" title="网络安全综合实验篇"></a>网络安全综合实验篇</h1><h2 id="1、实验要求"><a href="#1、实验要求" class="headerlink" title="1、实验要求"></a>1、实验要求</h2><ol>
<li>配置ACL，过滤具有某种特点的分组。</li>
<li>配置NAT。在企业内部结构化分层使用NAT地址。</li>
<li>实验测试一种网络攻击，比如SYN_Flood、MAC泛洪攻击或ARP攻击。</li>
<li>配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。</li>
<li>配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP VPN 或SSL VPN。</li>
</ol><a id="more"></a>
<h2 id="2、配置ACL，过滤具有某种特点的分组。"><a href="#2、配置ACL，过滤具有某种特点的分组。" class="headerlink" title="2、配置ACL，过滤具有某种特点的分组。"></a>2、配置ACL，过滤具有某种特点的分组。</h2><h3 id="2-1实验拓扑"><a href="#2-1实验拓扑" class="headerlink" title="2.1实验拓扑"></a>2.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJ1IHA.png" alt="tJ1IHA.png"></p>
<h3 id="2-2实验步骤"><a href="#2-2实验步骤" class="headerlink" title="2.2实验步骤"></a>2.2实验步骤</h3><h4 id="2-2-1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。"><a href="#2-2-1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。" class="headerlink" title="2.2.1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。"></a>2.2.1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。</h4><h4 id="2-2-2测试全网是否互通，PC间互Ping结果如下："><a href="#2-2-2测试全网是否互通，PC间互Ping结果如下：" class="headerlink" title="2.2.2测试全网是否互通，PC间互Ping结果如下："></a>2.2.2测试全网是否互通，PC间互Ping结果如下：</h4><p><img src="https://s1.ax1x.com/2020/06/01/tJ1q9f.png" alt="tJ1q9f.png"></p>
<h4 id="2-2-3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信"><a href="#2-2-3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信" class="headerlink" title="2.2.3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信"></a>2.2.3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信</h4><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p> <strong>在AR3的g0/0/1接口拒绝PC1的访问</strong> ，配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR3]acl</span> <span class="string">2000</span></span><br><span class="line"><span class="meta">[AR3-acl-basic-2000]rule</span> <span class="string">deny source 192.168.10.2 0</span></span><br><span class="line"><span class="attr">[AR3-acl-basic-2000]quit</span></span><br><span class="line"><span class="meta">[AR3]interface</span> <span class="string">GigabitEthernet0/0/1</span></span><br><span class="line"><span class="comment"># 在GigabitEthernet0/0/1接口调用</span></span><br><span class="line"><span class="meta">[AR3-GigabitEthernet0/0/1]traffic-filter</span> <span class="string">outbound acl 2000</span></span><br><span class="line"><span class="attr">[AR3-GigabitEthernet0/0/1]quit</span></span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><strong>PC1 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ39Nq.png" alt="tJ39Nq.png"></p>
<p><strong>PC2 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3iCV.png" alt="tJ3iCV.png"></p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p> <strong>在AR3上只允许PC2拒绝PC1</strong>，配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除法一配置</span></span><br><span class="line"><span class="meta">[AR3]undo</span> <span class="string">acl 200</span></span><br><span class="line"><span class="comment"># 允许PC2访问 拒绝PC1</span></span><br><span class="line"><span class="meta">[AR3]acl</span> <span class="string">2000</span></span><br><span class="line"><span class="meta">[AR3-acl-basic-2000]rule</span> <span class="string">permit source 192.168.20.2 0</span></span><br><span class="line"><span class="meta">[AR3-acl-basic-2000]rule</span> <span class="string">deny source any</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><strong>PC1 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ39Nq.png" alt="tJ39Nq.png"></p>
<p><strong>PC2 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3iCV.png" alt="tJ3iCV.png"></p>
<h4 id="2-2-4-AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信"><a href="#2-2-4-AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信" class="headerlink" title="2.2.4 AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信"></a>2.2.4 AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信</h4><ol>
<li><p>首先在AR3中设置telnet远程登陆，配置如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删掉原来的配置</span></span><br><span class="line"><span class="meta">[AR3]undo</span> <span class="string">acl 2000 </span></span><br><span class="line"><span class="comment"># 设置远程登陆</span></span><br><span class="line"><span class="meta">[AR3]user-interface</span> <span class="string">vty 0 4</span></span><br><span class="line"><span class="meta">[AR3-ui-vty0-4]authentication-mode</span> <span class="string">password</span></span><br><span class="line"><span class="attr">Please</span> <span class="string">configure the login password (maximum length 16):admin</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试远程登陆配置是否正确。</p>
<p>AR1中远程登陆AR3，结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3K4x.png" alt="tJ3K4x.png"></p>
<p>可见，能够登陆。</p>
</li>
<li><p>通过ACL配置实现AR1-&gt;AR3拒绝ping，但是可以远程登陆。</p>
<p>在AR2中做如下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]acl</span> <span class="string">3000</span></span><br><span class="line"><span class="meta">[AR2-acl-adv-3000]rule</span> <span class="string">deny icmp source 12.1.1.1 0 destination 24.1.1.2 0</span></span><br><span class="line"><span class="attr">[AR2-acl-adv-3000]quit</span></span><br><span class="line"><span class="meta">[AR2]interface</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[AR2-GigabitEthernet0/0/0]traffic-filter</span> <span class="string">inbound acl 3000</span></span><br><span class="line"><span class="attr">[AR2-GigabitEthernet0/0/0]quit</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ33vD.png" alt="tJ33vD.png"></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3NVA.png" alt="tJ3NVA.png"></p>
</li>
</ol>
<h2 id="3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。"><a href="#3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。" class="headerlink" title="3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。"></a>3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。</h2><h2 id="防火墙NAT配置"><a href="#防火墙NAT配置" class="headerlink" title="防火墙NAT配置"></a>防火墙NAT配置</h2><h3 id="3-1实验拓扑"><a href="#3-1实验拓扑" class="headerlink" title="3.1实验拓扑"></a>3.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJ3yrQ.png" alt="tJ3yrQ.png"></p>
<h3 id="3-2实验步骤"><a href="#3-2实验步骤" class="headerlink" title="3.2实验步骤"></a>3.2实验步骤</h3><h4 id="3-2-1根据拓扑配置路由器、防火墙、PC的ip及掩码。"><a href="#3-2-1根据拓扑配置路由器、防火墙、PC的ip及掩码。" class="headerlink" title="3.2.1根据拓扑配置路由器、防火墙、PC的ip及掩码。"></a>3.2.1根据拓扑配置路由器、防火墙、PC的ip及掩码。</h4><h4 id="3-2-2在AR1中配置一条去往防火墙GE端口的默认路由。"><a href="#3-2-2在AR1中配置一条去往防火墙GE端口的默认路由。" class="headerlink" title="3.2.2在AR1中配置一条去往防火墙GE端口的默认路由。"></a>3.2.2在AR1中配置一条去往防火墙GE端口的默认路由。</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1]ip</span> <span class="string">route-static 0.0.0.0 0.0.0.0 11.0.0.1</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-3在防火墙中将端口加入对应的trust、dmz、untrust域中"><a href="#3-2-3在防火墙中将端口加入对应的trust、dmz、untrust域中" class="headerlink" title="3.2.3在防火墙中将端口加入对应的trust、dmz、untrust域中"></a>3.2.3在防火墙中将端口加入对应的trust、dmz、untrust域中</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[SRG]firewall</span> <span class="string">zone trust</span></span><br><span class="line"><span class="meta">[SRG-zone-trust]add</span> <span class="string">interface g0/0/1 将接口加入trust区域（默认安全级别85）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[SRG]firewall</span> <span class="string">zone trust</span></span><br><span class="line"><span class="meta">[SRG-zone-trust]add</span> <span class="string">interface g0/0/3将接口加入dmz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[SRG]firewall</span> <span class="string">zone untrust</span></span><br><span class="line"><span class="meta">[SRG-zone-untrust]add</span> <span class="string">interface g0/0/2将接口键入untrust区域（安全级别5）</span></span><br><span class="line"><span class="meta">[SRG]ip</span> <span class="string">route-static 192.168.10.0 24 11.0.0.2</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-4静态NAT：一对一"><a href="#3-2-4静态NAT：一对一" class="headerlink" title="3.2.4静态NAT：一对一"></a>3.2.4静态NAT：一对一</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置将内网地址192.168.10.10 映射到12.0.0.10地址</span></span><br><span class="line"><span class="meta">SRG]nat</span> <span class="string">server global 12.0.0.10 inside 192.168.10.10</span></span><br><span class="line"><span class="meta">[SRG]policy</span> <span class="string">interzone trust untrust outbound  </span></span><br><span class="line"><span class="comment">#进入trust到untrust出口方向策略</span></span><br><span class="line"><span class="meta">[SRG-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1 创建一个策略</span></span><br><span class="line"><span class="meta">[SRG-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">service service-set icmp 服务为ICMP协议</span></span><br><span class="line"><span class="meta">[SRG-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string"> permit</span></span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>PC1 Ping AR2 GE0/0/0端口</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ35xU.png" alt="tJ35xU.png"></p>
<p>AR2 GE0/0/0端口捕获报文如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ37qJ.png" alt="tJ37qJ.png"></p>
<p>发现PC1的ip地址为12.0.0.10，将内网ip192.168.10.10映射为公网ip12.0.0.10。</p>
<h4 id="3-2-5动态NAT：多对多（服务器）"><a href="#3-2-5动态NAT：多对多（服务器）" class="headerlink" title="3.2.5动态NAT：多对多（服务器）"></a>3.2.5动态NAT：多对多（服务器）</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除静态NAT</span></span><br><span class="line"><span class="meta">[SRG]undo</span> <span class="string">nat server gloabl 12.0.0.10 inside 192.168.10.10</span></span><br><span class="line"><span class="comment"># 创建nat地址池</span></span><br><span class="line"><span class="meta">[SRG]nat</span> <span class="string">address-group 1 12.0.0.20 12.0.0.50  </span></span><br><span class="line"><span class="meta">[SRG]nat-policy</span> <span class="string">interzone trust untrust outbound</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 配置源IP地址</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">source 192.168.10.0 mask 24 </span></span><br><span class="line"><span class="comment"># 配置动作为源IP进行nat</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string">source-nat </span></span><br><span class="line"><span class="comment"># 关联nat地址池</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-1]address-group 1</span> <span class="string">no-pat</span></span><br></pre></td></tr></table></figure>

<p>测试：PC1 Ping AR2 GE0/0/0端口，并在AR2 GE0/0/0端口捕获报文：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3XPx.png" alt="tJ3XPx.png"></p>
<p>将内网ip192.168.10.10映射为公网ip12.0.0.20。</p>
<p>修改PC1 ip地址为192.168.10.11，在进行测试结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ8UL4.png" alt="tJ8UL4.png"></p>
<p>将内网ip192.168.10.11映射为公网ip12.0.0.21。</p>
<h4 id="3-2-6动态NAT：一对多（最常用）"><a href="#3-2-6动态NAT：一对多（最常用）" class="headerlink" title="3.2.6动态NAT：一对多（最常用）"></a>3.2.6动态NAT：一对多（最常用）</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[SRG]nat-policy</span> <span class="string">interzone trust untrust outbound</span></span><br><span class="line"><span class="comment"># 删除nat多对多配置</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound]undo</span> <span class="string">policy 1</span></span><br><span class="line"><span class="comment"># 配置一对多</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">2</span></span><br><span class="line"><span class="comment"># 配置源IP地址</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-2]policy</span> <span class="string">source 192.168.10.0 mask 24 </span></span><br><span class="line"><span class="comment"># 配置动作为源IP进行nat</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-2]action</span> <span class="string">source-nat  </span></span><br><span class="line"><span class="comment"># 配置要转换的地址为g/0/1</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-2]easy-ip GigabitEthernet</span> <span class="string">0/0/1</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>PC1 Ping AR2 GE0/0/0端口，并在AR2 GE0/0/0端口捕获报文：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJkgf.png" alt="tJJkgf.png"></p>
<p>将内网ip192.168.10.11映射为公网ip12.0.0.1。</p>
<p>修改PC1 ip地址为192.168.10.13，在进行测试结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJuUs.png" alt="tJJuUs.png"></p>
<p>将内网ip192.168.10.13映射为公网ip12.0.0.1。</p>
<p>实现将多个内网ip映射到同一公网ip下。</p>
<h2 id="4、实验测试一种网络攻击，比如SYN-Flood、MAC泛洪攻击或ARP攻击。"><a href="#4、实验测试一种网络攻击，比如SYN-Flood、MAC泛洪攻击或ARP攻击。" class="headerlink" title="4、实验测试一种网络攻击，比如SYN_Flood、MAC泛洪攻击或ARP攻击。"></a>4、实验测试一种网络攻击，比如SYN_Flood、MAC泛洪攻击或ARP攻击。</h2><h2 id="选择：MAC地址欺骗与MAC地址泛洪攻击"><a href="#选择：MAC地址欺骗与MAC地址泛洪攻击" class="headerlink" title="选择：MAC地址欺骗与MAC地址泛洪攻击"></a>选择：MAC地址欺骗与MAC地址泛洪攻击</h2><h3 id="4-1实验拓扑"><a href="#4-1实验拓扑" class="headerlink" title="4.1实验拓扑"></a>4.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJJQCq.png" alt="tJJQCq.png"></p>
<p>各个设备ip、MAC均为真实存在的，没有造假嫌疑，如下所示：</p>
<ul>
<li><strong>网关：</strong></li>
</ul>
<p><a href="https://imgchr.com/i/tJJGKU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/01/tJJGKU.png" alt="tJJGKU.png"></a></p>
<ul>
<li><p><strong>Win10：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJyrD.png" alt="tJJyrD.png"></p>
</li>
<li><p><strong>Win7：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJfPI.png" alt="tJJfPI.png"></p>
</li>
</ul>
<h3 id="4-2实验步骤"><a href="#4-2实验步骤" class="headerlink" title="4.2实验步骤"></a>4.2实验步骤</h3><h4 id="4-2-1MAC诈骗"><a href="#4-2-1MAC诈骗" class="headerlink" title="4.2.1MAC诈骗"></a>4.2.1MAC诈骗</h4><ol>
<li><p>攻击原理：</p>
<p> MAC地址欺骗是数据链路层攻击，它是利用<strong>交换机端口学习的漏洞</strong>，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。 </p>
</li>
<li><p>提出两个问题，交换机的端口学习是如何进行的？有什么漏洞？思考一下…</p>
<ul>
<li><p>首先，清空并查看交换机LSW1的CAM表，命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清空</span></span><br><span class="line"><span class="meta">[Huawei]undo</span> <span class="string">mac-address all</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line"><span class="meta">【Huawei】display</span> <span class="string">mac-address</span></span><br><span class="line"><span class="attr">[Huawei]</span></span><br></pre></td></tr></table></figure>

<p>可见CAM表已被清空。</p>
</li>
<li><p>我们从PC1上向PC2发一个构造的udp包，如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJvR0.png" alt="tJJvR0.png"></p>
</li>
<li><p>在交换机上查询CAM表，结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJYuLD.png" alt="tJYuLD.png"></p>
<p>发现已经学习到一条记录，MAC地址以及对应的端口号。</p>
</li>
<li><p>再构造一个数据包，由PC1发给PC2，将源MAC地址改位Win10的MAC地址。</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJY3FA.png" alt="tJY3FA.png"></p>
</li>
<li><p>再次查看CAM表。</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJYUOS.png" alt="tJYUOS.png"></p>
<p>发现多了两天记录分别是Win10的MAC地址和网关的MAC地址及对应端口号。在此本应该只是学到Win10的MAC地址及对应端口号，关于学到网管记录的猜测是，在此期间交换机与网管进行某种数据交换。从而交换机学到了关于网关的记录。</p>
</li>
</ul>
</li>
<li><p>明白了交换机端口学习的原理，现在来伪造数据包，造成MAC地址欺骗，同时准备以下三个条件：</p>
<ol>
<li>在PC1上伪造源MAC为Win10的MAC地址，不停的发UDP包给PC2。</li>
<li>在LSW1的 Ehternet 0/0/1和Ethenet 0/0/3端口同时抓包 。</li>
<li>在PC2构造PC2到Win10的数据包。</li>
</ol>
<p>抓包结果如下：</p>
<p><strong>Ehternet 0/0/1:</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJY6S0.png" alt="tJY6S0.png"></p>
<p><strong>Ehternet 0/0/3:</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJYHl6.png" alt="tJYHl6.png"></p>
<p>由此可见，原本由PC2发给Win10的数据包，被PC1欺骗交换机后，交换机将报文转发给了PC1，这样PC1成功完成了MAC地址欺骗攻击。 </p>
</li>
</ol>
<h4 id="4-2-2MAC地址洪泛攻击"><a href="#4-2-2MAC地址洪泛攻击" class="headerlink" title="4.2.2MAC地址洪泛攻击"></a>4.2.2MAC地址洪泛攻击</h4><ol>
<li><p>1、漏洞原理<br>每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目的站的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。</p>
</li>
<li><p>攻击过程<br>以kali为攻击机，使用macof命令向网络中发送大量网络不存在的源mac地址，堵塞交换机的CAM表。 </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">lcx@kali</span>:<span class="string">~$apt-get install dsniff	#安装macof</span></span><br><span class="line"><span class="meta">lcx@kali</span>:<span class="string">~$ macof</span></span><br><span class="line"><span class="attr">de</span>:<span class="string">f0:1b:1c:6f:8e ba:8d:41:6:3d:7a 0.0.0.0.25215 &gt; 0.0.0.0.49125: S 475078686:475078686(0) win 512</span></span><br><span class="line"><span class="attr">ea</span>:<span class="string">38:be:33:e5:aa 4d:ce:29:60:3c:2f 0.0.0.0.39934 &gt; 0.0.0.0.238: S 1559529363:1559529363(0) win 512</span></span><br><span class="line"><span class="attr">b5</span>:<span class="string">ea:9a:4:2d:1c 3:33:5f:73:fa:d2 0.0.0.0.58068 &gt; 0.0.0.0.18986: S 697518561:697518561(0) win 512</span></span><br><span class="line"><span class="attr">31</span>:<span class="string">1f:6c:72:6f:80 7c:a8:df:55:99:25 0.0.0.0.29320 &gt; 0.0.0.0.56619: S 444895901:444895901(0) win 512</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">47:e7:37:ca:19 a9:73:33:66:61:2d 0.0.0.0.54528 &gt; 0.0.0.0.25861: S 993143653:993143653(0) win 512</span></span><br><span class="line"><span class="attr">3b</span>:<span class="string">75:bd:54:e7:55 4d:d1:68:4:5a:f0 0.0.0.0.28814 &gt; 0.0.0.0.35766: S 1430997091:1430997091(0) win 512</span></span><br><span class="line"><span class="attr">e7</span>:<span class="string">81:bb:79:4b:af df:ed:92:76:fe:79 0.0.0.0.59194 &gt; 0.0.0.0.18284: S 1586191808:1586191808(0) win 512</span></span><br><span class="line"><span class="attr">9b</span>:<span class="string">28:c8:4d:35:bb 4c:d2:d9:5b:3f:d0 0.0.0.0.46568 &gt; 0.0.0.0.15767: S 1249153469:1249153469(0) win 512</span></span><br><span class="line"><span class="attr">13</span>:<span class="string">6:d:71:2a:26 5f:82:7:70:d6:4c 0.0.0.0.41050 &gt; 0.0.0.0.34579: S 1375163656:1375163656(0) win 512</span></span><br><span class="line"><span class="attr">94</span>:<span class="string">cb:82:1f:a2:22 2e:4:26:69:88:cf 0.0.0.0.44712 &gt; 0.0.0.0.33754: S 1652107051:1652107051(0) win 512</span></span><br><span class="line"><span class="attr">3f</span>:<span class="string">7c:f7:1b:7:80 13:53:17:53:5c:c6 0.0.0.0.48520 &gt; 0.0.0.0.34351: S 585705839:585705839(0) win 512</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>此时在交换机查看CAM表。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[Huawei]display</span> <span class="string">mac-address</span></span><br><span class="line"><span class="attr">MAC</span> <span class="string">address table of slot 0:</span></span><br><span class="line"><span class="attr">-----------------------------------------------------------------</span></span><br><span class="line"><span class="attr">MAC</span> <span class="string">Address    VLAN/       PEVLAN CEVLAN Port            Type      LSP/LSR-ID  </span></span><br><span class="line">               <span class="meta">VSI/SI</span>                                              <span class="string">MAC-Tunnel  </span></span><br><span class="line"><span class="attr">-----------------------------------------------------------------</span></span><br><span class="line"><span class="meta">000c-290f-5de0</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">5489-984f-5035</span> <span class="string">1           -      -      Eth0/0/2        dynamic   0/-         </span></span><br><span class="line"><span class="meta">000c-2926-219e</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">f4ee-141d-58de</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">7c67-a298-eb12</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">000c-291b-7e0d</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">0050-56ef-dc6d</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">000c-296c-fc6e</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">feef-5464-ecad</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">eaaa-9473-1926</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">22a6-7027-c5f4</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">7019-0f73-c876</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">2eef-313b-f53f</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">5682-5743-45c8</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">7670-c168-505e</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">8aaa-ba4f-489d</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">a6a8-2d2a-73a7</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">120c-2355-b4b5</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">5833-be1f-0aa6</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">f438-0117-c0dc</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">dee0-7b40-1207</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">4af0-244c-25d9</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">f4d0-e92b-4fd5</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">2859-7003-3924</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">86ea-0825-52a2</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">a4fd-c13a-8c3c</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line">  <span class="meta">----</span> <span class="string">More ----</span></span><br></pre></td></tr></table></figure>

<p>发现表中大量陌生MAC地址记录，同时根据端口绑定可以看到绑定来自Ethernet0/0/3，说明这个攻击来自这接口。 </p>
</li>
</ol>
<h2 id="5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP-VPN-或SSL-VPN。"><a href="#5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP-VPN-或SSL-VPN。" class="headerlink" title="5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP VPN 或SSL VPN。"></a>5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP VPN 或SSL VPN。</h2><p>采用了IPSec vpn技术、NAT等技术，搭建了一个简单的总公司与分公司的网络环境，实现总公司与分公司的正常访问 。</p>
<h3 id="5-1实验拓扑"><a href="#5-1实验拓扑" class="headerlink" title="5.1实验拓扑"></a>5.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJt9pt.png" alt="tJt9pt.png"></p>
<h3 id="5-2实验目的"><a href="#5-2实验目的" class="headerlink" title="5.2实验目的"></a>5.2实验目的</h3><p>  FW1和FW2模拟企业边缘设备，分别在2台设备上配置NAT和IPsec vpn实现2边私网可以通过vpn互相通信 </p>
<h3 id="5-3实验步骤"><a href="#5-3实验步骤" class="headerlink" title="5.3实验步骤"></a>5.3实验步骤</h3><h4 id="5-3-1AR4配置"><a href="#5-3-1AR4配置" class="headerlink" title="5.3.1AR4配置"></a>5.3.1AR4配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR4]int</span> <span class="string">g0/0/0</span></span><br><span class="line"><span class="meta">[AR4-GigabitEthernet0/0/1]ip</span> <span class="string">add 100.0.0.2 30</span></span><br><span class="line"><span class="meta">[AR4-GigabitEthernet0/0/1]int</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="meta">[AR4-GigabitEthernet0/0/0]ip</span> <span class="string">add 200.0.0.2 30</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-FW1配置"><a href="#5-3-2-FW1配置" class="headerlink" title="5.3.2 FW1配置"></a>5.3.2 FW1配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[FW1]firewall</span> <span class="string">zone trust          //配置trust区域</span></span><br><span class="line"><span class="meta">[FW1-zone-trust]add</span> <span class="string">interface g0/0/0    //将接口加入trust区域</span></span><br><span class="line"><span class="attr">[FW1-zone-trust]quit</span></span><br><span class="line"><span class="meta">[FW1]firewall</span> <span class="string">zone untrust           //配置untrust区域</span></span><br><span class="line"><span class="meta">[FW1-zone-untrust]add</span> <span class="string">int g0/0/1          //将接口加入untrust区域</span></span><br><span class="line"><span class="attr">[FW1-zone-untrust]quit</span></span><br><span class="line"><span class="meta">[FW1]int</span> <span class="string">g0/0/0</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/0]ip</span> <span class="string">add 10.0.0.254 8</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/0]int</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/1]ip</span> <span class="string">add 100.0.0.1 30</span></span><br><span class="line"><span class="attr">[FW1-GigabitEthernet0/0/1]quit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置NAT</span></span><br><span class="line"><span class="meta">[FW1]ip</span> <span class="string">route-static 0.0.0.0 0.0.0.0 10.0.0.2   //配置默认路由上公网</span></span><br><span class="line"><span class="meta">[FW1]nat-policy</span> <span class="string">interzone trust untrust outbound </span></span><br><span class="line"><span class="attr">//进入trust到untrust区域out方向的策略视图</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1     //创建一个策略</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">source 10.0.0.0 0.255.255.255</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">destination 192.168.1.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string">no-nat </span></span><br><span class="line"><span class="attr">//以上三条命令意思是不允许将源为10.0.0.0/8网段目标为192.168.1.0/24网段的数据包进行NAT</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[FW1-nat-policy-interzone-trust-untrust-outbound-1]quit</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">2  //创建策略2</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-2]action</span> <span class="string">source-nat</span></span><br><span class="line"><span class="attr">//允许对源IP进行NAT</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-2]easy-ip</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="attr">//对接口G0/0/1地址复用</span></span><br><span class="line"><span class="attr">[FW1-nat-policy-interzone-trust-untrust-outbound-2]quit</span></span><br><span class="line"><span class="attr">[FW1-nat-policy-interzone-trust-untrust-outbound]quit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置IPSec ×××</span></span><br><span class="line"><span class="attr">阶段一</span></span><br><span class="line"><span class="meta">[FW1]ike</span> <span class="string">proposal 1     //配置一个安全提议</span></span><br><span class="line"><span class="meta">[FW1-ike-proposal-1]authentication-method</span> <span class="string">pre-share   //配置IKE认证方式为预共享密钥</span></span><br><span class="line"><span class="meta">[FW-ike-proposal-1]authentication-algorithm</span> <span class="string">sha1   //配置IKE认证算法为sha1</span></span><br><span class="line"><span class="meta">[FW1-ike-proposal-1]integrity-algorithm</span> <span class="string">aes-xcbc-96  //配置IKE完整性算法</span></span><br><span class="line"><span class="meta">[FW1-ike-proposal-1]dh</span> <span class="string">group2  //配置IKE密钥协商DH组</span></span><br><span class="line"><span class="attr">[FW1-ike-proposal-1]quit</span></span><br><span class="line"><span class="meta">[FW]ike</span> <span class="string">peer FW2             //创建一个IKE对等体名字为FW2</span></span><br><span class="line"><span class="meta">[FW1-ike-peer-usg-2]pre-shared-key</span> <span class="string">123.abc    //配置预共享密钥</span></span><br><span class="line"><span class="meta">[FW1-ike-peer-usg-2]remote-address</span> <span class="string">200.0.0.1  //配置对等体IP地址</span></span><br><span class="line"><span class="meta">[FW1-ike-peer-usg-2]ike-proposal</span> <span class="string">1       //调用ike安全提议</span></span><br><span class="line"><span class="attr">[FW1-ike-peer-usg-2]quit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">阶段二</span></span><br><span class="line"><span class="meta">[FW1]ipsec</span> <span class="string">proposal test        //配置一个ipsec安全提议</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]encapsulation-mode</span> <span class="string">tunnel    //封装方式采用隧道</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]transform</span> <span class="string">esp    //配置IPSEC安全协议为ESP</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]esp</span> <span class="string">encryption-algorithm aes   //配置ESP协议加密算法为aes</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]esp</span> <span class="string">authentication-algorithm sha1  //配置ESP协议认证算法</span></span><br><span class="line"><span class="attr">[FW1-ipsec-proposal-test]quit</span></span><br><span class="line"><span class="meta">[FW1]acl</span> <span class="string">3000         //创建一个ACL定义感兴趣流</span></span><br><span class="line"><span class="meta">[FW1-acl-adv-3000]rule</span> <span class="string">permit ip source 10.0.0.0 0.255.255.255 destination 192.168.1.0 0.0.0.255</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[FW1]ipsec</span> <span class="string">policy map 1 isakmp    //创建一个安全策略，名称为map</span></span><br><span class="line"><span class="meta">[FW1-ipsec-policy-isakmp-map-1]ike-peer</span> <span class="string">FW2    //调用ike对等体</span></span><br><span class="line"><span class="meta">[FW1-ipsec-policy-isakmp-map-1]proposal</span> <span class="string">test     //调用IPsec安全提议</span></span><br><span class="line"><span class="meta">[FW1-ipsec-policy-isakmp-map-1]security</span> <span class="string">acl 3000   //配置感兴趣流</span></span><br><span class="line"><span class="attr">[FW1-ipsec-policy-isakmp-map-1]quit</span></span><br><span class="line"><span class="meta">[FW1]int</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/1]ipsec</span> <span class="string">policy map     //在外网口上调用安全策略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#区域间策略配置</span></span><br><span class="line"><span class="meta">[FW1]policy</span> <span class="string">interzone trust untrust outbound .</span></span><br><span class="line"><span class="attr">//进入trust到untrust区域out方向策略视图</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1    //创建策略</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string">permit  </span></span><br><span class="line"><span class="meta">//允许trust区域所有主机访问untrust区域</span> <span class="string"></span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-outbound-1]quit</span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-outbound]quit</span></span><br><span class="line"><span class="meta">[FW1]policy</span> <span class="string">interzone trust untrust inbound </span></span><br><span class="line"><span class="attr">//进入trust区域到untrust区域的in方向策略视图</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound]policy</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound-1]policy</span> <span class="string">source 192.168.1.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound-1]policy</span> <span class="string">destination 10.0.0.0 0.255.255.255</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound-1]action</span> <span class="string">permit </span></span><br><span class="line"><span class="attr">//以上命令为允许数据包源地址为192.168.1.0/24网段和目标地址为10.0.0.0/8网段的流量过</span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-inbound-1]quit</span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-inbound]quit</span></span><br><span class="line"><span class="meta">[FW1]policy</span> <span class="string">interzone local untrust inbound</span></span><br><span class="line"><span class="attr">//进入local区域到untrust区域的in方向策略视图</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound]policy</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound-1]policy</span> <span class="string">source 200.0.0.1 0</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound-1]policy</span> <span class="string">destination 100.0.0.1 0</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound-1]action</span> <span class="string">permit </span></span><br><span class="line"><span class="attr">//允许源地址是200.0.0.1目标地址是100.0.0.1的数据包访问</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-3FW2配置"><a href="#5-3-3FW2配置" class="headerlink" title="5.3.3FW2配置"></a>5.3.3FW2配置</h4><p> <strong>FW2配置和FW1相同，只需调整源IP和目标IP即可</strong>。 </p>
<h4 id="5-3-4测试"><a href="#5-3-4测试" class="headerlink" title="5.3.4测试"></a>5.3.4测试</h4><p>总公司PC Ping 分公司PC 结果如下：ping</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJtthR.png" alt="tJtthR.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>网络安全实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工程课程设计</title>
    <url>/2020/06/17/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="一、课程设计的目的及任务"><a href="#一、课程设计的目的及任务" class="headerlink" title="一、课程设计的目的及任务"></a>一、课程设计的目的及任务</h1><p>网络工程课程设计是一门综合性实践课程，其包括网络工程设计和网络管理与维护的实践内容，其目的是：使学生在学习网络工程和网络管理的基础上，学习并掌握企业网及互联网工程设计、实施、管理和维护的基本知识和方法，培养学生综合运用所学的专业基础理论、基本技能和专业知识分析问题和解决工程设计问题的能力，培养学生调查研究，查阅技术文献、资料、手册，进行程序设计及编写技术文件的基本能力。</p><a id="more"></a>
<h1 id="二、课程设计的基本要求"><a href="#二、课程设计的基本要求" class="headerlink" title="二、课程设计的基本要求"></a>二、课程设计的基本要求</h1><p>要求学生在教师指导下学生独立完成设计任务，通过课程设计能够掌握网络工程和网络管理及维护的基本方法；熟悉二层交换机、三层交换机、路由器、防火墙的使用；熟悉STP（Spanning Tree Protocol）的配置、交换机端口聚合、VLAN设置、跨交换机VLAN的建立与管理、二层交换机管理地址设置、三层交换机虚接口设置、配置静态路由、配置默认路由、特定主机路由、RIP路由协议配置、OSPF路由协议配置；巩固和加深对理论课中知识的理解，综合运用所学知识完成一个小型企业网系统的设计。此外，在Windows或Linux安装基本网络服务，诸如Web、FTP、E-mail、DNS、DHCP、Telnet、AAA服务。能够通过SNMP协议对建立的网络进行管理。熟悉ASN.1编码规则；掌握在网管设备上配置SNMP Agent；SNMP协议工作原理验证与分析；RMON原理与配置；通过网管软件查询、设置MIB对象；配置Windows SNMP服务，通过Windows SNMP服务查询、设置Windows中MIB对象，用网络管理软件管理网络。</p>
<p><strong>实验部分要求：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VLAN设置</span><br><span class="line">跨交换机VLAN设置</span><br><span class="line">交换机端口聚合</span><br><span class="line">STP（Spanning Tree Protocol）的配置</span><br><span class="line">交换机端口聚合</span><br><span class="line">三层交换机虚接口设置</span><br><span class="line">配置静态路由、默认路由、特定主机路由</span><br><span class="line">配置动态RIP</span><br><span class="line">配置动态OSPF</span><br><span class="line">配置DHCP中继代理</span><br><span class="line">配置ACL、NAT</span><br><span class="line">配置WiFi网络</span><br><span class="line">配置防火墙</span><br><span class="line">配置Web、FTP、E-mail、DNS、Telnet、DHCP服务器</span><br><span class="line">配置AAA服务器</span><br><span class="line">配置SNMP Agent</span><br><span class="line">查询、设置MIB对象</span><br><span class="line">SNMP协议工作原理验证与分析</span><br><span class="line">RMON原理与配置</span><br><span class="line">配置Windows SNMP服务</span><br><span class="line">查询、设置Windows中MIB对象</span><br><span class="line">用网络管理软件管理网络</span><br></pre></td></tr></table></figure>

<h1 id="三、实验拓扑设计"><a href="#三、实验拓扑设计" class="headerlink" title="三、实验拓扑设计"></a>三、实验拓扑设计</h1><h2 id="3-1设计思路"><a href="#3-1设计思路" class="headerlink" title="3.1设计思路"></a>3.1设计思路</h2><p>对于小型企业系统设计，以防火墙为切入点，防火墙将网络划分为三个区域：Untrust、DMZ、</p>
<p>Trust。</p>
<p><strong>untrust(不信任域):</strong>低级安全区域，安全优先级为5通常用来定义Internet等不安全的网</p>
<p>络，用于网络入口线的接入。</p>
<p><strong>dmz(隔离区):</strong>中级安全区域，安全优先级为50通常用来定义内部服务器所在网络作用是把WEB,E-</p>
<p>mail,等允许外部访问的服务器单独接在该区端口，使整个需要保护的内部网络接在信任区端口</p>
<p>后，不允许任何访问，实现内外网分离，达到用户需求。DMZ可以理解为一个不同于外网或内网</p>
<p>的特殊网络区域，DMZ内通常放置一些不含机密信息的公用服务器，比如Web、Mail、FTP等。</p>
<p>这样来自外网的访问者可以访问DMZ中的服务，但不可能接触到存放在内网中的公司机密或私人</p>
<p>信息等，即使DMZ中服务器受到破坏，也不会对内网中的机密信息造成影响。</p>
<p><strong>trust(信任域):</strong>高级级安全区域，安全优先级为85通常用来定义内部用户所在的网络，也可以理</p>
<p>解为应该是防护最严密的地区。</p>
<p>将企业的入口路由器放置防护墙的Untrust区域中，并在路由器上进行SNMP配置，方便进行管</p>
<p>理。在DMZ区域，放置企业内网服务器，存放的服务器有FTP服务器、WEB服务器、VPN服务</p>
<p>器。其中除了FTP服务器是在ensp中实现的外，其他服务均在linux虚拟机中实现，通过云连接至</p>
<p>linux服务器。linux服务器中又配置了SSH（安全外壳协议）服务，可供管理员通过SSH远程登陆</p>
<p>服务器进行修改、配置等操作。在Trust区域中，针对企业内部不同的部门 划分出多个模块 首先</p>
<p>是IP地址的使用，针对内网多个设备的情况下使用企业私网地址，一是可以有效减少对IP地址的</p>
<p>资金投入，二是针对部门能够有较为合理的分配模式和规划方案。其次，对于企业整体而言，内</p>
<p>部网络的相互通信是保证企业工作效率的首要条件和要求，针对各类部门工作性质的不同，企业</p>
<p>中不同子网的通信能力也有所区别。 所以，我们在中间核心部门中配置了DHCP服务来保证员工</p>
<p>使用每一台设备拥有一个独立的私网IP，并采用OSPF协议使得这些设备能够进行相互通信，确保</p>
<p>员工即使跨部门工作也不会有太多的麻烦。对于企业内部的机密部门，我们使用了更加可靠的方</p>
<p>式来让其中的员工和设备进行工作，为保证网络供应稳定性，在拓扑中设计了冗余链路，从而出</p>
<p>现了环路状况，为解环路所产生的广播风暴问题，在相应得到交换机上配置STP（baiSpanning </p>
<p>Tree Protocol 生成树协议），因此，这一部分是无法和企业内部的其他部门进行直接通信的。最</p>
<p>后考虑到企业文化，针对使用移动端工作的员工，内部网络中同样配置了WLAN，使得企业的工</p>
<p>作形式不完全局限于传统的设备。</p>
<h2 id="3-2拓扑图"><a href="#3-2拓扑图" class="headerlink" title="3.2拓扑图"></a>3.2拓扑图</h2><p><img src="https://i.loli.net/2020/06/17/MJadei3sjVrgFvu.png" alt="image-20200617220633273"></p>
<h1 id="四、实验步骤、配置及测试"><a href="#四、实验步骤、配置及测试" class="headerlink" title="四、实验步骤、配置及测试"></a>四、实验步骤、配置及测试</h1><h2 id="4-1Trust区域"><a href="#4-1Trust区域" class="headerlink" title="4.1Trust区域"></a>4.1Trust区域</h2><h3 id="4-1-1-WLAN"><a href="#4-1-1-WLAN" class="headerlink" title="4.1.1 WLAN"></a>4.1.1 WLAN</h3><p>WLAN部分由一个AC，一个核心交换机及数个AP构成。其中，在核心交换机上还额外配置了动态</p>
<p>dhcp，ospf,nat等配置，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AC:</span><br><span class="line">[AC6005]int Vlanif 1</span><br><span class="line">[AC6005-Vlanif1]ip ad 10.1.15.1 24</span><br><span class="line">[AC6005]capwap source interface Vlanif 1</span><br><span class="line">[AC6005]wlan</span><br><span class="line">[AC6005-wlan-view]ap auth-mode no-auth</span><br><span class="line">[AC6005-wlan-view]ssid-profile name ssid</span><br><span class="line">[AC6005-wlan-prof-ssid]ssid huawei </span><br><span class="line">[AC6005-wlan-view]vap-profile name vap</span><br><span class="line">[AC6005-wlan-prof-vap]service-vlan vlan 100</span><br><span class="line">[AC6005-wlan-prof-vap]ssid-profile ssid</span><br><span class="line">[AC6005-wlan-view]rrm-profile name default</span><br><span class="line">[AC6005-wlan-prof-default]calibrate auto-txpower-select disable</span><br><span class="line">[AC6005-wlan-view]ap-group name default</span><br><span class="line">[AC6005-wlan-ap-group-default]radio 0</span><br><span class="line">[AC6005-wlan-group-default]vap-profile vap wlan 1</span><br><span class="line"></span><br><span class="line">LSW9:</span><br><span class="line">[S1]vlan 30</span><br><span class="line">[S1]vlan 300</span><br><span class="line">[S1]DHCP enable</span><br><span class="line">[S1]int g0/0/1</span><br><span class="line">[S1-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/1]port trunk allow-pass vlan 300 30</span><br><span class="line">[S1]int g0/0/2</span><br><span class="line">[S1-GigabitEthernet0/0/2]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/2]port trunk allow-pass vlan 300</span><br><span class="line">[S1]int g0/0/3</span><br><span class="line">[S1-GigabitEthernet0/0/3]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/3]port trunk allow-pass vlan 300</span><br><span class="line">[S1]int g0/0/4</span><br><span class="line">[S1-GigabitEthernet0/0/4]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/4]port trunk allow-pass vlan 300</span><br><span class="line">[S1]int Vlanif 300</span><br><span class="line">[S1-Vlanif300]ip ad 10.1.30.254 24</span><br><span class="line">[S1-Vlanif300]dhcp select interface</span><br><span class="line">[S1]int Vlanif 30</span><br><span class="line">[S1-Vlanif30]ip ad 10.1.3.10 24</span><br><span class="line">[S1-Vlanif30]dhcp select interface</span><br><span class="line">[S1]int Vlanif 1</span><br><span class="line">[S1-Vlanif1]ip ad 10.1.15.254 24</span><br><span class="line">[S1-Vlanif1]dhcp select interface</span><br><span class="line">[S1]ospf 1</span><br><span class="line">[S1-ospf-1]area 0</span><br><span class="line">[S1-ospf-1-area-0.0.0.0]net 10.1.3.0 0.0.0.255</span><br><span class="line">[S1-ospf-1-area-0.0.0.0]net 10.1.30.0 0.0.0.255</span><br></pre></td></tr></table></figure>



<h3 id="4-1-2-VLAN-动态DHCP-OSPF综合配置"><a href="#4-1-2-VLAN-动态DHCP-OSPF综合配置" class="headerlink" title="4.1.2 VLAN+动态DHCP+OSPF综合配置"></a>4.1.2 VLAN+动态DHCP+OSPF综合配置</h3><p>以LSW1设备所在区域为例，其余相同配置区域均与该区域类似，故后续不再赘述：</p>
<p>首先配置VLAN，配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]Vlan batch 40 401 402</span><br><span class="line">[Huawei]int vlanif 40</span><br><span class="line">[Huawei-Vlanif40]ip address 10.1.4.10 24</span><br><span class="line">[Huawei]int vlan 401</span><br><span class="line">[Huawei-Vlanif401]ip address 10.1.41.1 24</span><br><span class="line">[Huawei]int vlan 402</span><br><span class="line">[Huawei-Vlanif402]ip address 10.1.42.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port trunk allow-pass vlan 40 401 402</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port trunk allow-pass vlan 40 401 402</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type hybrid</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port hybrid pvid vlan 40</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port hybrid untagged vlan 40 401 402</span><br></pre></td></tr></table></figure>

<p>划分地址池，配置DHCP，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]ip pool 401</span><br><span class="line">[Huawei-ip-pool-401]net 10.1.41.0 mask 255.255.255.0</span><br><span class="line">[Huawei-ip-pool-401]gateway-list 10.1.41.1</span><br><span class="line">[Huawei-ip-pool-401]dns-list 8.8.8.8</span><br><span class="line">[Huawei]ip pool 402</span><br><span class="line">[Huawei-ip-pool-402]net 10.1.42.0 mask 255.255.255.0</span><br><span class="line">[Huawei-ip-pool-402]gateway-list 10.1.42.1</span><br><span class="line">[Huawei-ip-pool-402]dns-list 8.8.8.8</span><br><span class="line">[Huawei-Vlanif401]Dhcp select interface</span><br><span class="line">[Huawei-Vlanif402]Dhcp select interface</span><br></pre></td></tr></table></figure>

<p>最后配置ospf,配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.41.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.42.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.0.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<h3 id="4-1-3-STP"><a href="#4-1-3-STP" class="headerlink" title="4.1.3 STP"></a>4.1.3 STP</h3><p>Stp配置命令以LSW11为例，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]stp enable</span><br><span class="line">[Huawei]stp mode stp</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br></pre></td></tr></table></figure>

<p>设置LSW11为主root结点，命令为</p>
<p> <code>[Huawei]stp root primary</code> </p>
<p>设置LSW7 为备份root设备，命令为</p>
<p><code>[Huawei]stp root secondary</code> </p>
<p>查看各设备的stp生成树情况，命令为：<code>display stp brief</code></p>
<p>各设备的stp协议树情况如下：</p>
<ol>
<li>LSW11：</li>
</ol>
<p><img src="https://i.loli.net/2020/06/18/TypJ2Edg5oMZkKe.png" alt="image-20200617164302532"></p>
<p>LSW7：</p>
<p><img src="https://i.loli.net/2020/06/18/djis7S6U52A4k3V.png" alt="image-20200617164446769"></p>
<p>LSW12:</p>
<p><img src="https://i.loli.net/2020/06/18/1k5tzXWjI2ohqdU.png" alt="image-20200617164708417"></p>
<p>LSW14:</p>
<p><img src="https://i.loli.net/2020/06/18/g3SCahTpGufi1UE.png" alt="image-20200617164721376"></p>
<p>从上面的各交换机的端口状态可以看出stp设置成功。</p>
<h3 id="4-1-4-链路聚合"><a href="#4-1-4-链路聚合" class="headerlink" title="4.1.4 链路聚合"></a>4.1.4 链路聚合</h3><p>链路聚合配置命令，以LSW21为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]int Eth-Trunk 1</span><br><span class="line">[Huawei-Eth-Trunk1]bpdu enable </span><br><span class="line">[Huawei-Eth-Trunk1]mode lacp-static </span><br><span class="line">[Huawei-Eth-Trunk1]q</span><br><span class="line">[Huawei-Eth-Trunk1]port link-type trunk</span><br><span class="line">[Huawei-Eth-Trunk1]port trunk al	</span><br><span class="line">[Huawei-Eth-Trunk1]port trunk allow-pass vlan 70</span><br><span class="line">[Huawei-Eth-Trunk1]quit</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]eth-trunk 1</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]q</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]eth-trunk 1</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]q</span><br><span class="line">[Huawei]int vlanif 70</span><br><span class="line">[Huawei-Vlanif70]ip address 10.1.7.2 24</span><br></pre></td></tr></table></figure>

<p>配置结果展示（LSW22ip为10.1.7.3/24）</p>
<p><img src="https://i.loli.net/2020/06/18/fuhrz5aXW6l4UkK.png" alt="image-20200617163215700"></p>
<p><img src="https://i.loli.net/2020/06/18/UaGgh6zsLrFdBZ7.png" alt="image-20200617163240930"></p>
<p>ping测试：</p>
<p><img src="https://i.loli.net/2020/06/18/BIDbj7vF2mtXOkr.png" alt="image-20200617163321995"></p>
<h3 id="4-1-5-核心路由器配置（AR2）"><a href="#4-1-5-核心路由器配置（AR2）" class="headerlink" title="4.1.5 核心路由器配置（AR2）"></a>4.1.5 核心路由器配置（AR2）</h3><p>首先给该路由器中增加了额外接口，如下图所示：<img src="https://i.loli.net/2020/06/18/TypJ2Edg5oMZkKe.png" alt="image-20200618082032153"></p>
<p>对于AR2的配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Huawei]int GigabitEthernet 1/0/0</span><br><span class="line">[Huawei-GigabitEthernet1/0/0]ip address 10.1.3.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 10.1.4.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 10.1.5.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.10.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 2/0/0</span><br><span class="line">[Huawei-GigabitEthernet2/0/0]ip address 192.168.15.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 4/0/0</span><br><span class="line">[Huawei-GigabitEthernet4/0/0]ip address 192.168.100.1 24</span><br><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.5.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.4.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.3.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 192.168.10.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 192.168.100.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">[Huawei]nat address-group 1 192.168.10.10 192.168.10.30</span><br><span class="line">[Huawei]acl 2001</span><br><span class="line">[Huawei-acl-basic-2001]rule 5 permit <span class="built_in">source</span> 10.1.0.0 0.0.255.255</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]nat outbound 2001 address-group 1 no-pat</span><br><span class="line">[Huawei]telnet server <span class="built_in">enable</span> </span><br><span class="line">[Huawei]user-interface vty 0 4</span><br><span class="line">[Huawei-ui-vty0-4]authentication-mode password</span><br><span class="line">Please configure the login password (maximum length 16):huawei123</span><br><span class="line">[Huawei-ui-vty0-4]user privilege level 3</span><br></pre></td></tr></table></figure>

<h3 id="4-1-6-telnet"><a href="#4-1-6-telnet" class="headerlink" title="4.1.6 telnet"></a>4.1.6 telnet</h3><p>首先配置AR1，配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]int GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.15.2 24</span><br></pre></td></tr></table></figure>

<p>由于在核心交换机AR2已经配置了telnet，这里直接展示操作。</p>
<p><img src="https://i.loli.net/2020/06/18/neIwyORTNHx5p4Y.png" alt></p>
<h3 id="4-1-7-防火墙配置"><a href="#4-1-7-防火墙配置" class="headerlink" title="4.1.7 防火墙配置"></a>4.1.7 防火墙配置</h3><p>配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SRG]firewall zone trust</span><br><span class="line">[SRG-zone-trust]add int g0/0/1 (g0/0/0端口默认为Trust区域)</span><br><span class="line">[SRG]firewall zone untrust</span><br><span class="line">[SRG-zone-untrust]add int g0/0/2</span><br><span class="line">[SRG]firewall zone dmz</span><br><span class="line">[SRG-zone-dmz]add int g0/0/3</span><br><span class="line">[SRG-zone-dmz]add int g0/0/4</span><br><span class="line"></span><br><span class="line">[SRG]int GigabitEthernet0/0/1</span><br><span class="line">[SRG-GigabitEthernet0/0/1]ip address 192.168.10.100 24</span><br><span class="line">[SRG]int GigabitEthernet0/0/2</span><br><span class="line">[SRG-GigabitEthernet0/0/2]ip address 192.168.40.1 24</span><br><span class="line">[SRG]int GigabitEthernet0/0/3</span><br><span class="line">[SRG-GigabitEthernet0/0/3]ip address 192.168.30.1 24</span><br><span class="line">[SRG]int GigabitEthernet0/0/4</span><br><span class="line">[SRG-GigabitEthernet0/0/3]ip address 192.168.20.1 24</span><br><span class="line"></span><br><span class="line">[SRG]firewall packet-filter default permit interzone trust dmz direction outbound</span><br><span class="line">[SRG]policy interzone trust dmz outbound</span><br><span class="line">[SRG-policy-interzone-trust-dmz-outbound]policy 1</span><br><span class="line">[SRG-policy-interzone-trust-dmz-outbound-1]policy source 192.168.10.0 mask 255.255.255.0</span><br><span class="line">[SRG-policy-interzone-trust-dmz-outbound-1]action permit</span><br><span class="line"></span><br><span class="line">[SRG]ospf 1</span><br><span class="line">[SRG-ospf-1]area 0</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.10.0 0.0.0.255</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.20.0 0.0.0.255</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.30.0 0.0.0.255</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.40.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<h2 id="4-2DMZ区域"><a href="#4-2DMZ区域" class="headerlink" title="4.2DMZ区域"></a>4.2DMZ区域</h2><h3 id="4-2-1FTP服务器"><a href="#4-2-1FTP服务器" class="headerlink" title="4.2.1FTP服务器"></a>4.2.1FTP服务器</h3><p>由于在本机上使用ftp+内网穿透技术实现的网络硬盘共享服务，在此直接将ftp服务提供给ensp。</p>
<p>服务为win10提供，服务端配置：</p>
<p><img src="https://i.loli.net/2020/06/16/eYyRwafv29LzCFJ.png" alt="image-20200616155309043"></p>
<p>ensp中连接如下：</p>
<p><img src="https://i.loli.net/2020/06/16/7bMz1ApBlfdSEHc.png" alt="image-20200616155420223"></p>
<h3 id="4-2-2linux服务器"><a href="#4-2-2linux服务器" class="headerlink" title="4.2.2linux服务器"></a>4.2.2linux服务器</h3><h4 id="4-2-2-1准备工作"><a href="#4-2-2-1准备工作" class="headerlink" title="4.2.2.1准备工作"></a>4.2.2.1准备工作</h4><h5 id="1-在虚拟机中安装老师提供的ubuntu-20-04-mate系统当作DMZ去的服务器。"><a href="#1-在虚拟机中安装老师提供的ubuntu-20-04-mate系统当作DMZ去的服务器。" class="headerlink" title="1. 在虚拟机中安装老师提供的ubuntu-20.04-mate系统当作DMZ去的服务器。"></a>1. 在虚拟机中安装老师提供的ubuntu-20.04-mate系统当作DMZ去的服务器。</h5><h5 id="2-换源"><a href="#2-换源" class="headerlink" title="2.换源"></a>2.换源</h5><p>在设置中选择系统设置，找到Software Updater，点击进入，再点击Settings按钮，</p>
<p><img src="https://i.loli.net/2020/06/16/T2oMNG86Xr5wILW.png" alt="image-20200616092916772"></p>
<p><img src="https://i.loli.net/2020/06/16/8OU6e1VxjuyDHm7.png" alt="image-20200616093031282"></p>
<p><img src="https://i.loli.net/2020/06/16/qAn1YptUaRHFrLP.png" alt="image-20200616093227130"></p>
<p><img src="https://i.loli.net/2020/06/16/Y4IUR98sBaWo5Su.png" alt="image-20200616093307249"></p>
<p>选择Reload重新加载源。</p>
<p>在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>更新源和软件。</p>
<h5 id="3-连通性"><a href="#3-连通性" class="headerlink" title="3.连通性"></a>3.连通性</h5><p><strong>关闭防火墙，测试网路连通性。</strong></p>
<p>关闭命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span> //关闭防火墙</span><br><span class="line">sudo ufw status  //查看防护墙状态</span><br></pre></td></tr></table></figure>

<p>win7也需要关闭防护墙。</p>
<p>测试连通性：</p>
<p><img src="https://i.loli.net/2020/06/16/DbQxdyCL5vPEltU.png" alt="image-20200616094011730"></p>
<h5 id="4-搭建web服务器"><a href="#4-搭建web服务器" class="headerlink" title="4.搭建web服务器"></a>4.搭建web服务器</h5><p><strong>安装nginx服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p><strong>调整防火墙（也可以将防火墙直接关闭，在这里推荐将防火墙开启，对相应服务进行放行，配置如下）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw app list</span><br><span class="line">  CUPS</span><br><span class="line">  Nginx Full</span><br><span class="line">  Nginx HTTP</span><br><span class="line">  Nginx HTTPS</span><br></pre></td></tr></table></figure>

<p>正如你所看到的，Nginx有三个配置文件可用：Nginx Full、Nginx HTTP、Nginx HTTPS</p>
<p>Nginx Full ：此配置文件打开端口80（正常，未加密的网络流量）和端口443（TLS / SSL加密流量）</p>
<p>Nginx HTTP ：此配置文件仅打开端口80（正常，未加密的网络流量）</p>
<p>Nginx HTTPS ：此配置文件仅打开端口443（TLS / SSL加密流量）</p>
<p>输入以下命令以查看防火墙状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p>可以看到允许通过的服务有哪些：</p>
<p><img src="https://i.loli.net/2020/06/16/NhQq761kTlcia8e.png" alt="image-20200616154638847"></p>
<p>Ubuntu 20.04上的Nginx默认启用了一个服务器模块，该模块被配置为在<code>/var/www/html</code>目录下提供文档。将写好的项目复制至/var/www/html目录下。</p>
<p><strong>测试：在浏览器中输入<a href="http://192.168.10.121" target="_blank" rel="noopener">http://192.168.10.121</a></strong></p>
<p><img src="https://i.loli.net/2020/06/16/3Ice8vWAhPpoCO2.png" alt="image-20200616154344810"></p>
<h5 id="5-搭建VPN服务器（PPTP）"><a href="#5-搭建VPN服务器（PPTP）" class="headerlink" title="5.搭建VPN服务器（PPTP）"></a>5.搭建VPN服务器（PPTP）</h5><h6 id="5-1安装PPTPD"><a href="#5-1安装PPTPD" class="headerlink" title="5.1安装PPTPD"></a>5.1安装PPTPD</h6><p>第一步当然是安装这个软件包了。（下面所有的代码，如果需要修改的，我会特别标记出来的，其他都表示可以直接复制）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/igebY2qfOFyJ81I.png" alt="image-20200617100516932"></p>
<h6 id="5-2编辑PPTPD-CONF文件"><a href="#5-2编辑PPTPD-CONF文件" class="headerlink" title="5.2编辑PPTPD.CONF文件"></a>5.2编辑PPTPD.CONF文件</h6><p>打开这个文件并进入编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/IXBjQ6aAMZSmh9t.png" alt="image-20200617102931169"></p>
<p>localip:表示PPTP服务地址及本机IP。</p>
<p>remoteip：当客户机通过pptp连接到vpn后所能拿到的ip地址范围，默认从第一个开始分配给客户</p>
<h6 id="5-3修改CHAP-SECRETS文件，添加可以登录的用户"><a href="#5-3修改CHAP-SECRETS文件，添加可以登录的用户" class="headerlink" title="5.3修改CHAP-SECRETS文件，添加可以登录的用户"></a>5.3修改CHAP-SECRETS文件，添加可以登录的用户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Noq3EBz6cGMklhQ.png" alt="image-20200617101228399"></p>
<p>client：连接用户名<br>server：连接的服务<br>secret：连接密码<br>IP addresses：可连接的IP，*表示所有</p>
<h6 id="5-4修改远程连接用户的DNS"><a href="#5-4修改远程连接用户的DNS" class="headerlink" title="5.4修改远程连接用户的DNS"></a>5.4修改远程连接用户的DNS</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Gsk7SRaUxf6dnJX.png" alt="image-20200617101414509"></p>
<h6 id="5-5开启网络转发功能"><a href="#5-5开启网络转发功能" class="headerlink" title="5.5开启网络转发功能"></a>5.5开启网络转发功能</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctil.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/SEI5OkULVhHiyjJ.png" alt="image-20200617101751708"></p>
<p>去掉两行对应的注释，提供ipv4和ipv6的转发功能。</p>
<p>更新配置命令如下：</p>
<p><img src="https://i.loli.net/2020/06/17/MLXForGbRWD2CgK.png" alt="image-20200617102036260"></p>
<h6 id="5-6配置iptables"><a href="#5-6配置iptables" class="headerlink" title="5.6配置iptables"></a>5.6配置iptables</h6><p><strong>开启gre协议</strong></p>
<p>输入下面的指令，开启gre协议，并打开服务器47,1723号端口。</p>
<p>使用VPN需要开启gre协议，而gre协议需要使用服务器的47和1723号端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p gre -j ACCEPT </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 1723 -j ACCEPT   </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 47 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>开启NAT转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.10.121/24 -o ens33 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>上面指令中ip要填写部署pptp步骤中第1.2步中设置的localip，也就是虚拟vpn的主机的ip。</p>
<p>ens33表示当前服务器的网卡，这里不同机器可能不一样，可以通过ifconfig指令进行查询，之后</p>
<p>修改成对应的设备名称即可。</p>
<p>POSTROUTING参数表示，指定当数据包离开服务器的时候，对数据包进行处理。</p>
<p>MASQUERADE这个参数的意思就是即将从服务器封包出去(-o)的那块网卡上的IP，由于实验室的</p>
<p>服务器是固定ip，所以这里修改成服务器的虚拟ip也是可以的。</p>
<p>通过上面的指令，iptables做了这样一件事情：将所有从服务器上传出的源地址为10.1.1.1-255之</p>
<p>中的ip数据包的源ip改成服务器的ip。如果不做这个操作，服务器通过VPN传回的数据包将不包</p>
<p>含服务器自己的源ip，所以远程访问主机的回复ip包会丢失。</p>
<h6 id="5-7重启PPTP服务并查看状态"><a href="#5-7重启PPTP服务并查看状态" class="headerlink" title="5.7重启PPTP服务并查看状态"></a>5.7重启PPTP服务并查看状态</h6><p><img src="https://i.loli.net/2020/06/17/2b8jyBToNMIUscR.png" alt="image-20200617103114973"></p>
<h6 id="5-8配置客户端，连接"><a href="#5-8配置客户端，连接" class="headerlink" title="5.8配置客户端，连接"></a>5.8配置客户端，连接</h6><p><img src="https://i.loli.net/2020/06/17/oij7bdWNUpSvr6g.png" alt="image-20200617110012250"></p>
<h6 id="5-9进行连接测试"><a href="#5-9进行连接测试" class="headerlink" title="5.9进行连接测试"></a>5.9进行连接测试</h6><p><img src="https://i.loli.net/2020/06/17/2l78AzI6rQqgkSM.jpg" alt="img"></p>
<p>连接成功之后查看一下获取到的IP地址</p>
<p><img src="https://i.loli.net/2020/06/17/Ka4FzQTliIydRk1.png" alt="image-20200617235356285"></p>
<h5 id="6-SSH（安全外壳协议）服务器"><a href="#6-SSH（安全外壳协议）服务器" class="headerlink" title="6.SSH（安全外壳协议）服务器"></a>6.SSH（安全外壳协议）服务器</h5><p> <strong>使用apt工具下载并安装openssh-server</strong></p>
<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/RCn267brXeU4lEv.png" alt="image-20200616161058823"></p>
<p>等待安装结束即可。然后再次查看服务有没有启动，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://i.loli.net/2020/06/16/io7a8QJWSdN2kOj.png" alt="image-20200616161259612"></p>
<p>再次确认或者没有图中的结果，使用如下命令来启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh status</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/LwJMf76dZ4t8DyC.png" alt="image-20200616161426284"></p>
<p>ssh服务端已经开启，在xshell中进行远程登陆测试。</p>
<p><img src="https://i.loli.net/2020/06/16/8BZLinq6XrVH7QY.png" alt="image-20200616161545290"></p>
<p>在主机栏填入开启ssh服务端的主机ip，点击确定进入如下界面：</p>
<p><img src="https://i.loli.net/2020/06/16/kxpV1fbLr6HdZcm.png" alt="image-20200616161709692"></p>
<p>这是密钥和算法协商阶段：</p>
<p>客户请求连接-服务器将对应公钥、生成会话ID发给客户端、客户端生成会话密钥，并将会话密钥</p>
<p>与会话ID进行xor逻辑运算后的值，使用服务器公钥加密发送给服务器、服务器采用私钥解密</p>
<p>后，通过xor运算得到会话密钥-之后所有传输都会被会话密钥加密与解密。</p>
<p>点击接受并保存后，进入认证阶段：</p>
<p>password认证-输入用户名与密码，服务器验证是否合法。</p>
<p>publickey认证-数字签名认证，客户端发送用户名、公共密钥、公共密钥算法的publickey认证请</p>
<p>求给服务器端，服务器验证是否合法。使用ssh-keygen程序生成公钥 id_dsa.pub 和私钥 </p>
<p>id_dsa。</p>
<p><img src="https://i.loli.net/2020/06/16/7YbxIvFL9Jg8psr.png" alt="image-20200616161924769"></p>
<p><img src="https://i.loli.net/2020/06/16/4PrdZ6DmenCAfg8.png" alt="image-20200616161949478"></p>
<p>输入正确的用户名密码后，xshell界面如下：</p>
<p><img src="https://i.loli.net/2020/06/16/9rHSfgCceAbZLaT.png" alt="image-20200616162022133"></p>
<h2 id="4-3Untrust区域"><a href="#4-3Untrust区域" class="headerlink" title="4.3Untrust区域"></a>4.3Untrust区域</h2><h3 id="4-3-1-SNMP"><a href="#4-3-1-SNMP" class="headerlink" title="4.3.1 SNMP"></a>4.3.1 SNMP</h3><h4 id="4-3-1-1-ensp端"><a href="#4-3-1-1-ensp端" class="headerlink" title="4.3.1.1 ensp端"></a>4.3.1.1 ensp端</h4><p>在AR3处配置<strong>snmp-agent,</strong>设置读团体字为<strong>public</strong>，写团体字为<strong>private</strong>，配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Huawei]snmp  </span><br><span class="line">[Huawei]snmp-agent </span><br><span class="line">[Huawei]snmp-agent sys-info version v1 </span><br><span class="line">[Huawei]snmp-agent community <span class="built_in">read</span> public</span><br><span class="line">[Huawei]snmp-agent community write private</span><br><span class="line">[Huawei]snmp-agent sys-info contact this_is_a_test_string. </span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2 </span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 192.168.56.10 24</span><br></pre></td></tr></table></figure>

<p>AR3配置完成后，将AR3与云连接，而云通过与Windows主机的Mib Browser连接从而实现设备</p>
<p>管理，云的相关配置如下：</p>
<p><img src="https://i.loli.net/2020/06/18/WDyibS2oMpT7qBh.png" alt="云设置"></p>
<h4 id="4-3-1-2-Windows端"><a href="#4-3-1-2-Windows端" class="headerlink" title="4.3.1.2 Windows端"></a>4.3.1.2 Windows端</h4><p>在Windows端打开Mib Browser，进行IP，SNMPv1相关配置。</p>
<p><img src="https://i.loli.net/2020/06/18/2bZDsCMcUwVlHdP.png" alt="配置"></p>
<p>如上图所示，配置读团体字为<strong>public</strong>，写团体字为<strong>private</strong>，与ensp中保持一致，然后连接，出</p>
<p>现下图界面，从图中可以看到，连接成功。</p>
<p><img src="https://i.loli.net/2020/06/18/PdvjVaQBgJfDMyU.png" alt="连接成功"></p>
<p>为了测试连接的正确性，这里进行了set测试，测试过程如下：</p>
<p><img src="https://i.loli.net/2020/06/18/cvUWfiwxVKg7CJz.png" alt="Set操作"></p>
<p>在发送set请求后，可以得到Mib Browser返回的Set响应，如下：</p>
<p><img src="https://i.loli.net/2020/06/18/syIhcSJEjL6nN4G.png" alt="Set响应"></p>
<p>然后我们打开ensp中，mib所管理的设备可以看到，set设置成功。</p>
<p><img src="https://i.loli.net/2020/06/18/MmzUascDEPCFv1W.png" alt="Set结果"></p>
<h4 id="4-3-1-3-SNMPv1报文分析"><a href="#4-3-1-3-SNMPv1报文分析" class="headerlink" title="4.3.1.3 SNMPv1报文分析"></a>4.3.1.3 SNMPv1报文分析</h4><ul>
<li><p>报文交互过程</p>
<p>SNMP 报文在管理站和代理之间传送。 </p>
<p>管理站主动发出 GetRequest、GetNextRequest 和 SetRequest 类型的报文，代理以 GetResponse 报文响应。 </p>
<p>代理则主动发出 Trap 报文给管理站，不需要应答。 </p>
<p>一般来说，管理站可连续发出多个请求报文，然后等待代理返回应答报文。如果在规定的时</p>
<p>间内收到应答，则按照请求标识进行配对。</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/06/18/KueRqPD7r3NIOyv.png" alt="image-20200617230804937"></p>
<p>报文解码分析</p>
<p>用ASN.l表示的变量必须转换为串行的字节流才能在网络中传输，转换用ASN.l描述的数据机读代</p>
<p>码的算法有多种，一般使用基本编码规则BER，BER在ISO 8825/X标准中进行了定义。</p>
<p>SNMP 的报文是用 BER 方式编码的 BER 编码后生成的结构为类型-长度-值三元组， 简称 </p>
<p>TLV（Type, Length, Value），TLV 每个域都是一系列八位组，T 字段表达数 据的类型信息，L 字</p>
<p>段是值的长度，V 字段包含实际的数据，值部分还可以递归地再编码为 TLV 结构，如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/18/qRjzYCBQXe4a7fS.png" alt="image-20200617231028312"></p>
<p>不同SNMP报文具有不同的PDU格式，接下来给出各PDU的格式，如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/18/6aceNMUOxVp54Eb.png" alt="image-20200617231051639"></p>
<ul>
<li>set </li>
</ul>
<p><img src="https://i.loli.net/2020/06/18/638eWfmHNg1CcG7.png" alt="img"></p>
<p>分析如下表：</p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>T  表示 SEQUENCE类型（即SNMP报文整体为SEQUENCE类型）</td>
</tr>
<tr>
<td>33</td>
<td>L  表示 后面总共有3*16+3= 51 个字节的内容</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V  int型长度为1 ，值为0。对应到SNMPv1中可知，这里是代表version为1</td>
</tr>
<tr>
<td>04 07 70 72 69 76 61 74 65</td>
<td>TLV : OCTETSTRING 7 priavte。对应写团体字private</td>
</tr>
<tr>
<td>A3 25</td>
<td>T L : PDU Type –set (PDU的 type为 Set(3), 38字节)</td>
</tr>
<tr>
<td>02 01 04</td>
<td>T L V：int型长度为1 ，值为4，代表Request id为 4</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error ststus 0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error index 0</td>
</tr>
<tr>
<td>30 1A</td>
<td>T L SEQUENCE 26字节 (代表Variable bindings )</td>
</tr>
<tr>
<td>30 18</td>
<td>T L SEQUENCE 24字节</td>
</tr>
<tr>
<td>06 08 2B 06 01 02 01 01 05 00</td>
<td>T L V：ObjectID 1.3.4.1.2.1.1.5.0</td>
</tr>
<tr>
<td>04 0C 53 4E 4D 50 5F 43 6F 6E 74 6F 72 6C</td>
<td>T L V : OCTET STRING SNMP_Contorl</td>
</tr>
</tbody></table>
<ul>
<li><p>Set—response</p>
<p><img src="https://i.loli.net/2020/06/18/PFB2OGcXAu79LQx.png" alt="image-20200618004937128"></p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>T  表示 SEQUENCE类型（即SNMP报文整体为SEQUENCE类型）</td>
</tr>
<tr>
<td>33</td>
<td>L  表示 后面总共有3*16+3= 51 个字节的内容</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V  int型长度为1 ，值为0。对应到SNMPv1中可知，这里是代表version为1</td>
</tr>
<tr>
<td>04 07 70 72 69 76 61 74 65</td>
<td>TLV : OCTETSTRING 7 priavte。对应写团体字private</td>
</tr>
<tr>
<td>A2 25</td>
<td>T L : PDU Type –set-response (PDU的 type为 Set(2), 38字节)</td>
</tr>
<tr>
<td>02 01 04</td>
<td>T L V：int型长度为1 ，值为4，代表Request id为 4</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error ststus 0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error index 0</td>
</tr>
<tr>
<td>30 1A</td>
<td>T L SEQUENCE 26字节 (代表Variable bindings )</td>
</tr>
<tr>
<td>30 18</td>
<td>T L SEQUENCE 24字节</td>
</tr>
<tr>
<td>06 08 2B 06 01 02 01 01 05 00</td>
<td>T L V：ObjectID 1.3.4.1.2.1.1.5.0</td>
</tr>
<tr>
<td>04 0C 53 4E 4D 50 5F 43 6F 6E 74 6F 72 6C</td>
<td>T L V : OCTET STRING SNMP_Contorl</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>通过这次课程设计使我充分的理解和运用了网络规划、配置与维护的相关知识，特别是对网络协</p>
<p>议的配置有了极深的了解，学会了综合性的看待问题与解决网络规划设计问题。</p>
<p>通过一周来的学习，我学到了不少的知识！学到了如何将课程中学到的零零散散的知识、协议汇</p>
<p>总起来，也深刻体会到网络拓扑设计和协议的合理配置对于一个网络是否完善、健壮起着决定性</p>
<p>作用。在学习的过程中有失败，也有困惑，有成功，也有喜悦。虽然只是课程设计，但我拿出了</p>
<p>自己的全部精力去对待，能学到知识固然值得骄傲，能认识到自己的过错和不足也是一件幸事，</p>
<p>我想这就是我学习这门课的最大感受吧。</p>
<p>由于本人精力和时间有限，本课程设计中或多或少会存在一些缺点，所设计的网络难免存在一些</p>
<p>不足，还恳请各位老师和同学给与批评和指正。</p>
<p>最后，感谢我那坚强且饱受VMare Workstation、ensp摧残的笔记本，感谢全力燃烧的CPU和近</p>
<p>乎拉满的内存。感谢高抬贵手。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1Wa4y1Y7ET/" target="_blank" rel="noopener">附演示视频</a></p>
<p>==本次课设由彭晨希、丁磊、李松柏共同完成。==</p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>课程设计</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>边界网关协议实验（BGP）《一》</title>
    <url>/2020/05/11/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE%E5%AE%9E%E9%AA%8C%EF%BC%88BGP%EF%BC%89%E3%80%8A%E4%B8%80%E3%80%8B/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><p><img src="https://s1.ax1x.com/2020/05/11/YYn0l8.png" alt="YYn0l8.png"></p><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><p>了解边界网管协议（BGP）</p><p>实现两个域间的通讯。</p><h1 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h1><h2 id="3-1网关ip配置"><a href="#3-1网关ip配置" class="headerlink" title="3.1网关ip配置"></a>3.1网关ip配置</h2><p>AR1配置，其他同理。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="meta">[Huawei]un</span> <span class="string">in en</span></span><br><span class="line"><span class="attr">Info</span>: <span class="string">Information center is disabled.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">AR1</span></span><br><span class="line"><span class="meta">[AR1]interface</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[AR1-GigabitEthernet0/0/0]ip</span> <span class="string">add 192.168.6.1 24</span></span><br><span class="line"><span class="meta">[AR1-GigabitEthernet0/0/0]interface</span> <span class="string">GigabitEthernet0/0/1</span></span><br><span class="line"><span class="meta">[AR1-GigabitEthernet0/0/1]ip</span> <span class="string">add 192.168.5.2 24</span></span><br></pre></td></tr></table></figure><a id="more"></a>





<h2 id="3-2AS1配置RIP协议"><a href="#3-2AS1配置RIP协议" class="headerlink" title="3.2AS1配置RIP协议"></a>3.2AS1配置RIP协议</h2><p>AR1配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[AR1]rip</span></span><br><span class="line"><span class="meta">[AR1-rip-1]net</span> <span class="string">192.168.6.0</span></span><br><span class="line"><span class="meta">[AR1-rip-1]net</span> <span class="string">192.168.5.0</span></span><br></pre></td></tr></table></figure>

<p>AR7配置同理。</p>
<h2 id="3-3AS2配置OSPF"><a href="#3-3AS2配置OSPF" class="headerlink" title="3.3AS2配置OSPF"></a>3.3AS2配置OSPF</h2><p>AR2配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[AR2]ospf</span></span><br><span class="line"><span class="meta">[AR2-ospf-1]area</span> <span class="string">0</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]net</span> <span class="string">192.168.5.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]net</span> <span class="string">192.168.1.0 0.0.0.255</span></span><br></pre></td></tr></table></figure>

<p>AR3~5同理。</p>
<h2 id="3-4配置BGP"><a href="#3-4配置BGP" class="headerlink" title="3.4配置BGP"></a>3.4配置BGP</h2><p>AR1配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1]bgp</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">192.168.5.1 as-number 2</span></span><br></pre></td></tr></table></figure>

<p>AR2配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]bgp</span> <span class="string">2</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">192.168.5.2 as-number 1</span></span><br></pre></td></tr></table></figure>

<p>查看BGP邻居关系（display bgp peer）</p>
<p>AR1:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYnom4.png" alt="YYnom4.png"></p>
<p>AR2:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYn779.png" alt="YYn779.png"></p>
<p>再查看路由表（display bgp routing-table），由于没有引入路由表为空,</p>
<p>引入：</p>
<ul>
<li><p>AR1：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1-bgp]import-route</span> <span class="string">rip 1	</span></span><br><span class="line"><span class="meta">[AR1-bgp]import-route</span> <span class="string">direct</span></span><br></pre></td></tr></table></figure>

<p>再次查看路由表，如下图所示：<img src="https://s1.ax1x.com/2020/05/11/YYnqt1.png" alt="YYnqt1.png"></p>
</li>
<li><p>AR2:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2-bgp]import-route</span> <span class="string">direct 	</span></span><br><span class="line"><span class="meta">[AR2-bgp]import-route</span> <span class="string">ospf 1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/05/11/YYu97d.png" alt="YYu97d.png"></p>
</li>
</ul>
<h2 id="3-5测试"><a href="#3-5测试" class="headerlink" title="3.5测试"></a>3.5测试</h2><p>AR5 GE0/0/0 Ping AR7 GE0/0/0  在AR2 GE0/0/0端口抓包结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYuPAA.png" alt="YYuPAA.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>BGP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>椭圆曲线密码系统</title>
    <url>/2019/11/11/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="椭圆曲线密码系统"><a href="#椭圆曲线密码系统" class="headerlink" title="椭圆曲线密码系统"></a>椭圆曲线密码系统</h1><h2 id="一个简单的RAS算法"><a href="#一个简单的RAS算法" class="headerlink" title="一个简单的RAS算法"></a>一个简单的RAS算法</h2><p>​        RAS密码系统最让人头疼的问题就是，在加解密或者签名的时候需要庞大的运算量，所需较长的运算时间。对于一些处理器不强大的设备，比如手机、PDA（Personal Digital Assistant）或者及时响应的系统不友好。因此有了椭圆曲线密码系统（ECC）。ECC运算量较少，因此能提高效率。</p><a id="more"></a>
<h2 id="椭圆曲线的加法概念"><a href="#椭圆曲线的加法概念" class="headerlink" title="椭圆曲线的加法概念"></a>椭圆曲线的加法概念</h2><p><strong>中心思想：</strong></p>
<p>​        椭圆曲线的密码系统主要是利用椭圆曲线所构成的有限群来代替传统的RSA或ElGamal所使用的有限群，这里所使用的椭圆曲线方程式可以简化为 :<br>$$<br>y^2=x^3+ax+b<br>$$<br>它的曲线恰好对称于y=0这条直线，但在决定参数a、b时，必须让曲线没有重根（如此才能确保唯一解），因此a和b必须满足：<br>$$<br>4a^3+27b^2!=0<br>$$<br>​        决定参数a和b后，就可以在椭圆曲线上定义出一个有限加法群，这个加法与一般的加法不同，它的几何概念时令其加法单位元素为一无穷远的点O，且O=-O，并且此加法单位元素要满足：若椭圆曲线上某三点共线的话，其和就等于O。</p>
<p>​        椭圆曲线的加法运算是将椭圆曲线上两个坐标点相加，依坐标点的位置不同共有共有以下几种情况，其加法的过程都要满足3点共线时其和为O的这一项要求。</p>
<ul>
<li><h3 id="椭圆曲线上的不同坐标点相加"><a href="#椭圆曲线上的不同坐标点相加" class="headerlink" title="椭圆曲线上的不同坐标点相加"></a>椭圆曲线上的不同坐标点相加</h3><p>A、B为椭圆曲线上的不同点，将两个坐标相加，其做法如下：</p>
<p>&lt;1&gt;.先找出A与B这两点所构成的直线。</p>
<p>&lt;2&gt;.接着找出这条直线与椭圆曲线的交点R。</p>
<p>&lt;3&gt;.由于A、B、R这三点共线，根据椭圆曲线加法定义可知A+B+R=O,因此可求得A+B=-R，这里-R表示坐标点R对y=0这条直线的影射，也就是R对称于y轴的坐标点（如下图所示）。</p>
<p><a href="https://imgchr.com/i/MQLB59" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/11/MQLB59.md.png" alt="MQLB59.md.png"></a></p>
</li>
<li><h3 id="椭圆曲线上相同坐标点相加"><a href="#椭圆曲线上相同坐标点相加" class="headerlink" title="椭圆曲线上相同坐标点相加"></a>椭圆曲线上相同坐标点相加</h3><p>若椭圆曲线上的相同点做相加，其做法如下：</p>
<p>&lt;1&gt;.找出A点在椭圆曲线上的切线。</p>
<p>&lt;2&gt;.找出这条切线与椭圆曲线的交点R。</p>
<p>&lt;3&gt;.可以看成A、A、R这三点共线，根据椭圆曲线加法的定义可知A+A+R=O，因此A+A=-R(如下图所示)。</p>
<p><a href="https://imgchr.com/i/Ml3d1J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/11/Ml3d1J.md.png" alt="Ml3d1J.md.png"></a></p>
</li>
<li><h3 id="椭圆曲线上一坐标点与无穷远点相加"><a href="#椭圆曲线上一坐标点与无穷远点相加" class="headerlink" title="椭圆曲线上一坐标点与无穷远点相加"></a>椭圆曲线上一坐标点与无穷远点相加</h3><p>第三种状况是椭圆曲线上一A点与无穷远点做相加，其几何概念如下图所示：</p>
<p><img src="https://s2.ax1x.com/2019/11/11/MltcSU.png" alt="MltcSU.png"></p>
<p>把无穷远点视为y轴上一个正向极远的点，依据定义此无穷远的点就是O。此无穷远点与A点所构成的直线，可视为一条垂直线。因此，此垂直线与椭圆曲线会相交于另一点R，因此可求得A+oo=-R，而R与A刚好互为y轴的对称点（A=-R），故A+oo=A。</p>
</li>
</ul>
<ul>
<li><h3 id="椭圆曲线上两对称点相加"><a href="#椭圆曲线上两对称点相加" class="headerlink" title="椭圆曲线上两对称点相加"></a>椭圆曲线上两对称点相加</h3></li>
</ul>
<h2 id="在有限体内的椭圆曲线运算"><a href="#在有限体内的椭圆曲线运算" class="headerlink" title="在有限体内的椭圆曲线运算"></a>在有限体内的椭圆曲线运算</h2><h2 id="椭圆曲线的公开密钥加密机制"><a href="#椭圆曲线的公开密钥加密机制" class="headerlink" title="椭圆曲线的公开密钥加密机制"></a>椭圆曲线的公开密钥加密机制</h2><h2 id="椭圆曲线的数字签名"><a href="#椭圆曲线的数字签名" class="headerlink" title="椭圆曲线的数字签名"></a>椭圆曲线的数字签名</h2><p>​    </p>
]]></content>
      <categories>
        <category>加密算法</category>
        <category>椭圆曲线</category>
      </categories>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>网络管理与维护大作业</title>
    <url>/2020/06/13/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1 id="一、SNMPv3工作原理"><a href="#一、SNMPv3工作原理" class="headerlink" title="一、SNMPv3工作原理"></a>一、SNMPv3工作原理</h1><h2 id="1-1-SNMP的组成"><a href="#1-1-SNMP的组成" class="headerlink" title="1.1 SNMP的组成"></a>1.1 SNMP的组成</h2><p>​        SNMP被设计为工作在TCP/IP协议族上，采用UDP进行数据传输。SNMP采用了Client/Server模型的特殊形式：代理/管理站模型。对网络的管理与维护是通过管理工作站与SNMP代理间的交互工作完成的。每个SNMP从代理负责回答SNMP管理工作站（主代理）关于MIB定义信息的各种查询。<br>简单来说，就是需要一个服务器程序（代理，agent）和一个客户机（管理器，manager）。而与直观上不同的是，SNMP的服务器端代表被管理的事物，而客户机端才是管理者。客户机从简单的命令行实用程序，如net-snmp提供的snmpwalk，到专门的管理软件、工作站都有。</p><a id="more"></a>
<h2 id="1-2-SNMP的组织结构"><a href="#1-2-SNMP的组织结构" class="headerlink" title="1.2 SNMP的组织结构"></a>1.2 SNMP的组织结构</h2><p>​        SNMP数据以一种标准化的层次结构进行布置，这种结构的大部分都留给将来扩充，而特定厂商添加的部分则被本地化以避免冲突。命名的层次结构由MIB（Management Information Base，管理信息库）组成，它是描述通过SNMP协议可访问的数据的结构化文本文件。MIB 包括了对特定数据变量的说明，数据变量被称为OID（Object Identifier，对象标识符）。</p>
<p>​        SNMP 层次结构非常像一个文件系统。不过，它是用点号（.）作为分隔符，每个节点被赋予了一个数字而不是名字。为了易于引用，还可以给节点赋予文字名称，但这种命名其实只是为了高层应用方面而已，而不是层次结构的一项功能。</p>
<h2 id="1-3-SNMP协议的一些操作"><a href="#1-3-SNMP协议的一些操作" class="headerlink" title="1.3 SNMP协议的一些操作"></a>1.3 SNMP协议的一些操作</h2><p>​        基本的SNMP协议操作只有4种：get（获取）、get_next（获取下一个）、set（设置）和trap（陷阱）。<br>get 和 set 是从节点读取数据和把数据写入节点的基本操作，节点以OID方式说明。<br>get-next 用于在MIB 层次结构上步进。<br>trap 是从服务器（代理程序）到客户机（管理器）的一个主动提供的异步通知，在出现特定的事情或状态时，它会报告。SNMP协议已经定义了若干标准的trap操作，例如“I have just come up”（刚启动），还有报告网络链路故障或已修复，路由或身份认证等的trap，这取决于agent程序的实现。</p>
<h2 id="1-4-SNMPv3和之前版本的区别"><a href="#1-4-SNMPv3和之前版本的区别" class="headerlink" title="1.4 SNMPv3和之前版本的区别"></a>1.4 SNMPv3和之前版本的区别</h2><p>​        SNMP v3 在前面的版本上增加了安全能力和远程配置能力，SNMPv3结构为消息安全和VACM（View-based Access Control Model）引入了USM（User-based Security Model）。这个结构支持同时使用不同的安全机制，接入控制，消息处理模型。SNMP v3 也引入使用SNMP SET命令动态配置 SNMP agent而不失MIB对象代表agent配置。</p>
<p><strong>USM（基于用户的安全模型）</strong></p>
<p>​        USM引入了用户名和组的概念，可以设置认证和加密功能。认证用于验证报文发送方的合法性，避免非法用户的访问；加密则是对NMS和Agent之间传输的报文进行加密，以免被窃听。通过有无认证和有无加密等功能组合，可以为NMS和Agent之间的通信提供更高的安全性。</p>
<p><strong>VACM（基于视图的访问控制模型）</strong></p>
<p>​        VACM技术定义了组、安全等级、上下文、MIB视图、访问策略五个元素，这些元素同时决定用户是否具有访问的权限，只有具有了访问权限的用户才能管理操作对象。在同一个SNMP实体上可以定义不同的组，组与MIB视图绑定，组内又可以定义多个用户。当使用某个用户名进行访问的时候，只能访问对应的MIB视图定义的对象。</p>
<p>有三个可能的安全级别: noAuthNoPriv, authNoPriv, 和 authPriv.</p>
<p>noAuthNoPriv 级别指明了没有认证或私密性被执行. </p>
<p>authNoPriv 级别指明了认证被执行但没有私密性被执行. </p>
<p>authPriv 级别指明了认证和私密性都被执行.</p>
<p>==auth—认证 支持MD5 or SHA;==</p>
<p>==priv—加密 支持DES or RSA;==</p>
<h1 id="二、设计思路"><a href="#二、设计思路" class="headerlink" title="二、设计思路"></a>二、设计思路</h1><p>​        由于Win10对MIB Browser兼容性不太好，故在VMware下建立win7虚拟机在win7环境下运行MIB Browser（客户端程序，manager），再在VMware下建立centos7虚拟机运行net-snmp（服务端程序，agent）。</p>
<p>​        两虚拟机均采用桥接的方式，并关闭防火墙，使得两台机器在同一子网下且可进行互相通讯。两机器IP地址如下：</p>
<ul>
<li><p>win7：</p>
<p><img src="https://i.loli.net/2020/06/12/xYv3mJilN7dSqZo.png" alt="image-20200612221922868"></p>
</li>
<li><p>centos7：</p>
<p>关闭防火墙命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> snmpd.service</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  <img src="https://i.loli.net/2020/06/12/VjPTAF2kwQLhRHX.png" alt="image-20200612222021007"></p>
<ul>
<li><p>互通测试：</p>
<p><img src="https://i.loli.net/2020/06/12/43TOLNb7sMaVXQ1.png" alt="image-20200612234549339"></p>
<p><img src="https://i.loli.net/2020/06/12/CzxNwh1sI4v2iOV.png" alt="image-20200612234637804"></p>
</li>
</ul>
<h1 id="三、网络拓扑结构"><a href="#三、网络拓扑结构" class="headerlink" title="三、网络拓扑结构"></a>三、网络拓扑结构</h1><p><img src="https://i.loli.net/2020/06/13/BhEaH3PyYUjMISX.png" alt="image-20200613002337094"></p>
<h1 id="四、实验过程"><a href="#四、实验过程" class="headerlink" title="四、实验过程"></a>四、实验过程</h1><h2 id="4-1Centos7-Agent-："><a href="#4-1Centos7-Agent-：" class="headerlink" title="4.1Centos7(Agent)："></a>4.1Centos7(Agent)：</h2><h3 id="4-1-1下载安装net-snmp"><a href="#4-1-1下载安装net-snmp" class="headerlink" title="4.1.1下载安装net-snmp"></a>4.1.1下载安装net-snmp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lcx@localhost ~]$ sudo yum install -y net-snmp net-snmp-utils</span><br><span class="line">lcx@localhost ~]$ snmpd -v</span><br><span class="line">NET-SNMP version:  5.7.2</span><br><span class="line">Web:               http://www.net-snmp.org/</span><br><span class="line">Email:             net-snmp-coders@lists.sourceforge.net</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2配置SNMPv3用户"><a href="#4-1-2配置SNMPv3用户" class="headerlink" title="4.1.2配置SNMPv3用户"></a>4.1.2配置SNMPv3用户</h3><p>在配置v3用户前，需要停用snmp的服务，具体配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#未停止snmp服务，无法创建snmpv3用户</span></span><br><span class="line">lcx@localhost ~]$ net-snmp-create-v3-user </span><br><span class="line">Apparently at least one snmpd demon is already running.</span><br><span class="line">You must stop them <span class="keyword">in</span> order to use this <span class="built_in">command</span>.</span><br><span class="line">[lcx@localhost ~]$ service snmpd stop </span><br><span class="line">Stopping snmpd (via systemctl):                            [  确定  ]</span><br><span class="line">[lcx@localhost ~]$ service snmpd status </span><br><span class="line">● snmpd.service - Simple Network Management Protocol (SNMP) Daemon.</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/snmpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line"></span><br><span class="line">6月 12 17:09:38 localhost.localdomain systemd[1]: Started Simple Network Man...</span><br><span class="line">6月 13 08:57:25 localhost.localdomain systemd[1]: Stopped Simple Network Man...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"><span class="comment">#创建名为lcx的snmpv3用户</span></span><br><span class="line">[lcx@localhost ~]$ sudo net-snmp-create-v3-user </span><br><span class="line">[sudo] lcx 的密码：</span><br><span class="line">Enter a SNMPv3 user name to create: </span><br><span class="line">lcx </span><br><span class="line">Enter authentication pass-phrase: </span><br><span class="line">auth-password</span><br><span class="line">Enter encryption pass-phrase: </span><br><span class="line">  [press <span class="built_in">return</span> to reuse the authentication pass-phrase]</span><br><span class="line">encrypt-password</span><br><span class="line">adding the following line to /var/lib/net-snmp/snmpd.conf:</span><br><span class="line">   createUser lcx MD5 <span class="string">"auth-password"</span> DES encrypt-password</span><br><span class="line">adding the following line to /etc/snmp/snmpd.conf:</span><br><span class="line">   rwuser lcx</span><br><span class="line">[lcx@localhost ~]$</span><br></pre></td></tr></table></figure>

<p>​        我创建了一个名叫<strong>lcx</strong>的SNMPv3用户，使用<strong>MD5</strong>进行认证以及使用<strong>DES</strong>进行加密，<strong>auth-password</strong>作为认证密码，<strong>encrypt-password</strong>作为加密密码。</p>
<p>在配置文件中查看SNMPv3用户是否添加成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lcx@localhost ~]$ sudo vim /etc/snmp/snmpd.conf </span><br><span class="line">[sudo] lcx 的密码：</span><br><span class="line">[lcx@localhost ~]$</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/13/GMpf3VkDznSZo2E.png" alt="image-20200613150210380"></p>
<p>可在配置文件中查看到添加的v3用户。</p>
<h3 id="4-1-3验证服务"><a href="#4-1-3验证服务" class="headerlink" title="4.1.3验证服务"></a>4.1.3验证服务</h3><p>snmpwalk命令用法：</p>
<table>
<thead>
<tr>
<th>-v 1|2c|3</th>
<th>specifies SNMP version to use</th>
</tr>
</thead>
<tbody><tr>
<td>-u USER-NAME</td>
<td>set security name (e.g. bert)</td>
</tr>
<tr>
<td>-l LEVEL</td>
<td>set security level (noAuthNoPriv|authNoPriv|authPriv)</td>
</tr>
<tr>
<td>-a PROTOCOL</td>
<td>set authentication protocol (MD5|SHA)</td>
</tr>
<tr>
<td>-A PASSPHRASE</td>
<td>set authentication protocol pass phrase</td>
</tr>
<tr>
<td>-x PROTOCOL</td>
<td>set privacy protocol (DES|AES)</td>
</tr>
<tr>
<td>-X PASSPHRASE</td>
<td>set privacy protocol pass phrase</td>
</tr>
<tr>
<td>-c COMMUNITY</td>
<td>set the community string (v1/v2c版本)</td>
</tr>
</tbody></table>
<p>在验证前，需开启snmp服务，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lcx@localhost ~]$  service snmpd start </span><br><span class="line">Starting snmpd (via systemctl):                            [  确定  ]</span><br><span class="line">[lcx@localhost ~]$ service snmpd status </span><br><span class="line">● snmpd.service - Simple Network Management Protocol (SNMP) Daemon.</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/snmpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2020-06-13 09:13:40 CST; 6s ago</span><br><span class="line"> Main PID: 66998 (snmpd)</span><br><span class="line">    Tasks: 1</span><br><span class="line">   Memory: 4.3M</span><br><span class="line">   CGroup: /system.slice/snmpd.service</span><br><span class="line">           └─66998 /usr/sbin/snmpd -LS0-6d -f</span><br><span class="line"></span><br><span class="line">6月 13 09:13:40 localhost.localdomain systemd[1]: Starting Simple Network Ma...</span><br><span class="line">6月 13 09:13:40 localhost.localdomain snmpd[66998]: NET-SNMP version 5.7.2</span><br><span class="line">6月 13 09:13:40 localhost.localdomain systemd[1]: Started Simple Network Man...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line">[lcx@localhost ~]$</span><br></pre></td></tr></table></figure>

<p>在此使用如下命令进行验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lcx@localhost ~]$ snmpwalk -v 3 -u lcx -a MD5 -A auth-password -l authPriv -x DES -X encrypt-password localhost</span><br><span class="line">SNMPv2-MIB::sysDescr.0 = STRING: Linux localhost.localdomain 3.10.0-1062.12.1.el7.x86_64 <span class="comment">#1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64</span></span><br><span class="line">SNMPv2-MIB::sysObjectID.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.10</span><br><span class="line">DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (15262) 0:02:32.62</span><br><span class="line">SNMPv2-MIB::sysContact.0 = STRING: Root &lt;root@localhost&gt; (configure /etc/snmp/snmp.local.conf)</span><br><span class="line">SNMPv2-MIB::sysName.0 = STRING: lcx-centos</span><br><span class="line">SNMPv2-MIB::sysLocation.0 = STRING: Unknown (edit /etc/snmp/snmpd.conf)</span><br><span class="line">SNMPv2-MIB::sysORLastChange.0 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORID.1 = OID: SNMP-MPD-MIB::snmpMPDCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.2 = OID: SNMP-USER-BASED-SM-MIB::usmMIBCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.3 = OID: SNMP-FRAMEWORK-MIB::snmpFrameworkMIBCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.4 = OID: SNMPv2-MIB::snmpMIB</span><br><span class="line">SNMPv2-MIB::sysORID.5 = OID: TCP-MIB::tcpMIB</span><br><span class="line">SNMPv2-MIB::sysORID.6 = OID: IP-MIB::ip</span><br><span class="line">SNMPv2-MIB::sysORID.7 = OID: UDP-MIB::udpMIB</span><br><span class="line">SNMPv2-MIB::sysORID.8 = OID: SNMP-VIEW-BASED-ACM-MIB::vacmBasicGroup</span><br><span class="line">SNMPv2-MIB::sysORID.9 = OID: SNMP-NOTIFICATION-MIB::snmpNotifyFullCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.10 = OID: NOTIFICATION-LOG-MIB::notificationLogMIB</span><br><span class="line">SNMPv2-MIB::sysORDescr.1 = STRING: The MIB <span class="keyword">for</span> Message Processing and Dispatching.</span><br><span class="line">SNMPv2-MIB::sysORDescr.2 = STRING: The management information definitions <span class="keyword">for</span> the SNMP User-based Security Model.</span><br><span class="line">SNMPv2-MIB::sysORDescr.3 = STRING: The SNMP Management Architecture MIB.</span><br><span class="line">SNMPv2-MIB::sysORDescr.4 = STRING: The MIB module <span class="keyword">for</span> SNMPv2 entities</span><br><span class="line">SNMPv2-MIB::sysORDescr.5 = STRING: The MIB module <span class="keyword">for</span> managing TCP implementations</span><br><span class="line">SNMPv2-MIB::sysORDescr.6 = STRING: The MIB module <span class="keyword">for</span> managing IP and ICMP implementations</span><br><span class="line">SNMPv2-MIB::sysORDescr.7 = STRING: The MIB module <span class="keyword">for</span> managing UDP implementations</span><br><span class="line">SNMPv2-MIB::sysORDescr.8 = STRING: View-based Access Control Model <span class="keyword">for</span> SNMP.</span><br><span class="line">SNMPv2-MIB::sysORDescr.9 = STRING: The MIB modules <span class="keyword">for</span> managing SNMP Notification, plus filtering.</span><br><span class="line">SNMPv2-MIB::sysORDescr.10 = STRING: The MIB module <span class="keyword">for</span> logging SNMP Notifications.</span><br><span class="line">SNMPv2-MIB::sysORUpTime.1 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.2 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.3 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.4 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.5 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.6 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.7 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.8 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.9 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.10 = Timeticks: (8) 0:00:00.08</span><br><span class="line">IF-MIB::ifNumber.0 = INTEGER: 5</span><br><span class="line">IF-MIB::ifIndex.1 = INTEGER: 1</span><br><span class="line">IF-MIB::ifIndex.2 = INTEGER: 2</span><br><span class="line">IF-MIB::ifIndex.3 = INTEGER: 3</span><br><span class="line">IF-MIB::ifIndex.4 = INTEGER: 4</span><br><span class="line">IF-MIB::ifIndex.5 = INTEGER: 5</span><br><span class="line">IF-MIB::ifDescr.1 = STRING: lo</span><br><span class="line">IF-MIB::ifDescr.2 = STRING: ens33</span><br><span class="line">IF-MIB::ifDescr.3 = STRING: virbr0</span><br><span class="line">IF-MIB::ifDescr.4 = STRING: virbr0-nic</span><br><span class="line">IF-MIB::ifDescr.5 = STRING: docker0</span><br><span class="line">IF-MIB::ifType.1 = INTEGER: softwareLoopback(24)</span><br><span class="line">IF-MIB::ifType.2 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifType.3 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifType.4 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifType.5 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifMtu.1 = INTEGER: 65536</span><br><span class="line">IF-MIB::ifMtu.2 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifMtu.3 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifMtu.4 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifMtu.5 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifSpeed.1 = Gauge32: 10000000</span><br><span class="line">IF-MIB::ifSpeed.2 = Gauge32: 1000000000</span><br><span class="line">IF-MIB::ifSpeed.3 = Gauge32: 0</span><br><span class="line">IF-MIB::ifSpeed.4 = Gauge32: 10000000</span><br><span class="line">IF-MIB::ifSpeed.5 = Gauge32: 0</span><br><span class="line">IF-MIB::ifPhysAddress.1 = STRING: </span><br><span class="line">IF-MIB::ifPhysAddress.2 = STRING: 0:c:29:1b:7e:d</span><br><span class="line">IF-MIB::ifPhysAddress.3 = STRING: 52:54:0:25:dc:88</span><br><span class="line">IF-MIB::ifPhysAddress.4 = STRING: 52:54:0:25:dc:88</span><br><span class="line">IF-MIB::ifPhysAddress.5 = STRING: 2:42:b2:34:7a:93</span><br><span class="line">IF-MIB::ifAdminStatus.1 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifAdminStatus.2 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifAdminStatus.3 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifAdminStatus.4 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifAdminStatus.5 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifOperStatus.1 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifOperStatus.2 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifOperStatus.3 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifOperStatus.4 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifOperStatus.5 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifLastChange.1 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.2 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.3 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.4 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.5 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifInOctets.1 = Counter32: 12538599</span><br><span class="line">IF-MIB::ifInOctets.2 = Counter32: 779843410</span><br><span class="line">IF-MIB::ifInOctets.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInOctets.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInOctets.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUcastPkts.1 = Counter32: 69333</span><br><span class="line">IF-MIB::ifInUcastPkts.2 = Counter32: 533359</span><br><span class="line">IF-MIB::ifInUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutOctets.1 = Counter32: 12538599</span><br><span class="line">IF-MIB::ifOutOctets.2 = Counter32: 4493350</span><br><span class="line">IF-MIB::ifOutOctets.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutOctets.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutOctets.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutUcastPkts.1 = Counter32: 69333</span><br><span class="line">IF-MIB::ifOutUcastPkts.2 = Counter32: 65738</span><br><span class="line">IF-MIB::ifOutUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutQLen.1 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.2 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.3 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.4 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.5 = Gauge32: 0</span><br><span class="line">IF-MIB::ifSpecific.1 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.2 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.3 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.4 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.5 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">SNMPv2-SMI::mib-2.3.1.1.1.2.1.192.168.10.1 = INTEGER: 2</span><br><span class="line">SNMPv2-SMI::mib-2.3.1.1.2.2.1.192.168.10.1 = Hex-STRING: F4 EE 14 1D 58 DE </span><br><span class="line">SNMPv2-SMI::mib-2.3.1.1.3.2.1.192.168.10.1 = IpAddress: 192.168.10.1</span><br><span class="line">IP-MIB::ipForwarding.0 = INTEGER: forwarding(1)</span><br><span class="line">IP-MIB::ipDefaultTTL.0 = INTEGER: 64</span><br><span class="line">IP-MIB::ipInReceives.0 = Counter32: 140948</span><br><span class="line">IP-MIB::ipInHdrErrors.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInAddrErrors.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipForwDatagrams.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInUnknownProtos.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInDiscards.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInDelivers.0 = Counter32: 140624</span><br><span class="line">IP-MIB::ipOutRequests.0 = Counter32: 135827</span><br><span class="line">IP-MIB::ipOutDiscards.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipOutNoRoutes.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipReasmTimeout.0 = INTEGER: 30 seconds</span><br><span class="line">IP-MIB::ipReasmReqds.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipReasmOKs.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipReasmFails.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipFragOKs.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipFragFails.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipFragCreates.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipAdEntAddr.127.0.0.1 = IpAddress: 127.0.0.1</span><br><span class="line">IP-MIB::ipAdEntAddr.172.17.0.1 = IpAddress: 172.17.0.1</span><br><span class="line">IP-MIB::ipAdEntAddr.192.168.10.113 = IpAddress: 192.168.10.113</span><br><span class="line">IP-MIB::ipAdEntIfIndex.127.0.0.1 = INTEGER: 1</span><br><span class="line">IP-MIB::ipAdEntIfIndex.172.17.0.1 = INTEGER: 5</span><br><span class="line">IP-MIB::ipAdEntIfIndex.192.168.10.113 = INTEGER: 2</span><br><span class="line">IP-MIB::ipAdEntNetMask.127.0.0.1 = IpAddress: 255.0.0.0</span><br><span class="line">IP-MIB::ipAdEntNetMask.172.17.0.1 = IpAddress: 255.255.0.0</span><br><span class="line">IP-MIB::ipAdEntNetMask.192.168.10.113 = IpAddress: 255.255.255.0</span><br><span class="line">IP-MIB::ipAdEntBcastAddr.127.0.0.1 = INTEGER: 0</span><br><span class="line">IP-MIB::ipAdEntBcastAddr.172.17.0.1 = INTEGER: 1</span><br><span class="line">IP-MIB::ipAdEntBcastAddr.192.168.10.113 = INTEGER: 1</span><br><span class="line">IP-MIB::ip.21.1.1.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.1.172.17.0.0 = IpAddress: 172.17.0.0</span><br><span class="line">IP-MIB::ip.21.1.1.192.168.10.0 = IpAddress: 192.168.10.0</span><br><span class="line">IP-MIB::ip.21.1.2.0.0.0.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.2.172.17.0.0 = INTEGER: 5</span><br><span class="line">IP-MIB::ip.21.1.2.192.168.10.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.3.0.0.0.0 = INTEGER: 1</span><br><span class="line">IP-MIB::ip.21.1.3.172.17.0.0 = INTEGER: 0</span><br><span class="line">IP-MIB::ip.21.1.3.192.168.10.0 = INTEGER: 0</span><br><span class="line">IP-MIB::ip.21.1.7.0.0.0.0 = IpAddress: 192.168.10.1</span><br><span class="line">IP-MIB::ip.21.1.7.172.17.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.7.192.168.10.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.8.0.0.0.0 = INTEGER: 4</span><br><span class="line">IP-MIB::ip.21.1.8.172.17.0.0 = INTEGER: 3</span><br><span class="line">IP-MIB::ip.21.1.8.192.168.10.0 = INTEGER: 3</span><br><span class="line">IP-MIB::ip.21.1.9.0.0.0.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.9.172.17.0.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.9.192.168.10.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.11.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.11.172.17.0.0 = IpAddress: 255.255.0.0</span><br><span class="line">IP-MIB::ip.21.1.11.192.168.10.0 = IpAddress: 255.255.255.0</span><br><span class="line">IP-MIB::ip.21.1.13.0.0.0.0 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IP-MIB::ip.21.1.13.172.17.0.0 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IP-MIB::ip.21.1.13.192.168.10.0 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IP-MIB::ipNetToMediaIfIndex.2.192.168.10.1 = INTEGER: 2</span><br><span class="line">IP-MIB::ipNetToMediaPhysAddress.2.192.168.10.1 = STRING: f4:ee:14:1d:58:de</span><br><span class="line">IP-MIB::ipNetToMediaNetAddress.2.192.168.10.1 = IpAddress: 192.168.10.1</span><br><span class="line">IP-MIB::ipNetToMediaType.2.192.168.10.1 = INTEGER: dynamic(3)</span><br><span class="line">IP-MIB::ipRoutingDiscards.0 = Counter32: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteDest.0.0.0.0.0.0.0.0.0.192.168.10.1 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteDest.172.17.0.0.255.255.0.0.0.0.0.0.0 = IpAddress: 172.17.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteDest.192.168.10.0.255.255.255.0.0.0.0.0.0 = IpAddress: 192.168.10.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteMask.0.0.0.0.0.0.0.0.0.192.168.10.1 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteMask.172.17.0.0.255.255.0.0.0.0.0.0.0 = IpAddress: 255.255.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteMask.192.168.10.0.255.255.255.0.0.0.0.0.0 = IpAddress: 255.255.255.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteTos.0.0.0.0.0.0.0.0.0.192.168.10.1 = INTEGER: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteTos.172.17.0.0.255.255.0.0.0.0.0.0.0 = INTEGER: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteTos.192.168.10.0.255.255.255.0.0.0.0.0.0 = INTEGER: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteNextHop.0.0.0.0.0.0.0.0.0.192.168.10.1 = IpAddress: 192.168.10.1</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteNextHop.172.17.0.0.255.255.0.0.0.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteNextHop.192.168.10.0.255.255.255.0.0.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteIfIndex.0.0.0.0.0.0.0.0.0.192.168.10.1 = INTEGER: 2</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteIfIndex.172.17.0.0.255.255.0.0.0.0.0.0.0 = INTEGER: 5</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteIfIndex.192.168.10.0.255.255.255.0.0.0.0.0.0 = INTEGER: 2</span><br></pre></td></tr></table></figure>

<p>可以看到我们顺利的取到了服务器的snmp数据。</p>
<h2 id="4-2Win7-Manager"><a href="#4-2Win7-Manager" class="headerlink" title="4.2Win7(Manager):"></a>4.2Win7(Manager):</h2><h3 id="4-2-1MIB-Browser配置"><a href="#4-2-1MIB-Browser配置" class="headerlink" title="4.2.1MIB Browser配置"></a>4.2.1MIB Browser配置</h3><p><img src="https://i.loli.net/2020/06/13/3mjMEeig6dNZSht.png" alt="image-20200613093819436"></p>
<p>如上图所示：在1中输入agent ip，在2中选择v3并添加v3用户，点击3进行连接。</p>
<p>2中操作如下：</p>
<p><img src="https://i.loli.net/2020/06/13/rhpVedP8By5EQg9.png" alt="image-20200613094154210"></p>
<p>选择SNMP版本为v3后 ，点击AddUser进行添加v3用户界面，具体如下：</p>
<p><img src="https://i.loli.net/2020/06/13/2SieXxfhGp69WTF.png" alt="image-20200613094334060"></p>
<p>根据在Centos7中添加的用户信息进行填写，Authentication Protocol中选择MD5，</p>
<p>Privacy Protocol选择DES。内容分别为auth-password、encrypt-password。</p>
<h1 id="五、结果展示和分析"><a href="#五、结果展示和分析" class="headerlink" title="五、结果展示和分析"></a>五、结果展示和分析</h1><p>​        ==由于报文捕获分析是在实验完成几天后进行的，win7ip租约到期，路由器dhcp服务器重新对win7进行ip分配，分配结果如下：==</p>
<p><img src="https://i.loli.net/2020/06/13/jMUAVtpe4XbkLgn.png" alt="image-20200613123132547"></p>
<p>使用MIB  Browser连接被管理设备（centos7），结果如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/13/bXRHWgf6uSticlK.png" alt="image-20200613101300359"></p>
<p>​        可以看到，由MIB发出<strong>Request</strong>，由Centos7返回<strong>Synchronize</strong>和<strong>Response</strong>消息。来回的信息中可以看到Authentication Protocol, Privacy Protocol以及Security Level等相关信息。</p>
<p>​        连接Centos7的同时，在Win7上进行报文捕获，结果如下：</p>
<p><img src="https://i.loli.net/2020/06/13/XlJqGraw2QEfPxH.png" alt="img"></p>
<ul>
<li><p>对Get-request报文进行分析：</p>
<img src="/2020/06/13/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%A4%A7%E4%BD%9C%E4%B8%9A/Users\12173\Desktop\EarNmg38xSoO7nD.png" alt="image-20200613125115379">

<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>表示SNMP协议报文(整个报文是一个SEQUENCE)</td>
</tr>
<tr>
<td>38</td>
<td>消息长度38字节(表示后面还有38个字节的内容)</td>
</tr>
<tr>
<td>02 01 03</td>
<td>表示这个报文的协议为SNMPv3(02表示integer 01表示长度为1个字节)</td>
</tr>
<tr>
<td>30</td>
<td>表示msgGlobalData为一个Sequence</td>
</tr>
<tr>
<td>0e</td>
<td>表示该子报文的长度为14字节</td>
</tr>
<tr>
<td>02 01 59</td>
<td>表示对应的msgID：32</td>
</tr>
<tr>
<td>02 03 00 ff f0</td>
<td>表示对应msgMaxSize：65520</td>
</tr>
<tr>
<td>04 01 00</td>
<td>表示对应的是msgFlags：04</td>
</tr>
<tr>
<td>02 01 03</td>
<td>表示对应的msgSecurityModel：USM(3)</td>
</tr>
<tr>
<td>04 10</td>
<td>引擎ID</td>
</tr>
<tr>
<td>30 0e</td>
<td>表示接下来从msgAuthoritativeEngineID到msgPrivacyParameters为一个Sequence且长度为14字节</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgAuthoritativeEngineID长度为0，没有内容</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示msgAuthoritativeEngineBoots：0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示msgAuthoritativeEngineTime：0</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgUserName为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgAuthenticationParameters为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgPrivacyParameters为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>30 11</td>
<td>表示接下来的msgData：plaintext为一个Sequence，长度为17字节</td>
</tr>
<tr>
<td>04 00</td>
<td>表示contextEngineID为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>04 00</td>
<td>表示contextName为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>a0</td>
<td>表示这个PDU为Get-Request类型</td>
</tr>
<tr>
<td>0b</td>
<td>表示data的长度为11字节</td>
</tr>
<tr>
<td>02 01 58</td>
<td>表示request-id：88</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-status为0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-index为0</td>
</tr>
<tr>
<td>30 00</td>
<td>表示variable-bindings：0 items</td>
</tr>
</tbody></table>
</li>
<li><p>report报文</p>
<p>对比上述对GetRequest报文的分析，可以在该报文中看到msgAuthoritativeEngineID等值不再为空，是因为Centos7设备将相关信息发送给了管理软件，如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/13/hk3zsDKZS4QRtTb.png" alt="image-20200613140623752"></p>
<p><img src="https://i.loli.net/2020/06/13/tFgS8UVIcqx4brJ.png" alt="image-20200613141147537"></p>
</li>
<li><p>encryptedPDU报文内容如下：</p>
<p><img src="https://i.loli.net/2020/06/13/Qa9lHeAzsD8Oc3W.png" alt="image-20200613134901797"></p>
<p>表示为已经加密的PDU。</p>
</li>
<li><p>get操作获取设备名称</p>
<p><img src="https://i.loli.net/2020/06/13/AatzEOP43LJVksr.png" alt="image-20200613144611730"></p>
<p>从图中可以看到设备名为<strong>lcx-VM-centos7</strong>。</p>
</li>
<li><p>通过set操作更改设备名称为<strong>lcx-centos7</strong></p>
<p><img src="https://i.loli.net/2020/06/13/TQYoxLc3SKlrRe5.png" alt="image-20200613144922792"></p>
<p>从图中可以看到，设备名已被修改为<strong>lcx-centos7</strong></p>
</li>
<li><p>通过get bulk操作检索SMMP变量值</p>
<p>此操作通常被用于检索大数据量，尤其当您的SNMP版本是V2c或V3时，检索大的表就要用到此操作。GETBULK操作会根据最大重试值执行一个连续的GETNEXT操作。非中继值决定要进行GETNEXT操作的变量列表中的变量数，对于剩下的变量，将根据最大重试值进行连续GETNEXT操作。</p>
<ul>
<li><p>请求部分：</p>
<p><img src="https://i.loli.net/2020/06/13/8S7WRcEehGujr2f.png" alt="image-20200613145414187"></p>
</li>
<li><p>响应部分：</p>
<p><img src="https://i.loli.net/2020/06/13/9stxUF74ZwmzqPM.png" alt="image-20200613145550590"></p>
<p>报文对应操作如下：</p>
<p><img src="https://i.loli.net/2020/06/13/ZSoc6Mw5UAsa9jp.png" alt="img"></p>
<p>捕获报文文件如下：</p>
<p>报文文件已上传至git仓库<a href="https://github.com/yym08090809/Anything/blob/master/snmp%20all.pcapng" target="_blank" rel="noopener">点击可下载</a></p>
</li>
</ul>
</li>
</ul>
<h1 id="六、问题及解决方案"><a href="#六、问题及解决方案" class="headerlink" title="六、问题及解决方案"></a>六、问题及解决方案</h1><h2 id="问题一、两台虚拟机见无法通讯"><a href="#问题一、两台虚拟机见无法通讯" class="headerlink" title="问题一、两台虚拟机见无法通讯"></a>问题一、两台虚拟机见无法通讯</h2><p><strong>解决方案:</strong>将虚拟机网络连接方式设置为桥接模式，并关闭防火墙。使得两台机器在同一个网段的同一子网下。</p>
<h2 id="问题二、无法添加SNMPv3用户"><a href="#问题二、无法添加SNMPv3用户" class="headerlink" title="问题二、无法添加SNMPv3用户"></a>问题二、无法添加SNMPv3用户</h2><p><strong>解决方案:</strong>根据提示snmpd服务停止后，即可添加snmpv3用户。</p>
]]></content>
      <categories>
        <category>网络管理与维护</category>
      </categories>
      <tags>
        <tag>网络管理与维护</tag>
      </tags>
  </entry>
  <entry>
    <title>边界网关协议实验（BGP）《三》</title>
    <url>/2020/05/18/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE%E5%AE%9E%E9%AA%8C%EF%BC%88BGP%EF%BC%89%E3%80%8A%E4%B8%89%E3%80%8B/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><p><img src="https://s1.ax1x.com/2020/05/18/Yhp0fK.png" alt="Yhp0fK.png">、</p><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><p>利用AS-path属性实现路由策略，使得AR2不向AR1通告AS300内的任何路由。</p><h1 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h1><h2 id="3-1配置AR1-AR4路由器的网关ip"><a href="#3-1配置AR1-AR4路由器的网关ip" class="headerlink" title="3.1配置AR1~AR4路由器的网关ip"></a>3.1配置AR1~AR4路由器的网关ip</h2><h2 id="3-2配置域间路由协议（BGP）"><a href="#3-2配置域间路由协议（BGP）" class="headerlink" title="3.2配置域间路由协议（BGP）"></a>3.2配置域间路由协议（BGP）</h2><p>AR1配置如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1]bgp</span> <span class="string">100</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">11.2.1.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR1-bgp]import-route</span> <span class="string">direct</span></span><br></pre></td></tr></table></figure><a id="more"></a>




<p>其他路由器同理。</p>
<h2 id="3-3配置AS-PATH属性实现路由过滤"><a href="#3-3配置AS-PATH属性实现路由过滤" class="headerlink" title="3.3配置AS-PATH属性实现路由过滤"></a>3.3配置AS-PATH属性实现路由过滤</h2><h3 id="3-3-1-AS-PATH属性概述"><a href="#3-3-1-AS-PATH属性概述" class="headerlink" title="3.3.1 AS-PATH属性概述"></a>3.3.1 AS-PATH属性概述</h3><ul>
<li><p><strong>概念</strong></p>
<p> AS-PATH是公认必遵属性，该属性用一串AS号来描述去往的指定目的地AS间路径或路由，当BGP speaker发气一条路由，将在AS_Path中增加自己的AS号。也就是说，这条路由每经过一个AS区域，就会加上一个AS号，用来标示路径的优先级。</p>
</li>
<li><p><strong>作用</strong></p>
<p>用来标识路由经过的AS路径。</p>
<p>当一个路由器收到两条相同目的地的路由，它将选择<strong>AS路径最短</strong>的路由。 </p>
<p> 在真实的网络环境中，不一定AS号越少的链路质量越高。而AS-PATH这个功能又是根据AS号来判断路由的优先的，AS号越少越优先。那么这个时候我们可能会用到AS-path的一个功能，来增加AS号的长度,从而实现选路的功能：</p>
<p><img src="https://s1.ax1x.com/2020/05/18/YhFydJ.jpg" alt="YhFydJ.jpg"></p>
<p>在这个图中，本来左边的路径是：500,200,100,右边的路径是300,100,现在在右边的路径上面多加几个相同的AS号，最后右边的路径就变成了：300,100,100,100,比左边路径的AS号要多。最后左边的路径为主要工作路径。</p>
</li>
<li><p><strong>总结</strong></p>
<ul>
<li><strong>一个路由的AS号附加得越多，路由的优先级越低。</strong> </li>
<li><strong>AS-path属性可以防止环路。</strong> </li>
<li><strong>可以修改AS的附加，称为path-prepending。</strong> </li>
</ul>
</li>
</ul>
<h3 id="3-3-2-AS-PATH属性配置"><a href="#3-3-2-AS-PATH属性配置" class="headerlink" title="3.3.2 AS-PATH属性配置"></a>3.3.2 AS-PATH属性配置</h3><p>在AS2上配置，创建编号为1的AS-PATH过滤器，拒绝包含AS号300的路由通过。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]ip</span> <span class="string">as-path-filter path-filter1 deny _300_	</span></span><br><span class="line"><span class="meta">[AR2]ip</span> <span class="string">as-path-filter path-filter1 permit .*</span></span><br><span class="line"><span class="meta">[AR2]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">11.2.1.1 as-path-filter path-filter1 export </span></span><br><span class="line"><span class="attr">[AR2-bgp]quit</span></span><br><span class="line"><span class="meta">[AR2]reset</span> <span class="string">bgp all</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a>3.3.3 测试</h3><ol>
<li><p>查看AR1路由表：</p>
<p><img src="https://s1.ax1x.com/2020/05/18/Yhm3pd.png" alt="Yhm3pd.png"></p>
<p>在AR1的路由表中没看到AS300中的任何路由条目，及实现了通过配置AS-PATH属性实现了AR2不向AR1通告AS300内的任何路由。</p>
</li>
<li><p>AR1和AR3互Ping环回地址，结果如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/18/Yhn85F.png" alt="Yhn85F.png"></p>
<p>从上图可以看出AR1 Ping AR3 请求超时，AR3 Ping AR1 可以Ping通，也能说明在AR2中通过配置AS-PATH属性实现了路由过滤。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>BGP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>网络管理与维护课后作业</title>
    <url>/2020/02/24/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p><strong>2.网络管理的对象有哪些？举例说明。</strong></p><p>网络管理对象典型地分为以下 2 类： </p><p>⑴ 网络上的结点设备。</p><p>如计算机网络中 的主机、网关、路由器、交换机、服务器、存储设备，提供电话业务的交换</p><p>机、提供移动电 话业务的移动交换机、提供卫星通信业务的转发器等</p><p>⑵ 网络中的软件、服务以及事件。</p><p>软件资源主要包括操作系统、应用软件和通信软件等。</p><a id="more"></a>






<p>服务是指结点设备或软件所提供服务的相关信息。</p>
<p>事件指网络中出现各种情况时发生的事件。</p>
<p>例：IP路由器</p>
<p>路由器是管理起来最直观的设备。其用途是提供不同网络之间 IP 数据报的转发。典型结构是</p>
<p>一个独立的、带有多个物理端口的设备，每个端口可以连接其他设备（通常是计算机或路由</p>
<p>器）。可管理的对象例如端口的状态（可用或不可用、设备是否连接、当前的速率等）， 端</p>
<p>口的 IP 地址和掩码，静态路由，路由协议及其参数等。还可以监控每个接口发送与接收 </p>
<p>的 IP 数据报数量等。</p>
<p><strong>5. ISO 网络管理的五大管理功能是什么？分别对每个功能进行简单的描述。</strong></p>
<p>ISO 网络管理的五大管理功能分别是<strong>性能管理</strong>、<strong>故障管理</strong>、<strong>计费管理</strong>、<strong>配置管理</strong>、<strong>安全管理</strong>。</p>
<ul>
<li><p><strong>性能管理：</strong></p>
<p>性能管理是采集、分析网络以及网络设备的性能数据，以便发现网络或网络设备的性能 </p>
<p>是否产生偏差或下降并进行矫正，同时统计网络运行状态信息，对网络的服务质量做出</p>
<p>评测、估计，为网络进一步规划与调整提供依据。性能管理的目的是维护网络服务质量</p>
<p>和网络运营效率。</p>
</li>
<li><p><strong>故障管理：</strong></p>
<p>故障管理是收集、过滤和归并网络事件，有效地发现、确认、记录和定位网络故障，分 </p>
<p>析故障原因并给出排错建议与排错工具，形成故障发现、故障告警、故障隔离、故障排</p>
<p>除和故障预防的一整套机制。</p>
</li>
<li><p><strong>计费管理：</strong></p>
<p>计费管理的作用是正确地计算和收取用户使用网络服务的费用，以及进行网络资源利用 </p>
<p>率的统计和网络的成本效益核算。</p>
</li>
<li><p><strong>配置管理：</strong></p>
<p>配置管理是最基本的网络管理功能，其作用是管理网络的建立、扩充和开通。由于网络 </p>
<p>设备来自多个厂商，因此管理信息定义和操作的一致性和互通性就成了一个非常复杂的问题。</p>
</li>
<li><p><strong>安全管理：</strong></p>
<p>安全管理的作用是提供信息的保密、认证和完整性保护机制，使网络中的服务、数据和 </p>
<p>系统免受侵扰和破坏。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络管理与维护</category>
      </categories>
      <tags>
        <tag>网络管理与维护</tag>
      </tags>
  </entry>
  <entry>
    <title>静态路由及默认路由配置</title>
    <url>/2020/03/09/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%8F%8A%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、静态路由及默认路由配置"><a href="#一、静态路由及默认路由配置" class="headerlink" title="一、静态路由及默认路由配置"></a>一、静态路由及默认路由配置</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ul>
<li><p><strong>静态路由：</strong> 是指用户或网络管理员手工配置的路由信息。当网络拓扑结构或链路状态发生改变时，需要网络管理员手工配置静态路由信息。</p>
<p><strong>静态路由优缺点：</strong>  相比较动态路由协议，静态路由无需频繁的交换各自的路由表，配置简单，比较适合小型、简单的网络环境。不适合大型和复杂的网络环境的原因是：当网络拓扑结构和链路状态发生改变时，网络管理员需要做大量的调整，工作量繁重，而且无法感知错误发生，不易排错。 </p>
</li>
<li><p><strong>默认路由：</strong> 是一种特殊的静态路由，当路由表中与数据包目的地址没有匹配的表项时，数据包将根据默认路由条目进行转发。默认路由在某些时候是非常有效的，例如在末梢网络中，默认路由可以大大简化路由器的配置，减轻网络管理员的工作负担。 </p>
</li>
</ul><a id="more"></a>
<h2 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h2><ul>
<li>掌握静态路由的配置方法。</li>
<li>掌握默认路由的配置方法。</li>
</ul>
<h2 id="3-实验拓扑"><a href="#3-实验拓扑" class="headerlink" title="3.实验拓扑"></a>3.实验拓扑</h2><p><img src="https://s2.ax1x.com/2020/03/08/3zg9HS.png" alt="3zg9HS.png"></p>
<h2 id="4-实验步骤"><a href="#4-实验步骤" class="headerlink" title="4.实验步骤"></a>4.实验步骤</h2><h3 id="4-1配置PCA、PCB的IP、掩码及网关。"><a href="#4-1配置PCA、PCB的IP、掩码及网关。" class="headerlink" title="4.1配置PCA、PCB的IP、掩码及网关。"></a>4.1配置PCA、PCB的IP、掩码及网关。</h3><p>如拓扑图中所示</p>
<h3 id="4-2在S1交换机上划分vlan配置虚接口"><a href="#4-2在S1交换机上划分vlan配置虚接口" class="headerlink" title="4.2在S1交换机上划分vlan配置虚接口"></a>4.2在S1交换机上划分vlan配置虚接口</h3><p><strong>要求：vlan1包括端口E0/1到E0/22，vlan2包括端口E0/23到E0/24</strong></p>
<p>配置命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;system-view</span></span><br><span class="line"><span class="attr">sysname</span> <span class="string">S1</span></span><br><span class="line"><span class="meta">[S1]vlan</span> <span class="string">batch 1 2</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/23</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/23]port</span> <span class="string">link-type trunk</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/23]port</span> <span class="string">trunk allow-pass vlan 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/24</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/24]port</span> <span class="string">link-type trunk</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/24]port</span> <span class="string">trunk allow-pass vlan 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">default vlan 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/2</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">default vlan 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 2</span></span><br><span class="line"><span class="meta">[S1-Vlanif</span> <span class="string">2]ip address 192.168.1.1 24</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif</span> <span class="string">2]ip address 192.168.2.1 24</span></span><br></pre></td></tr></table></figure>

<p>配置完成后结果如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zgnBT.png" alt="3zgnBT.png"></p>
<h3 id="4-3在R1上配置端口ip和静态路由"><a href="#4-3在R1上配置端口ip和静态路由" class="headerlink" title="4.3在R1上配置端口ip和静态路由"></a>4.3在R1上配置端口ip和静态路由</h3><p>在R1 GE0/0/0端口上配置ip为192.168.1.2/24</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R1]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.1.2 24</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h5></li>
</ul>
<p><img src="https://s2.ax1x.com/2020/03/08/3zgQN4.png" alt="3zgQN4.png"></p>
<p>查看路由表：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zgUHO.png" alt="3zgUHO.png"></p>
<p>测试：pcApingR1</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3z2roF.png" alt="3z2roF.png"></p>
<p>​    在路由器GE0/0/0端口捕获报文如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zR4cn.png" alt="3zR4cn.png"></p>
<ul>
<li><h5 id="配置默认路由"><a href="#配置默认路由" class="headerlink" title="配置默认路由"></a>配置默认路由</h5><p>删除刚才配置的静态路由：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">undo</span> <span class="string">ip route-static 192.168.2.0 255.255.255.0 192.168.1.1</span></span><br></pre></td></tr></table></figure>

<p>对R1配置缺省路由。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R1]</span> <span class="string">IP route-static 0.0.0.0  0.0.0.0 192.168.1.1</span></span><br></pre></td></tr></table></figure>

<p>查看路由表结果如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zWcK1.png" alt="3zWcK1.png"></p>
</li>
</ul>
<p>测试:</p>
<p>R1pingPCA:</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zfAaT.png" alt="3zfAaT.png"></p>
<p><strong>问题出处：</strong>在拓扑中，S1上GE0/0/24端口选择的是trunk类型，无法ping通。</p>
<p><strong>解决方案如下：</strong></p>
<p>将GE0/0/24端口类型换为access。</p>
<p><strong>原因解释：</strong></p>
<p>因为R1是路由器。路由器是三层设备，不认识二层的Vlan、Trunk等等。 故在此将路由器当作用户设备端口类型选择为access。</p>
<p>端口类型更换后测试：</p>
<p>R1 Ping PCA：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/3zxgED.png" alt="3zxgED.png"></p>
<p>在端口</p>
<p>GE0/0/0上捕获报文如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/3zxTDf.png" alt="3zxTDf.png"></p>
<h1 id="二、RIP配置及RIPv1报文结构分析"><a href="#二、RIP配置及RIPv1报文结构分析" class="headerlink" title="二、RIP配置及RIPv1报文结构分析"></a>二、RIP配置及RIPv1报文结构分析</h1><h2 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h2><p> RIP(Routing Information Protocol,路由信息协议）是一种<a href="https://baike.baidu.com/item/内部网关协议" target="_blank" rel="noopener">内部网关协议</a>（IGP），是一种<a href="https://baike.baidu.com/item/动态路由选择/1250467" target="_blank" rel="noopener">动态路由选择</a>协议，用于自治系统（AS）内的路由信息的传递。RIP协议基于距离矢量算法（DistanceVectorAlgorithms），使用“跳数”(即metric)来衡量到达目标地址的路由距离。这种协议的<a href="https://baike.baidu.com/item/路由器/108294" target="_blank" rel="noopener">路由器</a>只关心自己周围的<a href="https://baike.baidu.com/item/世界/24458" target="_blank" rel="noopener">世界</a>，只与自己相邻的路由器交换信息，范围限制在15跳(15度)之内，再远，它就不关心了。RIP应用于网络七层模型的应用层。 </p>
<h2 id="2-实验目的-1"><a href="#2-实验目的-1" class="headerlink" title="2.实验目的"></a>2.实验目的</h2><ul>
<li>掌握RIP的配置方法。</li>
<li>理解RIPv1报文的结构。</li>
</ul>
<h2 id="3-实验拓扑-1"><a href="#3-实验拓扑-1" class="headerlink" title="3.实验拓扑"></a>3.实验拓扑</h2><p><img src="https://s2.ax1x.com/2020/03/08/3zg9HS.png" alt="3zg9HS.png"></p>
<h2 id="4-实验步骤-1"><a href="#4-实验步骤-1" class="headerlink" title="4.实验步骤"></a>4.实验步骤</h2><p>在静态路由的实验基础上完成RIP的配置。</p>
<h3 id="4-1对静态路由配置进行修改"><a href="#4-1对静态路由配置进行修改" class="headerlink" title="4.1对静态路由配置进行修改"></a>4.1对静态路由配置进行修改</h3><p>删除静态路由条目或者缺省路由条目。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">undo</span> <span class="string">ip route-static 192.168.2.0 255.255.255.0 192.168.1.1</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line"><span class="attr">undo</span> <span class="string">ip route-static 0.0.0.0 0.0.0.0 192.168.1.1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2在S1、R1上分别配置RIP协议"><a href="#4-2在S1、R1上分别配置RIP协议" class="headerlink" title="4.2在S1、R1上分别配置RIP协议"></a>4.2在S1、R1上分别配置RIP协议</h3><p>命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在交换机S1上的配置信息如下：</span></span><br><span class="line"><span class="attr">[S1]rip</span></span><br><span class="line"><span class="meta">[S1-rip-1]network</span> <span class="string">192.168.1.0</span></span><br><span class="line"><span class="meta">[S1-rip-1]network</span> <span class="string">192.168.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在路由器R1上的配置信息如下：</span></span><br><span class="line"><span class="attr">[R4]rip</span></span><br><span class="line"><span class="meta">[R4-rip-1]network</span> <span class="string">192.168.1.0</span></span><br></pre></td></tr></table></figure>

<p>查看R1的路由表信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R1]display</span> <span class="string">ip routing-table</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/03/09/8Sh4Mj.png" alt="8Sh4Mj.png"></p>
<p>可以看到RIP的路由条目：</p>
<ul>
<li><p>目的IP为：192.168.2.0</p>
</li>
<li><p>子网掩码为：255.255.255.0（24）</p>
</li>
<li><p>下一跳IP为：192.168.1.1</p>
</li>
</ul>
<p>测试：</p>
<p>R1 Ping PCA：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/8S5pcQ.png" alt="8S5pcQ.png"></p>
<p>在端口GE0/0/0处捕获报文信息如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/8SIaGT.png" alt="8SIaGT.png"></p>
<p>发现RIPv1的报文。</p>
<h3 id="4-3RIPv1报文结构分析"><a href="#4-3RIPv1报文结构分析" class="headerlink" title="4.3RIPv1报文结构分析"></a>4.3RIPv1报文结构分析</h3><p>具体报文内容如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/03/12/8VvUiR.png" alt="8VvUiR.png"></p>
<p>在此只研究RIP报文结构，对其他层不做展开描述。</p>
<p>会话层数据概况 （该文使用RIP协议：Routing Information Protocol）</p>
<ul>
<li><p><strong>Command Response (2)  #命令</strong></p>
<ul>
<li><p>1为RIP请求信息；</p>
<p>交换机刚启动RIP时，发送request请求报文；<br>此后，没有request报文，只有response应答报文</p>
</li>
<li><p>2为RIP响应信息；</p>
</li>
</ul>
</li>
<li><p><strong>Version  RIPv1 (1)  #版本</strong></p>
<p>使用RIPv1版本</p>
</li>
<li><p><strong>Address Family IP (2) #协议簇</strong></p>
<p>该字段长度为4字节。对于TCP/IP协议簇，该字段的取值为2 </p>
</li>
<li><p><strong>IP Address 192.168.1.0   #路由项的目的网络地址</strong> </p>
<p> 表示路由器的目的网络地址为 192.168.1.0</p>
</li>
<li><p><strong>Metric  16 #跳数:</strong></p>
<p>表示跳数为16</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>路由实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>边界网关协议实验（BGP）《二》</title>
    <url>/2020/05/13/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE%E5%AE%9E%E9%AA%8C%EF%BC%88BGP%EF%BC%89%E3%80%8A%E4%BA%8C%E3%80%8B/</url>
    <content><![CDATA[<h1 id="1、拓扑图"><a href="#1、拓扑图" class="headerlink" title="1、拓扑图"></a>1、拓扑图</h1><p><img src="https://s1.ax1x.com/2020/05/11/YYpH2R.png" alt="YYpH2R.png"></p><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><p>实现控制选路：</p><ul>
<li>AR1-&gt;AR4  经过AR2</li>
<li>AR4-&gt;AR1  经过AR3</li>
</ul><h1 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h1><h2 id="3-1基础配置"><a href="#3-1基础配置" class="headerlink" title="3.1基础配置"></a>3.1基础配置</h2><p>根据拓扑所示，配置各个路由器ip。</p><h2 id="3-2配置域内路由协议（OSPF）"><a href="#3-2配置域内路由协议（OSPF）" class="headerlink" title="3.2配置域内路由协议（OSPF）"></a>3.2配置域内路由协议（OSPF）</h2><p>AR2配置如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">R2</span></span><br><span class="line"><span class="meta">[AR2]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[AR2-ospf-1]area</span> <span class="string">0</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]network</span> <span class="string">19.0.24.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]network</span> <span class="string">2.2.2.2 0.0.0.0</span></span><br><span class="line"><span class="attr">[AR2-ospf-1-area-0.0.0.0]quit</span></span><br><span class="line"><span class="attr">[AR2-ospf-1]quit</span></span><br></pre></td></tr></table></figure><a id="more"></a>






<p>AR3，AR4路由器配置命令类似。</p>
<p>测试：</p>
<p> AR2、AR3、AR4互相ping以下他们的loopback地址，看ospf是否能ping通</p>
<p>结果如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYPWrt.png" alt="YYPWrt.png"></p>
<h2 id="3-3域间路由协议（边界网关协议BGP）"><a href="#3-3域间路由协议（边界网关协议BGP）" class="headerlink" title="3.3域间路由协议（边界网关协议BGP）"></a>3.3域间路由协议（边界网关协议BGP）</h2><p> 配置AR1和AR2、AR1和AR3之间的邻接关系，使他们之间能通过==EBGP==相互传递路由，在AR2、AR3和AR4上配置IBGP邻接关系，使AR2、AR3、AR4之间可以通过==IBGP==互相传递路由。 </p>
<ul>
<li>EBGP邻居:AS之间的BGP邻居关系。</li>
<li>IBGP邻居:同一个AS内部的BGP邻居关系。</li>
</ul>
<h3 id="AR1配置："><a href="#AR1配置：" class="headerlink" title="AR1配置："></a>AR1配置：</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;AR1&gt;sys</span></span><br><span class="line"><span class="meta">[AR1]bgp</span> <span class="string">100</span></span><br><span class="line"><span class="meta">[AR1-bgp]router-id</span> <span class="string">1.1.1.1</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">19.0.12.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">19.0.13.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR1-bgp]network</span> <span class="string">1.1.1.1 32</span></span><br></pre></td></tr></table></figure>

<h3 id="AR2配置："><a href="#AR2配置：" class="headerlink" title="AR2配置："></a>AR2配置：</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR2-bgp]router-id</span> <span class="string">2.2.2.2</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">19.0.12.1 as-number 100</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">19.0.24.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">19.0.24.2 next-hop-local</span></span><br><span class="line"><span class="meta">[AR2-bgp]import-route</span> <span class="string">ospf 1</span></span><br></pre></td></tr></table></figure>

<p>AR3、AR4与AR2类似。</p>
<h2 id="3-4查看BGP路由"><a href="#3-4查看BGP路由" class="headerlink" title="3.4查看BGP路由"></a>3.4查看BGP路由</h2><h3 id="AR1路由表："><a href="#AR1路由表：" class="headerlink" title="AR1路由表："></a>AR1路由表：</h3><p><img src="https://s1.ax1x.com/2020/05/11/YYFD9e.png" alt="YYFD9e.png"></p>
<h3 id="AR4路由表："><a href="#AR4路由表：" class="headerlink" title="AR4路由表："></a>AR4路由表：</h3><p><img src="https://s1.ax1x.com/2020/05/11/YYkiHx.png" alt="YYkiHx.png"></p>
<p> 从路由表可以看出，AR4到AR1之间的通信是通过AR2来传递的。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>AR4 Ping AR1 在AR2的GE0/0/0端口、AR3的GE0/0/1端口分别进行报文捕获，结果如下：</p>
<p>AR2的GE0/0/0端口:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYk5a6.png" alt="YYk5a6.png"></p>
<p>AR3的GE0/0/1:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYkOsA.png" alt="YYkOsA.png"></p>
<p>在AR2的GE0/0/0端口捕获到ICMP报文，验证了路由传递路径为AR4-&gt;AR2-&gt;AR1。</p>
<h2 id="3-5-BGP各种属性控制选路"><a href="#3-5-BGP各种属性控制选路" class="headerlink" title="3.5 BGP各种属性控制选路"></a>3.5 BGP各种属性控制选路</h2><h3 id="3-5-1-通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的"><a href="#3-5-1-通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的" class="headerlink" title="3.5.1 通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的"></a>3.5.1 通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的</h3><p>==MED值越大，优先级越低。==</p>
<ol>
<li><p>修改MED属性，增加AR3路由器的MED值</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR3]route-policy</span> <span class="string">med permit node 10</span></span><br><span class="line"><span class="meta">[AR3-route-policy]apply</span> <span class="string">cost + 500</span></span><br><span class="line"><span class="attr">[AR3-route-policy]quit</span></span><br><span class="line"><span class="meta">[AR3]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR3-bgp]peer</span> <span class="string">19.0.12.1 route-policy med export</span></span><br><span class="line"><span class="attr">[AR3-bgp]quit</span></span><br><span class="line"><span class="attr">[AR3]quit</span></span><br><span class="line"><span class="meta">&lt;AR3&gt;reset</span> <span class="string">bgp all</span></span><br><span class="line"><span class="attr">&lt;AR3&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在AR1上查看路由表 </p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYEr3F.png" alt="YYEr3F.png"></p>
<p>可以看到去往AR3的MED值明显大于AR2。故路由传递路径为AR1-&gt;AR2-&gt;AR4。</p>
</li>
</ol>
<h3 id="3-5-2-修改优先级参数，使AR4到AR1的通信通过AR3来传递"><a href="#3-5-2-修改优先级参数，使AR4到AR1的通信通过AR3来传递" class="headerlink" title="3.5.2 修改优先级参数，使AR4到AR1的通信通过AR3来传递"></a>3.5.2 修改优先级参数，使AR4到AR1的通信通过AR3来传递</h3><p> 本地优先级（local-preference属性）的默认值为100，越大越有先，取值范围0-4294967295<br>想走谁，就将谁的local-preference值设置的大些 </p>
<ol>
<li><p>在AR3上修改优先级 </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR3]route-policy</span> <span class="string">lop permit node 10</span></span><br><span class="line"><span class="meta">[AR3-route-policy]apply</span> <span class="string">local-preference 222</span></span><br><span class="line"><span class="attr">[AR3-route-policy]quit</span></span><br><span class="line"><span class="meta">[AR3]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR3-bgp]peer</span> <span class="string">19.0.34.2 route-policy lop export</span></span><br><span class="line"><span class="attr">[AR3-bgp]quit</span></span><br><span class="line"><span class="attr">[AR3]quit</span></span><br><span class="line"><span class="meta">&lt;AR3&gt;reset</span> <span class="string">bgp all</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在AR4上查看路由表<br><img src="https://s1.ax1x.com/2020/05/11/YYZbkt.png" alt="YYZbkt.png"></p>
<p>AR3的local-preference值大于AR2，路由路径应为AR4-&gt;AR3-&gt;AR1。</p>
</li>
</ol>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>AR4 Ping AR1 在AR3的GE0/0/0端口进行报文捕获，捕获报文内容如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYm85q.png" alt="YYm85q.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>BGP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
</search>
