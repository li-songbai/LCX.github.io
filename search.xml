<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARM9指令操作系统</title>
    <url>/2019/11/04/ARM9%E6%8C%87%E4%BB%A4%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><strong>注：</strong>为了迅速的复习完ARM9的寻址方式以及基本指令集，在此只做指令演示，不做详细的文字叙述。</p><h1 id="一、ARM处理器的寻址方式"><a href="#一、ARM处理器的寻址方式" class="headerlink" title="一、ARM处理器的寻址方式"></a>一、ARM处理器的寻址方式</h1><ul>
<li><h2 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R2,R3		;R2&lt;-R3		R3中的内容赋给R2</span><br><span class="line">ADD R2,R3,R4    ;R2&lt;-R3+R4	R3+R4中的内容相加，结果赋给R2</span><br></pre></td></tr></table></figure>



</li>
</ul><a id="more"></a>

<ul>
<li><h2 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD R1.R1,#1234		:R1&lt;-R1+1234</span><br><span class="line">ADD R1,R1,#0x7f		;R1&lt;-R1+0x7f</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R1,[R2]		;R1&lt;-[R2]		R2中的内容为地址，该指令实现将该地址中的数据传送到R1</span><br><span class="line">STR R1,[R2]		;[R2]&lt;-R1</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h2 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R0,[R1,#8]		;R0&lt;-[R1+8]	R1的内容加上8形成的操作数的有效地址，并将地址中的操作数存入R0中</span><br><span class="line">LDR R0,[R1,#8]!		;R0&lt;-[R1+8],R1&lt;-R1+8</span><br><span class="line">LDR R0,[R1],#2		;R0&lt;-[R1],R1&lt;-R1+2</span><br><span class="line">LDR R0,[R1,R2]		;R0&lt;-[R1+R2]</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h2 id="寄存器移位寻址"><a href="#寄存器移位寻址" class="headerlink" title="寄存器移位寻址"></a>寄存器移位寻址</h2><p><strong>1.LSL(或ASL)操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，LSL（或ASL）操作数</span><br></pre></td></tr></table></figure>

<p>作用：可完成对通用寄存器中的内容进行逻辑（或算术）的左移操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,LSL#4		;将R1中的内容逻辑左移四位后送给R0</span><br></pre></td></tr></table></figure>

<p><strong>2.LSR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，LSR操作数</span><br></pre></td></tr></table></figure>

<p>作用：可完成对通用寄存器中的内容进行逻辑的右移操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,LSR#4		;将R1中的内容逻辑右移四位后送给R0</span><br></pre></td></tr></table></figure>

<p><strong>3.ROR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，ROR操作数</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行循环右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,ROR#4		;R1的内容循环右移4位后传到R0中</span><br></pre></td></tr></table></figure>

<p><strong>4.ASR操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，ASR操作数</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,ASR#4		;R1的内容右移4位后传到R0中，符号为保持不变。</span><br></pre></td></tr></table></figure>

<p><strong>5.RRX操作</strong></p>
<p>操作的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用寄存器，RRX</span><br></pre></td></tr></table></figure>

<p>作用：对寄存器中的内容进行带扩充的循环右移的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0,R1,RRX		;R1的内容进行带扩充的循环右移1位后传到R0中</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h2><ul>
<li><h3 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h3></li>
<li><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3></li>
</ul>
</li>
</ul>
<h1 id="二、ARM指令集"><a href="#二、ARM指令集" class="headerlink" title="二、ARM指令集"></a>二、ARM指令集</h1><ul>
<li><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;opcode&gt;&#123;&lt;code&gt;&#125;&#123;s&#125;&lt;Rd&gt;,&lt;Rn&gt;,&lt;op2&gt;</span><br></pre></td></tr></table></figure>

<p>各项介绍如下：</p>
<p><opcode>:操作码，如ADD等操作指令。</opcode></p>
<p>{<code>}：决定指令执行的条件码。</code></p>
<p>{s}：决定指令执行是否影响CPRS寄存器的值。</p>
<p><rd>：目的寄存器。</rd></p>
<p><rn>：第一个操作数，为寄存器。</rn></p>
<p><op2>：第二个操作数。</op2></p>
</li>
</ul>
<p><strong>注</strong>：opcode、cond与s之间没有分隔符，s与Rd之间用空格隔开。</p>
<ul>
<li><h2 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h2><p>如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">条件码</th>
<th align="center">助记符后缀</th>
<th align="center">标志</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000</td>
<td align="center">EQ</td>
<td align="center">Z置位</td>
<td align="center">相等</td>
</tr>
<tr>
<td align="center">0001</td>
<td align="center">NE</td>
<td align="center">Z清零</td>
<td align="center">不相等</td>
</tr>
<tr>
<td align="center">0010</td>
<td align="center">CS</td>
<td align="center">C置位</td>
<td align="center">无符号数大于或等于</td>
</tr>
<tr>
<td align="center">0011</td>
<td align="center">CC</td>
<td align="center">C清零</td>
<td align="center">无符号数小于</td>
</tr>
<tr>
<td align="center">0100</td>
<td align="center">MI</td>
<td align="center">N置位</td>
<td align="center">负数</td>
</tr>
<tr>
<td align="center">0101</td>
<td align="center">PL</td>
<td align="center">N清零</td>
<td align="center">正数或零</td>
</tr>
<tr>
<td align="center">0110</td>
<td align="center">VS</td>
<td align="center">V置位</td>
<td align="center">溢出</td>
</tr>
<tr>
<td align="center">0111</td>
<td align="center">VC</td>
<td align="center">V清零</td>
<td align="center">未溢出</td>
</tr>
<tr>
<td align="center">1000</td>
<td align="center">HI</td>
<td align="center">C置位Z清零</td>
<td align="center">无符号数大于</td>
</tr>
<tr>
<td align="center">1001</td>
<td align="center">LS</td>
<td align="center">C清零Z置位</td>
<td align="center">无符号数小于或等于</td>
</tr>
<tr>
<td align="center">1010</td>
<td align="center">GE</td>
<td align="center">N等于V</td>
<td align="center">带符号数大于或等于</td>
</tr>
<tr>
<td align="center">1011</td>
<td align="center">LT</td>
<td align="center">N不等于V</td>
<td align="center">带符号数小于</td>
</tr>
<tr>
<td align="center">1100</td>
<td align="center">GT</td>
<td align="center">Z清零且（N等于V）</td>
<td align="center">带符号数大于</td>
</tr>
<tr>
<td align="center">1101</td>
<td align="center">LE</td>
<td align="center">Z置位或（N不等V）</td>
<td align="center">带符号数小于或等于</td>
</tr>
<tr>
<td align="center">1110</td>
<td align="center">AL</td>
<td align="center">忽略</td>
<td align="center">无条件执行</td>
</tr>
</tbody></table>
</li>
<li><h2 id="ARM存储器访问指令"><a href="#ARM存储器访问指令" class="headerlink" title="ARM存储器访问指令"></a>ARM存储器访问指令</h2><p><strong>1.单一数据加载/存储指令</strong></p>
<p><strong><1>.LDR指令</1></strong></p>
<p>LDR的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125; 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R3,[R4]			;将存储器地址为R4中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,R2]		;将存储器地址为R1+R2中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,#8]		;将存储器地址为R1+8中的字数据读入R3寄存器中</span><br><span class="line">LDR R3,[R1,R2]!		;将存储器地址为R1中的字数据读入R3寄存器中,将新地址R1+R2写入R1</span><br></pre></td></tr></table></figure>

<p>LDR指令是字加载指令。</p>
<p><strong><2>.LDRB指令</2></strong></p>
<p>LDRB的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;B 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDRB R3,[R1]		;将存储器地址为R4中的字数据读入R3寄存器中,并将R3的高24位清零</span><br></pre></td></tr></table></figure>

<p>LDRB指令是字加载指令，同时将寄存器的高24位清零。</p>
<p><strong><3>.LDRH指令</3></strong></p>
<p>LDRH的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;H 目的寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDRH R3,[R1]		;将存储器地址为R4中的字数据读入R3寄存器中,并将R3的高16位清零</span><br></pre></td></tr></table></figure>

<p>LDRB指令是字加载指令，同时将寄存器的高16位清零。</p>
<p><strong><4>.STR指令</4></strong></p>
<p>STR的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125; 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR R3,[R1],#8		;将R3中的字数据写入以R1为地址的存储器中，并将新地址R1+8写入R1</span><br></pre></td></tr></table></figure>

<p>STR指令是字存储指令，从源寄存器中将一个32位的字数据传送到寄存器中。</p>
<p><strong><5>.STRB指令</5></strong></p>
<p>STRB的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125;B 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRB R3,[R1,#8]		;将R3中的字数据写入以R1+8为地址的存储器中</span><br></pre></td></tr></table></figure>

<p>STRB指令是无符号字节存储指令，从源寄存器中将一个8位的字节数据传送到寄存器中。该字节数据是源寄存器中的低8位。</p>
<p><strong><6>.STRH指令</6></strong></p>
<p>STRH的指令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR&#123;条件&#125;H 源寄存器,&lt;存储器地址&gt;</span><br></pre></td></tr></table></figure>

<p>指令示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRH R3,[R1]		;将R3中的半字数据写入以R1为地址的存储器中</span><br></pre></td></tr></table></figure>

<p>STRH指令是无符号半字存储指令，从源寄存器中将一个16位的半字数据传送到寄存器中。该字节数据是源寄存器中的低16位。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>ARM9指令操作</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>DHCP跨路由转发</title>
    <url>/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/11.png" class><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><ul>
<li>DHCP协议工作过程配置</li>
<li>DHCP协议报文格式</li>
</ul><h1 id="3-实验原理"><a href="#3-实验原理" class="headerlink" title="3.实验原理"></a>3.实验原理</h1><h2 id="3-1DHCP概述"><a href="#3-1DHCP概述" class="headerlink" title="3.1DHCP概述"></a>3.1DHCP概述</h2><p> DHCP，动态主机配置协议，前身是BOOTP协议，是一个局域网的网络协议，使用UDP协议工作，常用的2个端口：67(DHCP server),68(DHCP client)。DHCP通常被用于局域网环境，主要作用是集中的管理、分配IP地址，使client动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。简单来说，DHCP就是一个不需要账号密码登录的、自动给内网机器分配IP地址等信息的协议。 </p><a id="more"></a>



<h2 id="3-2DHCP协议中的报文"><a href="#3-2DHCP协议中的报文" class="headerlink" title="3.2DHCP协议中的报文"></a>3.2DHCP协议中的报文</h2><h3 id="3-2-1DHCP报文共有一下几种："><a href="#3-2-1DHCP报文共有一下几种：" class="headerlink" title="3.2.1DHCP报文共有一下几种："></a>3.2.1DHCP报文共有一下几种：</h3><ul>
<li><strong>DHCP DISCOVER</strong> ：客户端开始DHCP过程发送的包，是DHCP协议的开始</li>
<li><strong>DHCP OFFER</strong> ：服务器接收到DHCP DISCOVER之后做出的响应，它包括了给予客户端的IP（yiaddr）、客户端的MAC地址、租约过期时间、服务器的识别符以及其他信息</li>
<li><strong>DHCP REQUEST</strong> ：客户端对于服务器发出的DHCP OFFER所做出的响应。在续约租期的时候同样会使用。</li>
<li><strong>DHCP ACK</strong> ：服务器在接收到客户端发来的DHCP REQUEST之后发出的成功确认的报文。在建立连接的时候，客户端在接收到这个报文之后才会确认分配给它的IP和其他信息可以被允许使用。</li>
<li><strong>DHCP NAK</strong> ：DHCP ACK的相反的报文，表示服务器拒绝了客户端的请求。</li>
<li><strong>DHCP RELEASE</strong> ：一般出现在客户端关机、下线等状况。这个报文将会使DHCP服务器释放发出此报文的客户端的IP地址</li>
<li><strong>DHCP INFORM</strong> ：客户端发出的向服务器请求一些信息的报文</li>
<li><strong>DHCP DECLINE</strong> :当客户端发现服务器分配的IP地址无法使用（如IP地址冲突时），将发出此报文，通知服务器禁止使用该IP地址。</li>
</ul>
<h3 id="3-2-2DHCP-的-工作流程："><a href="#3-2-2DHCP-的-工作流程：" class="headerlink" title="3.2.2DHCP 的 工作流程："></a>3.2.2DHCP 的 工作流程：</h3><img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/1.png" class>

<h1 id="4-实验主要步骤"><a href="#4-实验主要步骤" class="headerlink" title="4.实验主要步骤"></a>4.实验主要步骤</h1><h2 id="4-1设置PC的ip为DHCP动态获取"><a href="#4-1设置PC的ip为DHCP动态获取" class="headerlink" title="4.1设置PC的ip为DHCP动态获取"></a>4.1设置PC的ip为DHCP动态获取</h2><h2 id="4-2在交换机S1中划分vlan、配置虚接口IP"><a href="#4-2在交换机S1中划分vlan、配置虚接口IP" class="headerlink" title="4.2在交换机S1中划分vlan、配置虚接口IP"></a>4.2在交换机S1中划分vlan、配置虚接口IP</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.	</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">S1	</span></span><br><span class="line"><span class="meta">[S1]vlan</span> <span class="string">batch 2 3 4</span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">GigabitEthernet0/0/1</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">link-type access 	</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">default vlan 2</span></span><br><span class="line"><span class="attr">[S1-GigabitEthernet0/0/1]quit</span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">GigabitEthernet0/0/2</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">link-type access 	</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">default vlan 3</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">GigabitEthernet 0/0/3</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">link-type access </span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">l	</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">li</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">default vlan 4</span></span><br><span class="line"><span class="attr">[S1-GigabitEthernet0/0/3]</span></span><br><span class="line"><span class="attr">[S1-GigabitEthernet0/0/3]quit</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1-Vlanif2]ip</span> <span class="string">address 192.168.0.254 24</span></span><br><span class="line"><span class="attr">[S1-Vlanif2]quit</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">Vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif3]ip</span> <span class="string">address 192.168.1.254 24</span></span><br><span class="line"><span class="attr">[S1-Vlanif3]quit</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">Vlanif 4</span></span><br><span class="line"><span class="meta">[S1-Vlanif4]ip</span> <span class="string">address 192.168.2.1 24</span></span><br><span class="line"><span class="attr">[S1-Vlanif4]quit</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3在路由器R1中配置DHCP服务"><a href="#4-3在路由器R1中配置DHCP服务" class="headerlink" title="4.3在路由器R1中配置DHCP服务"></a>4.3在路由器R1中配置DHCP服务</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;Huawei&gt;system-view</span> <span class="string"></span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R1</span></span><br><span class="line"><span class="meta">[R1]int</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.2.254 24</span></span><br><span class="line"><span class="attr">[R1-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">route-static 192.168.0.0 24 192.168.2.1</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">route-static 192.168.1.0 24 192.168.2.1</span></span><br><span class="line"><span class="comment">#创建地址池 1、2</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">pool 1	</span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]network</span> <span class="string">192.168.0.0 mask 255.255.255.0</span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]gate</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]gateway-list</span> <span class="string">192.168.0.254	</span></span><br><span class="line"><span class="meta">[R1-ip-pool-1]dns-list</span> <span class="string">8.8.8.8</span></span><br><span class="line"><span class="attr">[R1-ip-pool-1]quit</span></span><br><span class="line"><span class="meta">[R1]ip</span> <span class="string">pool 2</span></span><br><span class="line"><span class="meta">[R1-ip-pool-2]network</span> <span class="string">192.168.1.0 mask 255.255.255.0</span></span><br><span class="line"><span class="meta">[R1-ip-pool-2]gateway-list</span> <span class="string">192.168.1.254</span></span><br><span class="line"><span class="meta">[R1-ip-pool-2]dns-list</span> <span class="string">114.114.114.114</span></span><br><span class="line"><span class="attr">[R1-ip-pool-2]quit</span></span><br><span class="line"><span class="meta">[R1]int</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]dhcp</span> <span class="string">enable</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]dhcp</span> <span class="string">select global </span></span><br><span class="line"><span class="attr">[R1-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="attr">[R1]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4在交换机S1中配置DHCP中继服务"><a href="#4-4在交换机S1中配置DHCP中继服务" class="headerlink" title="4.4在交换机S1中配置DHCP中继服务"></a>4.4在交换机S1中配置DHCP中继服务</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[S1]dhcp</span> <span class="string">enable </span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">Vlanif 2</span></span><br><span class="line"><span class="meta">[S1-Vlanif2]dhcp</span> <span class="string">select relay </span></span><br><span class="line"><span class="meta">[S1-Vlanif2]dhcp</span> <span class="string">relay server-ip 192.168.2.254</span></span><br><span class="line"><span class="attr">[S1-Vlanif2]quit</span></span><br><span class="line"><span class="meta">[S1]int</span> <span class="string">Vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif3]dhcp</span> <span class="string">select relay </span></span><br><span class="line"><span class="meta">[S1-Vlanif3]dhcp</span> <span class="string">relay server-ip 192.168.2.254		</span></span><br><span class="line"><span class="attr">[S1-Vlanif3]quit</span></span><br></pre></td></tr></table></figure>

<h2 id="4-5测试"><a href="#4-5测试" class="headerlink" title="4.5测试"></a>4.5测试</h2><p>在PC3的命令行输入ipconfig命令查看机器的ip分配情况：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/12.png" class>

<p>在PC4的命令行输入ipconfig命令查看机器的ip分配情况：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/13.png" class>

<p>用PC3 Ping PC4 测试网络连通性，结果如下：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/14.png" class>

<h2 id="4-6DHCP报文捕获和分析"><a href="#4-6DHCP报文捕获和分析" class="headerlink" title="4.6DHCP报文捕获和分析"></a>4.6DHCP报文捕获和分析</h2><h3 id="4-6-1报文捕获"><a href="#4-6-1报文捕获" class="headerlink" title="4.6.1报文捕获"></a>4.6.1报文捕获</h3><p>先将PC3的ip获取方式设置为静态，然后在路由器R1的GE0/0/0端口上进行报文捕获，再将PC3的ip获取方式设置为DHCP动态获取，去触发3.2.2工作流程中的报文（<strong>DHCP DISCOVER</strong>，<strong>DHCP OFFER</strong> ，<strong>DHCP REQUEST</strong>，<strong>DHCP ACK</strong>），再将PC3的ip获取方式设置为静态，模拟设备客户端下线行为，触发<strong>DHCP RELEASE</strong>报文。共捕获到5中类型的报文，如下图所示：</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/15.png" class>

<h3 id="4-6-2报文分析"><a href="#4-6-2报文分析" class="headerlink" title="4.6.2报文分析"></a>4.6.2报文分析</h3><ul>
<li><p><strong>DHCP DISCOVER</strong>：客户端开始DHCP过程发送的包，是DHCP协议的开始。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/16.png" class>
</li>
<li><p><strong>DHCP OFFER</strong> ：服务器接收到DHCP DISCOVER之后做出的响应，它包括了给予客户端的IP（yiaddr）、客户端的MAC地址、租约过期时间、服务器的识别符以及其他信息。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/17.png" class>
</li>
<li><p><strong>DHCP REQUEST</strong> ：客户端对于服务器发出的DHCP OFFER所做出的响应。在续约租期的时候同样会使用。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/18.png" class>
</li>
<li><p><strong>DHCP ACK</strong> ：服务器在接收到客户端发来的DHCP REQUEST之后发出的成功确认的报文。在建立连接的时候，客户端在接收到这个报文之后才会确认分配给它的IP和其他信息可以被允许使用。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/19.png" class>
</li>
<li><p><strong>DHCP RELEASE</strong> ：一般出现在客户端关机、下线等状况。这个报文将会使DHCP服务器释放发出此报文的客户端的IP地址。</p>
<img src="/2020/04/13/DHCP%E8%B7%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/20.png" class></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>DES加解密算法浅析</title>
    <url>/2020/02/23/DES%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="DES加解密算法浅析"><a href="#DES加解密算法浅析" class="headerlink" title="DES加解密算法浅析"></a>DES加解密算法浅析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>DES是一个分组加密算法，它以64位为分组对数据加密。同时DES也是一个对称算法：加密和解密用的是同一个算法。DES是一个包含16个阶段的“替换–置换”的分组加密算法，64位的分组明文序列作为加密算法的输入，经过16轮加密得到64位的密文序列。</p><p>算法原理看下图：</p><p><img src="https://s2.ax1x.com/2019/11/09/MmQzp6.png" alt="MmQzp6.png"></p><h2 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h2><p>DES算法主要分为3部分：加解密运算、f函数的处理、轮子密钥的生成，从右往左分别简单介绍一下。</p><a id="more"></a>



<p>轮子密钥的生成</p>
<p>数据表1</p>
<p> //PC-1</p>
<p>​    private int[] PC1={57,49,41,33,25,17,9,</p>
<p>​                       1,58,50,42,34,26,18,</p>
<p>​                       10,2,59,51,43,35,27,</p>
<p>​                        19,11,3,60,52,44,36,</p>
<p>​                       63,55,47,39,31,23,15,</p>
<p>​                       7,62,54,46,38,30,22,</p>
<p>​                       14,6,61,53,45,37,29,</p>
<p>​                       21,13,5,28,20,12,4};</p>
<p>​    //PC-2</p>
<p>​    private int[] PC2={14,17,11,24,1,5,3,28,</p>
<p>​                       15,6,21,10,23,19,12,4,</p>
<p>​                       26,8,16,7,27,20,13,2,</p>
<p>​                       41,52,31,37,47,55,30,40,</p>
<p>​                       51,45,33,48,44,49,39,56,</p>
<p>​                       34,53,46,42,50,36,29,32};</p>
<p>​    //Schedule of Left Shifts</p>
<p>​    private int[] LFT={1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};</p>
<p>16个子密钥的生成主要是利用了数据表1中的数表，首先将64位的初始密钥利用PC1压缩置换位56位的密钥，然后将其一分为二，这里记为C0和D0。这里28位的C0和28位的D0分别根据LET数组相应位置的值进行左移位得到C1和D1。这是将C1和D1合并根据PC2进行压缩置换得到48位的子密钥，而且注意C1和D1作为下轮的输入以用来产生下一个子密钥。</p>
<p>f函数的运算</p>
<p>数据表2</p>
<p>//E扩展</p>
<p>​    private int[] E={32,1,2,3,4,5,</p>
<p>​                      4,5,6,7,8,9,</p>
<p>​                     8,9,10,11,12,13,</p>
<p>​                     12,13,14,15,16,17,</p>
<p>​                     16,17,18,19,20,21,</p>
<p>​                     20,21,22,23,24,25,</p>
<p>​                     24,25,26,27,28,29,</p>
<p>​                     28,29,30,31,32,1};</p>
<p>​    //P置换</p>
<p>​    private int[] P={16,7,20,21,29,12,28,17,</p>
<p>​                      1,15,23,26,5,18,31,10,</p>
<p>​                      2,8,24,14,32,27,3,9,</p>
<p>​                      19,13,30,6,22,11,4,25};</p>
<p>​    private static final int[][][] S_Box = {//S-盒</p>
<p>​            {// S_Box[1]</p>
<p>​                    { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },</p>
<p>​                    { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },</p>
<p>​                    { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },</p>
<p>​                    { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } },</p>
<p>​            { // S_Box[2]</p>
<p>​                    { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },</p>
<p>​                    { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },</p>
<p>​                    { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },</p>
<p>​                    { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 } },</p>
<p>​            { // S_Box[3]</p>
<p>​                    { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },</p>
<p>​                    { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },</p>
<p>​                    { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },</p>
<p>​                    { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 } },</p>
<p>​            { // S_Box[4]</p>
<p>​                    { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },</p>
<p>​                    { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },</p>
<p>​                    { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },</p>
<p>​                    { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 } },</p>
<p>​            { // S_Box[5]</p>
<p>​                    { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },</p>
<p>​                    { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },</p>
<p>​                    { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },</p>
<p>​                    { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 } },</p>
<p>​            { // S_Box[6]</p>
<p>​                    { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },</p>
<p>​                    { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },</p>
<p>​                    { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },</p>
<p>​                    { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 } },</p>
<p>​            { // S_Box[7]</p>
<p>​                    { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },</p>
<p>​                    { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },</p>
<p>​                    { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },</p>
<p>​                    { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 } },</p>
<p>​            { // S_Box[8]</p>
<p>​                    { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },</p>
<p>​                    { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },</p>
<p>​                    { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },</p>
<p>​                    { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } }</p>
<p>​    };</p>
<p>从原理图中可以看到，f函数的输入是明文分组的右半分组记为R和子密钥记为K。32位的R首先要利用数据表2中的E进行E盒扩展变换得到48位的数据，这里记为RE。然后将RE与K进行异或运算并将异或结果利用数据表2中的S_BOX进行S盒替换，得到48位的运算结果记为RS。再将RS利用数据表2中的P进行P盒替换，得到32位的最终结果，记为RF。到这里f函数的运算任务就完成了。</p>
<p>加解密运算</p>
<p> //初始置换</p>
<p>​    private int[] IP={58,50,42,34,26,18,10,2,</p>
<p>​                     60,52,44,36,28,20,12,4,</p>
<p>​                     62,54,46,38,30,22,14,6,</p>
<p>​                     64,56,48,40,32,24,16,8,</p>
<p>​                     57,49,41,33,25,17,9,1,</p>
<p>​                     59,51,43,35,27,19,11,3,</p>
<p>​                     61,53,45,37,29,21,13,5,</p>
<p>​                     63,55,47,39,31,23,15,7};</p>
<p>​    //逆初始置换</p>
<p>​    private int[] IP_1={40,8,48,16,56,24,64,32,</p>
<p>​                       39,7,47,15,55,23,63,31,</p>
<p>​                       38,6,46,14,54,22,62,30,</p>
<p>​                       37,5,45,13,53,21,61,29,</p>
<p>​                       36,4,44,12,52,20,60,28,</p>
<p>​                       35,3,43,11,51,19,59,27,</p>
<p>​                       34,2,42,10,50,18,58,26,</p>
<p>​                       33,1,41,9,49,17,57,25};</p>
<p>在第一轮中将64位的明文分为L0和R0,则加密运算如下：<br> L1=R0<br> R1=L0⊕f(R0,K0)<br> 然后按此公式进行16轮的运算。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>CustomDES</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.des;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDES</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] IP = &#123;<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">            <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//逆初始置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] IP_1 = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">            <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">            <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">            <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">            <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;<span class="comment">//手残，数组数据没写全</span></span><br><span class="line">    <span class="comment">//E扩展</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] E = &#123;<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">            <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">            <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">            <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//P置换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] P = &#123;<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][][] S_Box = &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    &#123;<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//PC-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] PC1 = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">//PC-2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] PC2 = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line">    <span class="comment">//Schedule of Left Shifts</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] LFT = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密轮数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] keys = <span class="keyword">new</span> String[LOOP_NUM];</span><br><span class="line">    <span class="keyword">private</span> String[] pContent;</span><br><span class="line">    <span class="keyword">private</span> String[] cContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> origin_length;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 16个子密钥</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] sub_key = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>][<span class="number">48</span>];</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p_origin_length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDES</span><span class="params">(String key, String content)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        p_origin_length = content.getBytes().length;</span><br><span class="line">        generateKeys(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****拆分分组****/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] deal(<span class="keyword">byte</span>[] p, <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        origin_length = p.length;</span><br><span class="line">        <span class="keyword">int</span> g_num;</span><br><span class="line">        <span class="keyword">int</span> r_num;</span><br><span class="line">        g_num = origin_length / <span class="number">8</span>;</span><br><span class="line">        r_num = <span class="number">8</span> - (origin_length - g_num * <span class="number">8</span>);<span class="comment">//8不填充</span></span><br><span class="line">        <span class="keyword">byte</span>[] p_padding;</span><br><span class="line">        <span class="comment">/****填充********/</span></span><br><span class="line">        <span class="keyword">if</span> (r_num &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            p_padding = <span class="keyword">new</span> <span class="keyword">byte</span>[origin_length + r_num];</span><br><span class="line">            System.arraycopy(p, <span class="number">0</span>, p_padding, <span class="number">0</span>, origin_length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r_num; i++) &#123;</span><br><span class="line">                p_padding[origin_length + i] = (<span class="keyword">byte</span>) r_num;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p_padding = p;</span><br><span class="line">        &#125;</span><br><span class="line">        g_num = p_padding.length / <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] f_p = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] result_data = <span class="keyword">new</span> <span class="keyword">byte</span>[p_padding.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_num; i++) &#123;</span><br><span class="line">            System.arraycopy(p_padding, i * <span class="number">8</span>, f_p, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            System.arraycopy(descryUnit(f_p, sub_key, flag), <span class="number">0</span>, result_data, i * <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;<span class="comment">//解密</span></span><br><span class="line">            <span class="keyword">byte</span>[] p_result_data = <span class="keyword">new</span> <span class="keyword">byte</span>[p_origin_length];</span><br><span class="line">            System.arraycopy(result_data, <span class="number">0</span>, p_result_data, <span class="number">0</span>, p_origin_length);</span><br><span class="line">            <span class="keyword">return</span> p_result_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result_data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] descryUnit(<span class="keyword">byte</span>[] p, <span class="keyword">int</span> k[][], <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] p_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            String p_b = Integer.toBinaryString(p[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">while</span> (p_b.length() % <span class="number">8</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                p_b = <span class="string">"0"</span> + p_b;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(p_b);</span><br><span class="line">        &#125;</span><br><span class="line">        String p_str = stringBuilder.toString();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> p_t = Integer.valueOf(p_str.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (p_t == <span class="number">48</span>) &#123;</span><br><span class="line">                p_t = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p_t == <span class="number">49</span>) &#123;</span><br><span class="line">                p_t = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p_bit[i] = p_t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/***IP置换***/</span></span><br><span class="line">        <span class="keyword">int</span>[] p_IP = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            p_IP[i] = p_bit[IP[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123; <span class="comment">// 加密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">                L(p_IP, i, flag, k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123; <span class="comment">// 解密</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">15</span>; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">                L(p_IP, i, flag, k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; IP_1.length; i++) &#123;</span><br><span class="line">            c[i] = p_IP[IP_1[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] c_byte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            c_byte[i] = (<span class="keyword">byte</span>) ((c[<span class="number">8</span> * i] &lt;&lt; <span class="number">7</span>) + (c[<span class="number">8</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">6</span>) + (c[<span class="number">8</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">5</span>) + (c[<span class="number">8</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">4</span>) + (c[<span class="number">8</span> * i + <span class="number">4</span>] &lt;&lt; <span class="number">3</span>) + (c[<span class="number">8</span> * i + <span class="number">5</span>] &lt;&lt; <span class="number">2</span>) + (c[<span class="number">8</span> * i + <span class="number">6</span>] &lt;&lt; <span class="number">1</span>) + (c[<span class="number">8</span> * i + <span class="number">7</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c_byte;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">L</span><span class="params">(<span class="keyword">int</span>[] M, <span class="keyword">int</span> times, <span class="keyword">int</span> flag, <span class="keyword">int</span>[] keyarray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] L0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] R0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] L1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] R1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        System.arraycopy(M, <span class="number">0</span>, L0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        System.arraycopy(M, <span class="number">32</span>, R0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        L1 = R0;</span><br><span class="line">        f = fFuction(R0, keyarray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">            R1[j] = L0[j] ^ f[j];</span><br><span class="line">            <span class="keyword">if</span> (((flag == <span class="number">0</span>) &amp;&amp; (times == <span class="number">0</span>)) || ((flag == <span class="number">1</span>) &amp;&amp; (times == <span class="number">15</span>))) &#123;</span><br><span class="line">                M[j] = R1[j];</span><br><span class="line">                M[j + <span class="number">32</span>] = L1[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                M[j] = L1[j];</span><br><span class="line">                M[j + <span class="number">32</span>] = R1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] fFuction(<span class="keyword">int</span>[] r_content, <span class="keyword">int</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">int</span>[] e_k = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">48</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E.length; i++) &#123;</span><br><span class="line">            e_k[i] = r_content[E[i] - <span class="number">1</span>] ^ key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/********S盒替换:由48位变32位，现分割e_k，然后再进行替换*********/</span></span><br><span class="line">        <span class="keyword">int</span>[][] s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span>[] s_after = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            System.arraycopy(e_k, i * <span class="number">6</span>, s[i], <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">            <span class="keyword">int</span> r = (s[i][<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) + s[i][<span class="number">5</span>];<span class="comment">//横坐标</span></span><br><span class="line">            <span class="keyword">int</span> c = (s[i][<span class="number">1</span>] &lt;&lt; <span class="number">3</span>) + (s[i][<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) + (s[i][<span class="number">3</span>] &lt;&lt; <span class="number">1</span>) + s[i][<span class="number">4</span>];<span class="comment">//纵坐标</span></span><br><span class="line">            String str = Integer.toBinaryString(S_Box[i][r][c]);</span><br><span class="line">            <span class="keyword">while</span> (str.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                str = <span class="string">"0"</span> + str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Integer.valueOf(str.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">48</span>) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">49</span>) &#123;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                s_after[<span class="number">4</span> * i + j] = p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/******S盒替换结束*******/</span></span><br><span class="line">        <span class="comment">/****P盒替代****/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; P.length; i++) &#123;</span><br><span class="line">            result[i] = s_after[P[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成子密钥</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateKeys</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (key.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            key = key + key;</span><br><span class="line">        &#125;</span><br><span class="line">        key = key.substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] keys = key.getBytes();</span><br><span class="line">        <span class="keyword">int</span>[] k_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="comment">//取位值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            String k_str = Integer.toBinaryString(keys[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">if</span> (k_str.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> k_size = k_str.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">8</span> - k_size; t++) &#123;</span><br><span class="line">                    k_str = <span class="string">"0"</span> + k_str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Integer.valueOf(k_str.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">48</span>) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">49</span>) &#123;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"To bit error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                k_bit[i * <span class="number">8</span> + j] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k_bit是初始的64位长密钥，下一步开始进行替换</span></span><br><span class="line">        <span class="comment">/***********PC-1压缩****************/</span></span><br><span class="line">        <span class="keyword">int</span>[] k_new_bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">56</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PC1.length; i++) &#123;</span><br><span class="line">            k_new_bit[i] = k_bit[PC1[i] - <span class="number">1</span>];<span class="comment">/////这个减1注意点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**************************/</span></span><br><span class="line">        <span class="keyword">int</span>[] c0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">        <span class="keyword">int</span>[] d0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">        System.arraycopy(k_new_bit, <span class="number">0</span>, c0, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        System.arraycopy(k_new_bit, <span class="number">28</span>, d0, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] c1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">            <span class="keyword">int</span>[] d1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">28</span>];</span><br><span class="line">            <span class="keyword">if</span> (LFT[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                System.arraycopy(c0, <span class="number">1</span>, c1, <span class="number">0</span>, <span class="number">27</span>);</span><br><span class="line">                c1[<span class="number">27</span>] = c0[<span class="number">0</span>];</span><br><span class="line">                System.arraycopy(d0, <span class="number">1</span>, d1, <span class="number">0</span>, <span class="number">27</span>);</span><br><span class="line">                d1[<span class="number">27</span>] = d0[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LFT[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                System.arraycopy(c0, <span class="number">2</span>, c1, <span class="number">0</span>, <span class="number">26</span>);</span><br><span class="line">                c1[<span class="number">26</span>] = c0[<span class="number">0</span>];</span><br><span class="line">                c1[<span class="number">27</span>] = c0[<span class="number">1</span>];<span class="comment">//这里手残之前写成c1</span></span><br><span class="line"></span><br><span class="line">                System.arraycopy(d0, <span class="number">2</span>, d1, <span class="number">0</span>, <span class="number">26</span>);</span><br><span class="line">                d1[<span class="number">26</span>] = d0[<span class="number">0</span>];</span><br><span class="line">                d1[<span class="number">27</span>] = d0[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"LFT Error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">56</span>];</span><br><span class="line">            System.arraycopy(c1, <span class="number">0</span>, tmp, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">            System.arraycopy(d1, <span class="number">0</span>, tmp, <span class="number">28</span>, <span class="number">28</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; PC2.length; j++) &#123;<span class="comment">//PC2压缩置换</span></span><br><span class="line">                sub_key[i][j] = tmp[PC2[j] - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            c0 = c1;</span><br><span class="line">            d0 = d1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CustomDESTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.des;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDESTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String origin=<span class="string">"https://www.lisongbai.top"</span>;</span><br><span class="line">        System.out.println(<span class="string">"原文：\n"</span>+origin);</span><br><span class="line">        CustomDES customDES=<span class="keyword">new</span> CustomDES(<span class="string">"LCX"</span>,origin);</span><br><span class="line">        <span class="keyword">byte</span>[] c=customDES.deal(origin.getBytes(),<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"密文：\n"</span>+<span class="keyword">new</span> String(c));</span><br><span class="line">        <span class="keyword">byte</span>[]p=customDES.deal(c,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] p_d=<span class="keyword">new</span> <span class="keyword">byte</span>[origin.getBytes().length];</span><br><span class="line">        System.arraycopy(p,<span class="number">0</span>,p_d,<span class="number">0</span>,origin.getBytes().length);</span><br><span class="line">        System.out.println(<span class="string">"明文：\n"</span>+<span class="keyword">new</span> String(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果如下：</p>
<p><a href="https://imgchr.com/i/Kj3ioq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/03/Kj3ioq.md.png" alt="Kj3ioq.md.png"></a></p>
<h2 id="感悟心得"><a href="#感悟心得" class="headerlink" title="感悟心得"></a>感悟心得</h2><p>​        通过自己动手实现DES加密解密算法，我对DES的加密解密过程有了更深的认识，之前在课堂上知识大致了解了一下流程，很多细节方面的知识并不是很了解，在这次大作业中，查阅了很多资料，对DES加密算法有了更多的体会。<br>​        DES加密是堆成加密的经典算法，通过它的实现过程发现它使用了很多次置换法，采用了混乱和扩散的组合，每个组合先替换后置换，共进行了16轮，其中充分利用了S盒的非对称性运算，大大增加了破解难度，在没有密钥的情况下，破解者之恶能通过穷举法来破解密钥，这种破解方法费时费力，所以DES的安全性还是挺高的。<br>通过这此大作业，我体会到了密码学中加密设计的有趣之处，在只接触到理论知识的时候，觉得加密算法只是枯燥的迭代运算，实践后才觉得枯燥的迭代运算正是它设计的奥秘所在。在以后的学习过程中，努力做到知其然并知其所以然。</p>
]]></content>
      <categories>
        <category>加密算法</category>
        <category>DES</category>
      </categories>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive学习笔记</title>
    <url>/2020/07/15/Hive%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="数据仓库和数据库的区别"><a href="#数据仓库和数据库的区别" class="headerlink" title="数据仓库和数据库的区别"></a>数据仓库和数据库的区别</h2><p>数据库：数据持久化操作（存储数据）。</p><p>数据仓库：对数据进行处理分析（没有增删改操作）。</p><p><img src="https://i.loli.net/2020/07/13/YEO7LA92JktSjNC.png" alt="image-20200713145956604"></p><p>Java生成API文档</p><p><img src="https://i.loli.net/2020/07/14/Q4kLDFxwcAzHPvB.png" alt="image-20200713150955522"></p><h2 id="Hive环境搭建"><a href="#Hive环境搭建" class="headerlink" title="Hive环境搭建"></a>Hive环境搭建</h2><p>==hive是基于hadoop运行的，在搭建环境前必须保证hdfs环境可用。==</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://hive.apache.org/" target="_blank" rel="noopener">hive官网</a></p><p>上传tar包至集群的namenode</p><p>解压安装命令如下：</p><a id="more"></a>








<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-hive......   -C /usr/loacal</span><br></pre></td></tr></table></figure>

<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><h2 id="Hive表操作"><a href="#Hive表操作" class="headerlink" title="Hive表操作"></a>Hive表操作</h2><h3 id="正规建表"><a href="#正规建表" class="headerlink" title="正规建表"></a>正规建表</h3><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><h3 id="内部表与外部表的区别"><a href="#内部表与外部表的区别" class="headerlink" title="内部表与外部表的区别"></a>内部表与外部表的区别</h3><h1 id="合并多个文件至一个文件"><a href="#合并多个文件至一个文件" class="headerlink" title="合并多个文件至一个文件"></a>合并多个文件至一个文件</h1><p><img src="https://i.loli.net/2020/07/14/fbGYqzJR9ZnscDa.png" alt="image-20200713164148216"></p>
<h2 id="Hive中的函数"><a href="#Hive中的函数" class="headerlink" title="Hive中的函数"></a>Hive中的函数</h2><p>HIve中的函数可以互相嵌套。</p>
<h3 id="字符串截取substring"><a href="#字符串截取substring" class="headerlink" title="字符串截取substring"></a>字符串截取substring</h3><p>select substring（“asdasdas”，2，5）；</p>
<p>第一个参数为截取字段，第二个字段为截取开始的下标，第三个字段为截取长度。</p>
<h3 id="类型转化cast"><a href="#类型转化cast" class="headerlink" title="类型转化cast"></a>类型转化cast</h3><p>select  cast（被转化的字段 as 需要的类型）</p>
<p>例： select cast（age as int） a1；</p>
<h3 id="数学运算函数"><a href="#数学运算函数" class="headerlink" title="数学运算函数"></a>数学运算函数</h3><ol>
<li><p>四舍五入</p>
<ul>
<li>取整</li>
</ul>
<p>select round（3.1415）</p>
<ul>
<li>保留小数</li>
</ul>
<p>select round（3.1415，3）</p>
<p>参数为要四舍五入的数据</p>
<p><img src="https://i.loli.net/2020/07/14/3MA6Jb1qPOtsI4z.png" alt="image-20200714165617622"></p>
</li>
<li><p>向上取整</p>
<p>select ceil(3.14);</p>
</li>
<li><p>向下取整</p>
<p>select floor(3.11);</p>
</li>
<li><p>取绝对值 (应用场景 时间戳)</p>
<p>select abs(-11);</p>
</li>
<li><p>最大最小值</p>
<p>select max(123,321);</p>
<p>select min(123,321);</p>
</li>
</ol>
<h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>select concat(“修改的内容”，“要添加的内容”)；</p>
<p>select concat_ws(“1”,”2”);</p>
<p>两个参数可以互换位置。    </p>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>select length(“asdasdasd”);</p>
<p><strong>注：和编码集无关，有几个字母或汉字就返回几</strong></p>
<h3 id="字符串切分函数"><a href="#字符串切分函数" class="headerlink" title="字符串切分函数"></a>字符串切分函数</h3><p>select split(“要切分的字符串”,”切分的字符”);</p>
<h3 id="大小写转化函数"><a href="#大小写转化函数" class="headerlink" title="大小写转化函数"></a>大小写转化函数</h3><p>应用场景：前后端数据交互事可能出现大小写不一致，在进行处理前统一大小写</p>
<ol>
<li><p>转大写</p>
<p>select upper(string str)</p>
</li>
<li><p>转小写</p>
<p>select lower(string str)</p>
</li>
</ol>
<h3 id="时间转时间戳函数"><a href="#时间转时间戳函数" class="headerlink" title="时间转时间戳函数"></a>时间转时间戳函数</h3><p>select unix_timestamp(); //获取当前时间戳</p>
<p>select unix_timestamp(“2020-07-14”,”yyyy-MM-dd”);//获取到某天的时间戳</p>
<p>select unix_timestamp(“2020-07-14 11::11::11”,”yyyy-MM-dd HH::mm::ss”);//获取到某天某秒时间戳</p>
<p>select unix_timestamp(“2020-07-14 11::11::11::123”,”yyyy-MM-dd HH::mm::ss::SSS”);//获取到某天某秒时间戳</p>
<h3 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h3><p>select from_unixtime(unix_timestamp());//获取当前时间</p>
<p>select from_unixtime(12312313212);</p>
<p>参数为一个时间戳。</p>
<h3 id="条件控制函数"><a href="#条件控制函数" class="headerlink" title="条件控制函数"></a>条件控制函数</h3><h4 id="case-when"><a href="#case-when" class="headerlink" title="case   when"></a>case   when</h4><p>case </p>
<p>when  speed&gt;= 30 and speed&lt;60  then  “低速” </p>
<p>when  speed&gt;= 60 and speed&lt;100  then  “中速” </p>
<p>when  speed&gt;= 100 and speed&lt;150  then  “高速”</p>
<p>when  speed&gt;= 150  then  “超速” </p>
<h4 id="if（判断体，true返回的内容，false返回的内容）"><a href="#if（判断体，true返回的内容，false返回的内容）" class="headerlink" title="if（判断体，true返回的内容，false返回的内容）"></a>if（判断体，true返回的内容，false返回的内容）</h4><p>array_contains(“a”,”b”);</p>
<p>若a包含b返回true。</p>
<h3 id="表生成函数"><a href="#表生成函数" class="headerlink" title="表生成函数"></a>表生成函数</h3><h4 id="炸裂函数-explode（数组和集合）等价于for循环"><a href="#炸裂函数-explode（数组和集合）等价于for循环" class="headerlink" title="炸裂函数 explode（数组和集合）等价于for循环"></a>炸裂函数 explode（数组和集合）等价于for循环</h4><p>select explode（）</p>
<p><img src="https://i.loli.net/2020/07/15/n8mt1zZuCbxg2QH.png" alt="image-20200714152336298"></p>
<h4 id="行转列函数-及-表生成函数"><a href="#行转列函数-及-表生成函数" class="headerlink" title="行转列函数 及 表生成函数"></a>行转列函数 及 表生成函数</h4><p><img src="https://i.loli.net/2020/07/14/fpnWDry98FQuexm.png" alt="image-20200714152757533"></p>
<p><strong>wordcount案例</strong></p>
<p><a href="https://github.com/yym08090809/Anything/blob/master/wc.txt" target="_blank" rel="noopener">数据链接</a></p>
<ol>
<li><p>创建表</p>
<p>先创建表存储wc.txt中的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> wc(<span class="keyword">name</span> <span class="keyword">string</span>);</span><br><span class="line">//将所有的数据存为一条</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据处理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(<span class="keyword">name</span>,<span class="string">","</span>) <span class="keyword">from</span> wc;</span><br><span class="line">//使用","拆分数据。</span><br></pre></td></tr></table></figure>

<p>结果如下:</p>
<p><img src="https://i.loli.net/2020/07/14/b7uKRAJ3MfN2gHk.png" alt="image-20200714155930401"></p>
<p>可见数据被拆分成一个个数组，再使用炸裂函数（explode()）对数据进行处理。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">explode</span>(<span class="keyword">split</span>(<span class="keyword">name</span>,<span class="string">","</span>))word  <span class="keyword">from</span> wc;</span><br></pre></td></tr></table></figure>

<p>结果如下:</p>
<p><img src="https://i.loli.net/2020/07/14/ewkZOY5vyAG7hNm.png" alt="image-20200714160255333"></p>
<p>再对数据进行进一步操作统计单词出现次数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ab.word,<span class="keyword">count</span>(*)  <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">explode</span>(<span class="keyword">split</span>(<span class="keyword">name</span>,<span class="string">","</span>))word <span class="keyword">from</span> wc)<span class="keyword">as</span> ab</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ab.word;</span><br><span class="line">//嵌套查询，将上一步操作输出的结果作为下次查询的表 统计对应的单词出现次数。</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://i.loli.net/2020/07/14/l27ukvAdZnVJrRO.png" alt="image-20200714160709391"></p>
</li>
</ol>
<h3 id="JSON解析函数"><a href="#JSON解析函数" class="headerlink" title="JSON解析函数"></a>JSON解析函数</h3><p>//{“movie”:”1193”,”rate”:”5”,”timeStamp”:”978300760”,”uid”:”1”}</p>
<p>创建临时表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_temp(<span class="keyword">json</span> <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure>

<p>加载数据:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/root/json.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> t_temp;</span><br></pre></td></tr></table></figure>

<p>解析json数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> json_tuple(<span class="keyword">json</span>,<span class="string">"字段名1"</span>,<span class="string">"字段名2"</span>) <span class="keyword">as</span>（表中的字段名<span class="number">1</span>，表中的字段名<span class="number">2</span>）<span class="keyword">from</span> t_temp;</span><br></pre></td></tr></table></figure>

<p>创建正式表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_json <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> json_tuple(<span class="keyword">json</span>,<span class="string">"字段名1"</span>,<span class="string">"字段名2"</span>) <span class="keyword">as</span>（表中的字段名<span class="number">1</span>，表中的字段名<span class="number">2</span>）<span class="keyword">from</span> t_temp;</span><br></pre></td></tr></table></figure>

<p>==json解析函数会自动转化数据类型。==</p>
<p><img src="https://i.loli.net/2020/07/14/1RX2QebfLaE7MgY.png" alt="image-20200714164436125"></p>
<p><img src="https://i.loli.net/2020/07/14/SdJD1hVnc4kApul.png" alt="image-20200714164528388"></p>
<h3 id="分析函数-row-number-over"><a href="#分析函数-row-number-over" class="headerlink" title="分析函数 row_number() over()"></a>分析函数 row_number() over()</h3><p>等价于分组topn</p>
<p><img src="https://i.loli.net/2020/07/14/M4fmJVyKXdHuRGD.png" alt="image-20200714172305550"></p>
<p>row_number() over(partition by 字段 order by 字段 desc（降序）)</p>
<h2 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h2><p><img src="https://i.loli.net/2020/07/14/JcpTbWI87y6HQmP.png" alt="image-20200714173230178"></p>
]]></content>
      <categories>
        <category>hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS机制</title>
    <url>/2020/07/10/HDFS%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="HDFS前言"><a href="#HDFS前言" class="headerlink" title="HDFS前言"></a>HDFS前言</h1><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>分而治之：将大文件、大批量文件，分布式存放在大量服务器上，<strong>以便于采取分而治之的方式对海量数据进行运算分析；</strong></p><h2 id="在大数据系统中作用："><a href="#在大数据系统中作用：" class="headerlink" title="在大数据系统中作用："></a>在大数据系统中作用：</h2><p>为各类分布式运算框架（如：mapreduce，spark……）提供数据存储服务</p><h2 id="重点概念："><a href="#重点概念：" class="headerlink" title="重点概念："></a>重点概念：</h2><p><strong>文件切块</strong></p><p><strong>副本存放</strong></p><p><strong>元数据</strong></p><h1 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h1><p>Hadoop分布式文件系统(HDFS)是指被设计成适合运行在通用硬件(commodity hardware)上的分布式文件系统（Distributed File System）。它和现有的分布式文件系统有很多共同点。但同时，它和其他的分布式文件系统的区别也是很明显的。HDFS是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。HDFS放宽了一部分POSIX约束，来实现流式读取文件系统数据的目的。HDFS在最开始是作为Apache Nutch搜索引擎项目的基础架构而开发的。HDFS是Apache Hadoop Core项目的一部分。</p><a id="more"></a>





<h1 id="HDFS的概念和特性"><a href="#HDFS的概念和特性" class="headerlink" title="HDFS的概念和特性"></a>HDFS的概念和特性</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><p>用于存储文件，通过统一的命名空间——目录树来定位文件。</p>
<p>由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li><strong>HDFS</strong>中的文件在物理上是<strong>分块存储（block）</strong>，块的大小可以通过配置参数( <strong>dfs.blocksize</strong>)来规定，默认大小在hadoop2.x版本中是128M，hadoop1.x老版本中是64M。</li>
<li><strong>HDFS</strong>文件系统会给客户端提供一个<strong>统一的抽象目录树</strong>，客户端通过路径来访问文件。</li>
<li><strong>目录结构及文件分块信息(元数据)</strong>的管理由namenode节点承担,namenode是<strong>HDFS</strong>集群主节点，负责维护整个<strong>hdfs</strong>文件系统的目录树，以及每一个路径（文件）所对应的block块信息（block的id，及所在的datanode服务器）。</li>
<li>文件的各个block的存储管理由datanode节点承担,datanode是<strong>HDFS</strong>集群从节点，每一个block都可以在多个datanode上存储多个副本（副本数量也可以通过参数设置<strong>dfs.replication</strong>）。</li>
<li>HDFS是设计成适应一次写入，多次读出的场景，且不支持文件的修改(不支持从中间插入数据，支持追加)。</li>
</ol>
<p>==<strong>注：适合用来做离线数据分析，并不适合用来做网盘应用，因为，不便修改，延迟大，网络开销大，成本太高</strong>==</p>
<h1 id="HDFS的shell-命令行客户端-操作"><a href="#HDFS的shell-命令行客户端-操作" class="headerlink" title="HDFS的shell(命令行客户端)操作"></a>HDFS的shell(命令行客户端)操作</h1><h1 id="HDFS上传、下载流程"><a href="#HDFS上传、下载流程" class="headerlink" title="HDFS上传、下载流程"></a>HDFS上传、下载流程</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p><img src="https://i.loli.net/2020/07/10/iVPZJcHIgqpEsar.png" alt="image-20200710152610587"></p>
<ol>
<li>客户端向集群的<strong>namenode节点</strong>发起请求，发起上传请求链接。</li>
<li><strong>namenode</strong>节点自检，查看客户端上传文件是否存在，若存在则向客户端响应文件已存在，若不存在则记录相应源文件并向用户反馈将要存储的<strong>datanode</strong>（datanode1、datanode2、datanode3）节点位置。</li>
<li>用户发起上传请求，datanode节点接受文件，并在相应的节点进行文件备份。</li>
</ol>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><img src="https://i.loli.net/2020/07/10/XMxjgc5Kbrz3Lm6.png" alt="image-20200710154202520"></p>
]]></content>
  </entry>
  <entry>
    <title>Java设计模式</title>
    <url>/2019/11/18/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<hr><h1 id="一、装饰者模式"><a href="#一、装饰者模式" class="headerlink" title="一、装饰者模式"></a>一、装饰者模式</h1><p>动态地给一个对象添加一些额外地职责。就增加功能来说，Decorator模式相比生成子类来说更为灵活。</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ul>
<li>在不影响其他对象的情况下，以动态透明的方式给单个对象增加职责。</li>
<li>处理那些可以撤销的职责。</li>
<li>当不能采用生成子类的方法进行扩充时。</li>
</ul><h2 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h2><ul>
<li><p>Component</p>
<p>定义一个对象接口，可以给这些对象动态地添加职责。</p>
</li>
<li><p>ConcereteComponent</p>
<p>定义一个对象，可以给这个对象添加一些职责。</p>
</li>
<li><p>Decorator</p>
<p>维持一个指向Component对象地指针，并定义一个与Component接口一致地接口</p>
</li>
<li><p>ConcreteDecorator</p>
<p>向组件添加职责。</p>
</li>
</ul><a id="more"></a>



<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>Componet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcereteComponent</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="title">impements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(）&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        System.out.println(<span class="string">"男人在吃饭！"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Decorator</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteDecortor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        reEat();</span><br><span class="line">        System.out.println(<span class="string">"ManDecoratorA类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reEat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"再吃一顿饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"ManDecoratorB类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Man man  = <span class="keyword">new</span> Man();</span><br><span class="line">        ManDecoratorA md1 = <span class="keyword">new</span> ManDecoratorA();</span><br><span class="line">        ManDecoratorB md2 = <span class="keyword">new</span> ManDecoratorB();</span><br><span class="line">        </span><br><span class="line">        md1.setPerson(man);</span><br><span class="line">        md2.setPerson(md1);</span><br><span class="line">        md2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>result</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">男人在吃</span><br><span class="line">再吃一顿饭</span><br><span class="line">ManDecoratorA类</span><br><span class="line">===============</span><br><span class="line">ManDecoratorB类</span><br></pre></td></tr></table></figure>

<h1 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h1><p>保证一个类有且仅有一个实例化对象，提供一个访问它的全局访问点。</p>
<h2 id="适用性-1"><a href="#适用性-1" class="headerlink" title="适用性"></a>适用性</h2><ul>
<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</li>
<li>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</li>
</ul>
<h2 id="参与者-1"><a href="#参与者-1" class="headerlink" title="参与者"></a>参与者</h2><ul>
<li><p><strong>Singleton</strong></p>
<p>定义一个Instance操作，允许客户访问它的唯一实例。Instance是一个类操作。</p>
</li>
</ul>
<h2 id="单例模式特点"><a href="#单例模式特点" class="headerlink" title="单例模式特点"></a>单例模式特点</h2><ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p>
<h2 id="单例模式的线程安全问题"><a href="#单例模式的线程安全问题" class="headerlink" title="单例模式的线程安全问题"></a>单例模式的线程安全问题</h2><p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p>
<p>​        另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p>
<h2 id="单例模式的选择"><a href="#单例模式的选择" class="headerlink" title="单例模式的选择"></a>单例模式的选择</h2><p>​        我们最早使用的MVC框架Struts1中的action就是单例模式的，而到了Struts2就使用了多例。在Struts1里，当有多个请求访问，每个都会分配一个新线程，在这些线程，操作的都是同一个action对象，每个用户的数据都是不同的，而action却只有一个。到了Struts2， action对象为每一个请求产生一个实例，并不会带来线程安全问题（实际上servlet容器给每个请求产生许多可丢弃的对象，但是并没有影响到性能和垃圾回收问题，有时间会做下研究）。</p>
<h2 id="实现单例模式的方式"><a href="#实现单例模式的方式" class="headerlink" title="实现单例模式的方式"></a>实现单例模式的方式</h2><ul>
<li><strong>饿汉模式（立即加载）</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        饿汉模式在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p>
<p>​        Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p>
<ul>
<li><strong>懒汉模式（延时加载）</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 single = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        该示例虽然用延迟加载方式实现了懒汉式单例，但在多线程环境下会产生多个single对象，如何改造请看以下方式。</p>
<p><strong>使用Synchronized同步锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。</p>
<p><strong>双层校验锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双层校验锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    single = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p>
<ul>
<li><strong>静态内部类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton5 single = <span class="keyword">new</span> Singleton5();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObject.single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        静态内部类虽然保证了单例在多线程并发下的线程安全性，<em>但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的</em>。这种情况不多做说明了，使用时请注意。</p>
<ul>
<li><strong>static静态代码块</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代码块在类首次加载的时候执行一次。</p>
<ul>
<li><strong>内部枚举类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnumSingleton&#123;</span><br><span class="line">        Singleton;</span><br><span class="line">        <span class="keyword">private</span> Singleton7 singleton;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举类的构造方法在类加载时被实例化</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnumSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnumSingleton.Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton7</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java设计模式.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"饿汉模式(立即加载)"</span>);</span><br><span class="line">        Singleton1 singleton1 = Singleton1.getInstance();</span><br><span class="line">        Singleton1 singleton2 = Singleton1.getInstance();</span><br><span class="line">        System.out.println(singleton1);</span><br><span class="line">        System.out.println(singleton2);</span><br><span class="line">        System.out.println(<span class="string">"懒汉模式（延时加载）"</span>);</span><br><span class="line">        Singleton2 singleton3 = Singleton2.getInstance();</span><br><span class="line">        Singleton2 singleton4 = Singleton2.getInstance();</span><br><span class="line">        System.out.println(singleton3);</span><br><span class="line">        System.out.println(singleton4);</span><br><span class="line">        System.out.println(<span class="string">"使用Synchronized同步锁"</span>);</span><br><span class="line">        Singleton3 singleton5 = Singleton3.getInstance();</span><br><span class="line">        Singleton3 singleton6 = Singleton3.getInstance();</span><br><span class="line">        System.out.println(singleton5);</span><br><span class="line">        System.out.println(singleton6);</span><br><span class="line">        System.out.println(<span class="string">"双层校验锁"</span>);</span><br><span class="line">        Singleton4 singleton7 = Singleton4.getInstance();</span><br><span class="line">        Singleton4 singleton8 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton7);</span><br><span class="line">        System.out.println(singleton8);</span><br><span class="line">        System.out.println(<span class="string">"静态内部类"</span>);</span><br><span class="line">        Singleton5 singleton9 = Singleton5.getInstance();</span><br><span class="line">        Singleton5 singleton10 = Singleton5.getInstance();</span><br><span class="line">        System.out.println(singleton9);</span><br><span class="line">        System.out.println(singleton10);</span><br><span class="line">        System.out.println(<span class="string">"static静态代码块"</span>);</span><br><span class="line">        Singleton6 singleton11 = Singleton6.getInstance();</span><br><span class="line">        Singleton6 singleton12 = Singleton6.getInstance();</span><br><span class="line">        System.out.println(singleton11);</span><br><span class="line">        System.out.println(singleton12);</span><br><span class="line">        System.out.println(<span class="string">"内部枚举类"</span>);</span><br><span class="line">        Singleton7 singletonFactory = SingletonFactory.getInstance();</span><br><span class="line">        Singleton7 singletonFactory1 = SingletonFactory.getInstance();</span><br><span class="line">        System.out.println(singletonFactory);</span><br><span class="line">        System.out.println(singletonFactory1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">饿汉模式(立即加载)</span><br><span class="line">java设计模式.单例模式.Singleton1@<span class="number">74</span>a14482</span><br><span class="line">java设计模式.单例模式.Singleton1@<span class="number">74</span>a14482</span><br><span class="line">懒汉模式（延时加载）</span><br><span class="line">java设计模式.单例模式.Singleton2@<span class="number">1540e19</span>d</span><br><span class="line">java设计模式.单例模式.Singleton2@<span class="number">1540e19</span>d</span><br><span class="line">使用Synchronized同步锁</span><br><span class="line">java设计模式.单例模式.Singleton3@<span class="number">677327</span>b6</span><br><span class="line">java设计模式.单例模式.Singleton3@<span class="number">677327</span>b6</span><br><span class="line">双层校验锁</span><br><span class="line">java设计模式.单例模式.Singleton4@<span class="number">14</span>ae5a5</span><br><span class="line">java设计模式.单例模式.Singleton4@<span class="number">14</span>ae5a5</span><br><span class="line">静态内部类</span><br><span class="line">java设计模式.单例模式.Singleton5@<span class="number">7f</span>31245a</span><br><span class="line">java设计模式.单例模式.Singleton5@<span class="number">7f</span>31245a</span><br><span class="line"><span class="keyword">static</span>静态代码块</span><br><span class="line">java设计模式.单例模式.Singleton6@<span class="number">6</span>d6f6e28</span><br><span class="line">java设计模式.单例模式.Singleton6@<span class="number">6</span>d6f6e28</span><br><span class="line">内部枚举类</span><br><span class="line">java设计模式.单例模式.Singleton7@<span class="number">135f</span>baa4</span><br><span class="line">java设计模式.单例模式.Singleton7@<span class="number">135f</span>baa4</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法学习笔记</title>
    <url>/2019/10/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>一个#是一级标题，二个#是二级标题，以此类推。最多到六级标题。</p><p>注：标准语法一般在#后面跟空格再写标题，有的地方可以不加空格（比如：简书上写Markdown）。</p><p>实例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><a id="more"></a>






<h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>…</p>
<h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p>要加粗的文字左右分别用两个**包起来</p>
</li>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><p>要斜体的文字左右分别用一个*包起来</p>
</li>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5><p>要斜体和加粗的文字左右分别用三个*号包起来</p>
</li>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><p>要加删除线的文字左右分别用两个~~包起来</p>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**这是加粗字体**</span><br><span class="line">*这是斜体*</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是加删除线的~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
</li>
</ul>
<p>  <strong>这是加粗字体</strong><br>  <em>这是斜体</em><br>  <strong><em>这是加粗斜体</em></strong><br>  <del>这是加删除线的</del></p>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>  在引用文字前加&gt;即可。引用可以嵌套。</p>
<p>  实例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>  三个或者三个以上的 - 或者 * 都可以</p>
<p>  实例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<p>  可以看到，显示的效果是一毛一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt]（图片地址 ”图片title“）</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片底线的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移动到图片上时显示的内容。所以title可有可无。</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![KTeDsJ.png](https://s2.ax1x.com/2019/10/31/KTeDsJ.png)</span><br></pre></td></tr></table></figure>

<p>示例如下：</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KTeDsJ.png" alt="KTeDsJ.png"></p>
<p><strong>上传本地图片直接拉到md文件中就ok！</strong></p>
<p>注：若发布博客的话图片不显示参考这篇<a href="https://blog.csdn.net/Mandyucan/article/details/80421711" target="_blank" rel="noopener">博客</a></p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[小李的博客]（https://lisongbai.top）</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p> <a href="https://lisongbai.top">小李的博客</a></p>
<p>注：()一定要使用英文括号Markdown不识别中文括号。</p>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><ul>
<li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：</p>
<p>无序列表用” <strong>-  + *</strong> “任意一个都可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
</ul>
</li>
<li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：</p>
<p>数字加点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>1.列表内容<br>2.列表内容<br>3.列表内容</p>
</li>
</ul>
<ul>
<li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一集之间敲三个空格即可</strong></p>
<p>仔细观察标题七中的列表你会发现无须列表的嵌套滴！</p>
</li>
</ul>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英雄 | 别名 | 羁绊</span><br><span class="line">:- | :-: | -:</span><br><span class="line">杰斯 | 炮王 | 海克斯</span><br><span class="line">李青 | 小学僧 | 暂无</span><br><span class="line">疾风剑豪 | 托儿索 | 剑士</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th align="right">英雄</th>
<th align="center">别名</th>
<th align="right">羁绊</th>
</tr>
</thead>
<tbody><tr>
<td align="right">杰斯</td>
<td align="center">炮王</td>
<td align="right">海克斯</td>
</tr>
<tr>
<td align="right">李青</td>
<td align="center">小学僧</td>
<td align="right">暂无</td>
</tr>
<tr>
<td align="right">疾风剑豪</td>
<td align="center">托儿索</td>
<td align="right">剑士</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：</p>
<p>单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">	代码...</span><br><span class="line">	代码...</span><br><span class="line">	代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
<p>实例：</p>
<p>单行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`System.Out.Println(<span class="string">"hello hexo!"</span>);`</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">	<span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	System.Out.Println(<span class="string">"hello hexo!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><code>System.Out.Println(&quot;hello hexo!&quot;);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	System.Out.Println(<span class="string">"hello hexo!"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>



<p>注：我用的是Typora编辑器，这个有点问题，暂未解决。<strong>cond(yes)-&gt;io-&gt;e  cond(no)-&gt;sub1(right)-&gt;op</strong>这两条语句只会执行第一条，从而导致有一条线它画不出来。</p>
<p>如下图所示：</p>
<p><img src="https://i.loli.net/2019/10/31/ImfquYTA7HvLch9.png" alt="流程图.png"></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>ERC721标准和加密收藏品</title>
    <url>/2020/06/29/ERC721%E6%A0%87%E5%87%86%E5%92%8C%E5%8A%A0%E5%AF%86%E6%94%B6%E8%97%8F%E5%93%81/</url>
    <content><![CDATA[<h1 id="以太坊上的代币"><a href="#以太坊上的代币" class="headerlink" title="以太坊上的代币"></a>以太坊上的代币</h1><p>让我们来聊聊 <strong><em>代币</em></strong>.</p><p>如果你对以太坊的世界有一些了解，你很可能听过人们聊到代币——尤其是 <strong><em>ERC20 代币\</em></strong>.</p><p>一个 <strong><em>代币</em></strong> 在以太坊基本上就是一个遵循一些共同规则的智能合约——即它实现了所有其他代币合约共享的一组标准函数，例如 <code>transfer(address _to, uint256 _value)</code> 和 <code>balanceOf(address _owner)</code>.</p><a id="more"></a>


<p>在智能合约内部，通常有一个映射， <code>mapping(address =&gt; uint256) balances</code>，用于追踪每个地址还有多少余额。</p>
<p>所以基本上一个代币只是一个追踪谁拥有多少该代币的合约，和一些可以让那些用户将他们的代币转移到其他地址的函数。</p>
<h2 id="它为什么重要呢？"><a href="#它为什么重要呢？" class="headerlink" title="它为什么重要呢？"></a>它为什么重要呢？</h2><p>由于所有 ERC20 代币共享具有相同名称的同一组函数，它们都可以以相同的方式进行交互。</p>
<p>这意味着如果你构建的应用程序能够与一个 ERC20 代币进行交互，那么它就也能够与任何 ERC20 代币进行交互。 这样一来，将来你就可以轻松地将更多的代币添加到你的应用中，而无需进行自定义编码。 你可以简单地插入新的代币合约地址，然后哗啦，你的应用程序有另一个它可以使用的代币了。</p>
<p>其中一个例子就是交易所。 当交易所添加一个新的 ERC20 代币时，实际上它只需要添加与之对话的另一个智能合约。 用户可以让那个合约将代币发送到交易所的钱包地址，然后交易所可以让合约在用户要求取款时将代币发送回给他们。</p>
<p>交易所只需要实现这种转移逻辑一次，然后当它想要添加一个新的 ERC20 代币时，只需将新的合约地址添加到它的数据库即可。</p>
<h2 id="其他代币标准"><a href="#其他代币标准" class="headerlink" title="其他代币标准"></a>其他代币标准</h2><p>对于像货币一样的代币来说，ERC20 代币非常酷。 但是要在我们僵尸游戏中代表僵尸就并不是特别有用。</p>
<p>首先，僵尸不像货币可以分割 —— 我可以发给你 0.237 以太，但是转移给你 0.237 的僵尸听起来就有些搞笑。</p>
<p>其次，并不是所有僵尸都是平等的。 你的2级僵尸”<strong>Steve</strong>“完全不能等同于我732级的僵尸”<strong>H4XF13LD MORRIS 💯💯😎💯💯</strong>“。（你差得远呢，<em>Steve</em>）。</p>
<p>有另一个代币标准更适合如 CryptoZombies 这样的加密收藏品——它们被称为<strong><em>ERC721 代币.\</em></strong></p>
<p><strong><em>ERC721 代币\</em></strong>是<strong>不</strong>能互换的，因为每个代币都被认为是唯一且不可分割的。 你只能以整个单位交易它们，并且每个单位都有唯一的 ID。 这些特性正好让我们的僵尸可以用来交易。</p>
<blockquote>
<p>请注意，使用像 ERC721 这样的标准的优势就是，我们不必在我们的合约中实现拍卖或托管逻辑，这决定了玩家能够如何交易／出售我们的僵尸。 如果我们符合规范，其他人可以为加密可交易的 ERC721 资产搭建一个交易所平台，我们的 ERC721 僵尸将可以在该平台上使用。 所以使用代币标准相较于使用你自己的交易逻辑有明显的好处。</p>
</blockquote>
<h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们将在下一章深入讨论ERC721的实现。 但首先，让我们为本课设置我们的文件结构。</p>
<p>我们将把所有ERC721逻辑存储在一个叫<code>ZombieOwnership</code>的合约中。</p>
<ol>
<li>在文件顶部声明我们<code>pragma</code>的版本（格式参考之前的课程）。</li>
<li>将 <code>zombieattack.sol</code> <code>import</code> 进来。</li>
<li>声明一个继承 <code>ZombieAttack</code> 的新合约， 命名为<code>ZombieOwnership</code>。合约的其他部分先留空。</li>
</ol>
<h2 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line">contract ZombieOwnership is ZombieAttack &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ERC721-标准-多重继承"><a href="#ERC721-标准-多重继承" class="headerlink" title="ERC721 标准, 多重继承"></a>ERC721 标准, 多重继承</h1><p>让我们来看一看 ERC721 标准：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract ERC721 &#123;</span><br><span class="line">  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);</span><br><span class="line">  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);</span><br><span class="line"></span><br><span class="line">  function balanceOf(address _owner) public view returns (uint256 _balance);</span><br><span class="line">  function ownerOf(uint256 _tokenId) public view returns (address _owner);</span><br><span class="line">  function transfer(address _to, uint256 _tokenId) public;</span><br><span class="line">  function approve(address _to, uint256 _tokenId) public;</span><br><span class="line">  function takeOwnership(uint256 _tokenId) public;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是我们需要实现的方法列表，我们将在接下来的章节中逐个学习。</p>
<p>虽然看起来很多，但不要被吓到了！我们在这里就是准备带着你一步一步了解它们的。</p>
<blockquote>
<p>注意： ERC721目前是一个 <em>草稿</em>，还没有正式商定的实现。在本教程中，我们使用的是 OpenZeppelin 库中的当前版本，但在未来正式发布之前它可能会有更改。 所以把这 <strong>一个</strong> 可能的实现当作考虑，但不要把它作为 ERC721 代币的官方标准。</p>
</blockquote>
<h2 id="实现一个代币合约"><a href="#实现一个代币合约" class="headerlink" title="实现一个代币合约"></a>实现一个代币合约</h2><p>在实现一个代币合约的时候，我们首先要做的是将接口复制到它自己的 Solidity 文件并导入它，<code>import &quot;./erc721.sol&quot;;</code>。 接着，让我们的合约继承它，然后我们用一个函数定义来重写每个方法。</p>
<p>但等一下—— <code>ZombieOwnership</code>已经继承自 <code>ZombieAttack</code>了 —— 它如何能够也继承于 <code>ERC721</code>呢？</p>
<p>幸运的是在Solidity，你的合约可以继承自多个合约，参考如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract SatoshiNakamoto is NickSzabo, HalFinney &#123;</span><br><span class="line">  // 啧啧啧，宇宙的奥秘泄露了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正如你所见，当使用多重继承的时候，你只需要用逗号 <code>,</code> 来隔开几个你想要继承的合约。在上面的例子中，我们的合约继承自 <code>NickSzabo</code> 和 <code>HalFinney</code>。</p>
<p>来试试吧。</p>
<h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们已经在上面为你创建了带着接口的 <code>erc721.sol</code> 。</p>
<ol>
<li>将 <code>erc721.sol</code> 导入到 <code>zombieownership.sol</code></li>
<li>声明 <code>ZombieOwnership</code> 继承自 <code>ZombieAttack</code> 和 <code>ERC721</code></li>
</ol>
<h2 id="合约完善"><a href="#合约完善" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="comment">// 在这里引入文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里声明 ERC721 的继承</span></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="balanceOf-和-ownerOf"><a href="#balanceOf-和-ownerOf" class="headerlink" title="balanceOf 和 ownerOf"></a>balanceOf 和 ownerOf</h1><p>太棒了，我们来深入讨论一下 ERC721 的实现。</p>
<p>我们已经把所有你需要在本课中实现的函数的空壳复制好了。</p>
<p>在本章节，我们将实现头两个方法： <code>balanceOf</code> 和 <code>ownerOf</code>。</p>
<h2 id="balanceOf"><a href="#balanceOf" class="headerlink" title="balanceOf"></a><code>balanceOf</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function balanceOf(address _owner) public view returns (uint256 _balance);</span><br></pre></td></tr></table></figure>

<p>这个函数只需要一个传入 <code>address</code> 参数，然后返回这个 <code>address</code> 拥有多少代币。</p>
<p>在我们的例子中，我们的“代币”是僵尸。你还记得在我们 DApp 的哪里存储了一个主人拥有多少只僵尸吗？</p>
<h2 id="ownerOf"><a href="#ownerOf" class="headerlink" title="ownerOf"></a><code>ownerOf</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ownerOf(uint256 _tokenId) public view returns (address _owner);</span><br></pre></td></tr></table></figure>

<p>这个函数需要传入一个代币 ID 作为参数 (我们的情况就是一个僵尸 ID)，然后返回该代币拥有者的 <code>address</code>。</p>
<p>同样的，因为在我们的 DApp 里已经有一个 <code>mapping</code> (映射) 存储了这个信息，所以对我们来说这个实现非常直接清晰。我们可以只用一行 <code>return</code> 语句来实现这个函数。</p>
<blockquote>
<p>注意：要记得， <code>uint256</code> 等同于<code>uint</code>。我们从课程的开始一直在代码中使用 <code>uint</code>，但从现在开始我们将在这里用 <code>uint256</code>，因为我们直接从规范中复制粘贴。</p>
</blockquote>
<h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><p>我将让你来决定如何实现这两个函数。</p>
<p>每个函数的代码都应该只有1行 <code>return</code> 语句。看看我们在之前课程中写的代码，想想我们都把这个数据存储在哪。如果你觉得有困难，你可以点“我要看答案”的按钮来获得帮助。</p>
<ol>
<li>实现 <code>balanceOf</code> 来返回 <code>_owner</code> 拥有的僵尸数量。</li>
<li>实现 <code>ownerOf</code> 来返回拥有 ID 为 <code>_tokenId</code> 僵尸的所有者的地址。</li>
</ol>
<h2 id="合约完善-1"><a href="#合约完善-1" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _balance</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 在这里返回 `_owner` 拥有的僵尸数</span></span><br><span class="line">    <span class="keyword">return</span> ownerZombieCount[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address _owner</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 在这里返回 `_tokenId` 的所有者</span></span><br><span class="line">    <span class="keyword">return</span> zombieToOwner[_tokenId];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h1><p>嘿嘿！我们刚刚的代码中其实有个错误，以至于其根本无法通过编译，你发现了没？</p>
<p>在前一个章节我们定义了一个叫 <code>ownerOf</code> 的函数。但如果你还记得第4课的内容，我们同样在<code>zombiefeeding.sol</code> 里以 <code>ownerOf</code> 命名创建了一个 <code>modifier</code>（修饰符）。</p>
<p>如果你尝试编译这段代码，编译器会给你一个错误说你不能有相同名称的修饰符和函数。</p>
<p>所以我们应该把在 <code>ZombieOwnership</code> 里的函数名称改成别的吗？</p>
<p>不，我们不能那样做！！！要记得，我们正在用 ERC721 代币标准，意味着其他合约将期望我们的合约以这些确切的名称来定义函数。这就是这些标准实用的原因——如果另一个合约知道我们的合约符合 ERC721 标准，它可以直接与我们交互，而无需了解任何关于我们内部如何实现的细节。</p>
<p>所以，那意味着我们将必须重构我们第4课中的代码，将 <code>modifier</code> 的名称换成别的。</p>
<h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们回到了 <code>zombiefeeding.sol</code> 。我们将把 <code>modifier</code> 的名称从 <code>ownerOf</code> 改成 <code>onlyOwnerOf</code>。</p>
<ol>
<li>把修饰符定义中的名称改成 <code>onlyOwnerOf</code></li>
<li>往下滑到使用此修饰符的函数 <code>feedAndMultiply</code> 。我们也需要改这里的名称。</li>
</ol>
<blockquote>
<p>注意：我们在 <code>zombiehelper.sol</code> 和 <code>zombieattack.sol</code> 里也使用了这个修饰符，但为了不在这节课的重构里花太多时间，我们已经将那些文件里的修饰符名称为你改好了。</p>
</blockquote>
<h2 id="合约修改"><a href="#合约修改" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  KittyInterface kittyContract;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 把修饰符名称改成 `onlyOwnerOf`</span></span><br><span class="line">  <span class="comment">//modifier ownerOf(uint _zombieId) &#123;</span></span><br><span class="line">    modifier onlyOwnerOf(uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setKittyContractAddress</span>(<span class="params">address _address</span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    kittyContract = KittyInterface(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_triggerCooldown</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    _zombie.readyTime = uint32(now + cooldownTime);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isReady</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (_zombie.readyTime &lt;= now);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 这里也要修改修饰符的名称</span></span><br><span class="line">  <span class="comment">//function feedAndMultiply(uint _zombieId, uint _targetDna, string _species) internal ownerOf(_zombieId) &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string _species</span>) <span class="title">internal</span>  <span class="title">onlyOwnerOf</span>(<span class="params">_zombieId</span>) </span>&#123;</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    <span class="built_in">require</span>(_isReady(myZombie));</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keccak256(_species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">    _triggerCooldown(myZombie);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ERC721-转移标准"><a href="#ERC721-转移标准" class="headerlink" title="ERC721: 转移标准"></a>ERC721: 转移标准</h1><p>好了，我们将冲突修复了！</p>
<p>现在我们将通过学习把所有权从一个人转移给另一个人来继续我们的 ERC721 规范的实现。</p>
<p>注意 ERC721 规范有两种不同的方法来转移代币：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span>;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>第一种方法是代币的拥有者调用<code>transfer</code> 方法，传入他想转移到的 <code>address</code> 和他想转移的代币的 <code>_tokenId</code>。</li>
<li>第二种方法是代币拥有者首先调用 <code>approve</code>，然后传入与以上相同的参数。接着，该合约会存储谁被允许提取代币，通常存储到一个 <code>mapping (uint256 =&gt; address)</code> 里。然后，当有人调用 <code>takeOwnership</code> 时，合约会检查 <code>msg.sender</code> 是否得到拥有者的批准来提取代币，如果是，则将代币转移给他。</li>
</ol>
<p>你注意到了吗，<code>transfer</code> 和 <code>takeOwnership</code> 都将包含相同的转移逻辑，只是以相反的顺序。 （一种情况是代币的发送者调用函数；另一种情况是代币的接收者调用它）。</p>
<p>所以我们把这个逻辑抽象成它自己的私有函数 <code>_transfer</code>，然后由这两个函数来调用它。 这样我们就不用写重复的代码了。</p>
<h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><p>让我们来定义 <code>_transfer</code> 的逻辑。</p>
<ol>
<li><p>定义一个名为 <code>_transfer</code>的函数。它会需要3个参数：<code>address _from</code>、<code>address _to</code>和<code>uint256 _tokenId</code>。它应该是一个 <code>私有</code> 函数。</p>
</li>
<li><p>我们有2个映射会在所有权改变的时候改变： <code>ownerZombieCount</code> （记录一个所有者有多少只僵尸）和 <code>zombieToOwner</code> （记录什么人拥有什么）。</p>
<p>我们的函数需要做的第一件事是为 <strong>接收</strong> 僵尸的人（<code>address _to</code>）增 加<code>ownerZombieCount</code>。使用 <code>++</code> 来增加。</p>
</li>
<li><p>接下来，我们将需要为 <strong>发送</strong> 僵尸的人（<code>address _from</code>）<strong>减少</strong><code>ownerZombieCount</code>。使用 <code>--</code> 来扣减。</p>
</li>
<li><p>最后，我们将改变这个 <code>_tokenId</code> 的 <code>zombieToOwner</code> 映射，这样它现在就会指向 <code>_to</code>。</p>
</li>
<li><p>骗你的，那不是最后一步。我们还需要再做一件事情。</p>
<p>ERC721规范包含了一个 <code>Transfer</code> 事件。这个函数的最后一行应该用正确的参数触发<code>Transfer</code> ——查看 <code>erc721.sol</code> 看它期望传入的参数并在这里实现。</p>
</li>
</ol>
<h2 id="合约完善-2"><a href="#合约完善-2" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ownerZombieCount[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address _owner</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zombieToOwner[_tokenId];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里定义 _transfer()</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_transfer</span>(<span class="params">address _from, address _to, uint256 _tokenId</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">      ownerZombieCount[_to]++;</span><br><span class="line">      ownerZombieCount[_from]--;</span><br><span class="line">      zombieToOwner[_tokenId] = _to;</span><br><span class="line">      Transfer(_from, _to, _tokenId);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ERC721-转移-续"><a href="#ERC721-转移-续" class="headerlink" title="ERC721: 转移-续"></a>ERC721: 转移-续</h1><p>太好了！刚才那是最难的部分——现在实现公共的 <code>transfer</code> 函数应该十分容易，因为我们的 <code>_transfer</code> 函数几乎已经把所有的重活都干完了。</p>
<h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>我们想确保只有代币或僵尸的所有者可以转移它。还记得我们如何限制只有所有者才能访问某个功能吗？</p>
<p>没错，我们已经有一个修饰符能够完成这个任务了。所以将修饰符 <code>onlyOwnerOf</code> 添加到这个函数中。</p>
</li>
<li><p>现在该函数的正文只需要一行代码。它只需要调用 <code>_transfer</code>。</p>
<p>记得把 <code>msg.sender</code> 作为参数传递进 <code>address _from</code>。</p>
</li>
</ol>
<h2 id="合约完善-3"><a href="#合约完善-3" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ownerZombieCount[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address _owner</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zombieToOwner[_tokenId];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_transfer</span>(<span class="params">address _from, address _to, uint256 _tokenId</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">    ownerZombieCount[_to]++;</span><br><span class="line">    ownerZombieCount[_from]--;</span><br><span class="line">    zombieToOwner[_tokenId] = _to;</span><br><span class="line">    Transfer(_from, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里添加修饰符</span></span><br><span class="line">  <span class="comment">//function transfer(address _to, uint256 _tokenId) public &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 在这里定义方法</span></span><br><span class="line">    _transfer(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ERC721-批准"><a href="#ERC721-批准" class="headerlink" title="ERC721: 批准"></a>ERC721: 批准</h1><p>现在，让我们来实现 <code>approve</code>。</p>
<p>记住，使用 <code>approve</code> 或者 <code>takeOwnership</code> 的时候，转移有2个步骤：</p>
<ol>
<li>你，作为所有者，用新主人的 <code>address</code> 和你希望他获取的 <code>_tokenId</code> 来调用 <code>approve</code></li>
<li>新主人用 <code>_tokenId</code> 来调用 <code>takeOwnership</code>，合约会检查确保他获得了批准，然后把代币转移给他。</li>
</ol>
<p>因为这发生在2个函数的调用中，所以在函数调用之间，我们需要一个数据结构来存储什么人被批准获取什么。</p>
<h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>首先，让我们来定义一个映射 <code>zombieApprovals</code>。它应该将一个 <code>uint</code> 映射到一个 <code>address</code>。</p>
<p>这样一来，当有人用一个 <code>_tokenId</code> 调用 <code>takeOwnership</code> 时，我们可以用这个映射来快速查找谁被批准获取那个代币。</p>
</li>
<li><p>在函数 <code>approve</code> 上， 我们想要确保只有代币所有者可以批准某人来获取代币。所以我们需要添加修饰符 <code>onlyOwnerOf</code> 到 <code>approve</code>。</p>
</li>
<li><p>函数的正文部分，将 <code>_tokenId</code> 的 <code>zombieApprovals</code> 设置为和 <code>_to</code> 相等。</p>
</li>
<li><p>最后，在 ERC721 规范里有一个 <code>Approval</code> 事件。所以我们应该在这个函数的最后触发这个事件。（参考 <code>erc721.sol</code> 来确认传入的参数，并确保 <code>_owner</code> 是 <code>msg.sender</code>）</p>
</li>
</ol>
<h2 id="合约完善-4"><a href="#合约完善-4" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里定义映射</span></span><br><span class="line">  mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) zombieApprovals;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ownerZombieCount[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address _owner</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zombieToOwner[_tokenId];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_transfer</span>(<span class="params">address _from, address _to, uint256 _tokenId</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">    ownerZombieCount[_to]++;</span><br><span class="line">    ownerZombieCount[_from]--;</span><br><span class="line">    zombieToOwner[_tokenId] = _to;</span><br><span class="line">    Transfer(_from, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    _transfer(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 在这里添加方法修饰符</span></span><br><span class="line">  <span class="comment">//function approve(address _to, uint256 _tokenId) public &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 在这里定义方法</span></span><br><span class="line">    zombieApprovals[_tokenId] = _to;</span><br><span class="line">    Approval(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ERC721-takeOwnership"><a href="#ERC721-takeOwnership" class="headerlink" title="ERC721: takeOwnership"></a>ERC721: takeOwnership</h1><p>太棒了，现在让我们完成最后一个函数来结束 ERC721 的实现。（别担心，这后面我们还会讲更多内容😉）</p>
<p>最后一个函数 <code>takeOwnership</code>， 应该只是简单地检查以确保 <code>msg.sender</code> 已经被批准来提取这个代币或者僵尸。若确认，就调用 <code>_transfer</code>；</p>
<h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>首先，我们要用一个 <code>require</code> 句式来检查 <code>_tokenId</code> 的 <code>zombieApprovals</code> 和 <code>msg.sender</code> 相等。</p>
<p>这样如果 <code>msg.sender</code> 未被授权来提取这个代币，将抛出一个错误。</p>
</li>
<li><p>为了调用 <code>_transfer</code>，我们需要知道代币所有者的地址（它需要一个 <code>_from</code> 来作为参数）。幸运的是我们可以在我们的 <code>ownerOf</code> 函数中来找到这个参数。</p>
<p>所以，定义一个名为 <code>owner</code> 的 <code>address</code> 变量，并使其等于 <code>ownerOf(_tokenId)</code>。</p>
</li>
<li><p>最后，调用 <code>_transfer</code>, 并传入所有必须的参数。（在这里你可以用 <code>msg.sender</code> 作为 <code>_to</code>， 因为代币正是要发送给调用这个函数的人）。</p>
<blockquote>
<p>注意： 我们完全可以用一行代码来实现第2、3两步。但是分开写会让代码更易读。一点个人建议 :)</p>
</blockquote>
</li>
</ol>
<h2 id="合约完善-5"><a href="#合约完善-5" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieOwnership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">  mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) zombieApprovals;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ownerZombieCount[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address _owner</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zombieToOwner[_tokenId];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_transfer</span>(<span class="params">address _from, address _to, uint256 _tokenId</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">    ownerZombieCount[_to]++;</span><br><span class="line">    ownerZombieCount[_from]--;</span><br><span class="line">    zombieToOwner[_tokenId] = _to;</span><br><span class="line">    Transfer(_from, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    _transfer(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    zombieApprovals[_tokenId] = _to;</span><br><span class="line">    Approval(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从这里开始</span></span><br><span class="line">    <span class="built_in">require</span>(zombieApprovals[_tokenId] == msg.sender);</span><br><span class="line">    address owner = ownerOf(_tokenId);</span><br><span class="line">    _transfer(owner, msg.sender, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="预防溢出"><a href="#预防溢出" class="headerlink" title="预防溢出"></a>预防溢出</h1><p>恭喜你，我们完成了 ERC721 的实现。</p>
<p>并不是很复杂，对吧？很多类似的以太坊概念，当你只听人们谈论它们的时候，会觉得很复杂。所以最简单的理解方式就是你自己来实现它。</p>
<p>不过要记住那只是最简单的实现。还有很多的特性我们也许想加入到我们的实现中来，比如一些额外的检查，来确保用户不会不小心把他们的僵尸转移给<code>0</code> 地址（这被称作 “烧币”, 基本上就是把代币转移到一个谁也没有私钥的地址，让这个代币永远也无法恢复）。 或者在 DApp 中加入一些基本的拍卖逻辑。（你能想出一些实现的方法么？）</p>
<p>但是为了让我们的课程不至于离题太远，所以我们只专注于一些基础实现。如果你想学习一些更深层次的实现，可以在这个教程结束后，去看看 OpenZeppelin 的 ERC721 合约。</p>
<h2 id="合约安全增强-溢出和下溢"><a href="#合约安全增强-溢出和下溢" class="headerlink" title="合约安全增强: 溢出和下溢"></a>合约安全增强: 溢出和下溢</h2><p>我们将来学习你在编写智能合约的时候需要注意的一个主要的安全特性：防止溢出和下溢。</p>
<p>什么是 <strong><em>溢出</em></strong> (<strong><em>overflow\</em></strong>)?</p>
<p>假设我们有一个 <code>uint8</code>, 只能存储8 bit数据。这意味着我们能存储的最大数字就是二进制 <code>11111111</code> (或者说十进制的 2^8 - 1 = 255).</p>
<p>来看看下面的代码。最后 <code>number</code> 将会是什么值？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint8 number = 255;</span><br><span class="line">number++;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们导致了溢出 — 虽然我们加了1， 但是 <code>number</code> 出乎意料地等于 <code>0</code>了。 (如果你给二进制 <code>11111111</code> 加1, 它将被重置为 <code>00000000</code>，就像钟表从 <code>23:59</code> 走向 <code>00:00</code>)。</p>
<p>下溢(<code>underflow</code>)也类似，如果你从一个等于 <code>0</code> 的 <code>uint8</code> 减去 <code>1</code>, 它将变成 <code>255</code> (因为 <code>uint</code> 是无符号的，其不能等于负数)。</p>
<p>虽然我们在这里不使用 <code>uint8</code>，而且每次给一个 <code>uint256</code> 加 <code>1</code> 也不太可能溢出 (2^256 真的是一个很大的数了)，在我们的合约中添加一些保护机制依然是非常有必要的，以防我们的 DApp 以后出现什么异常情况。</p>
<h2 id="使用-SafeMath"><a href="#使用-SafeMath" class="headerlink" title="使用 SafeMath"></a>使用 SafeMath</h2><p>为了防止这些情况，OpenZeppelin 建立了一个叫做 SafeMath 的 <strong><em>库</em></strong>(<strong><em>library\</em></strong>)，默认情况下可以防止这些问题。</p>
<p>不过在我们使用之前…… 什么叫做库?</p>
<p>一个<strong><em>库</em></strong> 是 Solidity 中一种特殊的合约。其中一个有用的功能是给原始数据类型增加一些方法。</p>
<p>比如，使用 SafeMath 库的时候，我们将使用 <code>using SafeMath for uint256</code> 这样的语法。 SafeMath 库有四个方法 — <code>add</code>， <code>sub</code>， <code>mul</code>， 以及 <code>div</code>。现在我们可以这样来让 <code>uint256</code> 调用这些方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">uint256 a = 5;</span><br><span class="line">uint256 b = a.add(3); // 5 + 3 = 8</span><br><span class="line">uint256 c = a.mul(2); // 5 * 2 = 10</span><br></pre></td></tr></table></figure>

<p>我们将在下一章来学习这些方法，不过现在我们先将 SafeMath 库添加进我们的合约。</p>
<h2 id="实战演习-8"><a href="#实战演习-8" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们已经帮你把 OpenZeppelin 的 <code>SafeMath</code> 库包含进 <code>safemath.sol</code>了，如果你想看一下代码的话，现在可以看看，不过我们下一章将深入进去。</p>
<p>首先我们来告诉我们的合约要使用 SafeMath。我们将在我们的 <code>ZombieFactory</code> 里调用，这是我们的基础合约 — 这样其他所有继承出去的子合约都可以使用这个库了。</p>
<ol>
<li>将 <code>safemath.sol</code> 引入到 <code>zombiefactory.sol</code>.</li>
<li>添加定义： <code>using SafeMath for uint256;</code>.</li>
</ol>
<h2 id="合约修改-1"><a href="#合约修改-1" class="headerlink" title="合约修改"></a>合约修改</h2><p>ZombieFactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./ownable.sol"</span>;</span><br><span class="line"><span class="comment">// 1. 在这里引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./safemath.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory is Ownable &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 在这里定义 using safemath </span></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">  uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">  uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line">  uint cooldownTime = <span class="number">1</span> days;</span><br><span class="line"></span><br><span class="line">  struct Zombie &#123;</span><br><span class="line">    string name;</span><br><span class="line">    uint dna;</span><br><span class="line">    uint32 level;</span><br><span class="line">    uint32 readyTime;</span><br><span class="line">    uint16 winCount;</span><br><span class="line">    uint16 lossCount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">  mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    uint id = zombies.push(Zombie(_name, _dna, <span class="number">1</span>, uint32(now + cooldownTime), <span class="number">0</span>, <span class="number">0</span>)) - <span class="number">1</span>;</span><br><span class="line">    zombieToOwner[id] = msg.sender;</span><br><span class="line">    ownerZombieCount[msg.sender]++;</span><br><span class="line">    NewZombie(id, _name, _dna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    uint rand = uint(keccak256(_str));</span><br><span class="line">    <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">    uint randDna = _generateRandomDna(_name);</span><br><span class="line">    randDna = randDna - randDna % <span class="number">100</span>;</span><br><span class="line">    _createZombie(_name, randDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SafeMath-第二部分"><a href="#SafeMath-第二部分" class="headerlink" title="SafeMath 第二部分"></a>SafeMath 第二部分</h1><p>来看看 SafeMath 的部分代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library SafeMath &#123;</span><br><span class="line"></span><br><span class="line">  function mul(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    if (a == 0) &#123;</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    uint256 c = a * b;</span><br><span class="line">    assert(c / a == b);</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function div(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0</span><br><span class="line">    uint256 c = a / b;</span><br><span class="line">    // assert(a == b * c + a % b); // There is no case in which this doesn&apos;t hold</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function sub(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    assert(b &lt;= a);</span><br><span class="line">    return a - b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function add(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    assert(c &gt;= a);</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先我们有了 <code>library</code> 关键字 — 库和 <code>合约</code>很相似，但是又有一些不同。 就我们的目的而言，库允许我们使用 <code>using</code> 关键字，它可以自动把库的所有方法添加给一个数据类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using SafeMath for uint;</span><br><span class="line">// 这下我们可以为任何 uint 调用这些方法了</span><br><span class="line">uint test = 2;</span><br><span class="line">test = test.mul(3); // test 等于 6 了</span><br><span class="line">test = test.add(5); // test 等于 11 了</span><br></pre></td></tr></table></figure>

<p>注意 <code>mul</code> 和 <code>add</code> 其实都需要两个参数。 在我们声明了 <code>using SafeMath for uint</code> 后，我们用来调用这些方法的 <code>uint</code> 就自动被作为第一个参数传递进去了(在此例中就是 <code>test</code>)</p>
<p>我们来看看 <code>add</code> 的源代码看 SafeMath 做了什么:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">  uint256 c = a + b;</span><br><span class="line">  assert(c &gt;= a);</span><br><span class="line">  return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基本上 <code>add</code> 只是像 <code>+</code> 一样对两个 <code>uint</code> 相加， 但是它用一个 <code>assert</code> 语句来确保结果大于 <code>a</code>。这样就防止了溢出。</p>
<p><code>assert</code> 和 <code>require</code> 相似，若结果为否它就会抛出错误。 <code>assert</code> 和 <code>require</code> 区别在于，<code>require</code> 若失败则会返还给用户剩下的 gas， <code>assert</code> 则不会。所以大部分情况下，你写代码的时候会比较喜欢 <code>require</code>，<code>assert</code> 只在代码可能出现严重错误的时候使用，比如 <code>uint</code> 溢出。</p>
<p>所以简而言之， SafeMath 的 <code>add</code>， <code>sub</code>， <code>mul</code>， 和 <code>div</code> 方法只做简单的四则运算，然后在发生溢出或下溢的时候抛出错误。</p>
<h2 id="在我们的代码里使用-SafeMath。"><a href="#在我们的代码里使用-SafeMath。" class="headerlink" title="在我们的代码里使用 SafeMath。"></a>在我们的代码里使用 SafeMath。</h2><p>为了防止溢出和下溢，我们可以在我们的代码里找 <code>+</code>， <code>-</code>， <code>*</code>， 或 <code>/</code>，然后替换为 <code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>.</p>
<p>比如，与其这样做:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myUint++;</span><br></pre></td></tr></table></figure>

<p>我们这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myUint = myUint.add(1);</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-9"><a href="#实战演习-9" class="headerlink" title="实战演习"></a>实战演习</h2><p>在 <code>ZombieOwnership</code> 中有两个地方用到了数学运算，来替换成 SafeMath 方法把。</p>
<ol>
<li>将 <code>++</code> 替换成 SafeMath 方法。</li>
<li>将 <code>--</code> 替换成 SafeMath 方法。</li>
</ol>
<h2 id="合约修改-2"><a href="#合约修改-2" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombieownership.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombieattack.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./erc721.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./safemath.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieOwnership is ZombieAttack, ERC721 &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line"></span><br><span class="line">  mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) zombieApprovals;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ownerZombieCount[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address _owner</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zombieToOwner[_tokenId];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_transfer</span>(<span class="params">address _from, address _to, uint256 _tokenId</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 替换成 SafeMath 的 `add`</span></span><br><span class="line">    <span class="comment">//ownerZombieCount[_to]++;</span></span><br><span class="line">    ownerZombieCount[_to] = ownerZombieCount[_to].add(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 2. 替换成 SafeMath 的 `sub`</span></span><br><span class="line">    <span class="comment">//ownerZombieCount[_from]--;</span></span><br><span class="line">    ownerZombieCount[_from] = ownerZombieCount[_from].sub(<span class="number">1</span>);</span><br><span class="line">    zombieToOwner[_tokenId] = _to;</span><br><span class="line">    Transfer(_from, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    _transfer(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _to, uint256 _tokenId</span>) <span class="title">public</span> <span class="title">onlyOwnerOf</span>(<span class="params">_tokenId</span>) </span>&#123;</span><br><span class="line">    zombieApprovals[_tokenId] = _to;</span><br><span class="line">    Approval(msg.sender, _to, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _tokenId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(zombieApprovals[_tokenId] == msg.sender);</span><br><span class="line">    address owner = ownerOf(_tokenId);</span><br><span class="line">    _transfer(owner, msg.sender, _tokenId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SafeMath-第三部分"><a href="#SafeMath-第三部分" class="headerlink" title="SafeMath 第三部分"></a>SafeMath 第三部分</h1><p>太好了，这下我们的 ERC721 实现不会有溢出或者下溢了。</p>
<p>回头看看我们在之前课程写的代码，还有其他几个地方也有可能导致溢出或下溢。</p>
<p>比如， 在 ZombieAttack 里面我们有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myZombie.winCount++;</span><br><span class="line">myZombie.level++;</span><br><span class="line">enemyZombie.lossCount++;</span><br></pre></td></tr></table></figure>

<p>我们同样应该在这些地方防止溢出。（通常情况下，总是使用 SafeMath 而不是普通数学运算是个好主意，也许在以后 Solidity 的新版本里这点会被默认实现，但是现在我们得自己在代码里实现这些额外的安全措施）。</p>
<p>不过我们遇到个小问题 — <code>winCount</code> 和 <code>lossCount</code> 是 <code>uint16</code>， 而 <code>level</code> 是 <code>uint32</code>。 所以如果我们用这些作为参数传入 SafeMath 的 <code>add</code> 方法。 它实际上并不会防止溢出，因为它会把这些变量都转换成 <code>uint256</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">uint256 a, uint256 b</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123;</span><br><span class="line">  uint256 c = a + b;</span><br><span class="line">  assert(c &gt;= a);</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们在`uint8` 上调用 `.add`。它将会被转换成 `uint256`.</span></span><br><span class="line"><span class="comment">// 所以它不会在 2^8 时溢出，因为 256 是一个有效的 `uint256`.</span></span><br></pre></td></tr></table></figure>

<p>这就意味着，我们需要再实现两个库来防止 <code>uint16</code> 和 <code>uint32</code> 溢出或下溢。我们可以将其命名为 <code>SafeMath16</code> 和 <code>SafeMath32</code>。</p>
<p>代码将和 SafeMath 完全相同，除了所有的 <code>uint256</code> 实例都将被替换成 <code>uint32</code> 或 <code>uint16</code>。</p>
<p>我们已经将这些代码帮你写好了，打开 <code>safemath.sol</code> 合约看看代码吧。</p>
<p>现在我们需要在 ZombieFactory 里使用它们。</p>
<h2 id="Putting-it-to-the-Test"><a href="#Putting-it-to-the-Test" class="headerlink" title="Putting it to the Test"></a>Putting it to the Test</h2><p>分配：</p>
<ol>
<li>声明我们将为 <code>uint32</code> 使用<code>SafeMath32</code>。</li>
<li>声明我们将为 <code>uint16</code> 使用<code>SafeMath16</code>。</li>
<li>在 ZombieFactory 里还有一处我们也应该使用 SafeMath 的方法， 我们已经在那里留了注释提醒你。</li>
</ol>
<h2 id="合约修改-3"><a href="#合约修改-3" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./ownable.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./safemath.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory is Ownable &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  <span class="comment">// 1. 为 uint32 声明 使用 SafeMath32</span></span><br><span class="line">  using SafeMath32 <span class="keyword">for</span> uint32;</span><br><span class="line">  <span class="comment">// 2. 为 uint16 声明 使用 SafeMath16</span></span><br><span class="line">  using SafeMath16 <span class="keyword">for</span> uint16;</span><br><span class="line"></span><br><span class="line">  event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">  uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">  uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line">  uint cooldownTime = <span class="number">1</span> days;</span><br><span class="line"></span><br><span class="line">  struct Zombie &#123;</span><br><span class="line">    string name;</span><br><span class="line">    uint dna;</span><br><span class="line">    uint32 level;</span><br><span class="line">    uint32 readyTime;</span><br><span class="line">    uint16 winCount;</span><br><span class="line">    uint16 lossCount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">  mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意: 我们选择不处理2038年问题，所以不用担心 readyTime 的溢出</span></span><br><span class="line">    <span class="comment">// 反正在2038年我们的APP早完蛋了</span></span><br><span class="line">    uint id = zombies.push(Zombie(_name, _dna, <span class="number">1</span>, uint32(now + cooldownTime), <span class="number">0</span>, <span class="number">0</span>)) - <span class="number">1</span>;</span><br><span class="line">    zombieToOwner[id] = msg.sender;</span><br><span class="line">    <span class="comment">// 3. 在这里使用 SafeMath 的 `add` 方法:</span></span><br><span class="line">    <span class="comment">//ownerZombieCount[msg.sender]++;</span></span><br><span class="line">    ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(<span class="number">1</span>);</span><br><span class="line">    NewZombie(id, _name, _dna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    uint rand = uint(keccak256(_str));</span><br><span class="line">    <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">    uint randDna = _generateRandomDna(_name);</span><br><span class="line">    randDna = randDna - randDna % <span class="number">100</span>;</span><br><span class="line">    _createZombie(_name, randDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SafeMath-第4部分"><a href="#SafeMath-第4部分" class="headerlink" title="SafeMath 第4部分"></a>SafeMath 第4部分</h1><p>真棒，现在我们已经为我们的 DApp 里面用到的 <code>uint</code> 数据类型都实现了 SafeMath 了。</p>
<p>让我们把 <code>ZombieAttack</code> 里所有潜在的问题都修复了吧。 （其实在 <code>ZombieHelper</code> 里也有一处 <code>zombies[_zombieId].level++;</code> 需要修复，不过我们已经帮你做好了，这样我们就不用再来一章了 😉）。</p>
<h2 id="实战演习-10"><a href="#实战演习-10" class="headerlink" title="实战演习"></a>实战演习</h2><p>放心大胆去对 <code>ZombieAttack</code> 里所有的 <code>++</code> 操作都使用 SafeMath 方法吧。为了方便你找，我们已经在相应的地方留了注释给你。</p>
<h2 id="合约修改-4"><a href="#合约修改-4" class="headerlink" title="合约修改"></a>合约修改</h2><p>ZombieAttack .sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line">  uint randNonce = <span class="number">0</span>;</span><br><span class="line">  uint attackVictoryProbability = <span class="number">70</span>;</span><br><span class="line">  <span class="comment">//using SafeMath for uint256;</span></span><br><span class="line">  <span class="comment">//using SafeMath32 for uint32;</span></span><br><span class="line">  <span class="comment">//using SafeMath16 for uint16;</span></span><br><span class="line">  <span class="comment">//ZombieBattle的父类是ZombieHelper，ZombieHelper的父类是ZombieFeeding，ZombieFeeding的父类是ZombieFactory。在ZombieFactory中引用过SafeMarh、SafeMarh32、SafeMarh16，所以在这里不需要重复引用。</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randMod</span>(<span class="params">uint _modulus</span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这儿有一个</span></span><br><span class="line">    <span class="comment">//randNonce++;</span></span><br><span class="line">    randNonce = randNonce.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> uint(keccak256(now, msg.sender, randNonce)) % _modulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params">uint _zombieId, uint _targetId</span>) <span class="title">external</span> <span class="title">onlyOwnerOf</span>(<span class="params">_zombieId</span>) </span>&#123;</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    Zombie storage enemyZombie = zombies[_targetId];</span><br><span class="line">    uint rand = randMod(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (rand &lt;= attackVictoryProbability) &#123;</span><br><span class="line">      <span class="comment">// 这里有三个</span></span><br><span class="line">      <span class="comment">//myZombie.winCount++;</span></span><br><span class="line">      myZombie.winCount = myZombie.winCount.add(<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//myZombie.level++;</span></span><br><span class="line">      myZombie.level = myZombie.level.add(<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//enemyZombie.lossCount++;</span></span><br><span class="line">      enemyZombie.lossCount = enemyZombie.lossCount.add(<span class="number">1</span>);</span><br><span class="line">      feedAndMultiply(_zombieId, enemyZombie.dna, <span class="string">"zombie"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 这儿还有俩哦</span></span><br><span class="line">      <span class="comment">//myZombie.lossCount++;</span></span><br><span class="line">      myZombie.lossCount = myZombie.lossCount.add(<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//enemyZombie.winCount++;</span></span><br><span class="line">      enemyZombie.winCount = enemyZombie.winCount.add(<span class="number">1</span>);</span><br><span class="line">      _triggerCooldown(myZombie);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>僵尸游戏的 Solidity 代码终于完成啦。</p>
<p>在以后的课程中，我们将学习如何将游戏部署到以太坊，以及如何和 Web3.js 交互。</p>
<p>不过在你离开第五课之前，我们来谈谈如何 <strong>给你的代码添加注释</strong>.</p>
<h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><p>Solidity 里的注释和 JavaScript 相同。在我们的课程中你已经看到了不少单行注释了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 这是一个单行注释，可以理解为给自己或者别人看的笔记</span><br></pre></td></tr></table></figure>

<p>只要在任何地方添加一个 <code>//</code> 就意味着你在注释。如此简单所以你应该经常这么做。</p>
<p>不过我们也知道你的想法：有时候单行注释是不够的。毕竟你生来话痨。</p>
<p>所以我们有了多行注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract CryptoZombies &#123; </span><br><span class="line">  /* 这是一个多行注释。我想对所有花时间来尝试这个编程课程的人说声谢谢。</span><br><span class="line">  它是免费的，并将永远免费。但是我们依然倾注了我们的心血来让它变得更好。</span><br><span class="line"></span><br><span class="line">   要知道这依然只是区块链开发的开始而已，虽然我们已经走了很远，</span><br><span class="line">   仍然有很多种方式来让我们的社区变得更好。</span><br><span class="line">   如果我们在哪个地方出了错，欢迎在我们的 github 提交 PR 或者 issue 来帮助我们改进：</span><br><span class="line">    https://github.com/loomnetwork/cryptozombie-lessons</span><br><span class="line"></span><br><span class="line">    或者，如果你有任何的想法、建议甚至仅仅想和我们打声招呼，欢迎来我们的电报群：</span><br><span class="line">     https://t.me/loomnetworkcn</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特别是，最好为你合约中每个方法添加注释来解释它的预期行为。这样其他开发者（或者你自己，在6个月以后再回到这个项目中）可以很快地理解你的代码而不需要逐行阅读所有代码。</p>
<p>Solidity 社区所使用的一个标准是使用一种被称作 <strong><em>natspec\</em></strong> 的格式，看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/// @title 一个简单的基础运算合约</span><br><span class="line">/// @author H4XF13LD MORRIS 💯💯😎💯💯</span><br><span class="line">/// @notice 现在，这个合约只添加一个乘法</span><br><span class="line">contract Math &#123;</span><br><span class="line">  /// @notice 两个数相乘</span><br><span class="line">  /// @param x 第一个 uint</span><br><span class="line">  /// @param y  第二个 uint</span><br><span class="line">  /// @return z  (x * y) 的结果</span><br><span class="line">  /// @dev 现在这个方法不检查溢出</span><br><span class="line">  function multiply(uint x, uint y) returns (uint z) &#123;</span><br><span class="line">    // 这只是个普通的注释，不会被 natspec 解释</span><br><span class="line">    z = x * y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@title</code>（标题） 和 <code>@author</code> （作者）很直接了.</p>
<p><code>@notice</code> （须知）向 <strong>用户</strong> 解释这个方法或者合约是做什么的。 <code>@dev</code> （开发者） 是向开发者解释更多的细节。</p>
<p><code>@param</code> （参数）和 <code>@return</code> （返回） 用来描述这个方法需要传入什么参数以及返回什么值。</p>
<p>注意你并不需要每次都用上所有的标签，它们都是可选的。不过最少，写下一个 <code>@dev</code> 注释来解释每个方法是做什么的。</p>
<h2 id="实战演习-11"><a href="#实战演习-11" class="headerlink" title="实战演习"></a>实战演习</h2><p>如果你还没注意到：CryptoZombies 的答案检查器在工作的时候将忽略所有的注释。所以这一章我们其实无法检查你的 natspec 注释了。全靠你自己咯。</p>
<p>话说回来，到现在你应该已经是一个 Solidity 小能手了。我们就假定你已经学会这些了。</p>
<p>大胆去做些尝试把，给 <code>ZombieOwnership</code> 加上一些 natspec 标签:</p>
<ol>
<li><code>@title</code> — 例如：一个管理转移僵尸所有权的合约</li>
<li><code>@author</code> — 你的名字</li>
<li><code>@dev</code> — 例如：符合 OpenZeppelin 对 ERC721 标准草案的实现</li>
</ol>
<h1 id="放在一起"><a href="#放在一起" class="headerlink" title="放在一起"></a>放在一起</h1><p>恭喜你！这些就是第五课的全部啦。</p>
<p>作为奖赏，我们送给你了一个10级僵尸：<strong>H4XF13LD MORRIS 💯💯😎💯💯</strong> ！</p>
<p>（天啊，传奇的<strong>H4XF13LD MORRIS 💯💯😎💯💯</strong> 僵尸！）</p>
<p>这下你的僵尸大军有4个僵尸啦。</p>
<p>在你继续前，你可以点击每个僵尸来给它们起一个新名字， （注： <strong>H4XF13LD MORRIS 💯💯😎💯💯</strong> 这个梗来自于一个在2000年左右流行的古老游戏，我们的开发者觉得它很酷，你也可以给它起一个你觉得很酷的名字，比如“隔壁老王”或者“绿帽僵尸”😏）。</p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>这节课里面我们学到了</p>
<ul>
<li>代币, ERC721 标准，以及可交易的物件/僵尸</li>
<li>库以及如何使用库</li>
<li>如何利用 SafeMath 来防止溢出和下溢</li>
<li>代码注释和 natspec 标准</li>
</ul>
<p>这节教程完成了我们游戏的 Solidity 代码（仅针对当下来说，未来的课程我们也许会加入更多进去）。</p>
<p>在接下来的两节课中，我们将学习如何将游戏部署到以太坊以及和 <strong><em>web3.js\</em></strong> 交互 （这样你就能为你的 DApp 打造一个界面了 ）。</p>
<p>继续玩儿或者重命名你的僵尸，然后就可以点击下一章来结束本节教程了。</p>
<p><img src="https://i.loli.net/2020/06/29/OwCBJ4kfo8W9RpM.png" alt="image-20200629232202703"></p>
<h1 id="第五课打卡"><a href="#第五课打卡" class="headerlink" title="第五课打卡"></a>第五课打卡</h1><p><img src="https://i.loli.net/2020/06/29/Rt1SieE7unND4zc.png" alt="image-20200629233354077"></p>
<p><a href="https://share.cryptozombies.io/zh/lesson/5/share/H4XF13LD_MORRIS_%F0%9F%92%AF%F0%9F%92%AF%F0%9F%98%8E%F0%9F%92%AF%F0%9F%92%AF" target="_blank" rel="noopener">我的僵尸大军5</a></p>
]]></content>
      <categories>
        <category>loom network</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC/GC</title>
    <url>/2020/02/25/JUC-GC/</url>
    <content><![CDATA[<h1 id="1-JUC（java-util-concurrent）"><a href="#1-JUC（java-util-concurrent）" class="headerlink" title="1.JUC（java.util.concurrent）"></a>1.JUC（java.util.concurrent）</h1><p>高并发、并行问题</p><h2 id="1-1java-util-concurrent-atomic"><a href="#1-1java-util-concurrent-atomic" class="headerlink" title="1.1java.util.concurrent.atomic"></a>1.1java.util.concurrent.atomic</h2><h3 id="1-1-1Class-AtomicIntefger"><a href="#1-1-1Class-AtomicIntefger" class="headerlink" title="1.1.1Class AtomicIntefger"></a>1.1.1Class AtomicIntefger</h3><p>原子引用</p><p>1.你对volatile的理解？</p><ul>
<li><p>volatile是java虚拟机提供的轻量级的同步机制。有三大特性：</p>
<ul>
<li><p>保证可见性。</p>
<p>代码验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="comment">//int number = 0;</span></span><br><span class="line">    <span class="comment">//volatile 实现了线程的可见性 及一个线程将拷贝的值修改后刷回修改了主内存的值，对其他线程可见。</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTo60</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 验证volatile的可见性</span></span><br><span class="line"><span class="comment"> * 1.1 假如 int number = 0；number变量之前没加volatile关键字修饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();<span class="comment">//资源类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t come in"</span>);</span><br><span class="line">            <span class="comment">//暂停线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myData.addTo60();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t update number value:"</span>+myData.number);</span><br><span class="line">        &#125;,<span class="string">"AAA"</span>).start();</span><br><span class="line">        <span class="comment">//第二个线程是main线程</span></span><br><span class="line">        <span class="keyword">while</span> (myData.number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//main线程等待，直到number值不为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t mission is over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不保证原子性。</p>
</li>
</ul>
</li>
</ul><a id="more"></a>



<ul>
<li>禁止指令重排。</li>
</ul>
<ul>
<li>JVM（java虚拟机）</li>
</ul>
<ul>
<li><p>JMM（java内存模型）</p>
<p><img src="/2020/02/25/JUC-GC/C:%5CUsers%5C12173%5CDesktop%5Cimage%5CJMM01.png" alt="JMM"></p>
<p><img src="/2020/02/25/JUC-GC/C:%5CUsers%5C12173%5CDesktop%5Cimage%5CJMM.png" alt="JMM"></p>
<p>JMM三大特性：可见性、原子性、有序性。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java框架学习&lt;一&gt;</title>
    <url>/2020/01/11/Java%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、JavaSE"><a href="#一、JavaSE" class="headerlink" title="一、JavaSE"></a>一、JavaSE</h1><h2 id="遗忘知识回顾"><a href="#遗忘知识回顾" class="headerlink" title="遗忘知识回顾"></a>遗忘知识回顾</h2><ul>
<li><p><strong>java基本数据类型：byte、char、short、int、long、float、double、boolean</strong></p>
</li>
<li><p><strong>对应包装类：Byte、Character、Short、Integer、Long、Float、Double、Boolean</strong></p>
</li>
<li><p><strong>访问修饰符范围从大到小：public、protected、default、private。如下图所示：</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5ijzt.png" alt="l5ijzt.png"></p>
</li>
<li><p><strong>标识接口</strong></p>
<p>标识接口是没有任何方法和属性的接口。标识接口不对实现它的类有任何语义上的要求，它仅仅表明实现它的类属于一个特定的类型。</p>
<p>　标接口在Java语言中有一些很著名的应用，例如我们常用的ArrayList类，它的类实现接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>仔细看 RandomAccess、RandomAccess、Serializable的接口可以看到，内部都是一些空接口，没有定义接口方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface RandomAccess &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Cloneable &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Serializable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 标识接口，<strong>当一个类实现了一个标识接口之后就像是给自己打了个标签。</strong></p>
<p>　　打个比喻，不是很恰当。就像是一个人穿了件名牌衣服（实现了标识接口），别人一看他穿的衣服（标识接口）就知道他的品味、身份（特性）。</p>
</li>
<li><p><strong>java反射机制</strong></p>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
</li>
<li><p><strong>注解</strong></p>
</li>
</ul><a id="more"></a>
<h1 id="二、Java主流框架"><a href="#二、Java主流框架" class="headerlink" title="二、Java主流框架"></a>二、Java主流框架</h1><h2 id="框架的作用："><a href="#框架的作用：" class="headerlink" title="框架的作用："></a>框架的作用：</h2><p>对原生态的java代码进行封装，简化程序员操作。</p>
<ul>
<li><p><strong>框架是什么：</strong></p>
<p>框架就是一套规范。既然是规范，你使用这个框架就要遵守这个框架所规定的约束。在Java开发中，框架是用一套规则+一群jar包来表示的。</p>
</li>
<li><p><strong>意义：</strong></p>
<p>框架不仅仅只完成这些简单的约束，更重要的是，框架为我们封装好了一些冗余，且重用率低的代码。并且使用反射与动态代理机制，将代码实现了通用性。比如如果你说servlet开发，你需要在servlet获取表单的参数，每次都要获取很麻烦，而struts底层就使用反射机制和拦截器机制帮助我们获取表单的值，我们就不用每次都手写那些代码了，简化了开发，当然你必须遵守一些规定来配置。</p>
<p>还有比如hibernate，它提供了一些通用性很强的对数据库的增删改差，如果你使用jdbc每次做一些简单的crud的时候都必须写sql，但使用hibernate就不需要这么麻烦了，直接save,update就可以了。当然，你还是要遵循其一些规范而配置。同理spring也是如此。</p>
</li>
</ul>
<h2 id="Java最原始的框架"><a href="#Java最原始的框架" class="headerlink" title="Java最原始的框架"></a>Java最原始的框架</h2><p><strong>整合框架：SSH=spring+struts2+hibernate</strong></p>
<h3 id="spring框架"><a href="#spring框架" class="headerlink" title="spring框架"></a><strong>spring框架</strong></h3><p><strong>1.spring简介</strong><br>spring 是一个轻量级的，基于IOC和AOP核心技术的企业级开源开发框架</p>
<p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p>
<p>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </p>
<p><strong>Spring目的</strong>：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明 管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </p>
<p><strong>注意：</strong>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<p><strong>2.spring的主要特征</strong><br><strong>（1）轻量级</strong>：spring是一个轻量级的开发框架，基本版本大约只有2M</p>
<p><strong>（2）IOC：</strong>控制反转，应用程序中对象之间的依赖是由spring 来控制的</p>
<p><strong>（3）AOP：</strong>面向切面编程，spring支持面向切面编程，这样可以将业务逻辑和系统服务分开，分离</p>
<p><strong>（4）容器：</strong>包含并管理应用程序中对象的生命周期和配置信息</p>
<p><strong>（5）MVC思想：</strong>spring也是基于MVC思想的框架，也遵循模型-视图-控制器这三个层次</p>
<p><strong>（6）事务：</strong>spring提供一个持续化的接口，可以上至扩展到本地事务下至扩展到全局事务</p>
<p><strong>（7）异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，hibernate,or JDO抛出的）转化为一致的unchecked 异常。</p>
<p> <strong>3.spring优缺点</strong></p>
<p><strong>优点：</strong></p>
<p>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。<br>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。<br>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属<br>性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。<br>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。<br>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。<br>使用Spring构建的应用程序易于单元测试。<br>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。<br>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。<br>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。<br><strong>缺点：</strong><br>1.jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器</p>
<p>2.Spring不支持分布式，这也是EJB仍然在用的原因之一。</p>
<h3 id="Struts框架"><a href="#Struts框架" class="headerlink" title="Struts框架"></a>Struts框架</h3><p><strong>1.structs1原理</strong><br>想要理解strusts1，我是先通过strusts1的运行原理图来理解的，然后，我们根据原理图来讲解structs1原理。</p>
<p><strong>1.1 strusts1原理图</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5ytiV.jpg" alt="l5ytiV.jpg"></p>
<p><strong>1.2 structs1原理步骤</strong><br>用户在视图层输入数据。</p>
<p>第一步：structs框架总控制器，初始化,开始读取strusts-config.xml文件。</p>
<p>struts框架的总控制器ActionServlet是一个Servlet，它在web.xml中配置成自动启动的Servlet，在启动时总控制器会读取配置文件(struts-config.xml)的配置信息，为struts中不同的模块初始化相应的对象。(面向对象思想)</p>
<p>第二步：视图层向总控制器发送Http请求</p>
<p>用户提交表单或者通过URL向WEB服务器提交请求，请求的数据用HTTP协议传给web服务器</p>
<p>第三步： Form填充</p>
<p>struts的总控制器ActionServlet在用户提交请求时将数据放到对应的form对象中的成员变量中。</p>
<p>第四步：派发请求</p>
<p>控制器根据配置信息，对象ActionConfig将请求派发到具体的Action，对应的formBean一并传给这个Action中的excute()方法。</p>
<p>第五步：处理业务</p>
<p>Action一般只包含一个excute()方法，它负责执行相应的业务逻辑(调用其它的业务模块)完毕后返回一个ActionForward对象。服务器通过ActionForward对象进行转发工作。</p>
<p>第六步：返回响应</p>
<p>Action将业务处理的不同结果返回一个目标响应对象给总控制器。</p>
<p>第七步：查找响应</p>
<p>总控制器根据Action处理业务返回的目标响应对象，找到对应的资源对象，一般情况下为jsp页面。</p>
<p>第八步:响应用户</p>
<p>目标响应对象将结果传递给资源对象，将结果展现给用户。</p>
<p><strong>1.3 structs的优缺点：</strong><br><strong>1.优点：</strong><br>  ①开源的框架，结构清晰<br>  ②是MVC的经典实现（MVC是一种思想，而不是一种技术）<br>  ③处理异常机制，实现国际化<br>  ④具有强大的标签库<br>  ⑤解决了JSP页面存在大量的JAVA代码，维护起来方便<br>  ⑥在formBean中会自动提交，不会去使用传统的get、set方法得到值、取值 </p>
<p><strong>2.缺点：</strong><br>  ①配置复杂<br>  ②测试不方便<br>  ③依赖web容器<br>  ④action是一个单例模式，必须设置为线程安全<br><strong>2.structs2原理</strong><br><strong>2.1 structs2原理图</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/11/l56Ymd.jpg" alt="l56Ymd.jpg"></p>
<p>第一步：客户端初始化一个指向Servlet容器（例如Tomcat）的请求<br>第二步：这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）<br>第三步：接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action<br>第四步：如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy<br>第五步：ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类<br>第六步：ActionProxy创建一个ActionInvocation的实例。<br>第七步：ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。 </p>
<p>第八步：一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper </p>
<p><strong>注意：</strong>在上述过程中所有的对象（Action，Results，Interceptors，等）都是通过ObjectFactory来创建的</p>
<p><strong>2.2 structs2的优缺点：</strong><br><strong>优点：</strong><br>大量的拦截器：<br>Struts2本身提供了大量的可重用的拦截器，比如类型转换拦截器，很多时候我们从页面取得参数，这个时候它是String类型的，我们需要手动。<br>基于插件的框架：<br>Struts2是一个基于插件的框架，社区中提供了很多实用的插件，比如jfreechat/json等等，使用这些插件可以简化我们的开发，加快开发进度。<br>struts2最大的缺点莫过于在好多web服务器上支持不好，例如在websphere5.5,weblogic8.1及以前版本支持非常查，需要用最新的。<br>多种视图的支持：<br>多种视图的支持：jsp，freemarker，Veloctiy，只要你愿意，你甚至可以通过轻松的改造让它支持pdf，同一个项目中你可以支持多种视图。<br>更加的模块化：<br>与Struts1.X 相比，Struts2更加的模块化，可以轻松将配置信息按功能界限拆分成多个文件，便于管理和团队协作开发。<br>与Spring的集成：<br>与Struts1.x相比，Struts2不必再自己编写singleton，进一步的降低了程序间的耦合性，就Struts2内部本身而言，降低了框架本身的偶合性。<br>基于pojo易于测试：</p>
<p>在Struts1.x中我需要Mock出这两个Http对象，使我们很难编写Action的单元测试，与Struts1.x相比，Struts2的Action 不再依赖于HttpServletRequest和HttpServletResponse对象，使我们能够更方便的针对Action编写单元测试。</p>
<p><strong>缺点：</strong><br>Struts2中Action中取得从jsp中传过来的参数时还是有点麻烦。</p>
<p>可以为Struts2的Action中的属性配置上Getter和Setter方法，通过默认拦截器，就可以将请求参数设置到这些属性中。如果用这种方式，当请求参数很多时，Action类就会被这些表单属性弄的很臃肿，让人感觉会很乱。还有Action中的属性不但可以用来获得请求参数还可以输出到Jsp中，这样就会更乱。假设从JSP1中获得了参数money=100000，但是这个Action还要输出到JSP2中，但是输出的格式却不同，money=100,000，这样这个Action中的money中的值就变了。</p>
<p>校验还是感觉比较繁琐，感觉太烦乱，也太细化了。</p>
<p>如果校验出错的只能给用户提示一些信息。如果有多个字段，每个字段出错时返回到不同的画面，这个功能在Strut2框架下借助框架提供的校验逻辑就不容易实现。</p>
<p>安全性有待提高。</p>
<p>Struts2曝出2个高危安全漏洞，一个是使用缩写的导航参数前缀时的远程代码执行漏洞，另一个是使用缩写的重定向参数前缀时的开放式重定向漏洞。这些漏洞可使黑客取得网站服务器的“最高权限”，从而使企业服务器变成黑客手中的“肉鸡”</p>
<h3 id="hibernate框架"><a href="#hibernate框架" class="headerlink" title="hibernate框架"></a><strong>hibernate框架</strong></h3><p><strong>1.hibernate的工作原理</strong></p>
<p>第一步：Configuration.config() 来读取xml配置文件</p>
<p>第二步：Configuration.config()来读取配置文件里面的映射信息</p>
<p>第三步：创建会话工厂</p>
<p>第四步：打开会话</p>
<p>第五步：开启事务</p>
<p>第六步：持久化到数据库</p>
<p>第七步：关闭会话</p>
<p>第八步：关闭会话工厂<br><strong>2.hibernate优缺点</strong></p>
<p><strong>优点：</strong></p>
<p>1.hibernate是基于ORMapping技术的开源的框架，对JDBC进行了轻量级的封装，使用面向对象的思维来操纵数据库。 </p>
<p>2.hibernate提供了session缓存和二级缓存，对于不需要进行复杂查询的系统，性能有提升。 </p>
<p>3.低侵入式设计</p>
<p><strong>缺点：</strong></p>
<p>1.hibernate不容易上手，学习成本太高</p>
<p>2.hibernate由于不直接对底层数据库进行操作，所以不适合复杂的查询（统计）</p>
<p>3.不适合大量的聚集操作（存储过程）</p>
<p>比较难操作，比较古老，已很少使用。</p>
<h2 id="Java较新框架"><a href="#Java较新框架" class="headerlink" title="Java较新框架"></a>Java较新框架</h2><p><strong>集成框架SSM=SptingMVC+Spring+Mybiats</strong></p>
<h2 id="Java最新框架"><a href="#Java最新框架" class="headerlink" title="Java最新框架"></a>Java最新框架</h2><p><strong>Springboot</strong></p>
<h2 id="Java微服务框架"><a href="#Java微服务框架" class="headerlink" title="Java微服务框架"></a>Java微服务框架</h2><p><strong>SpringCloud</strong></p>
]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown进阶语法学习笔记</title>
    <url>/2019/11/02/Markdown%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>写博客需要用到Markdown语法，于是产生了整理Markdown笔记的想法。</p><p>这篇文章是基于<a href="[https://lisongbai.top/2019/10/31/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/](https://lisongbai.top/2019/10/31/Markdown基本语法学习笔记-1/)">Markdown基本语法</a>的进阶语法。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1.内容目录"></a>1.内容目录</h3><p>在文章的最开始使用[TOC]引用目录，例如本文目录：</p><h3 id="2-加强代码块"><a href="#2-加强代码块" class="headerlink" title="2.加强代码块"></a>2.加强代码块</h3><p>使用”```”+”语言名”进行标记。例如：</p><ul>
<li><p>java示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeNode temp = root.left;</span><br><span class="line">            root.left = root.right;</span><br><span class="line">            root.right = temp;</span><br><span class="line">            Mirror(root.left);</span><br><span class="line">            Mirror(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>





<h3 id="3-脚注"><a href="#3-脚注" class="headerlink" title="3.脚注"></a>3.脚注</h3><p>使用[^keyword]表示注脚</p>
<ul>
<li><p>注脚</p>
<p>这是一个注脚[^1]的样例。</p>
</li>
</ul>
<h3 id="4-标签和分类"><a href="#4-标签和分类" class="headerlink" title="4.标签和分类"></a>4.标签和分类</h3><p>一般在吻兽输入tags添加标签，categories添加分类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> tags: </span><br><span class="line"> - Markdown</span><br><span class="line"> - 语言</span><br><span class="line"> categories:</span><br><span class="line">- 技术</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>分类具有层次性，标签无层次性。</p>
<h3 id="5-待办事项Todo列表"><a href="#5-待办事项Todo列表" class="headerlink" title="5.待办事项Todo列表"></a>5.待办事项Todo列表</h3><p>使用带有[]或者[x]（未完成或已完成）项的列表语法攥写一个代办事项列表例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 早起跑步</span><br><span class="line">- [X] 完成计网大作业</span><br><span class="line">- [x] 编译并更换ubuntu内核</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<ul>
<li><input disabled type="checkbox"> 早起跑步</li>
<li><input checked disabled type="checkbox"> 完成计网大作业</li>
<li><input checked disabled type="checkbox"> 编译并更换ubuntu内核</li>
</ul>
<p><strong>注：</strong>-空格[]空格具体事项（[]中填空格为未完成事项，填x为完成事项）</p>
<h3 id="6-LaTeX的公式规则"><a href="#6-LaTeX的公式规则" class="headerlink" title="6.LaTeX的公式规则"></a>6.LaTeX的公式规则</h3><h5 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h5><h6 id="1）转义"><a href="#1）转义" class="headerlink" title="1）转义"></a>1）转义</h6><blockquote>
<p>一下几个字符: # $ % &amp; ~ _ ^ \ { }有特殊意义，需要表示这些字符时，需要转义，即在每个字符前加上 \ 。<br> \boxed命令给公式加一个方框。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$E = mc^<span class="number">2</span> $</span><br><span class="line">$ \boxed&#123;E=mc^<span class="number">2</span>&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=E%20%3D%20mc%5E2%20%5Cquad%20%5Cboxed%7BE%3Dmc%5E2%7D" alt="E = mc^2 \quad \boxed{E=mc^2}"></p>
<h6 id="2）希腊字母"><a href="#2）希腊字母" class="headerlink" title="2）希腊字母"></a>2）希腊字母</h6><p><img src="https:////upload-images.jianshu.io/upload_images/3187098-f9884c349c6d36df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp" alt="img"></p>
<h6 id="3）上下标和根号"><a href="#3）上下标和根号" class="headerlink" title="3）上下标和根号"></a>3）上下标和根号</h6><blockquote>
<p>用^来表示上标<br> 用_来表示下标<br> 根号用\sqrt表示</p>
</blockquote>
<p>注意：上下标如果多余一个字符或符号，需要用{}括起来。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n a_i $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Csum_%7Bi%3D1%7D%5En%20a_i" alt="\sum_{i=1}^n a_i"><br> \sqrt[开方次数，默认为2]{开方公式}， 例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$$ x_&#123;ij&#125;^<span class="number">2</span>\quad \<span class="built_in">sqrt</span>&#123;x&#125;\quad \<span class="built_in">sqrt</span>[<span class="number">3</span>]&#123;x&#125; $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=x_%7Bij%7D%5E2%5Cquad%20%5Csqrt%7Bx%7D%5Cquad%20%5Csqrt%5B3%5D%7Bx%7D" alt="x_{ij}^2\quad \sqrt{x}\quad \sqrt[3]{x}"><br> 其中\quad表示添加空格。</p>
<h6 id="4）分数"><a href="#4）分数" class="headerlink" title="4）分数"></a>4）分数</h6><blockquote>
<p>分数用\frac表示。</p>
</blockquote>
<blockquote>
<p>字号工具环境设置：<br> \dfrac命令把字号设置为独立公式中的大小；<br> \tfrac则把字号设置为行间公式中的大小。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; \dfrac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cfrac%7B1%7D%7B2%7D%20%5Cdfrac%7B1%7D%7B2%7D" alt="\frac{1}{2} \dfrac{1}{2}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$ \frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; \tfrac&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125; $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cfrac%7B1%7D%7B2%7D%20%5Ctfrac%7B1%7D%7B2%7D" alt="\frac{1}{2} \tfrac{1}{2}"></p>
<h6 id="5）运算符"><a href="#5）运算符" class="headerlink" title="5）运算符"></a>5）运算符</h6><blockquote>
<p>+ - * / = 直接输入；</p>
</blockquote>
<blockquote>
<p>特殊运算则用以下特殊命令<code>\pm\; \times\; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx\; \equiv</code><br> <img src="https://math.jianshu.com/math?formula=%5Cpm%5C%3B%20%5Ctimes%5C%3B%20%5Cdiv%5C%3B%20%5Ccdot%5C%3B%20%5Ccap%5C%3B%20%5Ccup%5C%3B%20%5Cgeq%5C%3B%20%5Cleq%5C%3B%20%5Cneq%5C%3B%20%5Capprox%5C%3B%20%5Cequiv" alt="\pm\; \times\; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx\; \equiv"></p>
</blockquote>
<blockquote>
<p>和、积、极限、积分等运算符用\sum, \prod, \lim, \int,这些公式在行内公式被压缩，以适应行高，可以通过\limits和\nolimits命令显示制动是否压缩。<br> <img src="https://math.jianshu.com/math?formula=%5Csum%5C%3B%20%5Cprod%5C%3B%20%5Clim%5C%3B%20%5Cint%5C%3B" alt="\sum\; \prod\; \lim\; \int\;"></p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n i </span><br><span class="line"></span><br><span class="line">$ \prod<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n </span><br><span class="line"></span><br><span class="line">$\lim<span class="number">_</span>&#123;x\to<span class="number">0</span>&#125;x^<span class="number">2</span> </span><br><span class="line"></span><br><span class="line">$\int<span class="number">_</span>&#123;a&#125;^&#123;b&#125;x^<span class="number">2</span> dx </span><br><span class="line"></span><br><span class="line">$\sum<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n i \quad\prod<span class="number">_</span>&#123;i=<span class="number">1</span>&#125;^n </span><br><span class="line">\quad</span><br><span class="line">\lim<span class="number">_</span>&#123;x\to<span class="number">0</span>&#125;x^<span class="number">2</span> \quad\int<span class="number">_</span>&#123;a&#125;^&#123;b&#125;x^<span class="number">2</span> dx </span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Csum_%7Bi%3D1%7D%5En%20i%20%5Cquad%5Cprod_%7Bi%3D1%7D%5En%20%5Cquad%20%5Clim_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint_a%5Eb%20x%5E2%20dx%20%24%24%24%24%20%5Csum_%7Bi%3D1%7D%5En%20i%20%5Cquad%5Cprod_%7Bi%3D1%7D%5En%5Cquad%5Clim_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint_a%5Eb%20x%5E2%20dx%20%5Csum%5Cnolimits_%7Bi%3D1%7D%5En%5Cquad%5Cprod%5Cnolimits_%7Bi%3D1%7D%5En%20%5Cquad%20%5Clim%5Cnolimits_%7Bx%5Cto0%7D%20x%5E2%20%5Cquad%5Cint%5Cnolimits_a%5Eb%20x%5E2%20dx" alt="\sum_{i=1}^n i \quad\prod_{i=1}^n \quad \lim_{x\to0} x^2 \quad\int_a^b x^2 dx $$$$ \sum_{i=1}^n i \quad\prod_{i=1}^n\quad\lim_{x\to0} x^2 \quad\int_a^b x^2 dx \sum\nolimits_{i=1}^n\quad\prod\nolimits_{i=1}^n \quad \lim\nolimits_{x\to0} x^2 \quad\int\nolimits_a^b x^2 dx"></p>
<h6 id="6）多重积分"><a href="#6）多重积分" class="headerlink" title="6）多重积分"></a>6）多重积分</h6><blockquote>
<p>使用如下形式：\int、\iint、\iiint、\iiiint、\idotsint</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$$ \<span class="keyword">int</span> \<span class="keyword">int</span> \quad \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \quad </span><br><span class="line"> \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \<span class="keyword">int</span> \quad \<span class="keyword">int</span> \dots \<span class="keyword">int</span> $$</span><br><span class="line"></span><br><span class="line">$$ \iint \quad \iiint \quad \iiiint \quad \idotsint $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cint%5Cint%5Cquad%5Cint%5Cint%5Cint%5Cquad%5Cint%5Cint%5Cint%5Cint%5Cquad%5Cint%5Cdots%5Cint%24%24%24%24%20%5Ciint%5Cquad%5Ciiint%5Cquad%5Ciiiint%5Cquad%5Cidotsint" alt="\int\int\quad\int\int\int\quad\int\int\int\int\quad\int\dots\int$$$$ \iint\quad\iiint\quad\iiiint\quad\idotsint"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \leftarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cleftarrow" alt="\leftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \rightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Crightarrow" alt="\rightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \leftrightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cleftrightarrow" alt="\leftrightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \longleftarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Clongleftarrow" alt="\longleftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$longleftrightarrow$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5CLongleftarrow" alt="\Longleftarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \Longrightarrow $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5CLongleftrightarrow" alt="\Longleftrightarrow"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\xleftarrow和$\xrightarrow可根据内容自动调整</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cxleftarrow%7Bx%2By%2Bz%7D" alt="\xleftarrow{x+y+z}"></p>
<p><img src="https://math.jianshu.com/math?formula=%5Cxrightarrow%5Bx%5D%7Bx%2By%2Bz%7D" alt="\xrightarrow[x]{x+y+z}"></p>
<h6 id="7）注音和标注"><a href="#7）注音和标注" class="headerlink" title="7）注音和标注"></a>7）注音和标注</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \bar&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbar%7Bx%7D" alt="\bar{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \acute&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cacute%7Bx%7D" alt="\acute{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \mathring&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cmathring%7Bx%7D" alt="\mathring{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \vec&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cvec%7Bx%7D" alt="\vec{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \grave&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cgrave%7Bx%7D" alt="\grave{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \dot&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cdot%7Bx%7D" alt="\dot{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \hat&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Chat%7Bx%7D" alt="\hat{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \tilde&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bx%7D" alt="\tilde{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \ddot&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cddot%7Bx%7D" alt="\ddot{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \check&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Ccheck%7Bx%7D" alt="\check{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \breve&#123;x&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbreve%7Bx%7D" alt="\breve{x}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \dddot&#123;x&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cdddot%7Bx%7D" alt="\dddot{x}"></p>
<h6 id="8）分隔符"><a href="#8）分隔符" class="headerlink" title="8）分隔符"></a>8）分隔符</h6><blockquote>
<p>括号用() [] {} \lange \rangle表示 ()  []  {}  ⟨⟩</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ \overline&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverline%7Bxxx%7D" alt="\overline{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overleftrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverleftrightarrow%7Bxxx%7D" alt="\overleftrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underline&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderline%7Bxxx%7D" alt="\underline{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underleftrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderleftrightarrow%7Bxxx%7D" alt="\underleftrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overleftarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverleftarrow%7Bxxx%7D" alt="\overleftarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overbrace&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverbrace%7Bxxx%7D" alt="\overbrace{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underleftarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderleftarrow%7Bxxx%7D" alt="\underleftarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underbrace&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderbrace%7Bxxx%7D" alt="\underbrace{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\overrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Coverrightarrow%7Bxxx%7D" alt="\overrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\widehat&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cwidehat%7Bxxx%7D" alt="\widehat{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\underrightarrow&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cunderrightarrow%7Bxxx%7D" alt="\underrightarrow{xxx}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\widetilde&#123;xxx&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cwidetilde%7Bxxx%7D" alt="\widetilde{xxx}"></p>
<h6 id="9）省略号"><a href="#9）省略号" class="headerlink" title="9）省略号"></a>9）省略号</h6><blockquote>
<p>省略号用 \dots \cdots \vdots \ddots表示 ，\dots和\cdots的纵向位置不同，前者一般用于有下标的序列</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$ x_1, x_2, \dots, x_n\quad <span class="number">1</span>,<span class="number">2</span>,\cdots,n\quad \vdots\quad \ddots $$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=x_1%2C%20x_2%2C%20%5Cdots%2C%20x_n%5Cquad%201%2C2%2C%5Ccdots%2Cn%5Cquad%20%5Cvdots%5Cquad%20%5Cddots" alt="x_1, x_2, \dots, x_n\quad 1,2,\cdots,n\quad \vdots\quad \ddots"></p>
<h6 id="10）空白间距"><a href="#10）空白间距" class="headerlink" title="10）空白间距"></a>10）空白间距</h6><table>
<thead>
<tr>
<th>语法</th>
<th align="left">格式</th>
<th>实例</th>
<th>显示</th>
</tr>
</thead>
<tbody><tr>
<td>quad空格</td>
<td align="left"><code>a \quad b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%20%5Cquad%20b" alt="a \quad b"></td>
<td>一个<em>m</em>的宽度</td>
</tr>
<tr>
<td>两个quad空格</td>
<td align="left"><code>a \qquad b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%20%5Cqquad%20b" alt="a \qquad b"></td>
<td>两个<em>m</em>的宽度</td>
</tr>
<tr>
<td>大空格</td>
<td align="left"><code>a \: b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%3Ab" alt="a\:b"></td>
<td>1/3<em>m</em>宽度</td>
</tr>
<tr>
<td>中等空格</td>
<td align="left"><code>a \; b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%3Bb" alt="a\;b"></td>
<td>2/7<em>m</em>宽度</td>
</tr>
<tr>
<td>小空格</td>
<td align="left"><code>a \, b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C%2Cb" alt="a\,b"></td>
<td>1/6<em>m</em>宽度</td>
</tr>
<tr>
<td>没有空格</td>
<td align="left"><code>ab</code></td>
<td><img src="https://math.jianshu.com/math?formula=ab" alt="ab"></td>
<td>没有空格</td>
</tr>
<tr>
<td>缩进空格</td>
<td align="left"><code>a \! b</code></td>
<td><img src="https://math.jianshu.com/math?formula=a%5C!b" alt="a\!b"></td>
<td>缩进1/6<em>m</em>宽度</td>
</tr>
</tbody></table>
<h5 id="复杂公式"><a href="#复杂公式" class="headerlink" title="复杂公式"></a>复杂公式</h5><h6 id="1）矩阵"><a href="#1）矩阵" class="headerlink" title="1）矩阵"></a>1）矩阵</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">x_1 &amp; x_2 &amp;\dots\\</span><br><span class="line">x_3 &amp; x_4 &amp;\dots\\</span><br><span class="line">\vdots&amp;\vdots&amp;\ddots</span><br><span class="line">\<span class="keyword">end</span>&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Barray%7D%7Bccc%7D%20x_1%20%26%20x_2%20%26%5Cdots%5C%5C%20x_3%20%26%20x_%204%26%5Cdots%5C%5C%20%5Cvdots%26%5Cvdots%26%5Cddots%20%5Cend%7Barray%7D" alt="\begin{array}{ccc} x_1 &amp; x_2 &amp;\dots\\ x_3 &amp; x_ 4&amp;\dots\\ \vdots&amp;\vdots&amp;\ddots \end{array}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;pmatrix&#125; </span><br><span class="line">a &amp; b\\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;pmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;bmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;Bmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;Bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;vmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;vmatrix&#125;</span><br><span class="line"></span><br><span class="line">\quad</span><br><span class="line"></span><br><span class="line">\<span class="keyword">begin</span>&#123;Vmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d \\</span><br><span class="line">\<span class="keyword">end</span>&#123;Vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bpmatrix%7D%20a%20%26%20b%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bpmatrix%7D%5Cquad%5Cbegin%7Bbmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bbmatrix%7D%5Cquad%5Cbegin%7BBmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%5C%5C%5Cend%7BBmatrix%7D%5Cquad%5Cbegin%7Bvmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7Bvmatrix%7D%5Cquad%5Cbegin%7BVmatrix%7D%20a%20%26%20b%5C%5C%20c%20%26%20d%20%5C%5C%5Cend%7BVmatrix%7D" alt="\begin{pmatrix} a &amp; b\\ c &amp; d \\\end{pmatrix}\quad\begin{bmatrix} a &amp; b \\ c &amp; d \\\end{bmatrix}\quad\begin{Bmatrix} a &amp; b \\ c &amp; d\\\end{Bmatrix}\quad\begin{vmatrix} a &amp; b \\ c &amp; d \\\end{vmatrix}\quad\begin{Vmatrix} a &amp; b\\ c &amp; d \\\end{Vmatrix}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">(</span><br><span class="line">\<span class="keyword">begin</span>&#123;smallmatrix&#125; </span><br><span class="line">a &amp; b \\ </span><br><span class="line">c &amp; d </span><br><span class="line">\<span class="keyword">end</span>&#123;smallmatrix&#125;</span><br><span class="line">) </span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=(%5Cbegin%7Bsmallmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%20%5Cend%7Bsmallmatrix%7D)" alt="(\begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix})"></p>
<h6 id="2）长公式"><a href="#2）长公式" class="headerlink" title="2）长公式"></a>2）长公式</h6><blockquote>
<p>无需对齐可使用multline；<br> 需要对齐使用split；<br> 用\来分行；<br> 用&amp;设置对齐的位置</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;multline&#125;    </span><br><span class="line">x = a+b+c+&#123;&#125; \\     </span><br><span class="line">d+e+f+g  </span><br><span class="line">\<span class="keyword">end</span>&#123;multline&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bmultline%7D%20x%20%3D%20a%2Bb%2Bc%2B%7B%7D%20%5C%5C%20d%2Be%2Bf%2Bg%20%5Cend%7Bmultline%7D" alt="\begin{multline} x = a+b+c+{} \\ d+e+f+g \end{multline}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\<span class="keyword">begin</span>&#123;split&#125;</span><br><span class="line">x = &#123;&#125; &amp; a + b + c +&#123;&#125;\\    </span><br><span class="line">       &amp; d + e + f + g</span><br><span class="line">\<span class="keyword">end</span>&#123;split&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bsplit%7D%20x%20%3D%20%7B%7D%20%26%20a%20%2B%20b%20%2B%20c%20%2B%7B%7D%5C%5C%20%26%20d%20%2B%20e%20%2B%20f%20%2B%20g%20%5Cend%7Bsplit%7D" alt="\begin{split} x = {} &amp; a + b + c +{}\\ &amp; d + e + f + g \end{split}"></p>
<h6 id="3）公式组"><a href="#3）公式组" class="headerlink" title="3）公式组"></a>3）公式组</h6><blockquote>
<p>不需要对齐的公式组用gather；<br> 需要对齐使用align:</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\<span class="keyword">begin</span>&#123;gather&#125;</span><br><span class="line">a = b+c+d\\</span><br><span class="line">x = y+z\\</span><br><span class="line"><span class="number">5</span> = <span class="number">4</span>+<span class="number">1</span>\\</span><br><span class="line">\<span class="keyword">end</span>&#123;gather&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Bgather%7D%20a%20%3D%20b%2Bc%2Bd%5C%5C%20x%20%3D%20y%2Bz%5C%5C%205%20%3D%204%2B1%20%5Cend%7Bgather%7D" alt="\begin{gather} a = b+c+d\\ x = y+z\\ 5 = 4+1 \end{gather}"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$\<span class="keyword">begin</span>&#123;align&#125;</span><br><span class="line">a &amp;=b+c+d \\</span><br><span class="line">x &amp;=y+z\\</span><br><span class="line"><span class="number">5</span> &amp;= <span class="number">4</span>+<span class="number">1</span></span><br><span class="line">\<span class="keyword">end</span>&#123;align&#125;$</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Balign%7D%20a%20%26%3Db%2Bc%2Bd%20%5C%5C%20x%20%26%3Dy%2Bz%5C%5C%205%20%26%3D%204%2B1%20%5Cend%7Balign%7D" alt="\begin{align} a &amp;=b+c+d \\ x &amp;=y+z\\ 5 &amp;= 4+1 \end{align}"></p>
<h6 id="4）分支公式"><a href="#4）分支公式" class="headerlink" title="4）分支公式"></a>4）分支公式</h6><blockquote>
<p><strong>分段函数</strong>通常用cases次环境携程分支公式</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ y=\<span class="keyword">begin</span>&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq <span class="number">0</span>\\</span><br><span class="line">x, \quad x&gt;<span class="number">0</span></span><br><span class="line">\<span class="keyword">end</span>&#123;cases&#125; $</span><br></pre></td></tr></table></figure>

<p><img src="https://math.jianshu.com/math?formula=y%3D%5Cbegin%7Bcases%7D-x%2C%5Cquad%20x%5Cleq%200%5C%5Cx%2C%20%5Cquad%20x%3E0%5Cend%7Bcases%7D" alt="y=\begin{cases}-x,\quad x\leq 0\\x, \quad x&gt;0\end{cases}"></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>RIPv2报文分析</title>
    <url>/2020/03/16/RIPv2%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><p><img src="https://s1.ax1x.com/2020/03/16/8GVlV0.png" alt="8GVlV0.png"></p><h1 id="2-配置思路"><a href="#2-配置思路" class="headerlink" title="2.配置思路"></a>2.配置思路</h1><ol>
<li>配置各接口IP地址，使网络可达。</li>
<li>在各路由器上使能RIP，基本实现网络互联。 </li>
<li>在各路由器上配置RIPv2版本，提升RIP路由扩展性能。</li>
<li>使AR1接收到的RIP路由的度量值加大5. </li>
</ol><h1 id="3-操作配置"><a href="#3-操作配置" class="headerlink" title="3.操作配置"></a>3.操作配置</h1><h2 id="3-1-配置AR1-AR2-AR3-AR4-直连接口ip地址和回环ip地址"><a href="#3-1-配置AR1-AR2-AR3-AR4-直连接口ip地址和回环ip地址" class="headerlink" title="3.1 配置AR1,AR2,AR3,AR4,直连接口ip地址和回环ip地址"></a>3.1 配置AR1,AR2,AR3,AR4,直连接口ip地址和回环ip地址</h2><ul>
<li><h3 id="AR1配置"><a href="#AR1配置" class="headerlink" title="AR1配置"></a>AR1配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R1</span><br><span class="line"></span><br><span class="line">[R1]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R1-GigabitEthernet0/0/0]ip address 10.1.12.1 24   //配置接口ip</span><br><span class="line">[R1-GigabitEthernet0/0/0]quit</span><br><span class="line">[R1]interface loopback 0 </span><br><span class="line">[R1-loopback0]ip address 10.1.1.1 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R1-loopback0]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR2配置"><a href="#AR2配置" class="headerlink" title="AR2配置"></a>AR2配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R2</span><br><span class="line"></span><br><span class="line">[R2]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R2-GigabitEthernet0/0/0]ip address 10.1.12.2 24   //配置接口ip</span><br><span class="line">[R2-GigabitEthernet0/0/0]quit</span><br><span class="line">[R2]interface GigabitEthernet 0/0/1    </span><br><span class="line">[R2-GigabitEthernet0/0/1]ip address 10.1.23.2 24  //配置接口ip</span><br><span class="line">[R2-GigabitEthernet0/0/1]quit</span><br><span class="line">[R2]interface GigabitEthernet 0/0/2    </span><br><span class="line">[R2-GigabitEthernet0/0/2]ip address 10.1.24.2 24   //配置接口ip</span><br><span class="line">[R2-GigabitEthernet0/0/2]quit</span><br><span class="line">[R2]interface loopback 0 </span><br><span class="line">[R2-loopback0]ip address 10.1.2.2 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R2-loopback0]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR3配置"><a href="#AR3配置" class="headerlink" title="AR3配置"></a>AR3配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R3</span><br><span class="line"></span><br><span class="line">[R3]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R3-GigabitEthernet0/0/0]ip address 10.1.23.13 24   //配置接口ip</span><br><span class="line">[R3-GigabitEthernet0/0/0]quit</span><br><span class="line">[R3]interface loopback 0 </span><br><span class="line">[R3-loopback0]ip address 10.1.3.3 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R3-loopback0]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR4配置"><a href="#AR4配置" class="headerlink" title="AR4配置"></a>AR4配置</h3></li>
</ul><a id="more"></a>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">sysname R4</span><br><span class="line"></span><br><span class="line">[R4]interface GigabitEthernet 0/0/0    //进入g0/0/0接口</span><br><span class="line">[R4-GigabitEthernet0/0/0]ip address 10.1.24.4 24   //配置接口ip</span><br><span class="line">[R4-GigabitEthernet0/0/0]quit</span><br><span class="line">[R4]interface loopback 0 </span><br><span class="line">[R4-loopback0]ip address 10.1.4.4 32   //配置loopback 0 回环ip地址</span><br><span class="line">[R4-loopback0]quit</span><br></pre></td></tr></table></figure>

<h2 id="3-2在AR1-AR2-AR3-AR4-上配置RIP基本功能"><a href="#3-2在AR1-AR2-AR3-AR4-上配置RIP基本功能" class="headerlink" title="3.2在AR1,AR2,AR3,AR4,上配置RIP基本功能"></a>3.2在AR1,AR2,AR3,AR4,上配置RIP基本功能</h2><ul>
<li><h3 id="AR1配置-1"><a href="#AR1配置-1" class="headerlink" title="AR1配置"></a>AR1配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R1]rip    //进入RIP进程</span><br><span class="line">[R1-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R1-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R1-rip-1]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR2配置-1"><a href="#AR2配置-1" class="headerlink" title="AR2配置"></a>AR2配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R2]rip    //进入RIP进程</span><br><span class="line">[R2-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R2-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R2-rip-1]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR3配置-1"><a href="#AR3配置-1" class="headerlink" title="AR3配置"></a>AR3配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R3]rip    //进入RIP进程</span><br><span class="line">[R3-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R3-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R3-rip-1]quit</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="AR4配置-1"><a href="#AR4配置-1" class="headerlink" title="AR4配置"></a>AR4配置</h3></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[R4]rip    //进入RIP进程</span><br><span class="line">[R4-rip-1]version 2     //指定RIPv2</span><br><span class="line">[R4-rip-1]network 10.0.0.0     //指定网段接口使能RIP路由</span><br><span class="line">[R4-rip-1]quit</span><br></pre></td></tr></table></figure>

<h2 id="3-3查看路由表"><a href="#3-3查看路由表" class="headerlink" title="3.3查看路由表"></a>3.3查看路由表</h2><ol>
<li><p>在AR1上查看路由表信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display rip 1 route</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/16/8GtF61.png" alt="8GtF61.png"></p>
</li>
<li><p>修改度量值</p>
<p>使AR1接受到的RIP路由度量值增大5，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">interface gigabitrthernet 0/0/0</span><br><span class="line">rip metricin 5</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次查看路由表信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display rip 1 route</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/16/8GNEgs.png" alt="8GNEgs.png"></p>
</li>
</ol>
<h2 id="3-4Ripv2报文分析"><a href="#3-4Ripv2报文分析" class="headerlink" title="3.4Ripv2报文分析"></a>3.4Ripv2报文分析</h2><p>R1 Ping R4在AR4的GE0/0/0端口捕获报文如下：</p>
<p><img src="/2020/03/16/RIPv2%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/C:%5CUsers%5C12173%5CDesktop%5Cimage%5CRipv2.png" alt="Ripv2"></p>
<p>具体报文内容如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/03/16/8GwjmR.png" alt="8GwjmR.png"></p>
<p>command字段：占1个字节，取值为2时表示该报文是一个回应报文。其中包含路由信息。</p>
<p>version字段：占1个字节，取值为2时表示RIPv2。</p>
<p>address Family字段：占2个字节，ipv4取值为2。</p>
<p>route tag字段：占2个字节，标记外部重分发进RIPv2中的路由</p>
<p>ip address字段：占4个字节，表示路由的目的地址，该地址是网络地址。</p>
<p>netmask字段：占4个字节，是子网掩码，RIPv2是有类别的，所以有这个字段。</p>
<p>next hop字段：占4个字节，它表示一个比通告路由器的地址更好的下一跳。如果这个字段设置为0.0.0.0说明通告路由器的地址就是最优的下一跳。</p>
<p>metric字段：占4个字节，指度量值，在RIP中就是跳数。</p>
<h2 id="3-5Ripv2和Ripv1的区别"><a href="#3-5Ripv2和Ripv1的区别" class="headerlink" title="3.5Ripv2和Ripv1的区别"></a>3.5Ripv2和Ripv1的区别</h2><p> <strong>区别一：</strong>RIP1是一个有类路由协议，即所有的更新包中不含子网掩码，不支持VLSM， 所以就要求网络中所有设备必须使用相同的子网掩码，否则就会出错，而RIP2是一个无类的路由协议，它使用子网掩码。<br><strong>区别二：</strong>第二个不同的地方是RIP1<em>是发送更新包的时候使用的是*</em>广播包<strong>，而RIP2默认使用的是</strong>组播<strong>224.0.0.9，也支持广播发送，这样相对于RIP1来说就节省了一部分网络带宽。<br>**区别三：</strong>第三个就是RIP2支持明文或者是 MD5验证，要求两台路由器在同步路由表的时候必须进行验证，通过才可以进行路由同步，这样可以加强安全性。 </p>
<p><strong>补充</strong></p>
<h2 id="3-6Ripv2配置MD5验证"><a href="#3-6Ripv2配置MD5验证" class="headerlink" title="3.6Ripv2配置MD5验证"></a>3.6Ripv2配置MD5验证</h2><p>在各个路由器的相应端口上配置如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rip authentication-mode md5 usual abc</span><br></pre></td></tr></table></figure>

<p>AR3 Ping AR4时在AR2的GE0/0/2端口捕获报文如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/16/8G74Ff.png" alt="8G74Ff.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>RIPv2报文分析</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加密算法浅析</title>
    <url>/2019/11/09/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="RSA的加解密机制"><a href="#RSA的加解密机制" class="headerlink" title="RSA的加解密机制"></a>RSA的加解密机制</h1><p>RSA的加密系统可分为三个部分，即用户密钥的产生、加密算法以及解密算法。</p><h2 id="用户密钥的产生"><a href="#用户密钥的产生" class="headerlink" title="用户密钥的产生"></a>用户密钥的产生</h2><p>在用户密钥的产生部分，首先此系统的每一个用户将自行选择一组公开密钥，然后公之于众，使得他人都能使用此公开密钥对机密数据进行加密，然后自己使用私密密钥进行解密，获取机密数据。</p><p>​        以下是RSA密钥的产生过程：</p><a id="more"></a>


<p>​        &lt;1&gt;.首先找出两个大质数p和q，两者均至少为100位的十进制数。</p>
<p>​        &lt;2&gt;.计算N=p * q 及 φ(N)= (q-1)*(p-1),    其中φ(N)为欧拉函数，意为小于N的整数中与N互质的整数个数。例如，只有1和5这两个数与6互质，所以φ(6)=2。</p>
<p>​        &lt;3&gt;.找出一个与φ(N)互质的数e，因此（e，N）可以作为该用户的公开密钥。</p>
<p>​        &lt;4&gt;.计算出该用户的私密密钥d，使得e * d mod φ(N) =1，也就是在模φ(N)的情况下，使得e和d互为乘法反元素，其中d称为用户的私密密钥，须绝对保密。</p>
<h2 id="加密解密机制"><a href="#加密解密机制" class="headerlink" title="加密解密机制"></a>加密解密机制</h2><p>在RSA密码系统里，每次加密或解密的信息块的值在0~（N-1）的范围内。若明文及密文大于这个块，则分块。</p>
<p>在实际加解密过程中，N至少为521位。N值越大，RSA的安全性越高，加解密所需要的时间就越长。</p>
<p>现在假设要对M信息进行加密，其中0&lt;=M&lt;=(N-1),RSA加密算法为：C=Ee（M）=M^2modN.<br>$$<br>C=Ee(M)=M^emodN<br>$$<br>C为加密后的密文。若要对C进行解密，则需要计算：M=D<sub>d<sub>（C）modM<br>$$<br>M=Dd(C)modN<br>$$</sub></sub></p>
<h2 id="加密解密算法的JAVA代码实现"><a href="#加密解密算法的JAVA代码实现" class="headerlink" title="加密解密算法的JAVA代码实现"></a>加密解密算法的JAVA代码实现</h2><p><strong>RSA加密解密的简单JAVA实现代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.rsa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncrypt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> m=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> public_key=<span class="number">0</span>;<span class="comment">//公匙</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> private_key=<span class="number">0</span>;<span class="comment">//密匙</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> text=<span class="number">0</span>;<span class="comment">//明文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> secretword=<span class="number">0</span>;<span class="comment">//密文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> word=<span class="number">0</span>;<span class="comment">//解密后明文</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为素数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">primenumber</span><span class="params">(<span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">        k=(<span class="keyword">long</span>)Math.sqrt((<span class="keyword">double</span>)t);</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        outer:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((t%i)==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入PQ</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputPQ</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入素数p: "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.p=Integer.parseInt(br);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!primenumber(<span class="keyword">this</span>.p));</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入素数q: "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.q=Integer.parseInt(br);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!primenumber(<span class="keyword">this</span>.q));</span><br><span class="line">        <span class="keyword">this</span>.n=<span class="keyword">this</span>.p*<span class="keyword">this</span>.q;</span><br><span class="line">        <span class="keyword">this</span>.m=(p-<span class="number">1</span>)*(q-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"这两个素数的乘积为p*q："</span>+<span class="keyword">this</span>.n);</span><br><span class="line">        System.out.println(<span class="string">"所得的小于Ｎ并且与Ｎ互素的整数的个数为m=(p-1)(q-1)："</span>+<span class="keyword">this</span>.m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求最大公约数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> gcd;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">            gcd=a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            gcd=gcd(b,a%b);</span><br><span class="line">        System.out.println(<span class="string">"gcd:"</span>+gcd);</span><br><span class="line">        <span class="keyword">return</span> gcd;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入公匙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPublic_key</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入一个公钥的值，这个值要求小于m并且和m互质： "</span>);</span><br><span class="line">            BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String br=stdin.readLine();</span><br><span class="line">            <span class="keyword">this</span>.public_key=Long.parseLong(br);</span><br><span class="line">        &#125;<span class="keyword">while</span>((<span class="keyword">this</span>.public_key &gt;= <span class="keyword">this</span>.m) || (<span class="keyword">this</span>.gcd(<span class="keyword">this</span>.m,<span class="keyword">this</span>.public_key)!=<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"公钥为："</span>+<span class="keyword">this</span>.public_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算得到密匙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivate_key</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> value=<span class="number">1</span>;</span><br><span class="line">        outer:<span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">1</span>;;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            value=i*<span class="keyword">this</span>.m+<span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"value:  "</span>+value);</span><br><span class="line">            <span class="keyword">if</span>((value%<span class="keyword">this</span>.public_key==<span class="number">0</span>)&amp;&amp; (value/<span class="keyword">this</span>.public_key &lt; <span class="keyword">this</span>.m))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.private_key=value/<span class="keyword">this</span>.public_key;</span><br><span class="line">                <span class="keyword">break</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"产生的一个私钥为："</span>+<span class="keyword">this</span>.private_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入明文</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getText</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入明文："</span>);</span><br><span class="line">        BufferedReader stdin=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String br=stdin.readLine();</span><br><span class="line">        <span class="keyword">this</span>.text=Long.parseLong(br);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加密、解密计算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">colum</span><span class="params">(<span class="keyword">long</span> y,<span class="keyword">long</span> n,<span class="keyword">long</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mul;</span><br><span class="line">        <span class="keyword">if</span>(key==<span class="number">1</span>)</span><br><span class="line">            mul=y%n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mul=y*<span class="keyword">this</span>.colum(y,n,key-<span class="number">1</span>)%n;</span><br><span class="line">        <span class="keyword">return</span> mul;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密后解密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pascolum</span><span class="params">()</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getText();</span><br><span class="line">        System.out.println(<span class="string">"输入明文为: "</span>+<span class="keyword">this</span>.text);</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">this</span>.secretword=<span class="keyword">this</span>.colum(<span class="keyword">this</span>.text,<span class="keyword">this</span>.n,<span class="keyword">this</span>.public_key);</span><br><span class="line">        System.out.println(<span class="string">"所得的密文为："</span>+<span class="keyword">this</span>.secretword);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">this</span>.word=<span class="keyword">this</span>.colum(<span class="keyword">this</span>.secretword,<span class="keyword">this</span>.n,<span class="keyword">this</span>.private_key);</span><br><span class="line">        System.out.println(<span class="string">"解密后所得的明文为："</span>+<span class="keyword">this</span>.word);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试如下代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.rsa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncryptTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RSAEncrypt t = <span class="keyword">new</span> RSAEncrypt();</span><br><span class="line">        t.inputPQ();</span><br><span class="line">        t.getPublic_key();</span><br><span class="line">        t.getPrivate_key();</span><br><span class="line">        t.pascolum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入数据来源为课本上例题所给，用来验证加密解密算法实现的正确性。</p>
<p><strong>课本例题如下：</strong></p>
<p><img src="https://s2.ax1x.com/2019/11/09/MmEbex.png" alt="MmEbex.png"></p>
<p><strong>运行结果如下：</strong></p>
<p><a href="https://imgchr.com/i/MmElJe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MmElJe.md.png" alt="MmElJe.md.png"></a></p>
]]></content>
      <categories>
        <category>加密算法</category>
        <category>RSA</category>
      </categories>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/01/29/SpringMVC/</url>
    <content><![CDATA[<hr><hr><h1 id="一、SpringMVC是什么"><a href="#一、SpringMVC是什么" class="headerlink" title="一、SpringMVC是什么?"></a>一、SpringMVC是什么?</h1><p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等。</p><a id="more"></a>


<h1 id="二、MVC的设计架构"><a href="#二、MVC的设计架构" class="headerlink" title="二、MVC的设计架构"></a>二、MVC的设计架构</h1><p>​    <strong>m: model</strong></p>
<p>​    <strong>v: view</strong></p>
<p>​    <strong>c: controller</strong></p>
<p><a href="https://imgchr.com/i/1toyb6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/02/1toyb6.md.png" alt="1toyb6.md.png"></a></p>
<h1 id="三、SpringMVC的框架"><a href="#三、SpringMVC的框架" class="headerlink" title="三、SpringMVC的框架"></a>三、SpringMVC的框架</h1><p><a href="https://imgchr.com/i/1toOPg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/02/1toOPg.md.png" alt="1toOPg.md.png"></a></p>
<ol>
<li>用户发起request请求，请求至DispatcherServlet前端控制器 </li>
<li>DispatcherServlet前端控制器请求HandlerMapping处理器映射器查找Handler </li>
<li>HandlerMapping处理器映射器，根据url及一些配置规则（xml配置、注解配置）查找Handler，将Handler返回给DispatcherServlet前端控制器 </li>
<li>DispatcherServlet前端控制器调用适配器执行Handler </li>
<li>适配器执行Handler </li>
<li>Handler执行完成返回ModelAndView </li>
<li>适配器将ModelAndView返回给DispatcherServlet </li>
<li>DispatcherServlet调用视图解析器进行视图解析，解析后生成view (springmvc视图封装对象 )</li>
<li>ViewResolver视图解析器给前端控制器返回view </li>
<li>DispatcherServlet调用view的渲染视图的方法，将模型数据填充到request域 </li>
<li>DispatcherServlet向用户响应结果(jsp页面、json数据。。。。) </li>
</ol>
<h1 id="四、springmvc入门程序"><a href="#四、springmvc入门程序" class="headerlink" title="四、springmvc入门程序"></a>四、springmvc入门程序</h1><h2 id="4-1-引入SpringMVC的依赖"><a href="#4-1-引入SpringMVC的依赖" class="headerlink" title="4.1 引入SpringMVC的依赖"></a>4.1 引入SpringMVC的依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-配置处理器映射器、适配器和视图解析器"><a href="#4-2-配置处理器映射器、适配器和视图解析器" class="headerlink" title="4.2 配置处理器映射器、适配器和视图解析器"></a>4.2 配置处理器映射器、适配器和视图解析器</h2><p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.it.bigdata"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器  RequestMappingHandlerMapping--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器  RequestMappingHandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器  默认为InternalResourceViewResolver --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-配置前端控制器"><a href="#4-3-配置前端控制器" class="headerlink" title="4.3  配置前端控制器"></a>4.3  配置前端控制器</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4-编写处理器"><a href="#4-4-编写处理器" class="headerlink" title="4.4 编写处理器"></a>4.4 编写处理器</h2><p><strong>即controller层代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值是视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ModelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/func1.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index02.jsp"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-编写视图"><a href="#4-5-编写视图" class="headerlink" title="4.5 编写视图"></a>4.5 编写视图</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index02&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">$&#123;userage&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="五、处理器方法的返回值"><a href="#五、处理器方法的返回值" class="headerlink" title="五、处理器方法的返回值"></a>五、处理器方法的返回值</h1><h2 id="5-1-返回ModelAndView"><a href="#5-1-返回ModelAndView" class="headerlink" title="5.1 返回ModelAndView"></a>5.1 返回ModelAndView</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func1.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index02.jsp"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-返回String"><a href="#5-2-返回String" class="headerlink" title="5.2 返回String"></a>5.2 返回String</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回值是视图的名称，在model中可以设置数据（常用）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func2.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">func2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func2"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>,<span class="string">"张三"</span>);</span><br><span class="line">     model.addAttribute(<span class="string">"userage"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index02.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3返回对象"><a href="#5-3返回对象" class="headerlink" title="5.3返回对象"></a>5.3返回对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func3.action"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回对象 以json返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">func3</span><span class="params">(Model model, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func3"</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"李四"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>须导入<strong>jackson-databind</strong>包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4返回void"><a href="#5-4返回void" class="headerlink" title="5.4返回void"></a>5.4返回void</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/func4.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func4</span><span class="params">(Model model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"func4"</span>);</span><br><span class="line">    <span class="comment">//从视图发送数据到控制台</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">    <span class="comment">//从控制台写数据到视图</span></span><br><span class="line">    response.getWriter().write(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC02</title>
    <url>/2020/02/12/SpringMVC02/</url>
    <content><![CDATA[<h1 id="一、lombok注解开发"><a href="#一、lombok注解开发" class="headerlink" title="一、lombok注解开发"></a>一、lombok注解开发</h1><ul>
<li><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></li>
</ul><p>大部分项目中都必不可少的包含数据库实体(Entity)、数据载体(dto,dataObject),而这两部分都包含着大量的没有业务逻辑的setter、getter、空参构造，同时我们一般要复写类的toString(),equals(),hashCode()方法(贫血模型)。这些工作都是重复性的工作，作为程序员，懒是必备素质之一，这些工作肯定已经有大牛封装好了处理方法,这就是lombok。 </p><a id="more"></a>

<ul>
<li><h2 id="下载安装插件"><a href="#下载安装插件" class="headerlink" title="下载安装插件"></a>下载安装插件</h2><p>去官网下载idea对应版本的lombok的压缩包</p>
<p>插件配置</p>
<p>重启</p>
</li>
<li><h2 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h2></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li><p><strong>@Setter</strong></p>
<p>生成setter方法，final变量不包含</p>
</li>
<li><p><strong>@Getter</strong></p>
<p>生成getter方法，final变量不包含</p>
</li>
<li><p><strong>@NoArgsConstructor</strong></p>
<p>生成空参构造</p>
</li>
<li><p><strong>@AllArgsConstructor</strong></p>
<p>生成全部参数构造</p>
</li>
<li><p><strong>@RequiredArgsConstructor</strong></p>
<p>将标记为@NoNull的属性生成一个构造器 ， 如果运行中标记为@NoNull的属性为null,会抛出空指针异常。 </p>
</li>
<li><p><strong>@ToString</strong></p>
<p>生成所有属性的toString()方法 </p>
</li>
<li><p><strong>@EqualsAndHashCode</strong></p>
<p>生成equals()方法和hashCode方法 </p>
</li>
<li><p><strong>@Data(常用)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data直接修饰POJO or beans， getter所有的变量，setter所有不为final的变量。如果你不需要默认的生成方式，直接填写你需要的annotation的就可以了。默认生成的所有的annotation都是public的，如果需要不同权限修饰符可以使用AccessLevel.NONE选项。当然@Data 也可以使用staticConstructor选项生成一个静态方法。</span><br></pre></td></tr></table></figure>

<p><strong>@Data=@Setter+@Getter+@EqualsAndHashCode+@NoArgsConstructor</strong></p>
</li>
<li><p><strong>@SneakyThrows</strong> </p>
<p>可以对受检异常进行捕捉并抛出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConversion</span> <span class="keyword">implements</span> <span class="title">Converter</span> &lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String  str)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat  simpleDateFormat  =  <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        Date  date =  simpleDateFormat.parse(str);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h1 id="二、SpringMVC注解开发"><a href="#二、SpringMVC注解开发" class="headerlink" title="二、SpringMVC注解开发"></a>二、SpringMVC注解开发</h1><ul>
<li><h3 id="导入MVC、Web依赖"><a href="#导入MVC、Web依赖" class="headerlink" title="导入MVC、Web依赖"></a>导入MVC、Web依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="SpringMVC中注解开发的注解总结"><a href="#SpringMVC中注解开发的注解总结" class="headerlink" title="SpringMVC中注解开发的注解总结"></a>SpringMVC中注解开发的注解总结</h2><ul>
<li><p><strong>@controller</strong> </p>
<p>标记为处理器，方便Spring容器进行映射。 </p>
</li>
<li><p><strong>@RequestMapping</strong> </p>
<p>通过RequestMapping注解可以定义不同的处理器映射规则。 </p>
<p><strong>作用：</strong></p>
<p>1、URL路径映射。</p>
<p>2、窄化请求映射。</p>
<p>@RequestMapping放在类名上边，设置请求前缀</p>
<p>@Controller</p>
<p>@RequestMapping(“/item”)</p>
<p>方法名上边设置请求映射url：</p>
<p>@RequestMapping放在方法名上边，如下：</p>
<p>@RequestMapping(“/queryItem “) </p>
<p>访问地址为：/item/queryItem</p>
<p> 3、请求方法限定 </p>
</li>
<li><p><strong>@RequestParam</strong> </p>
<p>使用@RequestParam常用于处理简单类型的绑定。</p>
<p>常用定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(@RequestParam(value=<span class="string">"item_id"</span>,required=<span class="keyword">true</span>)</span> String id) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Validated</strong> </p>
<p>在绑定参数的参数前添加，表示对该参数进行校验。参数后面还需要添加BindingResult，表示检验信息写入此。 </p>
</li>
<li><p><strong>@RequestBody和ResponseBody</strong> </p>
<p>@RequestBody和ResponseBody分别表示输入和输出转换为json数据。</p>
<p>controller编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">json</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"------------jsondata-----------------"</span>);</span><br><span class="line">    <span class="keyword">return</span>  person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>@PathVariable</strong> </p>
<p>用于RESTfull中的模板模式映射。</p>
<p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/* 多个占位符的值得接受和传递 */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param04/&#123;id&#125;/&#123;name&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">param04</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span> <span class="keyword">int</span>  id</span></span><br><span class="line"><span class="function">  ,@<span class="title">PathVariable</span><span class="params">(value = <span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">      System.out.println(id +<span class="string">"-----------"</span>+ name);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>工具</category>
        <category>lombok</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-logging配置</title>
    <url>/2020/02/22/SpringBoot-logging%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1-使用自带的日志系统（longback）进行配置"><a href="#1-使用自带的日志系统（longback）进行配置" class="headerlink" title="1.使用自带的日志系统（longback）进行配置"></a>1.使用自带的日志系统（longback）进行配置</h1><h2 id="1-1longback简介"><a href="#1-1longback简介" class="headerlink" title="1.1longback简介"></a>1.1longback简介</h2><h3 id="1-1-1Logback主要有下面的特性："><a href="#1-1-1Logback主要有下面的特性：" class="headerlink" title="1.1.1Logback主要有下面的特性："></a>1.1.1Logback主要有下面的特性：</h3><ul>
<li><p><strong>更快的执行速度：</strong></p>
<p>基于我们先前在Log4j上的工作，Logback 重写了内部的实现，在某些特定的场景上面，甚至可以比之前的速度快上10倍。在保证Logback的组件更加快速的同时，同时所需的内存更加少；</p>
</li>
<li><p><strong>充分的测试：</strong></p>
<p>Logback 历经了几年，数不清小时数的测试。尽管Log4j也是测试过的，但是Logback的测试更加充分，跟Log4j不在同一个级别。我们认为，这正是人们选择Logback而不是Log4j的最重要的原因。谁不希望即使在恶劣的条件下，你的日志框架依然稳定而可靠呢？</p>
</li>
</ul><a id="more"></a>
<h3 id="1-1-2-组成模块"><a href="#1-1-2-组成模块" class="headerlink" title="1.1.2 组成模块"></a>1.1.2 组成模块</h3><ul>
<li>logback-core </li>
<li>logback-classic </li>
<li>logback-access </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logback-core是其它模块的基础设施，其它模块基于它构建，显然，logback-core提供了一些关键的通用机制。logback-classic的地位和作用等同于 Log4J，它也被认为是 Log4J的一个改进版，并且它实现了简单日志门面 SLF4J；而 logback-access主要作为一个与 Servlet容器交互的模块，比如说tomcat或者 jetty，提供一些与 HTTP访问相关的功能。</span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-Sl4J是什么？"><a href="#1-1-3-Sl4J是什么？" class="headerlink" title="1.1.3 Sl4J是什么？"></a>1.1.3 <strong>Sl4J是什么？</strong></h3><p> <strong>slf4j：</strong></p>
<p>The Simple Logging Facade for Java 即java的简单日志门面<br>简答的讲就是slf4j是一系列的日志接口，slf4j是作为一个日志的抽象行为存在的，但是并没有提供真正的实现。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slf4j为各种日志框架提供了一个统一的界面，使用户可以用统一的接口记录日志，动态地决定要使用的实现框架，比如Logback，Log4j，common-logging等框架都实现了这些接口。</span><br></pre></td></tr></table></figure>



<h2 id="1-2需要导入的依赖"><a href="#1-2需要导入的依赖" class="headerlink" title="1.2需要导入的依赖"></a>1.2需要导入的依赖</h2><p>在springboot项目的基础上导入以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2日志配置"><a href="#1-2日志配置" class="headerlink" title="1.2日志配置"></a>1.2日志配置</h2><h3 id="1-2-1-在application-properties中配置"><a href="#1-2-1-在application-properties中配置" class="headerlink" title="1.2.1.在application.properties中配置"></a>1.2.1.在application.properties中配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.profiles.active=prod</span></span><br><span class="line"><span class="comment"># 日志的配置信息</span></span><br><span class="line"><span class="comment"># 日志输出的级别</span></span><br><span class="line"><span class="meta">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="comment"># 根据我们的包下面的操作进行日志记录</span></span><br><span class="line"><span class="meta">logging.level.com.lcx</span>=<span class="string">trace</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">F:/spring/spring02.log</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-2使用xml文件进行配置"><a href="#1-2-2使用xml文件进行配置" class="headerlink" title="1.2.2使用xml文件进行配置"></a>1.2.2使用xml文件进行配置</h3><p><strong>longback-spring.xml内容如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/app/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"springboot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。</span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd&#125;----- [%thread] ---- %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!prod"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;file&gt;$&#123;LOG_HOME&#125;/$&#123;appName&#125;.log&lt;/file&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>F:/spring/spring.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="comment">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            滚动时产生的文件的存放位置及文件名称 %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动</span></span><br><span class="line"><span class="comment">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，</span></span><br><span class="line"><span class="comment">            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，</span></span><br><span class="line"><span class="comment">            那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="comment">		name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="comment">		level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span></span><br><span class="line"><span class="comment">		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="comment">		false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="comment">		表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.lcx"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="comment">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-使用log4j2替换Logback"><a href="#2-使用log4j2替换Logback" class="headerlink" title="2.使用log4j2替换Logback"></a>2.使用log4j2替换Logback</h1><h2 id="2-1Log4j2简介"><a href="#2-1Log4j2简介" class="headerlink" title="2.1Log4j2简介"></a>2.1Log4j2简介</h2><p> Log4j2是Log4j的升级版，与之前的版本Log4j 1.x相比、有重大的改进，修正了Logback固有的架构问题的同事，改进了许多Logback所具有的功能。 </p>
<h2 id="2-2特性"><a href="#2-2特性" class="headerlink" title="2.2特性"></a>2.2特性</h2><h3 id="2-2-1-API-分离"><a href="#2-2-1-API-分离" class="headerlink" title="2.2.1 API 分离"></a>2.2.1 API 分离</h3><p>  Log4j2将API与实现分离开来。开发人员现在可以很清楚的知道能够使用哪些没有兼容问题的类和方法，同事又允许通过自己实现来增加功能。 </p>
<h3 id="2-2-2改进性能"><a href="#2-2-2改进性能" class="headerlink" title="2.2.2改进性能"></a>2.2.2改进性能</h3><p>  Log4j2的性能在某些关键领域比Log4j 1.x更快，而且大多数情况下与Logback相当。 </p>
<h3 id="2-2-3-支持多种-API"><a href="#2-2-3-支持多种-API" class="headerlink" title="2.2.3 支持多种 API"></a>2.2.3 支持多种 API</h3><p> Log4j 2提供了最棒的性能的同事，还支持SLF4J和公共日志记录API。</p>
<h3 id="2-2-4-自动装配加载"><a href="#2-2-4-自动装配加载" class="headerlink" title="2.2.4 自动装配加载"></a>2.2.4 自动装配加载</h3><p> 像Logback一样，一旦配置发生改变，Log4j2可以自动载入这些更改后的配置信息，又与Logback不同，配置发生改变时不会丢失任何日志事件。 </p>
<h3 id="2-2-5-高级过滤功能"><a href="#2-2-5-高级过滤功能" class="headerlink" title="2.2.5 高级过滤功能"></a>2.2.5 高级过滤功能</h3><p>与Logback类似，Log4Jj2可以支持基于上下文数据、标记、正则表达式以及日志时间中的其他组件的过滤。Log4j2能够专门制定适用于所有的事件，无论这些事件在传入Loggers之前还是正在传给appenders。另外，过滤器还可以与Loggers关联其阿里。与Logback不同的是，Filter公共类可以用于任何情况。</p>
<h3 id="2-2-6-插件架构"><a href="#2-2-6-插件架构" class="headerlink" title="2.2.6 插件架构"></a>2.2.6 插件架构</h3><p> 所有可以配置的组件都以Log4j插件的形式来定义。同样地，不需要修改任何Log4j代码就可以创建新的Appender、layout、Pattern Convert等等。Log4j自动识别预定义的插件，如果在配置中引用到这些插件，Log4j就会自动载入使用。 </p>
<h3 id="2-2-7-属性支持"><a href="#2-2-7-属性支持" class="headerlink" title="2.2.7 属性支持"></a>2.2.7 属性支持</h3><p> 属性可以在配置文件中引用，也可以直接替代或传入潜在的组件，属性在这些组件中能够动态解析。属性可以是配置文件、属性文件、环境变量、线程上下文映射以及事件中的数据中定义的值。用户可以通过增加自己的Lookup插件来定制自己的属性。 </p>
<h2 id="2-3日志配置"><a href="#2-3日志配置" class="headerlink" title="2.3日志配置"></a>2.3日志配置</h2><h3 id="2-3-1pom文件中的改动"><a href="#2-3-1pom文件中的改动" class="headerlink" title="2.3.1pom文件中的改动"></a>2.3.1pom文件中的改动</h3><p>解除底层默认日志依赖、并添加log4j2作为自己的日志实现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--解除底层的默认的日志依赖  logback--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用log4j2作为日志的实现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2在application-properties中配置"><a href="#2-3-2在application-properties中配置" class="headerlink" title="2.3.2在application.properties中配置"></a>2.3.2在application.properties中配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.com.lcx</span>=<span class="string">debug</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">F:/spring01/spring.log</span></span><br><span class="line"><span class="meta">logging.file.max-size</span>=<span class="string">100MB</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;==== [%thread] === %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-3在xml中的配置"><a href="#2-3-3在xml中的配置" class="headerlink" title="2.3.3在xml中的配置"></a>2.3.3在xml中的配置</h3><p><strong>log4j.xml内容如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个输出控制台的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"log"</span> <span class="attr">fileName</span>=<span class="string">"F:/spring-Log/spring.log"</span> <span class="attr">append</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/info.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/warn.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"warn"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/error.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>git上传</title>
    <url>/2020/06/18/git%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="一、Git手动上传文件"><a href="#一、Git手动上传文件" class="headerlink" title="一、Git手动上传文件"></a>一、Git手动上传文件</h1><h2 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1.创建远程仓库"></a>1.创建远程仓库</h2><p>在自己的Github上创建一个仓库</p><p><img src="https://i.loli.net/2020/06/18/XAeHZzOkblIqTif.png" alt="image-20200618215633512"></p><p><img src="https://i.loli.net/2020/06/18/HirE1N9pxGq4MLd.png" alt="image-20200618215739080"></p><p>填写仓库名、仓库描述、勾选<strong>Initialize this repostitory with a README</strong>选项，在创建仓库时会初始化一个README.md文件，点击<strong>Create repository</strong>按钮进行创建。</p><h2 id="2-创建本地仓库"><a href="#2-创建本地仓库" class="headerlink" title="2.创建本地仓库"></a>2.创建本地仓库</h2><a id="more"></a>



<p>新建一个文件夹作为本地仓库。右键<strong>git bash here</strong>，在终端中输入git init 命令初始化仓库。</p>
<p><img src="https://i.loli.net/2020/06/18/BNyTRdruF18z6H7.png" alt="image-20200618220624964"></p>
<h2 id="3-同步远程仓库"><a href="#3-同步远程仓库" class="headerlink" title="3.同步远程仓库"></a>3.同步远程仓库</h2><p>然后添加要上传的文件或代码至本地仓库中，在终端输入git add . </p>
<p>用官方的话就是：跟踪新文件，或者说将内容从工作目录添加到暂存区。</p>
<p><img src="https://i.loli.net/2020/06/18/DhiKUbZFxtQWjgP.png" alt="image-20200618220902092"></p>
<p>提交staged的文件git commit -m “initial commit”。</p>
<p><strong>git commit -m用于提交暂存区的文件</strong></p>
<p>从GitHub上拷贝之前新建的仓库地址，使用git remote add origin + 仓库地址。</p>
<p>再使用Push命令 ，将本地仓库同步至远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>如果提示冲突可以强制push：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>

<p>==切记，git不能上传大于100MB的单个文件！！！==</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架</title>
    <url>/2020/01/13/Spring%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、spring简介"><a href="#一、spring简介" class="headerlink" title="一、spring简介"></a>一、spring简介</h1><p>spring 是一个轻量级的，基于IOC和AOP核心技术的企业级开源开发框架</p><p>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，根据xml Spring的配置文件来动态的创建对象，和调用对象里的方法的。 </p><a id="more"></a>

<p>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 </p>
<p><strong>Spring目的</strong>：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明 管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </p>
<p><strong>注意：</strong>Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<h1 id="二、spring的主要特征"><a href="#二、spring的主要特征" class="headerlink" title="二、spring的主要特征"></a>二、spring的主要特征</h1><p><strong>（1）轻量级</strong>：spring是一个轻量级的开发框架，基本版本大约只有2M</p>
<p><strong>（2）IOC：</strong>控制反转，应用程序中对象之间的依赖是由spring 来控制的</p>
<p><strong>（3）AOP：</strong>面向切面编程，spring支持面向切面编程，这样可以将业务逻辑和系统服务分开，分离</p>
<p><strong>（4）容器：</strong>包含并管理应用程序中对象的生命周期和配置信息</p>
<p><strong>（5）MVC思想：</strong>spring也是基于MVC思想的框架，也遵循模型-视图-控制器这三个层次</p>
<p><strong>（6）事务：</strong>spring提供一个持续化的接口，可以上至扩展到本地事务下至扩展到全局事务</p>
<p><strong>（7）异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，hibernate,or JDO抛出的）转化为一致的unchecked 异常。</p>
<h1 id="三、spring优缺点"><a href="#三、spring优缺点" class="headerlink" title="三、spring优缺点"></a>三、spring优缺点</h1><p><strong>优点：</strong></p>
<p>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。<br>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。<br>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属<br>性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。<br>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。<br>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。<br>使用Spring构建的应用程序易于单元测试。<br>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。<br>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。<br>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。<br><strong>缺点：</strong><br>1.jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器</p>
<p>2.Spring不支持分布式，这也是EJB仍然在用的原因之一。</p>
<h1 id="四、Spring的两大内容"><a href="#四、Spring的两大内容" class="headerlink" title="四、Spring的两大内容"></a>四、Spring的两大内容</h1><p><strong>IOC（控制反转）和AOP（面向切面编程）</strong></p>
<p><strong>IOC：</strong>把对象的创建权交给Spring。</p>
<p><strong>AOP：</strong>底层使用动态代理,对代码进行增强的一种方式。</p>
<h2 id="1、IOC和DI（依赖注入）的关系"><a href="#1、IOC和DI（依赖注入）的关系" class="headerlink" title="1、IOC和DI（依赖注入）的关系"></a>1、IOC和DI（依赖注入）的关系</h2><ul>
<li><p><strong>依赖注入的前提:</strong></p>
<p>有IOC的环境,也就是将必须对象的创建权交给了Spring.</p>
</li>
<li><p><strong>DI 介绍</strong> </p>
<p>Dependency Injection 依赖注入.需要有IOC 的环境,Spring 创建这个类的过程中,Spring 将类的依赖的属性设置进去.</p>
</li>
<li><p><strong>IOC与DI的的区别:</strong> </p>
<p>IOC:  控制反转,将类的对象的创建交给Spring类管理创建.<br>DI:    依赖注入,将类里面的属性在创建类的过程中给属性赋值.<br>DI和IOC的关系: DI不能单独存在,DI需要在IOC的基础上来完成.</p>
<p>这样做得好处：做到了单一职责，并且提高了复用性，解耦了之后，任你如何实现，使用接口的引用调用的方法，永远不需要改变。</p>
</li>
<li><p><strong>依赖注入的四种方式：</strong></p>
<ul>
<li><p><strong>setter注入：</strong></p>
<p>在实体类中生成get、set方法和无参构造方法，在ApplicationContext.xml中配置。</p>
</li>
<li><p><strong>构造器注入:</strong></p>
<p>在实体类中生成有参构造方法，在ApplicationContext.xml中配置。</p>
<p>ApplicationContext.xml中配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     IOC setter注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Stu"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"陕西西安"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Dog"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.Dog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小黄"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    构造器注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"User"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.User"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"xian"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"Dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AcUtils代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> sun.plugin2.message.GetAppletMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">GetApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(path);</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lcx.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.lcx.utils.AcUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DITest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = AcUtils.GetApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        Student stu = applicationContext.getBean(<span class="string">"Stu"</span>, Student.class);</span><br><span class="line">        Dog dog = applicationContext.getBean(<span class="string">"Dog"</span>, Dog.class);</span><br><span class="line">        User user = applicationContext.getBean(<span class="string">"User"</span>, User.class);</span><br><span class="line">        System.out.println(stu+<span class="string">" "</span> +dog+<span class="string">" "</span> +user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student&#123;name=&apos;李四&apos;, age=18, address=&apos;陕西西安&apos;&#125; Dog&#123;name=&apos;小黄&apos;, age=3, color=&apos;yellow&apos;&#125; User&#123;name=&apos;小明&apos;, age=18, address=&apos;xian&apos;, dog=Dog&#123;name=&apos;小黄&apos;, age=3, color=&apos;yellow&apos;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>当注入的属性为另一个类对象时用 ref、在影射过程中如果该类的对象有继承关系时用parent=父类注解id对应的字符串。</p>
</li>
<li><p>接口注入（不常用）：</p>
<p>通过接口的方式给实体类注入信息。例子如下：</p>
<p>change4.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"changeToLowerCase"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.ChangetoLowerCase"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"ABCDEFG"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"changeToUoCase"</span> <span class="attr">class</span>=<span class="string">"com.lcx.pojo.ChangetoUpCase"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"higklmn"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ChangeWord.java接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义两个实体类，分别实现大写转小写，小写转大写。代码如下：</p>
<p>ChangetoLower.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangetoLowerCase</span> <span class="keyword">implements</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ChangetoUpCase.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangetoUpCase</span> <span class="keyword">implements</span> <span class="title">ChangeCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toUpperCase();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大写转小写后的结果：abcdefg</span><br><span class="line">小写转大写后的结果：HIGKLMN</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注解注入（推荐）：</strong></p>
<p>ApplicationContext01.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lcx.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实体类Items：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>@Component(“items”)<br>  public class Items {</p>
<pre><code>@Value(&quot;大白兔&quot;)
  private String name;
  @Value(&quot;10&quot;)
  private Double price;
  @Value(&quot;糖&quot;)
  private String dec;</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String getName() &#123;</span><br><span class="line">      return name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setName(String name) &#123;</span><br><span class="line">      this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Double getPrice() &#123;</span><br><span class="line">      return price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setPrice(Double price) &#123;</span><br><span class="line">      this.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String getDec() &#123;</span><br><span class="line">      return dec;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setDec(String dec) &#123;</span><br><span class="line">      this.dec = dec;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>  }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实体类Super：</span><br><span class="line">  </span><br><span class="line">```java</span><br><span class="line">package com.lcx.pojo;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component(&quot;super&quot;)</span><br><span class="line">public class Super &#123;</span><br><span class="line">    @Value(&quot;大脚便利店&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Items items;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Items getItems() &#123;</span><br><span class="line">        return items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<pre><code>测试类代码：</code></pre>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lcx.pojo.Items;</span><br><span class="line"><span class="keyword">import</span> com.lcx.pojo.Super;</span><br><span class="line"><span class="keyword">import</span> com.lcx.utils.AcUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DITest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = AcUtils.GetApplicationContext(<span class="string">"ApplicationContext01.xml"</span>);</span><br><span class="line">        Items items = applicationContext.getBean(<span class="string">"items"</span>, Items.class);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">        System.out.println(items.getDec());</span><br><span class="line">        System.out.println(items.getPrice());</span><br><span class="line">        Super aSuper = applicationContext.getBean(<span class="string">"super"</span>, Super.class);</span><br><span class="line">        System.out.println(aSuper.getName()+<span class="string">" "</span>+ aSuper.getItems());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>结果：</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大白兔</span><br><span class="line">糖</span><br><span class="line">10.0</span><br><span class="line">大脚便利店 Items&#123;name=&apos;大白兔&apos;, price=10.0, dec=&apos;糖&apos;&#125;</span><br></pre></td></tr></table></figure>

<pre><code>**注意：**如果注入的属性为对象，使用@Autowired自动注入。</code></pre><h2 id="2、AOP（面向切面编程）"><a href="#2、AOP（面向切面编程）" class="headerlink" title="2、AOP（面向切面编程）"></a>2、AOP（面向切面编程）</h2><h4 id="Spring中的AOP的简介"><a href="#Spring中的AOP的简介" class="headerlink" title="Spring中的AOP的简介"></a><strong>Spring中的AOP的简介</strong></h4><ul>
<li><strong>AOP Aspect Oriented Programing 面向切面编程</strong></li>
<li><strong>AOP采取==横向抽取==机制，取代了传统==纵向继承==体系重复性代码（性能监视、事务管理、安全检查、缓存）</strong></li>
<li><strong>Spring中的Aop是纯Java来实现的,使用==动态代理==的方式增强代码</strong></li>
<li><strong>AOP不是由Spring提出来的,是由AOP联盟定义的</strong></li>
</ul>
<h4 id="Spring中的动态代理"><a href="#Spring中的动态代理" class="headerlink" title="Spring中的动态代理"></a>Spring中的动态代理</h4><ul>
<li><strong>jdk自带的动态代理</strong><ul>
<li>如果委托类和代理类实现了同一个接口则底层选择jdk的动态代理</li>
</ul>
</li>
<li><strong>cglib动态代理</strong><ul>
<li>委托类和代理类没有实现同一个接口,则底层选择cglib的动态代理,cglib的动态代理底层使用的是继承</li>
</ul>
</li>
</ul>
<h4 id="Spring中的AOP的专业术语"><a href="#Spring中的AOP的专业术语" class="headerlink" title="Spring中的AOP的专业术语"></a>Spring中的AOP的专业术语</h4><ul>
<li><strong>Joinpoint(连接点)</strong> :委托类中可以被增强的方法 </li>
<li>==<strong>Pointcut(切入点)</strong> :切点 ,要被增强的方法== </li>
<li>==<strong>Advice(通知/增强)</strong> :增强的代码== </li>
<li><strong>Target(目标对象)</strong> :委托对象 </li>
<li><strong>Weaving(织入) :把增强</strong>应用<strong>切点</strong>的过程 </li>
<li><strong>Proxy（代理）</strong>: 一个类被AOP织入增强后，就产生一个结果代理类 </li>
<li>==<strong>Aspect(切面):</strong> 是<strong>切点</strong>和<strong>通知</strong>的结合== </li>
</ul>
<h4 id="Spring中的AOP的实现"><a href="#Spring中的AOP的实现" class="headerlink" title="Spring中的AOP的实现"></a>Spring中的AOP的实现</h4><h5 id="传统的SpringAOP"><a href="#传统的SpringAOP" class="headerlink" title="传统的SpringAOP"></a>传统的SpringAOP</h5><p>​    <strong>一个切点只能对应一个通知</strong></p>
<h5 id="基于AspectJ的AOP"><a href="#基于AspectJ的AOP" class="headerlink" title="基于AspectJ的AOP"></a>基于AspectJ的AOP</h5><ul>
<li>AspectJ是一个基于Java语言的面向切面的AOP框架</li>
<li>Spring2.0以后新增了对AspectJ<strong>切点表达式</strong>支持</li>
<li>@AspectJ 是AspectJ1.5新增功能，通过JDK5注解技术，允许直接在Bean类中定义切面</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li>
</ul>
<h5 id="Aspectj的切点表达式"><a href="#Aspectj的切点表达式" class="headerlink" title="Aspectj的切点表达式"></a>Aspectj的切点表达式</h5><ul>
<li>语法:execution(表达式)</li>
<li>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)</li>
<li>public * *(..) —检索所有的public方法</li>
<li>execution(“* cn.it.spring4.demo1.dao.*(..)”) —只检索当前包</li>
<li>execution(“* cn.it.spring4.demo1.dao..*(..)”) —检索包及当前包的子包.</li>
</ul>
<h5 id="Aspect的增强类型"><a href="#Aspect的增强类型" class="headerlink" title="Aspect的增强类型"></a>Aspect的增强类型</h5><ul>
<li>@Before 前置通知 </li>
<li>@AfterReturning 后置通知 </li>
<li>@Around 环绕通知 </li>
<li>@AfterThrowing抛出通知 </li>
<li>@After 最终final通知 </li>
</ul>
<h4 id="aop编程实现"><a href="#aop编程实现" class="headerlink" title="aop编程实现"></a>aop编程实现</h4><ul>
<li><p><strong>引入pom依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置自动代理和注解扫描器</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.it.bigdata"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启aop自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>编写（dao）委托类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加新用户..."</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户..."</span>+id);</span><br><span class="line">        <span class="comment">//int a =10/0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUser</span><span class="params">(Integer  id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户"</span>+ id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户..."</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面 = 切点(切点表达式) + 通知(要增强的代码,方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.add*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置通知带返回值</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution( * com.lcx.bigdata.UserDao.add*(..))"</span>, returning = <span class="string">"ret"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice2</span><span class="params">(String ret)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span> + ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.lcx.bigdata.UserDao.updateUser(..)))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice3</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕通知前"</span>);</span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕通知后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//抛出异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution( * com.lcx.bigdata.UserDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advice4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:ApplicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBefore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">18</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.updateUser(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一些注解的含义：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Aspect 作用是把当前类标识为一个切面供容器读取</span><br><span class="line">- @Before 前置通知 </span><br><span class="line">- @AfterReturning 后置通知 </span><br><span class="line">- @Around 环绕通知 </span><br><span class="line">- @AfterThrowing抛出通知 </span><br><span class="line">- @After 最终final通知</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Repository 存储层(Dao)Bean</span><br><span class="line">- @Service 业务层Bean</span><br><span class="line">- @Controller 展示层Bean</span><br><span class="line">- @Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。</span><br><span class="line">- @Service 通常作用在业务层，但是目前该功能与 @Component 相同。</span><br><span class="line">- @Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @RunWith 就是一个运行器</span><br><span class="line">- @RunWith(JUnit4.class) 就是指用JUnit4来运行</span><br><span class="line"></span><br><span class="line">- @RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境</span><br><span class="line"></span><br><span class="line">- @RunWith(Suite.class) 的话就是一套测试集合，</span><br><span class="line"></span><br><span class="line">- @ContextConfiguration Spring整合JUnit4测试时，使用注解引入多个配置文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</span><br><span class="line">@Autowired的原理:其实在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性.</span><br><span class="line">注意事项：</span><br><span class="line">　　在使用@Autowired时，首先在容器中查询对应类型的bean。</span><br><span class="line">　　　　如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据。</span><br><span class="line">　　　　如果查询的结果不止一个，那么@Autowired会根据名称来查找。</span><br><span class="line">　　　　如果查询的结果为空，那么会抛出异常。解决方法时，使用required=false。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hello hexo</category>
      </categories>
      <tags>
        <tag>hello hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>html学习笔记&lt;一&gt;</title>
    <url>/2019/10/31/html%E4%B8%8Ecss%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-一个完整的网页"><a href="#1-一个完整的网页" class="headerlink" title="1. 一个完整的网页"></a>1. 一个完整的网页</h1><p>​    网页的内容 + 网页的样式 + 网页的动作</p><h1 id="2-万维网联盟-W3C"><a href="#2-万维网联盟-W3C" class="headerlink" title="2. 万维网联盟(W3C)"></a>2. 万维网联盟(W3C)</h1><p>由蒂姆·伯纳斯-李于1994年10月在麻省理工学院（MIT）计算机科学实验室成立<br>是Web技术领域最具权威和影响力的国际中立性技术标准机构<br>为Web技术的互相兼容，互联网技术的发展和应用起到了基础性和根本性的支撑作用</p><a id="more"></a>

<p>一流的企业做标准(苹果  高通   google   微软   华为)</p>
<p>二流企业做产品(腾讯  阿里   美团   字节跳动)  BAT  TMD</p>
<p>三流企业做服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://www.w3school.com.cn/</span><br></pre></td></tr></table></figure>



<h1 id="3-html的简介"><a href="#3-html的简介" class="headerlink" title="3. html的简介"></a>3. html的简介</h1><p>​    HTML（HyperText Mark-up Language）：超文本标记语言或超文本连接标示语言，由Tim Berners-Lee发明，是构成网页文档的主要语言</p>
<h1 id="4-html的编写"><a href="#4-html的编写" class="headerlink" title="4. html的编写"></a>4. html的编写</h1><ul>
<li>HTML文件一般存储为.htm或.html文件</li>
</ul>
<h1 id="5-html的编写工具-编辑器"><a href="#5-html的编写工具-编辑器" class="headerlink" title="5. html的编写工具(编辑器)"></a>5. html的编写工具(编辑器)</h1><ul>
<li>windows自带的记事本</li>
<li>Notepad++(windows平台最强大的文本编辑器)</li>
<li>Sublim(跨平台最强大的编辑器)</li>
<li>VScode(跨平台最强大的编辑器, “宇宙第一编辑器”)</li>
</ul>
<h1 id="6-html的编写工具-集成开发环境"><a href="#6-html的编写工具-集成开发环境" class="headerlink" title="6. html的编写工具(集成开发环境)"></a>6. html的编写工具(集成开发环境)</h1><ul>
<li>Dreamweaver(收费  已经不怎么用了)</li>
<li><strong>IntelliJ IDEA(新一代的神器)</strong></li>
<li><strong>Hbuilder(专属前端开发的神器)</strong></li>
</ul>
<h1 id="7-html中的特殊字符"><a href="#7-html中的特殊字符" class="headerlink" title="7. html中的特殊字符"></a>7. html中的特殊字符</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">空格	&amp;nbsp;</span><br><span class="line">大于号(&gt;)	&amp;gt;</span><br><span class="line">小于号(&lt;)	&amp;lt;</span><br><span class="line">引号(")	&amp;quot;</span><br><span class="line">版权符号@	&amp;copy;</span><br></pre></td></tr></table></figure>



<h1 id="8-html中的列表"><a href="#8-html中的列表" class="headerlink" title="8. html中的列表"></a>8. html中的列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表 </span></span><br><span class="line"><span class="comment">disc: 实体圆心,默认值</span></span><br><span class="line"><span class="comment">square: 实体方心</span></span><br><span class="line"><span class="comment">circle: 空心圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有序列表</span></span><br><span class="line"><span class="comment">1: 数字(阿拉伯数字)</span></span><br><span class="line"><span class="comment">a/A: 字母(英文字母)</span></span><br><span class="line"><span class="comment">i/I: 罗马数字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表</span></span><br><span class="line"><span class="comment">dt:列表的标题</span></span><br><span class="line"><span class="comment">dd:列表的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>所属学院<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>计算机院<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>所属专业<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>计算机网络<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="9-html中的表格"><a href="#9-html中的表格" class="headerlink" title="9. html中的表格"></a>9. html中的表格</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    border:表格边框的宽度</span></span><br><span class="line"><span class="comment">    width:表格自身的宽度</span></span><br><span class="line"><span class="comment">    height:表格自身的高度</span></span><br><span class="line"><span class="comment">    aligin: 表格的水平位置对其方式(left  center   right)</span></span><br><span class="line"><span class="comment">    cellspacing: 单元格距离边框的大小</span></span><br><span class="line"><span class="comment">    cellpadding: 单元格内容距离单元格的距离</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">width</span>=<span class="string">"800px"</span> <span class="attr">height</span>=<span class="string">"300px"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"0px"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        aligin: 给tr指定aligin则代表tr中的td的所有内容的对其方式</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rowspan 行合并(竖直方向上的合并) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 列合并(水皮方向上的合并) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="10-表单标签"><a href="#10-表单标签" class="headerlink" title="10. 表单标签"></a>10. 表单标签</h1><h1 id="11-html中的语义化标签"><a href="#11-html中的语义化标签" class="headerlink" title="11. html中的语义化标签"></a>11. html中的语义化标签</h1><ul>
<li><p>语义化标签可以让页面结构更加简洁、合理</p>
</li>
<li><p>能够达到见名知义的作用</p>
</li>
<li><p>更加符合Web标准，更利于搜索引擎的抓取（SEO的优化）和开发维护</p>
<p>article   header   footer</p>
</li>
</ul>
<h1 id="12-iframe框架标签"><a href="#12-iframe框架标签" class="headerlink" title="12. iframe框架标签"></a>12. iframe框架标签</h1><p> 用来引用框架页面，src属性用来指定要引入的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"path"</span> <span class="attr">name</span>=<span class="string">"mainFrame"</span> <span class="attr">frameborder</span>=<span class="string">"x"</span> <span class="attr">scrolling</span>=<span class="string">"yes/no"</span>  <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">width</span>=<span class="string">"x"</span> <span class="attr">height</span>=<span class="string">"y"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="13-独门秘籍"><a href="#13-独门秘籍" class="headerlink" title="13. 独门秘籍"></a>13. 独门秘籍</h1><p>emment表达式:</p>
<p>同级别:  +</p>
<p>子级:  &gt;</p>
<p>属性: []</p>
<p>文本: {}</p>
<p>数量:  *n</p>
<p>分组:  ()</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>java mysql数据类型对照</title>
    <url>/2020/01/16/java-mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E7%85%A7/</url>
    <content><![CDATA[<h1 id="java-mysql数据类型对照"><a href="#java-mysql数据类型对照" class="headerlink" title="java mysql数据类型对照"></a>java mysql数据类型对照</h1><table>
<thead>
<tr>
<th><strong>类型名称</strong></th>
<th><strong>显示长度</strong></th>
<th><strong>数据库类型</strong></th>
<th><strong>JAVA类型</strong></th>
<th><strong>JDBC类型索引(int)</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>VARCHAR</strong></td>
<td><strong>L+N</strong></td>
<td><strong>VARCHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>12</strong></td>
<td></td>
</tr>
<tr>
<td><strong>CHAR</strong></td>
<td><strong>N</strong></td>
<td><strong>CHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>1</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BLOB</strong></td>
<td><strong>L+N</strong></td>
<td><strong>BLOB</strong></td>
<td><strong>java.lang.byte[]</strong></td>
<td><strong>-4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TEXT</strong></td>
<td><strong>65535</strong></td>
<td><strong>VARCHAR</strong></td>
<td><strong>java.lang.String</strong></td>
<td><strong>-1</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>INTEGER</strong></td>
<td><strong>4</strong></td>
<td><strong>INTEGER UNSIGNED</strong></td>
<td><strong>java.lang.Long</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TINYINT</strong></td>
<td><strong>3</strong></td>
<td><strong>TINYINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>-6</strong></td>
<td></td>
</tr>
<tr>
<td><strong>SMALLINT</strong></td>
<td><strong>5</strong></td>
<td><strong>SMALLINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>5</strong></td>
<td></td>
</tr>
<tr>
<td><strong>MEDIUMINT</strong></td>
<td><strong>8</strong></td>
<td><strong>MEDIUMINT UNSIGNED</strong></td>
<td><strong>java.lang.Integer</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BIT</strong></td>
<td><strong>1</strong></td>
<td><strong>BIT</strong></td>
<td><strong>java.lang.Boolean</strong></td>
<td><strong>-7</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BIGINT</strong></td>
<td><strong>20</strong></td>
<td><strong>BIGINT UNSIGNED</strong></td>
<td><strong>java.math.BigInteger</strong></td>
<td><strong>-5</strong></td>
<td></td>
</tr>
<tr>
<td><strong>FLOAT</strong></td>
<td><strong>4+8</strong></td>
<td><strong>FLOAT</strong></td>
<td><strong>java.lang.Float</strong></td>
<td><strong>7</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DOUBLE</strong></td>
<td><strong>22</strong></td>
<td><strong>DOUBLE</strong></td>
<td><strong>java.lang.Double</strong></td>
<td><strong>8</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DECIMAL</strong></td>
<td><strong>11</strong></td>
<td><strong>DECIMAL</strong></td>
<td><strong>java.math.BigDecimal</strong></td>
<td><strong>3</strong></td>
<td></td>
</tr>
<tr>
<td><strong>BOOLEAN</strong></td>
<td><strong>1</strong></td>
<td><strong>同TINYINT</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>ID</strong></td>
<td><strong>11</strong></td>
<td><strong>PK (INTEGER UNSIGNED)</strong></td>
<td><strong>java.lang.Long</strong></td>
<td><strong>4</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>DATE</strong></td>
<td><strong>10</strong></td>
<td><strong>DATE</strong></td>
<td><strong>java.sql.Date</strong></td>
<td><strong>91</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TIME</strong></td>
<td><strong>8</strong></td>
<td><strong>TIME</strong></td>
<td><strong>java.sql.Time</strong></td>
<td><strong>92</strong></td>
<td></td>
</tr>
<tr>
<td><strong>DATETIME</strong></td>
<td><strong>19</strong></td>
<td><strong>DATETIME</strong></td>
<td><strong>java.sql.Timestamp</strong></td>
<td><strong>93</strong></td>
<td></td>
</tr>
<tr>
<td><strong>TIMESTAMP</strong></td>
<td><strong>19</strong></td>
<td><strong>TIMESTAMP</strong></td>
<td><strong>java.sql.Timestamp</strong></td>
<td><strong>93</strong></td>
<td></td>
</tr>
<tr>
<td><strong>YEAR</strong></td>
<td><strong>4</strong></td>
<td><strong>YEAR</strong></td>
<td><strong>java.sql.Date</strong></td>
<td><strong>91</strong></td>
<td></td>
</tr>
</tbody></table>]]></content>
      <categories>
        <category>java</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程之线程同步</title>
    <url>/2019/11/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<hr><hr><p>用一个简单的题目来说明线程同步的三种方式，题目如下：</p><p>​        模拟传智播客的三个老师同时分发80份学习笔记，每个老师相当于一个线程。</p><h3 id="同步代码块实现"><a href="#同步代码块实现" class="headerlink" title="同步代码块实现"></a>同步代码块实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synclock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(note &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>





<h3 id="同步方法实现"><a href="#同步方法实现" class="headerlink" title="同步方法实现"></a>同步方法实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynMethods</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            SendNote();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SendNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(note &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步锁实现"><a href="#同步锁实现" class="headerlink" title="同步锁实现"></a>同步锁实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> note = <span class="number">80</span>;</span><br><span class="line">    <span class="comment">//定义一个锁对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"老师正在分发第"</span>+ note-- +<span class="string">"份学习笔记。"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynCodeBlock synCodeBlock = <span class="keyword">new</span> SynCodeBlock();</span><br><span class="line">        <span class="comment">//创建并开启三个线程，模拟三个老师分发笔记</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synCodeBlock,<span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SynMethods synMethods = <span class="keyword">new</span> SynMethods();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synMethods,<span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SynLock synLock = <span class="keyword">new</span> SynLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"托尼"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(synLock,<span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>同步代码块、同步方法、同步锁都是实现不同线程对同一资源的共线问题。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mySql中的事务</title>
    <url>/2020/01/15/mySql%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="一、MySql中的事务"><a href="#一、MySql中的事务" class="headerlink" title="一、MySql中的事务"></a>一、MySql中的事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul><a id="more"></a>

<h1 id="二、事务的四大特性（ACID）"><a href="#二、事务的四大特性（ACID）" class="headerlink" title="二、事务的四大特性（ACID）"></a>二、事务的四大特性（ACID）</h1><ul>
<li><p><strong>原子性（Atomicity）</strong></p>
<p>整个事务中的单元要么全部成功,要么全部失败 。</p>
<p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p><strong>一致性（Consistency）</strong></p>
<p>事务执行前后的结果必须一致 。</p>
<p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p><strong>隔离性(Isolation)</strong> </p>
<p>事务之间应该相互独立,互相不受影响 。</p>
<p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</p>
</li>
<li><p><strong>持久性(Durability)</strong> </p>
<p>一旦事务提交,就会持久化保存 ,事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p>
<p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<p>​    <em>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</em></p>
<h1 id="三、事务的两大动作"><a href="#三、事务的两大动作" class="headerlink" title="三、事务的两大动作"></a>三、事务的两大动作</h1><ul>
<li><strong>提交（commit）</strong></li>
<li><strong>回滚（rollback）</strong></li>
</ul>
<h1 id="四、事务的并发问题"><a href="#四、事务的并发问题" class="headerlink" title="四、事务的并发问题"></a>四、事务的并发问题</h1><ul>
<li><strong>脏读</strong><ul>
<li>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li>
</ul>
</li>
<li><strong>不可重复读</strong> <ul>
<li>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致 (<strong>侧重修改操作</strong>)</li>
</ul>
</li>
<li><strong>幻读</strong> <ul>
<li>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读 (<strong>侧重新增或删除</strong>)</li>
</ul>
</li>
</ul>
<h1 id="五、MySQL事务的隔离级别"><a href="#五、MySQL事务的隔离级别" class="headerlink" title="五、MySQL事务的隔离级别"></a>五、MySQL事务的隔离级别</h1><table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（read-uncommitted）</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读已提交（read-committed）</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（repeatable-read）</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化（serializable）</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<h1 id="六、mysql和oracle默认的隔离级别"><a href="#六、mysql和oracle默认的隔离级别" class="headerlink" title="六、mysql和oracle默认的隔离级别"></a>六、mysql和oracle默认的隔离级别</h1><p>​    mysql默认的隔离级别是<strong>repeatable-read</strong> </p>
<p>​    oracle默认的隔离级别是 <strong>read committed</strong></p>
<p>​    <strong>查询事务的隔离级别: select @@tx_isolation</strong> </p>
<p>​    <strong>设置事务的隔离级别: set session transaction  isolation level read committed</strong></p>
<h1 id="七、隔离级别的选择"><a href="#七、隔离级别的选择" class="headerlink" title="七、隔离级别的选择"></a>七、隔离级别的选择</h1><ul>
<li>两个极端的情况不选择<ul>
<li>read uncommitted和serializable是一般不会使用</li>
<li>一般我们会使用默认的隔离级别</li>
</ul>
</li>
</ul>
<h1 id="八、事务控制语句"><a href="#八、事务控制语句" class="headerlink" title="八、事务控制语句"></a>八、事务控制语句</h1><ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li>
</ul>
<h1 id="九、MYSQL-事务处理主要有两种方法："><a href="#九、MYSQL-事务处理主要有两种方法：" class="headerlink" title="九、MYSQL 事务处理主要有两种方法："></a>九、MYSQL 事务处理主要有两种方法：</h1><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>
</ul>
<h1 id="十、jdbc操作事务"><a href="#十、jdbc操作事务" class="headerlink" title="十、jdbc操作事务"></a>十、jdbc操作事务</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Statement statement;</span><br><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/*贾连欲执事*/</span></span><br><span class="line">    <span class="comment">//加载驱动</span></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//操作事务</span></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db2"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    statement = conn.createStatement();</span><br><span class="line">    ShiWuCaoZuo(<span class="number">500</span>, <span class="string">"xiaoming"</span>, <span class="string">"xiaohua"</span>);</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShiWuCaoZuo</span><span class="params">(Integer money, String from, String to)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">    ResultSet resultSet = statement.executeQuery(<span class="string">"select balance from account WHERE name='"</span> + from + <span class="string">"'"</span>);</span><br><span class="line">    <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">        <span class="keyword">int</span> balance = resultSet.getInt(<span class="string">"balance"</span>);</span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= money) &#123;</span><br><span class="line">            statement.execute(<span class="string">"update account set balance=balance-"</span> + money + <span class="string">" where name='"</span> + from + <span class="string">"'"</span>);</span><br><span class="line">            statement.execute(<span class="string">"update account set balance=balance+"</span> + money + <span class="string">" where name='"</span> + to + <span class="string">"'"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            conn.rollback();<span class="comment">//回滚</span></span><br><span class="line">            System.out.println(<span class="string">"转账失败...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    conn.commit();<span class="comment">//提交事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>orange pi zero</title>
    <url>/2020/01/24/orange-pi-zero/</url>
    <content><![CDATA[<h3 id="一、可以用-Orange-Pi-Zero-做什么？"><a href="#一、可以用-Orange-Pi-Zero-做什么？" class="headerlink" title="一、可以用 Orange Pi Zero 做什么？"></a>一、可以用 Orange Pi Zero 做什么？</h3><p>我们可以用它搭建：</p><ul>
<li>一台计算机</li>
<li>一个无线网络服务器</li>
<li>游戏机</li>
<li>音乐播放器</li>
<li>高清视频播放器</li>
<li>扬声器</li>
<li>Android</li>
<li>Scratch</li>
<li>更多的各种功能，因为 Orange Pi Zero 是开源的</li>
</ul><h3 id="二、Orange-Pi-Zero-是为谁设计的？"><a href="#二、Orange-Pi-Zero-是为谁设计的？" class="headerlink" title="二、Orange Pi Zero 是为谁设计的？"></a>二、Orange Pi Zero 是为谁设计的？</h3><p>Orange Pi Zero 不仅仅是一款消费品，同时也是给任何想用技术来进行创作创新的人设计的。它是一款非常简单、有趣、实用的工具，你可以用它去打造你身边的世界。</p><a id="more"></a>


<h3 id="三、分区扩容"><a href="#三、分区扩容" class="headerlink" title="三、分区扩容"></a>三、分区扩容</h3><p>在使用win32DiskImager工具对*.img镜像进行写入，它只给rootfs分配一个g得存储空间，不够使用，需要对分区进行扩容。</p>
<p>linux下使用<strong>Gparted</strong></p>
<p>安装指令：sudo apt-get install  gparted </p>
<p>windows下使用<strong>DiskGenius</strong></p>
<p><strong>注意：</strong>DiskGenius对分区进行扩容有极大可能会造成数据丢失，从而导致系统跑不起来。建议使用Gparted工具来进行扩容。</p>
<h3 id="四、VNC远程投屏"><a href="#四、VNC远程投屏" class="headerlink" title="四、VNC远程投屏"></a>四、VNC远程投屏</h3><h4 id="安装xfce4桌面"><a href="#安装xfce4桌面" class="headerlink" title="安装xfce4桌面"></a>安装xfce4桌面</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install xfce4</span><br></pre></td></tr></table></figure>

<h4 id="安装vnc服务"><a href="#安装vnc服务" class="headerlink" title="安装vnc服务"></a>安装vnc服务</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install vnc4server</span><br></pre></td></tr></table></figure>

<h4 id="设置vnc密码"><a href="#设置vnc密码" class="headerlink" title="设置vnc密码"></a>设置vnc密码</h4><p>安装完成后对vnc4server设置密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vnc4server</span><br></pre></td></tr></table></figure>

<h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p>使用vnc viewer输入ip与端口号（默认端口号为5901）</p>
<p>登录成功后只有一个终端，并无桌面。</p>
<p>然后修改配置</p>
<p><strong>进入当前终端用户的.vnc目录：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vnc</span><br></pre></td></tr></table></figure>

<p><strong>备份好原来的 xstartup:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp xstartup xstartup-bak</span><br></pre></td></tr></table></figure>

<p><strong>xstartup配置参数如下:</strong></p>
<p><img src="https://s2.ax1x.com/2020/01/24/1ZKNtK.png" alt="1ZKNtK.png"></p>
<h4 id="重启vnc-服务"><a href="#重启vnc-服务" class="headerlink" title="重启vnc 服务:"></a>重启vnc 服务:</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-tag">-kill</span> <span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-pseudo">:1</span></span><br></pre></td></tr></table></figure>

<h4 id="重新连接VNC"><a href="#重新连接VNC" class="headerlink" title="重新连接VNC:"></a>重新连接VNC:</h4><p>出现乱码情况</p>
<p><img src="https://s2.ax1x.com/2020/01/24/1ZKf1g.jpg" alt="1ZKf1g.jpg"></p>
<p><strong>状况：</strong>所用的<a href="https://www.centos.bz/tag/ubuntu/" target="_blank" rel="noopener">ubuntu</a>系统不支持中文，遇见中文就????。ORZ…</p>
<p><strong>目标：</strong>使系统/服务器支持中文，能够正常显示。</p>
<p>首先，安装中文支持包language-pack-zh-hans：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install language-pack-zh-hans</span></span><br></pre></td></tr></table></figure>

<p>然后，修改/etc/environment（在文件的末尾追加）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANGUAGE=&quot;zh_CN:zh:en_US:en&quot;</span><br></pre></td></tr></table></figure>

<p>再修改/var/lib/locales/supported.d/local(没有这个文件就新建，同样在末尾追加)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN GB2312</span><br></pre></td></tr></table></figure>

<p>最后，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo locale-gen</span></span><br></pre></td></tr></table></figure>

<p>对于中文乱码是空格的情况，安装中文字体解决。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming</span></span><br></pre></td></tr></table></figure>

<p><strong>感觉桌面作用不大！！！</strong></p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>Orange Pi Zero</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql笔记整理</title>
    <url>/2019/11/26/mysql%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="Windows服务"><a href="#Windows服务" class="headerlink" title="Windows服务"></a>Windows服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 启动MySQL</span><br><span class="line">    net start mysql</span><br><span class="line">-- 创建Windows服务</span><br><span class="line">    sc create mysql binPath = mysqld_bin_path(注意：等号与值之间有空格)</span><br></pre></td></tr></table></figure><h3 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"> </span><br><span class="line">SHOW PROCESSLIST -- 显示哪些线程正在运行</span><br><span class="line">SHOW VARIABLES -- 显示系统变量信息</span><br></pre></td></tr></table></figure><a id="more"></a>



<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">    SELECT DATABASE();</span><br><span class="line">-- 显示当前时间、用户名、数据库版本</span><br><span class="line">    SELECT now(), user(), version();</span><br><span class="line">-- 创建库</span><br><span class="line">    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        CHARACTER SET charset_name</span><br><span class="line">        COLLATE collation_name</span><br><span class="line">-- 查看已有库</span><br><span class="line">    SHOW DATABASES[ LIKE &apos;PATTERN&apos;]</span><br><span class="line">-- 查看当前库信息</span><br><span class="line">    SHOW CREATE DATABASE 数据库名</span><br><span class="line">-- 修改库的选项信息</span><br><span class="line">    ALTER DATABASE 库名 选项信息</span><br><span class="line">-- 删除库</span><br><span class="line">    DROP DATABASE[ IF EXISTS] 数据库名</span><br></pre></td></tr></table></figure>

<h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &apos;string&apos;]</span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line">        DATA DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        INDEX DIRECTORY = &apos;目录&apos;</span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = &apos;string&apos;</span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION BY ... (详细见手册)</span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ LIKE &apos;pattern&apos;]</span><br><span class="line">    SHOW TABLES FROM 表名</span><br><span class="line">-- 查看表机构</span><br><span class="line">    SHOW CREATE TABLE 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &apos;PATTERN&apos;]</span><br><span class="line">    SHOW TABLE STATUS [FROM db_name] [LIKE &apos;pattern&apos;]</span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        ALTER TABLE 表名 表的选项</span><br><span class="line">        eg: ALTER TABLE 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        RENAME TABLE 原表名 TO 新表名</span><br><span class="line">        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- RENAME可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span><br><span class="line">        ALTER TABLE 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            ADD[ COLUMN] 字段定义       -- 增加字段</span><br><span class="line">                AFTER 字段名          -- 表示增加在该字段名后面</span><br><span class="line">                FIRST               -- 表示增加在第一个</span><br><span class="line">            ADD PRIMARY KEY(字段名)   -- 创建主键</span><br><span class="line">            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引</span><br><span class="line">            ADD INDEX [索引名] (字段名) -- 创建普通索引</span><br><span class="line">            DROP[ COLUMN] 字段名      -- 删除字段</span><br><span class="line">            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            DROP INDEX 索引名 -- 删除索引</span><br><span class="line">            DROP FOREIGN KEY 外键    -- 删除外键</span><br><span class="line">-- 删除表</span><br><span class="line">    DROP TABLE[ IF EXISTS] 表名 ...</span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [TABLE] 表名</span><br><span class="line">-- 复制表结构</span><br><span class="line">    CREATE TABLE 表名 LIKE 要复制的表名</span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名</span><br><span class="line">-- 检查表是否有错误</span><br><span class="line">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">-- 优化表</span><br><span class="line">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br><span class="line">-- 修复表</span><br><span class="line">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span><br><span class="line">-- 分析表</span><br><span class="line">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 增</span><br><span class="line">    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]</span><br><span class="line">        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span><br><span class="line">        -- 可同时插入多条数据记录！</span><br><span class="line">        REPLACE 与 INSERT 完全一样，可互换。</span><br><span class="line">    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]</span><br><span class="line">-- 查</span><br><span class="line">    SELECT 字段列表 FROM 表名[ 其他子句]</span><br><span class="line">        -- 可来自多个表的多个字段</span><br><span class="line">        -- 其他子句可以不使用</span><br><span class="line">        -- 字段列表可以用*代替，表示所有字段</span><br><span class="line">-- 删</span><br><span class="line">    DELETE FROM 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line">-- 改</span><br><span class="line">    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</span><br></pre></td></tr></table></figure>

<h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL、数据库、表、字段均可设置编码</span><br><span class="line">-- 数据编码与客户端编码不需一致</span><br><span class="line">SHOW VARIABLES LIKE &apos;character_set_%&apos;   -- 查看所有字符集编码项</span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line">SET 变量名 = 变量值</span><br><span class="line">    SET character_set_client = gbk;</span><br><span class="line">    SET character_set_results = gbk;</span><br><span class="line">    SET character_set_connection = gbk;</span><br><span class="line">SET NAMES GBK;  -- 相当于完成以上三个设置</span><br><span class="line">-- 校对集</span><br><span class="line">    校对集用以排序</span><br><span class="line">    SHOW CHARACTER SET [LIKE &apos;pattern&apos;]/SHOW CHARSET [LIKE &apos;pattern&apos;]   查看所有字符集</span><br><span class="line">    SHOW COLLATION [LIKE &apos;pattern&apos;]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    COLLATE 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure>

<h3 id="数据类型（列类型）"><a href="#数据类型（列类型）" class="headerlink" title="数据类型（列类型）"></a>数据类型（列类型）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数值类型</span><br><span class="line"> </span><br><span class="line">-- a. 整型 ----------</span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255</span><br><span class="line">    smallint    2字节    -32768 ~ 32767</span><br><span class="line">    mediumint   3字节    -8388608 ~ 8388607</span><br><span class="line">    int         4字节</span><br><span class="line">    bigint      8字节</span><br><span class="line">    int(M)  M表示总位数</span><br><span class="line">    - 默认存在符号位，unsigned 属性修改</span><br><span class="line">    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</span><br><span class="line">        例：int(5)   插入一个数&apos;123&apos;，补填后为&apos;00123&apos;</span><br><span class="line">    - 在满足要求的情况下，越小越好。</span><br><span class="line">    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</span><br><span class="line"> </span><br><span class="line">-- b. 浮点型 ----------</span><br><span class="line">    类型             字节     范围</span><br><span class="line">    float(单精度)     4字节</span><br><span class="line">    double(双精度)    8字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填0.</span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        float(M, D)     double(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"> </span><br><span class="line">-- c. 定点数 ----------</span><br><span class="line">    decimal -- 可变长度</span><br><span class="line">    decimal(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每9位数字保存为4个字节。</span><br><span class="line"> </span><br><span class="line">2. 字符串类型</span><br><span class="line"> </span><br><span class="line">-- a. char, varchar ----------</span><br><span class="line">    char    定长字符串，速度快，但浪费空间</span><br><span class="line">    varchar 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    char,最多255个字符，与编码无关。</span><br><span class="line">    varchar,最多65535字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过65535个字节。</span><br><span class="line">        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</span><br><span class="line">    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    varchar 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。</span><br><span class="line">    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span><br><span class="line"> </span><br><span class="line">-- b. blob, text ----------</span><br><span class="line">    blob 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, blob, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给default值</span><br><span class="line"> </span><br><span class="line">-- c. binary, varbinary ----------</span><br><span class="line">    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    char, varchar, text 对应 binary, varbinary, blob.</span><br><span class="line"> </span><br><span class="line">3. 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span><br><span class="line">    date        3字节    日期         1000-01-01 到 9999-12-31</span><br><span class="line">    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span><br><span class="line">    time        3字节    时间         -838:59:59 到 838:59:59</span><br><span class="line">    year        1字节    年份         1901 - 2155</span><br><span class="line">datetime    YYYY-MM-DD hh:mm:ss</span><br><span class="line">timestamp   YY-MM-DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">date        YYYY-MM-DD</span><br><span class="line">            YY-MM-DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">time        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line">year        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br><span class="line"> </span><br><span class="line">4. 枚举和集合</span><br><span class="line"> </span><br><span class="line">-- 枚举(enum) ----------</span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为65535.</span><br><span class="line">    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    NULL值的索引是NULL。</span><br><span class="line">    空字符串错误值的索引值是0。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">-- 集合（set） ----------</span><br><span class="line">set(val1, val2, val3...)</span><br><span class="line">    create table tab ( gender set(&apos;男&apos;, &apos;女&apos;, &apos;无&apos;) );</span><br><span class="line">    insert into tab values (&apos;男, 女&apos;);</span><br><span class="line">    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，SET成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure>

<h3 id="选择类型"><a href="#选择类型" class="headerlink" title="选择类型"></a>选择类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- PHP角度</span><br><span class="line">1. 功能满足</span><br><span class="line">2. 存储空间尽量小，处理效率更高</span><br><span class="line">3. 考虑兼容问题</span><br><span class="line"> </span><br><span class="line">-- IP存储 ----------</span><br><span class="line">1. 只需存储，可用字符串</span><br><span class="line">2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned</span><br><span class="line">    1) PHP函数转换</span><br><span class="line">        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。</span><br><span class="line">        利用sprintf函数格式化字符串</span><br><span class="line">        sprintf(&quot;%u&quot;, ip2long(&apos;192.168.3.134&apos;));</span><br><span class="line">        然后用long2ip将整型转回IP字符串</span><br><span class="line">    2) MySQL函数转换(无符号整型，UNSIGNED)</span><br><span class="line">        INET_ATON(&apos;127.0.0.1&apos;) 将IP转为整型</span><br><span class="line">        INET_NTOA(2130706433) 将整型转为IP</span><br></pre></td></tr></table></figure>

<h3 id="列属性（列约束）"><a href="#列属性（列约束）" class="headerlink" title="列属性（列约束）"></a>列属性（列约束）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：create table tab ( id int, stu varchar(10), primary key (id));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    insert into tab values (null, &apos;val&apos;);</span><br><span class="line">        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    insert into tab values (default, &apos;val&apos;);    -- 此时表示强制使用默认值。</span><br><span class="line">    create table tab ( add_time timestamp default current_timestamp );</span><br><span class="line">        -- 表示将当前时间的时间戳设为默认值。</span><br><span class="line">        current_date, current_time</span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</span><br><span class="line">6. COMMENT 注释</span><br><span class="line">    例：create table tab ( id int ) comment &apos;注释内容&apos;;</span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);</span><br><span class="line">        -- 将表t1的t1_id外键关联到表t2的id字段。</span><br><span class="line">        -- 每个外键都有一个名字，可以通过 constraint 指定</span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。</span><br><span class="line">    3. restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure>

<h3 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  -- Normal Format, NF</span><br><span class="line">        - 每个表保存一个实体信息</span><br><span class="line">        - 每个具有一个ID字段作为主键</span><br><span class="line">        - ID主键 + 原子表</span><br><span class="line">    -- 1NF, 第一范式</span><br><span class="line">        字段不能再分，就满足第一范式。</span><br><span class="line">    -- 2NF, 第二范式</span><br><span class="line">        满足第一范式的前提下，不能出现部分依赖。</span><br><span class="line">        消除符合主键就可以避免部分依赖。增加单列关键字。</span><br><span class="line">    -- 3NF, 第三范式</span><br><span class="line">        满足第二范式的前提下，不能出现传递依赖。</span><br><span class="line">        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span><br><span class="line">        将一个实体信息的数据放在一个表内实现。</span><br></pre></td></tr></table></figure>

<h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</span><br><span class="line">a. select_expr</span><br><span class="line">    -- 可以用 * 表示所有字段。</span><br><span class="line">        select * from tb;</span><br><span class="line">    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span><br><span class="line">        select stu, 29+25, now() from tb;</span><br><span class="line">    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        select stu+10 as add10 from tb;</span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    -- 可以为表起别名。使用as关键字。</span><br><span class="line">        SELECT * FROM tb1 AS tt, tb2 AS bb;</span><br><span class="line">    -- from子句后，可以同时出现多个表。</span><br><span class="line">        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span><br><span class="line">        SELECT * FROM tb1, tb2;</span><br><span class="line">    -- 向优化符提示如何选择索引</span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;</span><br><span class="line">c. WHERE 子句</span><br><span class="line">    -- 从from获得的数据源中进行筛选。</span><br><span class="line">    -- 整型1表示真，0表示假。</span><br><span class="line">    -- 表达式由运算符和运算数组成。</span><br><span class="line">        -- 运算数：变量（字段）、值、函数返回值</span><br><span class="line">        -- 运算符：</span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br></pre></td></tr></table></figure>

<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  将多个select查询的结果组合成一个结果集合。</span><br><span class="line">    SELECT ... UNION [ALL|DISTINCT] SELECT ...</span><br><span class="line">    默认 DISTINCT 方式，即所有返回的行都是唯一的</span><br><span class="line">    建议，对每个SELECT查询加上小括号包裹。</span><br><span class="line">    ORDER BY 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">    需要各select查询的字段数量一样。</span><br><span class="line">    每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    - 子查询需用括号包裹。</span><br><span class="line">-- from型</span><br><span class="line">    from后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;</span><br><span class="line">-- where型</span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    select * from tb where money = (select max(money) from tb);</span><br><span class="line">    -- 列子查询</span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            select column1 from t1 where exists (select * from t2);</span><br><span class="line">    -- 行子查询</span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        select * from t1 where (id, gender) in (select id, gender from t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    -- 特殊运算符</span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure>

<h3 id="连接查询-join"><a href="#连接查询-join" class="headerlink" title="连接查询(join)"></a>连接查询(join)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line">-- 内连接(inner join)</span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line">    -- 交叉连接 cross join</span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        select * from tb1 cross join tb2;</span><br><span class="line">-- 外连接(outer join)</span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    -- 左外连接 left join</span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    -- 右外连接 right join</span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line">-- 自然连接(natural join)</span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br><span class="line">    </span><br><span class="line">select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;</span><br></pre></td></tr></table></figure>

<p>导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据</span><br><span class="line"> </span><br><span class="line">load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据</span><br><span class="line">    生成的数据默认的分隔符是制表符</span><br><span class="line">    local未指定，则数据文件必须在服务器上</span><br><span class="line">    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理</span><br><span class="line">-- 控制格式</span><br><span class="line">fields  控制字段格式</span><br><span class="line">默认：fields terminated by &apos;&apos; enclosed by &apos;&apos; escaped by &apos;&apos;</span><br><span class="line">    terminated by &apos;string&apos;  -- 终止</span><br><span class="line">    enclosed by &apos;char&apos;      -- 包裹</span><br><span class="line">    escaped by &apos;char&apos;       -- 转义</span><br><span class="line">    -- 示例：</span><br><span class="line">        SELECT a,b,a+b INTO OUTFILE &apos;/tmp/result.text&apos;</span><br><span class="line">        FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos;</span><br><span class="line">        LINES TERMINATED BY &apos;&apos;</span><br><span class="line">        FROM test_table;</span><br><span class="line">lines   控制行格式</span><br><span class="line">默认：lines terminated by &apos;&apos;</span><br><span class="line">    terminated by &apos;string&apos;  -- 终止</span><br></pre></td></tr></table></figure>

<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select语句获得的数据可以用insert插入。</span><br><span class="line">可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用set语法。</span><br><span class="line">    INSERT INTO tbl_name SET field=value,...；</span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (), (), ();</span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, 10+10, now());</span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    INSERT INTO tbl_name VALUES (field_value, DEFAULT);</span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    INSERT INTO tbl_name SELECT ...;</span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;</span><br></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE [TABLE] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line">1，truncate 是删除表再创建，delete 是逐条删除</span><br><span class="line">2，truncate 重置auto_increment的值。而delete不会</span><br><span class="line">3，truncate 不知道删除了几条，而delete知道。</span><br><span class="line">4，当被用于带分区的表时，truncate 会保留分区。</span><br></pre></td></tr></table></figure>

<h3 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line">-- 导出</span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] ---database DB1 [DB2 DB3...]</span><br><span class="line">mysqldump [options] --all--database</span><br><span class="line">1. 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">可以-w携带WHERE条件</span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件 &gt;</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是视图：</span><br><span class="line">    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span><br><span class="line">    视图具有表结构文件，但不存在数据文件。</span><br><span class="line">    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span><br><span class="line">    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span><br><span class="line">-- 创建视图</span><br><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于SELECT语句检索的列数</span><br><span class="line">-- 查看结构</span><br><span class="line">    SHOW CREATE VIEW view_name</span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    DROP VIEW [IF EXISTS] view_name ...</span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    ALTER VIEW view_name [(column_list)] AS select_statement</span><br><span class="line">-- 视图作用</span><br><span class="line">    1. 简化业务逻辑</span><br><span class="line">    2. 对客户端隐藏真实的表结构</span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    MERGE       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure>

<h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续SQL的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - InnoDB被称为事务安全型引擎。</span><br><span class="line">-- 事务开启</span><br><span class="line">    START TRANSACTION; 或者 BEGIN;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line">-- 事务提交</span><br><span class="line">    COMMIT;</span><br><span class="line">-- 事务回滚</span><br><span class="line">    ROLLBACK;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line">-- 事务的特性</span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line">-- 事务的实现</span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line">-- 事务的原理</span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。</span><br><span class="line">-- 注意</span><br><span class="line">    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    2. 事务不能被嵌套</span><br><span class="line">-- 保存点</span><br><span class="line">    SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">    RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br><span class="line">-- InnoDB自动提交特性设置</span><br><span class="line">    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，</span><br><span class="line">        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure>

<h3 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line">-- 锁定</span><br><span class="line">    LOCK TABLES tbl_name [AS alias]</span><br><span class="line">-- 解锁</span><br><span class="line">    UNLOCK TABLES</span><br></pre></td></tr></table></figure>

<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        INSERT：将新行插入表时激活触发程序</span><br><span class="line">        UPDATE：更改某一行时激活触发程序</span><br><span class="line">        DELETE：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line">-- 删除</span><br><span class="line">DROP TRIGGER [schema_name.]trigger_name</span><br><span class="line">可以使用old和new代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是old，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line">-- 注意</span><br><span class="line">    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line">    </span><br><span class="line">-- 字符连接函数</span><br><span class="line">concat(str1,str2,...])</span><br><span class="line">concat_ws(separator,str1,str2,...)</span><br><span class="line"> </span><br><span class="line">-- 分支语句</span><br><span class="line">if 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">else</span><br><span class="line">    执行语句</span><br><span class="line">end if;</span><br><span class="line"> </span><br><span class="line">-- 修改最外层语句结束符</span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    SQL语句</span><br><span class="line">自定义结束符号</span><br><span class="line">delimiter ;     -- 修改回原来的分号</span><br><span class="line"> </span><br><span class="line">-- 语句块包裹</span><br><span class="line">begin</span><br><span class="line">    语句块</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">-- 特殊的执行</span><br><span class="line">1. 只要添加记录，就会触发程序。</span><br><span class="line">2. Insert into on duplicate key update 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 before insert, after insert;</span><br><span class="line">    如果有重复记录并更新，会触发 before insert, before update, after update;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before insert, before update</span><br><span class="line">3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert</span><br></pre></td></tr></table></figure>

<h3 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--// 局部变量 ----------</span><br><span class="line">-- 变量声明</span><br><span class="line">    declare var_name[,...] type [default value]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。</span><br><span class="line">-- 赋值</span><br><span class="line">    使用 set 和 select into 语句为变量赋值。</span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 全局变量 ----------</span><br><span class="line">-- 定义、赋值</span><br><span class="line">set 语句可以定义并为变量赋值。</span><br><span class="line">set @var = value;</span><br><span class="line">也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。</span><br><span class="line">select @var:=20;</span><br><span class="line">select @v1:=id, @v2=name from t1 limit 1;</span><br><span class="line">select * from tbl_name where @var:=30;</span><br><span class="line">select into 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| select max(height) into @max_height from tb;</span><br><span class="line">-- 自定义变量名</span><br><span class="line">为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@var=10;</span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 控制结构 ----------</span><br><span class="line">-- if语句</span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line">end if;</span><br><span class="line">-- case语句</span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line">END</span><br><span class="line">-- while循环</span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line">end while [end_label];</span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    -- 退出循环</span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--// 内置函数 ----------</span><br><span class="line">-- 数值函数</span><br><span class="line">abs(x)          -- 绝对值 abs(-10.9) = 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="line">ceil(x)         -- 向上取整 ceil(10.1) = 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) = 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)       -- m%n m mod n 求余 10%3=1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)       -- m^n</span><br><span class="line">sqrt(x)         -- 算术平方根</span><br><span class="line">rand()          -- 随机数</span><br><span class="line">truncate(x, d)  -- 截取d位小数</span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                 -- 当前日期</span><br><span class="line">current_time();                 -- 当前时间</span><br><span class="line">date(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取日期部分</span><br><span class="line">time(&apos;yyyy-mm-dd hh:ii:ss&apos;);    -- 获取时间部分</span><br><span class="line">date_format(&apos;yyyy-mm-dd hh:ii:ss&apos;, &apos;%d %y %a %d %m %b %j&apos;); -- 格式化时间</span><br><span class="line">unix_timestamp();               -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)          -- string长度，字节</span><br><span class="line">char_length(string)     -- string的字符个数</span><br><span class="line">substring(str, position [,length])      -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])   -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)           -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position]) -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)           -- 去除前端空格</span><br><span class="line">repeat(string, count)   -- 重复count次</span><br><span class="line">rpad(string, length, pad)   --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)           -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line">-- 流程函数</span><br><span class="line">case when [condition] then result [when [condition] then result ...] [else result] end   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br><span class="line"> </span><br><span class="line">--// 存储函数，自定义函数 ----------</span><br><span class="line">-- 新建</span><br><span class="line">    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 return 返回值语句。</span><br><span class="line">-- 删除</span><br><span class="line">    DROP FUNCTION [IF EXISTS] function_name;</span><br><span class="line">-- 查看</span><br><span class="line">    SHOW FUNCTION STATUS LIKE &apos;partten&apos;</span><br><span class="line">    SHOW CREATE FUNCTION function_name;</span><br><span class="line">-- 修改</span><br><span class="line">    ALTER FUNCTION function_name 函数选项</span><br><span class="line"> </span><br><span class="line">--// 存储过程，自定义功能 ----------</span><br><span class="line">-- 定义</span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。</span><br><span class="line">-- 创建</span><br><span class="line">CREATE PROCEDURE sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line">IN，表示输入型</span><br><span class="line">OUT，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* 存储过程 */ ------------------</span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：CALL 过程名</span><br><span class="line">-- 注意</span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line">-- 参数</span><br><span class="line">IN|OUT|INOUT 参数名 数据类型</span><br><span class="line">IN      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line">OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line">-- 语法</span><br><span class="line">CREATE PROCEDURE 过程名 (参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">    过程体</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<h3 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- root密码重置</span><br><span class="line">1. 停止MySQL服务</span><br><span class="line">2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;amp;</span><br><span class="line">    [Windows] mysqld --skip-grant-tables</span><br><span class="line">3. use mysql;</span><br><span class="line">4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;</span><br><span class="line">5. FLUSH PRIVILEGES;</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">-- 增加用户</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &apos;user_name&apos;@&apos;192.168.1.1&apos;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line">-- 重命名用户</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&apos;密码&apos;)  -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&apos;密码&apos;) -- 为指定用户设置密码</span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER 用户名</span><br><span class="line">-- 分配权限/添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &apos;password&apos;]</span><br><span class="line">    - all privileges 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    GRANT ALL PRIVILEGES ON `pms`.* TO &apos;pms&apos;@&apos;%&apos; IDENTIFIED BY &apos;pms0817&apos;;</span><br><span class="line">-- 查看权限</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">    -- 查看当前用户权限</span><br><span class="line">    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限</span><br><span class="line">-- 权限层级</span><br><span class="line">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用REVOKE时，您必须指定与被授权列相同的列。</span><br><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER   -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE   -- 更改或取消已存储的子程序</span><br><span class="line">CREATE  -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE  -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW     -- 允许使用CREATE VIEW</span><br><span class="line">DELETE  -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE     -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX   -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT  -- 允许使用INSERT</span><br><span class="line">LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES  -- 未被实施</span><br><span class="line">RELOAD  -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT  -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES  -- 显示所有数据库</span><br><span class="line">SHOW VIEW   -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE  -- 允许使用UPDATE</span><br><span class="line">USAGE   -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br></pre></td></tr></table></figure>

<h3 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>

<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 /* 注释内容 */</span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 &apos;</span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;G&quot;, &quot;g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line">7. 清除已有语句：c</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman</title>
    <url>/2020/02/23/postman/</url>
    <content><![CDATA[<h1 id="一、Postman"><a href="#一、Postman" class="headerlink" title="一、Postman"></a>一、Postman</h1><ul>
<li><h2 id="postman简介"><a href="#postman简介" class="headerlink" title="postman简介"></a>postman简介</h2></li>
</ul><p>用户在开发或者调试网络程序或者是网页B/S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！Postman在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p><a id="more"></a>

<ul>
<li><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p><img src="https://s2.ax1x.com/2020/02/13/1Ot534.png" alt="1Ot534.png"></p>
<ul>
<li><p><strong>Get</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/meishi"</span>,method = RequestMethod.GET)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Foods <span class="title">meishi</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Foods food = <span class="keyword">new</span> Foods(<span class="string">"海底捞"</span>,<span class="string">"火锅"</span>,<span class="number">300</span>);</span><br><span class="line">       <span class="keyword">return</span> food;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1ODEeH.png" alt="1ODEeH.png"></p>
</li>
<li><p><strong>Get带参数（占位符获取）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*占位符的使用*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/meishi/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishi01</span><span class="params">(@PathVariable (value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span><span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"四川小炒"</span>, <span class="string">"尖椒肉丝"</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1Os5od.png" alt="1Os5od.png"></p>
</li>
<li><p><strong>Post</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*  数据的添加操作 */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishiAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"meishi add action!"</span>);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"陕西面馆"</span>,<span class="string">"户县软面"</span>,<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1OyPS0.png" alt="1OyPS0.png"></p>
</li>
<li><p><strong>Put</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*修改操作*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/update/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishiPut</span><span class="params">(@PathVariable (value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span><span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"meishi update  action!"</span> + id);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"四川小炒"</span>,<span class="string">"青椒肉丝"</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1Oy4XT.png" alt="1Oy4XT.png"></p>
<p>业务逻辑代码（控制台打印）结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">meishi update  action!<span class="number">123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Delete</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Foods <span class="title">meishiDelete</span><span class="params">(@PathVariable (value = <span class="string">"id"</span>,required = <span class="keyword">true</span>)</span><span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"meishi delete  action!"</span> + id);</span><br><span class="line">    Foods food = <span class="keyword">new</span> Foods(<span class="string">"四川小炒"</span>,<span class="string">"青椒肉丝"</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> food;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/13/1O6nHg.png" alt="1O6nHg.png"></p>
<p>业务逻辑代码（控制台打印）结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">meishi delete  action!<span class="number">123</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="二、AJAX"><a href="#二、AJAX" class="headerlink" title="二、AJAX"></a>二、AJAX</h1><ul>
<li><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</strong> </p>
<p> AJAX = 异步 JavaScript 和 XML。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。</p>
<p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
</li>
<li><h3 id="SpringMVC中AJAX的应用"><a href="#SpringMVC中AJAX的应用" class="headerlink" title="SpringMVC中AJAX的应用"></a>SpringMVC中AJAX的应用</h3><p>前后端交互中使用json数据格式，需要导入json的相关依赖</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>工具</category>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ospf组网实验</title>
    <url>/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="1、网络拓扑图"><a href="#1、网络拓扑图" class="headerlink" title="1、网络拓扑图"></a>1、网络拓扑图</h1><p><img src="https://s1.ax1x.com/2020/03/22/85DWGD.png" alt="85DWGD.png"></p><h1 id="2、实验目的"><a href="#2、实验目的" class="headerlink" title="2、实验目的"></a>2、实验目的</h1><ul>
<li>OSPF的基本配置（静态路由及动态路由）</li>
<li>OSPF协议报文交互过程</li>
<li>区域划分</li>
</ul><h1 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h1><h2 id="3-1-连接拓扑并配置PC机的IP及网关"><a href="#3-1-连接拓扑并配置PC机的IP及网关" class="headerlink" title="3.1 连接拓扑并配置PC机的IP及网关"></a>3.1 连接拓扑并配置PC机的IP及网关</h2><p>PC1配置如下：（其他PC同理）</p><p><img src="https://s1.ax1x.com/2020/03/22/85shDA.png" alt="PC1"></p><h2 id="3-2-配置路由器的各个端口"><a href="#3-2-配置路由器的各个端口" class="headerlink" title="3.2 配置路由器的各个端口"></a>3.2 配置路由器的各个端口</h2><h3 id="3-2-1-AR3端口配置"><a href="#3-2-1-AR3端口配置" class="headerlink" title="3.2.1 AR3端口配置"></a>3.2.1 AR3端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R3</span></span><br><span class="line"><span class="meta">[R3]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R3-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.4.254 24</span></span><br><span class="line"><span class="attr">[R3-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:23:11-08:00 R3 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="meta">[R3-GigabitEthernet0/0/0]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R3]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R3-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.34.4 24</span></span><br></pre></td></tr></table></figure><a id="more"></a>





<h3 id="3-2-2-AR4端口配置"><a href="#3-2-2-AR4端口配置" class="headerlink" title="3.2.2 AR4端口配置"></a>3.2.2 AR4端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R4</span></span><br><span class="line"><span class="meta">[R4]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R4-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.34.3 24</span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:24:31-08:00 R4 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="meta">[R4]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R4-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.13.2 24</span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:24:52-08:00 R4 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R4-GigabitEthernet0/0/1]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-AR5端口配置"><a href="#3-2-3-AR5端口配置" class="headerlink" title="3.2.3 AR5端口配置"></a>3.2.3 AR5端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;Huawei&gt;sys</span>	<span class="string"></span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.	</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R5</span></span><br><span class="line"><span class="meta">[R5]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.13.1 24</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:25:55-08:00 R5 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/0]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R5]interface</span>  <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.12.1 24</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:26:19-08:00 R5 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R5-GigabitEthernet0/0/1]quit</span></span><br><span class="line"><span class="meta">[R5]interface</span> <span class="string">GigabitEthernet 0/0/2</span></span><br><span class="line"><span class="meta">[R5-GigabitEthernet0/0/2]ip</span> <span class="string">address 192.168.11.1 24</span></span><br><span class="line"><span class="attr">[R5-GigabitEthernet0/0/2]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:26:53-08:00 R5 %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/2 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R5-GigabitEthernet0/0/2]quit</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-4-AR6端口配置"><a href="#3-2-4-AR6端口配置" class="headerlink" title="3.2.4 AR6端口配置"></a>3.2.4 AR6端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R6</span></span><br><span class="line"><span class="meta">[R6]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R6-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.12.2 24</span></span><br><span class="line"><span class="attr">[R6-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:28:20-08:00 R6 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="meta">[R6-GigabitEthernet0/0/0]quit</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R6]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R6-GigabitEthernet0/0/1]ip</span> <span class="string">address 192.168.2.254 24</span></span><br><span class="line"><span class="attr">[R6-GigabitEthernet0/0/1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:28:47-08:00 R6 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R6-GigabitEthernet0/0/1]quit</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-AR7端口配置"><a href="#3-2-5-AR7端口配置" class="headerlink" title="3.2.5 AR7端口配置"></a>3.2.5 AR7端口配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">R7</span></span><br><span class="line"><span class="meta">[R7]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R7-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.11.2 24</span></span><br><span class="line"><span class="attr">[R7-GigabitEthernet0/0/0]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:29:26-08:00 R7 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/0 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R7-GigabitEthernet0/0/0]quit</span></span><br><span class="line"><span class="meta">[R7]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[R7-GigabitEthernet0/0/1]ip</span> <span class="string">address 1.1.1.254 24</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:29:54-08:00 R7 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP </span></span><br><span class="line"><span class="attr">on</span> <span class="string">the interface GigabitEthernet0/0/1 has entered the UP state. </span></span><br><span class="line"><span class="attr">[R7-GigabitEthernet0/0/1]quit</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-配置OSPF区域"><a href="#3-3-配置OSPF区域" class="headerlink" title="3.3 配置OSPF区域"></a>3.3 配置OSPF区域</h2><h3 id="3-3-1-在AR5上进行如下配置"><a href="#3-3-1-在AR5上进行如下配置" class="headerlink" title="3.3.1 在AR5上进行如下配置"></a>3.3.1 在AR5上进行如下配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R5]ospf</span> <span class="string">router-id 1.1.1.1  //指定AR7在OSPF中的ID</span></span><br><span class="line"><span class="meta">[R5-ospf-1]area</span> <span class="string">0 //进入骨干区域area 0</span></span><br><span class="line"><span class="meta">[R5-ospf-1-area-0.0.0.0]network</span> <span class="string">192.168.12.0 0.0.0.255 //宣告网络192.168.12.0</span></span><br><span class="line"><span class="meta">[R5-ospf-1-area-0.0.0.0]quit</span>  <span class="string">//返回上一级</span></span><br><span class="line"><span class="meta">[R5-ospf-1]area</span> <span class="string">1 //进入非骨干区域area 1</span></span><br><span class="line"><span class="meta">[R5-ospf-1-area-0.0.0.1]network</span> <span class="string">192.168.13.0 0.0.0.255 //宣告网络192.168.13.0</span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:34:59-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:07-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=ExStart)</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:07-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Ex</span></span><br><span class="line"><span class="meta">change)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:07-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[6]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Load</span></span><br><span class="line"><span class="meta">ing)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[7]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full) </span></span><br><span class="line"></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:59-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[8]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:04-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[9]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=ExStart)</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:04-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[10]:Neighbor changes ev</span></span><br><span class="line"><span class="attr">ent</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neig</span></span><br><span class="line"><span class="attr">hborEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=E</span></span><br><span class="line"><span class="meta">xchange)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:05-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[11]:Neighbor changes ev</span></span><br><span class="line"><span class="attr">ent</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neig</span></span><br><span class="line"><span class="attr">hborEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loa</span></span><br><span class="line"><span class="meta">ding)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R5-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:05-08:00 R5 %%01OSPF/4/NBR_CHANGE_E(l)[12]:Neighbor changes ev</span></span><br><span class="line"><span class="attr">ent</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=2.13.168.192, Neig</span></span><br><span class="line"><span class="attr">hborEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-在AR4上进行如下配置"><a href="#3-3-2-在AR4上进行如下配置" class="headerlink" title="3.3.2 在AR4上进行如下配置"></a>3.3.2 在AR4上进行如下配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R4]osp</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R4]ospf</span> <span class="string">router-id 3.3.3.3</span></span><br><span class="line"><span class="meta">[R4-ospf-1]area</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R4-ospf-1-area-0.0.0.1]network</span> <span class="string">192.168.13.0 0.0.0.255</span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way) </span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart) </span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Ex</span></span><br><span class="line"><span class="meta">change)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Load</span></span><br><span class="line"><span class="meta">ing)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R4-ospf-1-area-0.0.0.1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:36:06-08:00 R4 %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.13.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-在AR6上进行如下配置"><a href="#3-3-3-在AR6上进行如下配置" class="headerlink" title="3.3.3 在AR6上进行如下配置"></a>3.3.3 在AR6上进行如下配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R6]ospf</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R6]ospf</span> <span class="string">router-id 2.2.2.2</span></span><br><span class="line"><span class="meta">[R6-ospf-1]area</span> <span class="string">0</span></span><br><span class="line"><span class="meta">[R6-ospf-1-area-0.0.0.0]network</span> <span class="string">192.168.12.0 0.0.0.255</span></span><br><span class="line"><span class="attr">[R6-ospf-1-area-0.0.0.0]quit</span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) </span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way) </span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:08-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart) </span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:09-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Ex</span></span><br><span class="line"><span class="meta">change)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:09-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Load</span></span><br><span class="line"><span class="meta">ing)</span> <span class="string"></span></span><br><span class="line"><span class="attr">[R6-ospf-1]</span></span><br><span class="line"><span class="attr">Mar</span> <span class="string">22 2020 14:35:09-08:00 R6 %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes eve</span></span><br><span class="line"><span class="attr">nt</span>: <span class="string">neighbor status changed. (ProcessId=256, NeighborAddress=1.12.168.192, Neigh</span></span><br><span class="line"><span class="attr">borEvent</span>=<span class="string">LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full) </span></span><br><span class="line"></span><br><span class="line"><span class="attr">[R6-ospf-1]quit</span></span><br></pre></td></tr></table></figure>

<p>验证：</p>
<p>使用<strong>display ospf brief</strong>命令用来查看OSPF的概要信息。</p>
<p>AR5的概要如下图：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/85xqRf.png" alt="85xqRf.png"></p>
<p>AR4的概要如下图：</p>
<p> <img src="https://s1.ax1x.com/2020/03/22/85zFzT.png" alt="85zFzT.png"></p>
<p>AR6的概要如下图：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/85zmw9.png" alt="85zmw9.png"></p>
<p> 由上图可知，AR5为ABR路由器，AR4因为连接了外部路由所以为ASBR路由器。 </p>
<h2 id="3-4-验证area-0与-area-1之间的路由是否实现区域内互通"><a href="#3-4-验证area-0与-area-1之间的路由是否实现区域内互通" class="headerlink" title="3.4  验证area 0与 area 1之间的路由是否实现区域内互通"></a>3.4  验证area 0与 area 1之间的路由是否实现区域内互通</h2><p>使用display ip routing-table查看AR4的路由表信息如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8Iri4K.png" alt="8Iri4K.png"></p>
<p>使用display ip routing-table查看AR6的路由表信息如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8IrVjH.png" alt="8IrVjH.png"></p>
<p> 由上图可知，AR4与AR6都有一条去往对方的ospf路由条目。所以area 0与area 1之间的路由，都是可以ping通的。 </p>
<h2 id="3-5-默认路由、静态路由及直连路由的配置"><a href="#3-5-默认路由、静态路由及直连路由的配置" class="headerlink" title="3.5 默认路由、静态路由及直连路由的配置"></a>3.5 默认路由、静态路由及直连路由的配置</h2><p> 由于AR5去往外网，需要配置一条默认路由，并且需要在进程ospf 1中进行默认路由注入<br>同样AR4连接了外部路由，也需要在进程ospf 1中注入静态路由，AR6则需要注入直连路由<br>配置命令如下 </p>
<h3 id="3-5-1-在AR5上配置默认路由并注入ospf中"><a href="#3-5-1-在AR5上配置默认路由并注入ospf中" class="headerlink" title="3.5.1 在AR5上配置默认路由并注入ospf中"></a>3.5.1 在AR5上配置默认路由并注入ospf中</h3><p>命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R5]ip</span> <span class="string">route-static 0.0.0.0 0.0.0.0 192.168.11.2</span></span><br><span class="line"><span class="meta">[R5]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R5-ospf-1]default-route-advertise</span> <span class="string">always cost 200 type 1</span></span><br><span class="line"><span class="attr">[R5-ospf-1]quit</span></span><br><span class="line"><span class="attr">[R5]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-2-在AR4上配置静态路由并注入ospf中"><a href="#3-5-2-在AR4上配置静态路由并注入ospf中" class="headerlink" title="3.5.2 在AR4上配置静态路由并注入ospf中"></a>3.5.2 在AR4上配置静态路由并注入ospf中</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;R4&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[R4]ip</span> <span class="string">route-static 192.168.4.0 24 192.168.34.4	</span></span><br><span class="line"><span class="meta">[R4]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R4-ospf-1]import-route</span> <span class="string">static cost 150 type 2</span></span><br><span class="line"><span class="attr">[R4-ospf-1]quit</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-3-在AR6上注入直连路由"><a href="#3-5-3-在AR6上注入直连路由" class="headerlink" title="3.5.3 在AR6上注入直连路由"></a>3.5.3 在AR6上注入直连路由</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;R6&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[R6]</span>	<span class="string"></span></span><br><span class="line"><span class="meta">[R6]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[R6-ospf-1]import-route</span>  <span class="string">direct cost 50 type 2</span></span><br><span class="line"><span class="attr">[R6-ospf-1]quit</span></span><br></pre></td></tr></table></figure>

<p>命令解释：</p>
<p>命令格式如下：</p>
<p><strong>import-route</strong> <em>protocol</em> [ <em>process-id</em>  ] [ <strong>cost</strong> <em>cost</em> |  <strong>type</strong> <em>type</em> |  <strong>tag</strong> <em>tag</em> |  <strong>route-policy</strong> <em>route-policy-name</em> ] </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数说明</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td><em>protocol</em></td>
<td>可引入的源路由协议。</td>
<td>目前可为<strong>direct</strong>、<strong>bgp</strong>、<strong>unr</strong>、<strong>static</strong>、<strong>ripng</strong>、<strong>isis</strong>或<strong>ospfv3</strong>。</td>
</tr>
<tr>
<td><em>process-id</em></td>
<td>引入的源路由协议进程号，当引入路由协议为<strong>ripng</strong>、<strong>isis</strong>或<strong>ospfv3</strong>时，需要指定该值。</td>
<td>整数形式，取值范围是1～65535。</td>
</tr>
<tr>
<td><strong>cost</strong> <em>cost</em></td>
<td>引入路由的开销值。</td>
<td>整数形式，取值范围是1～16777214。</td>
</tr>
<tr>
<td><strong>type</strong> <em>type</em></td>
<td>引入路由的类型。</td>
<td>取值是1或2。缺省值是2。</td>
</tr>
<tr>
<td><strong>tag</strong> <em>tag</em></td>
<td>标识引入路由的tag值。</td>
<td>整数形式，取值范围是0～4294967295。缺省值是1。</td>
</tr>
<tr>
<td><strong>route-policy</strong> <em>route-policy-name</em></td>
<td>指定路由策略名称，只有满足指定匹配条件的路由才被引入。</td>
<td>字符串形式，长度范围是1～40个字符。</td>
</tr>
</tbody></table>
<p>命令格式如下：</p>
<p><strong>default-route-advertise</strong> [  <strong>always</strong> | <strong>cost</strong> <em>cost</em> | <strong>type</strong> <em>type</em> | <strong>tag</strong> <em>tag</em> | <strong>route-policy</strong> <em>route-policy-name</em> ] </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数说明</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td><strong>always</strong></td>
<td>无论本机是否存在激活的非OSPFv3缺省路由，都会产生并发布一个描述缺省路由的LSA。配置了<strong>always</strong>参数的交换机不再计算来自其他交换机的缺省路由。如果没有指定该关键字，本机路由表中必须有激活的非OSPFv3缺省路由时才生成缺省路由的LSA。</td>
<td>-</td>
</tr>
<tr>
<td><strong>cost</strong> <em>cost</em></td>
<td>指定该ASE LSA的度量值。</td>
<td>整数形式，取值范围是1～16777214。</td>
</tr>
<tr>
<td><strong>type</strong> <em>type</em></td>
<td>指定该ASE LSA的类型。  Type-1：第一类外部路由，到第一类外部路由的开销=本交换机到相应的ASBR的开销+ASBR到该路由目的地址的开销。 Type-2：第二类外部路由，到第二类外部路由的开销=ASBR到该路由目的地址的开销。</td>
<td>整数形式，取值范围是1～2。缺省值是2。</td>
</tr>
<tr>
<td><strong>tag</strong> <em>tag</em></td>
<td>标识VPN引入路由的tag值。</td>
<td>整数形式，取值范围是0～4294967295。缺省值是1。</td>
</tr>
<tr>
<td><strong>route-policy</strong> <em>route-policy-name</em></td>
<td>通过路由策略，实现在路由表中有匹配的非OSPFv3产生的缺省路由表项时，按路由策略所配置的参数发布缺省路由。</td>
<td>字符串形式，取值范围是1～40。</td>
</tr>
</tbody></table>
<p>验证：</p>
<p>使用<strong>display ospf routing</strong>命令用来显示OSPF路由表的信息。。</p>
<p>AR4的路由表信息如下:</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8IpZ5R.png" alt="8IpZ5R.png"></p>
<p>AR6的路由表信息如下:</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8oC6Qx.png" alt="8oC6Qx.png"></p>
<p>AR5的路由表信息如下:</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8oCGzq.png" alt="8oCGzq.png"></p>
<p>由上图可知，AR5学到了192.168.2.0和192.168.4.0的路由<br>                       AR6学到了0.0.0.0/0和192.168.4.0的路由<br>                       AR4学到了0.0.0.0/0和192.168.2.0的路由<br> 综上，路由注入成功。</p>
<h2 id="3-6-验证及报文捕获分析"><a href="#3-6-验证及报文捕获分析" class="headerlink" title="3.6 验证及报文捕获分析"></a>3.6 验证及报文捕获分析</h2><h3 id="3-6-1-验证"><a href="#3-6-1-验证" class="headerlink" title="3.6.1 验证"></a>3.6.1 验证</h3><p>PC1 Ping PC2 并在AR5的GE0/0/0端口抓包 结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/8oipUe.png" alt="8oipUe.png"></p>
<p>分析原因及解决方案：</p>
<p>路由虽然注入成功，但是PC1仍然ping不通PC2，因为PC2知道了去往192.168.4.0网段的路由，但是AR3是外部路由，它并不知道如何去往ospf 内部，所以需要在AR3上配置一条默认路由，下一跳为192.168.34.3</p>
<p>在AR3上配置如下命令：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;R3&gt;sys</span></span><br><span class="line"><span class="attr">Enter</span> <span class="string">system view, return user view with Ctrl+Z.</span></span><br><span class="line"><span class="meta">[R3]ip</span> <span class="string">route-static 0.0.0.0 0 192.168.34.3</span></span><br></pre></td></tr></table></figure>

<p>再次进行Ping操作并在AR5的GE0/0/0端口开始捕获报文并重启该端口后的结果如下：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/2.png" class title="PC1 Ping PC2">

<p>发现可以Ping通，并发现如下几种类型的OSPF报文：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/1.png" class>

<h3 id="3-6-2-报文分析"><a href="#3-6-2-报文分析" class="headerlink" title="3.6.2 报文分析"></a>3.6.2 报文分析</h3><h4 id="3-6-2-1-LSA报文分析"><a href="#3-6-2-1-LSA报文分析" class="headerlink" title="3.6.2.1 LSA报文分析"></a>3.6.2.1 LSA报文分析</h4><ol>
<li><p><strong>报文的分类</strong></p>
<ul>
<li><strong>Router-LSA（第1类）</strong>， 由每个路由器生成，描述了路由器的链路状态和花费，传递到整个区域</li>
<li><strong>Network-LSA （第2类）</strong> ，由DR生成，描述了本网络的链路状态，传递到整个区域</li>
<li><strong>Net-Summary-LSA （第3类）</strong> ，由ABR生成，描述了到区域内某一网络的路由，传递到相关区域</li>
<li><strong>Asbr-Summary-LSA （第4类）</strong> ，由ABR生成，描述了到ASBR的路由，传递到相关区域</li>
<li><strong>AS-External-LSA （第5类）</strong> ，由ASBR生成，描述了到AS外部的路由，传递到整个AS（STUB区域除外）</li>
</ul>
</li>
<li><p>报文分析：</p>
<p>查看LS update报文结果如下图：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/update.png" class title="LS_update">

<p>发现四种类型的LSA，对其进行逐一分析：</p>
<p><strong>Router-LSA：</strong></p>
<p>报文格式如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Router%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" class title="Router报文格式">

<p> 格式字段解释如下图： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Ro1.png" class title="Ro1">

<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Ro2.png" class title="Ro2">

<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Ro3.png" class title="Ro3">

<p>捕获的具体字段如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/Router.png" class title="Router">

<p><strong>Network LSA：</strong></p>
<p>报文格式如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NW%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" class title="NW报文格式">

<p> 格式字段解释如下图所示： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NW1.png" class title="NW1">

<p>捕获的具体字段如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NW.png" class title="NW">

<p> <strong>Summary LSA：</strong> </p>
<p>Network Summary LSA（Type3）:描述区域内所有网段的路由，并通告给其他相关区域。</p>
<p>​     ASBR Summary LSA（Type4）:描述到ASBR的路由，通告给除ASBR所在区域的其他相关区域。</p>
<p>​     Type3和Type4的LSA有相同的格式，他们都是由ABR产生。</p>
<p>  Summary LSA 格式如下图所示： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/SL.png" class title="SL">

<p>  Network Summary LSA格式字段解释：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NSL.png" class title="NSL">

<p> ASBR Summary LSA格式字段解释： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/ALS.png" class title="ALS">

<p>捕获的具体字段如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/NASL.png" class title="NALS">

<p> <strong>AS-External LSA:</strong> </p>
<p>AS External LSA（Type5）:由ASBR产生，描述到AS外部的路由，这是五种LSA中，</p>
<p>​    唯一一种通告  给所有区域（除了Stub区域和NSSA区域）的LSA。</p>
<p>  AS External LSA格式如下图所示：</p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/AEL.png" class title="AEL"> 

<p>  AS-External LSA格式字段解释： </p>
<img src="/2020/03/22/ospf%E7%BB%84%E7%BD%91%E5%AE%9E%E9%AA%8C/AEL1.png" class title="AEL1"> 

<p>没抓到这个类型的字段。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>OSPF实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-20.04-mate-for-server</title>
    <url>/2020/06/16/ubuntu-20-04-mate-for-server/</url>
    <content><![CDATA[<h1 id="一、换源"><a href="#一、换源" class="headerlink" title="一、换源"></a>一、换源</h1><p>在设置中选择系统设置，找到Software Updater，点击进入，再点击Settings按钮，</p><p><img src="https://i.loli.net/2020/06/16/T2oMNG86Xr5wILW.png" alt="image-20200616092916772"></p><p><img src="https://i.loli.net/2020/06/16/8OU6e1VxjuyDHm7.png" alt="image-20200616093031282"></p><p><img src="https://i.loli.net/2020/06/16/qAn1YptUaRHFrLP.png" alt="image-20200616093227130"></p><p><img src="https://i.loli.net/2020/06/16/Y4IUR98sBaWo5Su.png" alt="image-20200616093307249"></p><p>选择Reload重新加载源。</p><p>在终端输入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>更新源和软件。</p><h1 id="二、为ensp搭建各种服务器"><a href="#二、为ensp搭建各种服务器" class="headerlink" title="二、为ensp搭建各种服务器"></a>二、为ensp搭建各种服务器</h1><h2 id="2-1准备工作"><a href="#2-1准备工作" class="headerlink" title="2.1准备工作"></a>2.1准备工作</h2><p><strong>关闭防火墙，测试网路连通性。</strong></p><a id="more"></a>










<p>关闭命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span> //关闭防火墙</span><br><span class="line">sudo ufw status  //查看防护墙状态</span><br></pre></td></tr></table></figure>

<p>win也需要关闭防护墙。</p>
<p>测试连通性：</p>
<p><img src="https://i.loli.net/2020/06/16/DbQxdyCL5vPEltU.png" alt="image-20200616094011730"></p>
<h2 id="2-2搭建web服务器"><a href="#2-2搭建web服务器" class="headerlink" title="2.2搭建web服务器"></a>2.2搭建web服务器</h2><p><strong>安装nginx服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p><strong>调整防火墙</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw app list</span><br><span class="line">  CUPS</span><br><span class="line">  Nginx Full</span><br><span class="line">  Nginx HTTP</span><br><span class="line">  Nginx HTTPS</span><br></pre></td></tr></table></figure>

<p>正如你所看到的，Nginx有三个配置文件可用：Nginx Full、Nginx HTTP、Nginx HTTPS</p>
<p>Nginx Full ：此配置文件打开端口80（正常，未加密的网络流量）和端口443（TLS / SSL加密流量）</p>
<p>Nginx HTTP ：此配置文件仅打开端口80（正常，未加密的网络流量）</p>
<p>Nginx HTTPS ：此配置文件仅打开端口443（TLS / SSL加密流量）</p>
<p>输入以下命令以查看防火墙状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p>可以看到允许通过的服务有哪些：</p>
<p><img src="https://i.loli.net/2020/06/16/NhQq761kTlcia8e.png" alt="image-20200616154638847"></p>
<p>Ubuntu 20.04上的Nginx默认启用了一个服务器模块，该模块被配置为在<code>/var/www/html</code>目录下提供文档。将写好的项目复制至/var/www/html目录下。</p>
<p>测试：在浏览器中输入<a href="http://192.168.10.121" target="_blank" rel="noopener">http://192.168.10.121</a></p>
<p><img src="https://i.loli.net/2020/06/16/3Ice8vWAhPpoCO2.png" alt="image-20200616154344810"></p>
<h2 id="2-3FTP服务器"><a href="#2-3FTP服务器" class="headerlink" title="2.3FTP服务器"></a>2.3FTP服务器</h2><p>服务为win10提供，服务端配置：</p>
<p><img src="https://i.loli.net/2020/06/16/eYyRwafv29LzCFJ.png" alt="image-20200616155309043"></p>
<p>ensp中连接如下：</p>
<p><img src="https://i.loli.net/2020/06/16/7bMz1ApBlfdSEHc.png" alt="image-20200616155420223"></p>
<h2 id="2-4telnet"><a href="#2-4telnet" class="headerlink" title="2.4telnet"></a>2.4telnet</h2><p><img src="https://i.loli.net/2020/06/16/pVEIn3TKQflMb7J.png" alt="image-20200616160734107"></p>
<p>貌似已经不支持了，在ensp中有设置。</p>
<h2 id="2-5SSH安装配置"><a href="#2-5SSH安装配置" class="headerlink" title="2.5SSH安装配置"></a>2.5SSH安装配置</h2><p> <strong>使用apt工具下载并安装openssh-server</strong></p>
<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/RCn267brXeU4lEv.png" alt="image-20200616161058823"></p>
<p>等待安装结束即可。然后再次查看服务有没有启动，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://i.loli.net/2020/06/16/io7a8QJWSdN2kOj.png" alt="image-20200616161259612"></p>
<p>再次确认或者没有图中的结果，使用如下命令来启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh status</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/LwJMf76dZ4t8DyC.png" alt="image-20200616161426284"></p>
<p>ssh服务端已经开启，在xshell中进行远程登陆测试。</p>
<p><img src="https://i.loli.net/2020/06/16/8BZLinq6XrVH7QY.png" alt="image-20200616161545290"></p>
<p>在主机栏填入开启ssh服务端的主机ip，点击确定进入如下界面：</p>
<p><img src="https://i.loli.net/2020/06/16/kxpV1fbLr6HdZcm.png" alt="image-20200616161709692"></p>
<p>这是密钥和算法协商阶段：</p>
<p>客户请求连接-服务器将对应公钥、生成会话ID发给客户端、客户端生成会话密钥，并将会话密钥与会话ID进行xor逻辑运算后的值，使用服务器公钥加密发送给服务器、服务器采用私钥解密后，通过xor运算得到会话密钥-之后所有传输都会被会话密钥加密与解密。</p>
<p>点击接受并保存后，进入认证阶段：</p>
<p>password认证-输入用户名与密码，服务器验证是否合法。</p>
<p>publickey认证-数字签名认证，客户端发送用户名、公共密钥、公共密钥算法的publickey认证请求给服务器端，服务器验证是否合法。使用ssh-keygen程序生成公钥 id_dsa.pub 和私钥 id_dsa。</p>
<p><img src="https://i.loli.net/2020/06/16/7YbxIvFL9Jg8psr.png" alt="image-20200616161924769"></p>
<p><img src="https://i.loli.net/2020/06/16/4PrdZ6DmenCAfg8.png" alt="image-20200616161949478"></p>
<p>输入正确的用户名密码后，xshell界面如下：</p>
<p><img src="https://i.loli.net/2020/06/16/9rHSfgCceAbZLaT.png" alt="image-20200616162022133"></p>
<h2 id="2-6VPN服务器（PPTP）"><a href="#2-6VPN服务器（PPTP）" class="headerlink" title="2.6VPN服务器（PPTP）"></a>2.6VPN服务器（PPTP）</h2><h3 id="安装PPTPD"><a href="#安装PPTPD" class="headerlink" title="安装PPTPD"></a>安装PPTPD</h3><p>第一步当然是安装这个软件包了。（下面所有的代码，如果需要修改的，我会特别标记出来的，其他都表示可以直接复制）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/igebY2qfOFyJ81I.png" alt="image-20200617100516932"></p>
<h3 id="编辑PPTPD-CONF文件"><a href="#编辑PPTPD-CONF文件" class="headerlink" title="编辑PPTPD.CONF文件"></a>编辑PPTPD.CONF文件</h3><p>打开这个文件并进入编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/IXBjQ6aAMZSmh9t.png" alt="image-20200617102931169"></p>
<p>localip:表示PPTP服务地址及本机IP。</p>
<p>remoteip：当客户机通过pptp连接到vpn后所能拿到的ip地址范围，默认从第一个开始分配给客户</p>
<h3 id="修改CHAP-SECRETS文件，添加可以登录的用户"><a href="#修改CHAP-SECRETS文件，添加可以登录的用户" class="headerlink" title="修改CHAP-SECRETS文件，添加可以登录的用户"></a>修改CHAP-SECRETS文件，添加可以登录的用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Noq3EBz6cGMklhQ.png" alt="image-20200617101228399"></p>
<p>client：连接用户名<br>server：连接的服务<br>secret：连接密码<br>IP addresses：可连接的IP，*表示所有</p>
<h3 id="修改远程连接用户的DNS"><a href="#修改远程连接用户的DNS" class="headerlink" title="修改远程连接用户的DNS"></a>修改远程连接用户的DNS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Gsk7SRaUxf6dnJX.png" alt="image-20200617101414509"></p>
<h3 id="开启网络转发功能"><a href="#开启网络转发功能" class="headerlink" title="开启网络转发功能"></a>开启网络转发功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctil.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/SEI5OkULVhHiyjJ.png" alt="image-20200617101751708"></p>
<p>去掉两行对应的注释，提供ipv4和ipv6的转发功能。</p>
<p>更新配置命令如下：</p>
<p><img src="https://i.loli.net/2020/06/17/MLXForGbRWD2CgK.png" alt="image-20200617102036260"></p>
<h3 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h3><p><strong>开启gre协议</strong></p>
<p>输入下面的指令，开启gre协议，并打开服务器47,1723号端口。</p>
<p>使用VPN需要开启gre协议，而gre协议需要使用服务器的47和1723号端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p gre -j ACCEPT </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 1723 -j ACCEPT   </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 47 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>开启NAT转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.10.121/24 -o ens33 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>上面指令中ip要填写部署pptp步骤中第1.2步中设置的localip，也就是虚拟vpn的主机的ip。</p>
<p>ens33表示当前服务器的网卡，这里不同机器可能不一样，可以通过ifconfig指令进行查询，之后修改成对应的设备名称即可。<br>POSTROUTING参数表示，指定当数据包离开服务器的时候，对数据包进行处理。<br>MASQUERADE这个参数的意思就是即将从服务器封包出去(-o)的那块网卡上的IP，由于实验室的服务器是固定ip，所以这里修改成服务器的虚拟ip也是可以的。</p>
<p>通过上面的指令，iptables做了这样一件事情：将所有从服务器上传出的源地址为10.1.1.1-255之中的ip数据包的源ip改成服务器的ip。如果不做这个操作，服务器通过VPN传回的数据包将不包含服务器自己的源ip，所以远程访问主机的回复ip包会丢失。</p>
<h3 id="重启PPTP服务并查看状态"><a href="#重启PPTP服务并查看状态" class="headerlink" title="重启PPTP服务并查看状态"></a>重启PPTP服务并查看状态</h3><p><img src="https://i.loli.net/2020/06/17/2b8jyBToNMIUscR.png" alt="image-20200617103114973"></p>
<h3 id="配置客户端，连接VPN"><a href="#配置客户端，连接VPN" class="headerlink" title="配置客户端，连接VPN"></a>配置客户端，连接VPN</h3><p><img src="https://i.loli.net/2020/06/17/oij7bdWNUpSvr6g.png" alt="image-20200617110012250"></p>
<p>进行连接测试</p>
<p><img src="https://i.loli.net/2020/06/17/2l78AzI6rQqgkSM.jpg" alt="img"></p>
<p>连接成功之后查看一下获取到的IP地址</p>
<p><img src="https://i.loli.net/2020/06/17/Ka4FzQTliIydRk1.png" alt="image-20200617235356285"></p>
]]></content>
      <categories>
        <category>linux</category>
        <category>ubuntu-20.04-mate</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SNMP实验</title>
    <url>/2020/05/24/snmp/</url>
    <content><![CDATA[<h1 id="1、实验拓扑"><a href="#1、实验拓扑" class="headerlink" title="1、实验拓扑"></a>1、实验拓扑</h1><p><a href="https://imgchr.com/i/tCOoR0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/26/tCOoR0.png" alt="tCOoR0.png"></a></p><h1 id="2、实验要求"><a href="#2、实验要求" class="headerlink" title="2、实验要求"></a>2、实验要求</h1><ol>
<li>通过eNSP里的“云”，可以使得虚拟环境中的设备访问“本机”。在本机中运行MIB Browser，访问eNSP虚拟环境中设备的MIB库。 </li>
<li>浏览设备MIB树的各个节点 。</li>
<li>还要捕获分组 ，分析协议交互过程。</li>
<li>自己手工编码/解码分组中的数据。也就是ASN.1 TLV编码解码过程。 </li>
</ol><a id="more"></a>

<h1 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h1><h2 id="3-1连通性"><a href="#3-1连通性" class="headerlink" title="3.1连通性"></a>3.1连通性</h2><p>将VMware下win7操作系统中的ensp云下的路由器与主机连通。</p>
<ul>
<li><p>关闭本机和VMware下win7下的防火墙。</p>
</li>
<li><p>将VMware的网络连接模式设置为桥接模式。</p>
</li>
<li><p>查看本机ip。</p>
</li>
<li><p>云设置：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCOOZ4.png" alt="tCOOZ4.png"></p>
<p>选择本地连接（及win7的ip地址选项）。</p>
</li>
<li><p>路由器设置：</p>
<p>配置GE0/0/0端口ip为：192.168.10.222 掩码为：255.255.255.0。</p>
</li>
<li><p>测试连通性：</p>
<p>主机和云下的路由器互Ping对方IP地址，结果入下：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCOXdJ.png" alt="tCOXdJ.png"></p>
<p>云内网设备可以互通。</p>
</li>
</ul>
<h2 id="3-2-SNMP工作机制"><a href="#3-2-SNMP工作机制" class="headerlink" title="3.2 SNMP工作机制"></a>3.2 SNMP工作机制</h2><p>SNMP分为NMS和Agent两部分：</p>
<ul>
<li><p>NMS （Network Management Station,网络管理站）是运行客户端程序的工作站，目前常用的网管平台有Qidviwv. Sun NotManer和IBM NetvieI。</p>
</li>
<li><p>Agent 是运行在网络设备(如交换机)上的服务器端软件。 </p>
<p>​        NMS可以向Agent发出GetRequest、GetNextRequest和SetRequest报文, Agent 接收到NMS 的这些请求报文后，根据报文类型对管理对象(MIB, Management Information Base， 管理信息库)进行Read或Write操作，生成Response报文, 并将报文返回给NMS。</p>
<p>​       Agent在设备发生异常情况或状态改变时(如设备重新启动)，也会主动向NMS 发送Trap报文，向NMS汇报所发生的事件。  </p>
</li>
</ul>
<p><strong>注意：</strong>在此使用的是MIB  Browser 不是SNMP管理站，不能接收Trap报文,故在Agent中不用配置允许设备向管理站发送Trap报文的命令。</p>
<h2 id="3-3SNMP-Agent配置"><a href="#3-3SNMP-Agent配置" class="headerlink" title="3.3SNMP-Agent配置"></a>3.3SNMP-Agent配置</h2><p>对云下的路由器进行如下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string"></span></span><br><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string">sys-info version all</span></span><br><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string">community read public</span></span><br><span class="line"><span class="meta">[Huawei]snmp-agent</span> <span class="string">community write public</span></span><br><span class="line"><span class="meta">[Huawei]</span> <span class="string">snmp-agent sys-info contact LiSongBai-Tel:152********</span></span><br><span class="line"><span class="meta">[Huawei]</span> <span class="string">snmp-agent sys-info location ShanXi-Xi an</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4MIB-Browser使用"><a href="#3-4MIB-Browser使用" class="headerlink" title="3.4MIB-Browser使用"></a>3.4MIB-Browser使用</h2><p><img src="https://s1.ax1x.com/2020/05/26/tCXSRx.png" alt="tCXSRx.png"></p>
<ol>
<li><p>选择Agent中配置的snmp版本。</p>
</li>
<li><p>输入ensp中云下的路由器网关ip。</p>
</li>
<li><p>连接，成功如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXPsO.png" alt="tCXPsO.png"></p>
</li>
<li><p>通过GetRequest/GetNextRequest请求获取Agent的相关信息</p>
<p>通过GetRequest请求获取：</p>
<ul>
<li>获取设备名：</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXQOS.png" alt="tCXQOS.png"></p>
<ul>
<li><p>获取设备位置：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXBmF.png" alt="tCXBmF.png"></p>
</li>
</ul>
<p>通过GetNextRequest请求获取：</p>
<ul>
<li><p>获取设备的管理员信息：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCX6YR.png" alt="tCX6YR.png"></p>
<p>在sysUpTime上通过GetNextRequest请求获取sysContact的信息，结果如下：</p>
<p><a href="https://imgchr.com/i/tCXcf1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/26/tCXcf1.png" alt="tCXcf1.png"></a></p>
</li>
</ul>
</li>
<li><p>通过SetRequest请求修改设备的相关信息。</p>
<p>如：修改设备名：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXfOO.png" alt="tCXfOO.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCXvnS.png" alt="tCXvnS.png"></p>
<p>在ensp中查看路由器设备名，结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjipq.png" alt="tCjipq.png"></p>
<p>可见，修改成功。</p>
</li>
</ol>
<h2 id="3-4报文分析"><a href="#3-4报文分析" class="headerlink" title="3.4报文分析"></a>3.4报文分析</h2><p>对sysName(sysName的下一项为sysLocation)进行Get/GetNext/Set在路由器GE0/0/0端口捕获报文信息如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjnAJ.png" alt="tCjnAJ.png"></p>
<ul>
<li><p>Get-request</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjBgP.png" alt="tCjBgP.png"></p>
<p>从报文中可以看出SNMP协议底层采用UDP实现的，且Agent方的默认端口号为161，从报文中可以看出采用的SNMP版本是v2c ，社团名为public，请求id为38，值为null。</p>
</li>
<li><p>Get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCjQ91.png" alt="tCjQ91.png"></p>
<p>其他同上，响应值为415232，表示AR2。</p>
</li>
<li><p>Get-next-request</p>
<p><a href="https://imgchr.com/i/tCjsu8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/26/tCjsu8.png" alt="tCjsu8.png"></a></p>
</li>
<li><p>Get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvpDO.png" alt="tCvpDO.png"></p>
</li>
<li><p>Set-request</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvPVe.png" alt="tCvPVe.png"></p>
</li>
<li><p>Get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCviUH.png" alt="tCviUH.png"></p>
</li>
</ul>
<h2 id="3-5ASN-1编码值对应的解释"><a href="#3-5ASN-1编码值对应的解释" class="headerlink" title="3.5ASN.1编码值对应的解释"></a>3.5ASN.1编码值对应的解释</h2><p>用3.4中的get-next-request和对应的response作分析。</p>
<ul>
<li><p>get-next-request</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvF5d.png" alt="tCvF5d.png"></p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>表示SNMP协议报文(整个报文是一个SEQUENCE)</td>
</tr>
<tr>
<td>26</td>
<td>消息长度38字节(表示后面还有38个字节的内容)</td>
</tr>
<tr>
<td>02 01 01</td>
<td>协议版本(2c)(前两个字节02表示INTEGER类型01是指1个字节长度，最后的01是值01)</td>
</tr>
<tr>
<td>04</td>
<td>参数类型(OCTSTR)</td>
</tr>
<tr>
<td>06</td>
<td>群体(community)名长度</td>
</tr>
<tr>
<td>70 75 62 6c 69 63</td>
<td>群体名public的assic码值</td>
</tr>
<tr>
<td>a1</td>
<td>PUD类型get-next-request</td>
</tr>
<tr>
<td>19</td>
<td>snmp pdu的长度为25个OctStr(后面的内容25字节)</td>
</tr>
<tr>
<td>02 01 27</td>
<td>请求标识符Request ID</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-state为0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-index为0</td>
</tr>
<tr>
<td>30 0e</td>
<td>表示后面变量绑定是SEQUENCE类型14个字节长度</td>
</tr>
<tr>
<td>30 0c</td>
<td>表示(变量名1item)</td>
</tr>
<tr>
<td>06</td>
<td>表示该字段是OID类型</td>
</tr>
<tr>
<td>08</td>
<td>OID长度8字节</td>
</tr>
<tr>
<td>2b 06 01 02 01</td>
<td>1.3.6.1.2.1(标识1.3被合并为2B)</td>
</tr>
<tr>
<td>01 05 00</td>
<td>1.5.0</td>
</tr>
<tr>
<td>05 00</td>
<td>表示NULL</td>
</tr>
</tbody></table>
</li>
<li><p>get-response</p>
<p><img src="https://s1.ax1x.com/2020/05/26/tCvMVg.png" alt="tCvMVg.png"></p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>表示SNMP协议报文(整个报文是一个SEQUENCE)</td>
</tr>
<tr>
<td>32</td>
<td>消息长度50字节(表示后面还有50个字节的内容)</td>
</tr>
<tr>
<td>02 01 01</td>
<td>协议版本(2c)(前两个字节02 01 表示INTEGER类型)</td>
</tr>
<tr>
<td>04</td>
<td>参数类型(OCTSTR)</td>
</tr>
<tr>
<td>06</td>
<td>群体(community)名长度</td>
</tr>
<tr>
<td>70 75 62 6c 69 63</td>
<td>群体名public的assic码值</td>
</tr>
<tr>
<td>a2</td>
<td>PUD类型get-response</td>
</tr>
<tr>
<td>25</td>
<td>snmp pdu的长度为37个OctStr(后面的内容37字节)</td>
</tr>
<tr>
<td>02 01 27</td>
<td>请求标识符Request ID</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-state为0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-index为0</td>
</tr>
<tr>
<td>30 1a</td>
<td>表示后面变量绑定是SEQUENCE类型26个字节长度</td>
</tr>
<tr>
<td>30 18</td>
<td>表示(变量名1 item)</td>
</tr>
<tr>
<td>06</td>
<td>表示该字段是OID类型</td>
</tr>
<tr>
<td>08</td>
<td>OID长度8字节</td>
</tr>
<tr>
<td>2b 06 01 02 01</td>
<td>1.3.6.1.2.1(标识1.3被合并为2B)</td>
</tr>
<tr>
<td>01 06 00</td>
<td>1.6.0</td>
</tr>
<tr>
<td>04</td>
<td>表示这是一个字符串</td>
</tr>
<tr>
<td>0c</td>
<td>表示字符串长度为12</td>
</tr>
<tr>
<td>53 68 61 6e 58 69 2d 58 69 20 61 6e</td>
<td>表示字符串内容为“ShanXi-Xi an”</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>SNMP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>solidity学习笔记</title>
    <url>/2020/06/21/solidity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、Solidity-语言"><a href="#一、Solidity-语言" class="headerlink" title="一、Solidity 语言"></a>一、Solidity 语言</h2><p><a href="https://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener">Solidity</a> 是一种智能合约高级语言，运行在 Ethereum 虚拟机（EVM：Ethereum Virtual Machine）之上。<br> Solidity 的语法接近于 Javascript，是一种面向对象的语言，而且围绕着 Solidity 的各种开发工具链，都是使用属于 Javascript 生态系的 <a href="https://www.npmjs.com/get-npm" target="_blank" rel="noopener">npm</a> 来提供的。</p><a id="more"></a>
<blockquote>
<p>Solidity语言：<a href="http://www.tryblockchain.org" target="_blank" rel="noopener">http://www.tryblockchain.org</a><br> Solidity documentation：<a href="https://solidity.readthedocs.org" target="_blank" rel="noopener">https://solidity.readthedocs.org</a><br> GitHub：<a href="https://github.com/ethereum/solidity" target="_blank" rel="noopener">https://github.com/ethereum/solidity</a></p>
</blockquote>
<h2 id="二、编辑器"><a href="#二、编辑器" class="headerlink" title="二、编辑器"></a>二、编辑器</h2><p>我目前是使用 <a href="https://atom.io" target="_blank" rel="noopener">Atom</a> 搭配 solidity（linter-solium和autocomplete-solidity） 插件来开发。</p>
<h2 id="三、Truffle-框架"><a href="#三、Truffle-框架" class="headerlink" title="三、Truffle 框架"></a>三、Truffle 框架</h2><p><a href="http://truffleframework.com" target="_blank" rel="noopener">Truffle</a> 是针对基于以太坊的 Solidity 语言的一套开发框架，本身基于 Javascript。</p>
<h2 id="四、工具安装"><a href="#四、工具安装" class="headerlink" title="四、工具安装"></a>四、工具安装</h2><p>见另一篇博客<a href="https://lisongbai.top/2020/02/23/windows10%E6%90%AD%E5%BB%BAtruffle%E5%8F%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">win10搭建以太坊开发环境及truffle框架</a></p>
<h2 id="五、启动-Ganache客户端"><a href="#五、启动-Ganache客户端" class="headerlink" title="五、启动 Ganache客户端"></a>五、启动 Ganache客户端</h2><p><img src="https://i.loli.net/2020/06/21/5AYqy1VvoKt2DG6.png" alt="image-20200621100049242"></p>
<p>可以看到启动后自动建立了10个帐号（Accounts），与每个帐号对应的私钥（Private Key）。每个帐号中都有100个测试用的以太币（Ether）。</p>
<h2 id="六、创建初始化项目"><a href="#六、创建初始化项目" class="headerlink" title="六、创建初始化项目"></a>六、创建初始化项目</h2><p>在空目录下打开cmd输入 truffle init 构建初始化项目。</p>
<p>目录结构：</p>
<ul>
<li><code>contracts/</code>：Truffle默认的合约文件存放地址；</li>
<li><code>migrations/</code>：存放发布的脚本文件；</li>
<li><code>test/</code>：存放测试应用和合约的测试文件；</li>
<li><code>truffle.js 和 truffle-config.js</code>：Truffle的配置文件。</li>
</ul>
<h2 id="七、新建-HelloWorld-合约"><a href="#七、新建-HelloWorld-合约" class="headerlink" title="七、新建 HelloWorld 合约"></a>七、新建 HelloWorld 合约</h2><p>在 <code>contracts</code> 文件夹下新建 Demo.sol 文件，合约内容如下：</p>
<p><img src="https://i.loli.net/2020/06/21/faMwgiQSCtKsP8e.png" alt="image-20200621100413979"></p>
<p>讲解：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pragma</span> <span class="selector-tag">solidity</span> 0<span class="selector-class">.5</span><span class="selector-class">.16</span>;</span><br></pre></td></tr></table></figure>

<p>第一行指名目前使用的 solidity 版本，不同版本的 solidity 可能会编译出不同的 bytecode。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Demo&#123;</span><br><span class="line">  //构造方法</span><br><span class="line">  constructor() public &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  //sayHello  写死</span><br><span class="line">  function sayHello() public pure returns (string memory)&#123;</span><br><span class="line">    return (&quot;hello world!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //echo 接受一个参数 然后返回</span><br><span class="line">  function echo(string memory _name) public pure returns (string memory)&#123;</span><br><span class="line">    return _name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>contract</code> 关键字类似于其他语言中较常见的 <code>class</code>。因为solidity 是专为智能合约（Contact）设计的语言，声明 <code>contract</code> 后即内置了开发智能合约所需的功能。也可以把这句理解为 <code>class Demo extends Contract</code>。</p>
<p>函数的结构与其他程序类似，但如果有传入的参数或回传值，需要指定参数或回传值的类型（<code>type</code>）。</p>
<h2 id="八、编译合约"><a href="#八、编译合约" class="headerlink" title="八、编译合约"></a>八、编译合约</h2><p>现在执行 <code>truffle compile</code> 命令，我们可以将 <code>HelloWorld.sol</code> 原始码编译成 <code>Ethereum bytecode</code>：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ..`</span><br><span class="line"> `$ truffle compile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>命令运行成功后会多出一个 <code>build</code> 的目录，如下：</p>
<p><img src="https://i.loli.net/2020/06/21/PLz7U8byR25ajeQ.png" alt="image-20200621101128429"></p>
<p>build 目录</p>
<p>在 <code>HelloWorld</code> 文件夹下面的 <code>build/contracts</code> 文件夹下面会看见 <code>HelloWorld.json</code> 文件：</p>
<p><img src="https://i.loli.net/2020/06/21/6wnRoSe9gETpisV.png" alt="image-20200621101435329"></p>
<p>Demo.json</p>
<h2 id="十、修改-truffle-js-文件内容："><a href="#十、修改-truffle-js-文件内容：" class="headerlink" title="十、修改 truffle.js 文件内容："></a>十、修改 truffle.js 文件内容：</h2><p>添加以下内容到 truffle.js 文件并保存 :</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">networks</span>: &#123;</span><br><span class="line">        <span class="attribute">development</span>: &#123;</span><br><span class="line">            host:<span class="string">"localhost"</span>,</span><br><span class="line">            port:<span class="number">7545</span>,</span><br><span class="line">            network_id:<span class="string">"*"</span>  // 匹配任何network id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>修改 truffle.js 文件</p>
<h2 id="十一、部署合约"><a href="#十一、部署合约" class="headerlink" title="十一、部署合约"></a>十一、部署合约</h2><p>在 <code>migrations</code> 目录下创建移植文件：</p>
<p><img src="https://i.loli.net/2020/06/21/r9jhM3WgIS6UQpw.png" alt="image-20200621101633945"></p>
<p>创建移植文件</p>
<p>修改文件内容如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Demo = artifacts.require(<span class="string">"Demo"</span>);</span><br><span class="line"><span class="comment">//使用 artifacts.require 语句来取得准备部署的合约</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>)</span>&#123;</span><br><span class="line">  deployer.deploy(Demo);</span><br><span class="line">  <span class="comment">//使用deployer.deploy 语句将合约部署到区块链上。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>修改移植文件内容</p>
<p>使用 <code>artifacts.require</code> 语句来取得准备部署的合约。<br> 使用<code>deployer.deploy</code> 语句将合约部署到区块链上。<br> 这边<code>Demo</code> 是 <code>contract</code> 的名称而不是文件名。<br> 因此可以用此语法读入任一 <code>.sol</code> 文件中的任一合约。</p>
<p>现在执行 <code>truffle migrate</code> 命令：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ truffle migrate</span><br></pre></td></tr></table></figure>
</blockquote>
<p>部署合约</p>
<p>部署成功你会看到 Ganache中生成了新的区块，表示已经将合约部署到区块链上了。</p>
<p><img src="https://i.loli.net/2020/06/21/roODI2PEgwJkXp4.png" alt="image-20200621101919044"></p>
<h2 id="十二、与合约互动"><a href="#十二、与合约互动" class="headerlink" title="十二、与合约互动"></a>十二、与合约互动</h2><p>Truffle 提供命令行工具，执行 <code>truffle console</code> 命令后，可用Javascript 来和刚刚部署的合约互动：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ..`</span><br><span class="line"> `$ truffle console`</span><br><span class="line"> `$ Demo.deployed().then(instance =&gt; c = instance)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>与合约互动</p>
<p><img src="https://i.loli.net/2020/06/21/DZ1wM32A8rOTIGN.png" alt="image-20200621102333408"></p>
<p>讲解：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Demo.deployed().then(instance =&gt; c = instance)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>truffle console</code> 中预载了 <code>truffle-contract</code> 函数库，以方便操作部署到区块链上的合约。<br> 这边使用 <code>Demo.deployed().then</code> 语句来取得 <code>Demo</code>合约的 <code>Instance</code>（实例），并存到 <code>contract</code> 变量中，以方便后续的调用。</p>
<p>输入以下命令：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.echo(&quot;hello solidity&quot;)</span><br><span class="line">c.sayHello()</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://i.loli.net/2020/06/21/aJOfp2vjVIUlDS5.png" alt="image-20200621102546448"></p>
<p>这里直接呼叫 <code>contract.sayHello.call()</code> 也会得到一样的结果。<code>truffle-contract</code> 提供使用 <code>call()</code> 来读取只读 <code>（read only）</code> 的数据，这样就不需提供 <code>gas</code>。因此如果遇到的操作需要向区块链写入数据，我们就不能用 <code>call</code> 语句了。</p>
<p>如此一来，我们已写好并部署完成了第一个智能合约，也验证了合约确实可以运作。</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>vlan间通讯</title>
    <url>/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h1 id="1-vlan拓扑图"><a href="#1-vlan拓扑图" class="headerlink" title="1.vlan拓扑图"></a>1.vlan拓扑图</h1><p><img src="https://s2.ax1x.com/2020/03/02/3Rmj76.png" alt="3Rmj76.png"></p><h1 id="2-配置交换机"><a href="#2-配置交换机" class="headerlink" title="2.配置交换机"></a>2.配置交换机</h1><h2 id="2-1配置S1命令如下-S2同理-："><a href="#2-1配置S1命令如下-S2同理-：" class="headerlink" title="2.1配置S1命令如下(S2同理)："></a>2.1配置S1命令如下(S2同理)：</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&lt;Huawei&gt;system-view</span></span><br><span class="line"><span class="attr">sysname</span> <span class="string">S1</span></span><br><span class="line"><span class="meta">[S1]vlan</span> <span class="string">batch 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">default vlan 2     #将该端口加入到VLAN 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/2</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">default vlan 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/3</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">link-type trunk</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/3]port</span> <span class="string">trunk allow-pass vlan 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只在S1中进行配置</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 2</span></span><br><span class="line"><span class="meta">[S1-Vlanif10]ip</span> <span class="string">address 192.168.2.254 24</span></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif20]ip</span> <span class="string">address 192.168.3.254 24</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<h2 id="2-2在交换机上查看vlan划分情况："><a href="#2-2在交换机上查看vlan划分情况：" class="headerlink" title="2.2在交换机上查看vlan划分情况："></a>2.2在交换机上查看vlan划分情况：</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">display</span> <span class="string">vlan</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3Re4RH.png" alt="3Re4RH.png"></p>
<h1 id="3-测试vlan间通讯"><a href="#3-测试vlan间通讯" class="headerlink" title="3.测试vlan间通讯"></a>3.测试vlan间通讯</h1><h2 id="3-1同一交换机下不同vlan下的机器进行ping操作"><a href="#3-1同一交换机下不同vlan下的机器进行ping操作" class="headerlink" title="3.1同一交换机下不同vlan下的机器进行ping操作"></a>3.1同一交换机下不同vlan下的机器进行ping操作</h2><p><strong>pc1Pingpc2：</strong></p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3Rifjf.png" alt="3Rifjf.png"></p>
<p>在端口<strong>0/0/2</strong>上捕获报文如下：</p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3Rk3FJ.png" alt="3Rk3FJ.png"></p>
<h2 id="3-2不同交换机下不同vlan下的机器进行ping操作"><a href="#3-2不同交换机下不同vlan下的机器进行ping操作" class="headerlink" title="3.2不同交换机下不同vlan下的机器进行ping操作"></a>3.2不同交换机下不同vlan下的机器进行ping操作</h2><p><strong>pc3pingpc2：</strong></p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3RZfvn.png" alt="3RZfvn.png"></p>
<p>在端口<strong>0/0/3</strong>上捕获报文如下：</p>
<p><img src="/2020/03/08/vlan%E9%97%B4%E9%80%9A%E8%AE%AF/F:%5C%E5%A4%A7%E4%B8%89%E4%B8%8B%5C%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%5Cmarkdown%5Cimages%5C3ReZrt.png" alt="3ReZrt.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>vlan间通讯</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>whiter-jotter</title>
    <url>/2020/03/08/whiter-jotter/</url>
    <content><![CDATA[<h1 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1.项目概述"></a>1.项目概述</h1><p> 这个项目我把它命名为 <strong>“白卷”</strong>，因为它随着开发的进展逐渐完善，象征着知识的从无到有，从有到多。另外我还给它起了一个英文名字，叫 <strong>White Jotter</strong>（白色笔记本），纯粹是为了谐音。 </p><p> 我选用 Vue.js + Spring Boot 来开发这个项目 ， 是因为这两种框架当下比较热门，也是实现所谓 <strong>前后端分离</strong> 的最佳选择之一。 </p><a id="more"></a>

<h2 id="1-1前端项目基本结构"><a href="#1-1前端项目基本结构" class="headerlink" title="1.1前端项目基本结构"></a>1.1前端项目基本结构</h2><p><img src="https://s2.ax1x.com/2020/03/08/3x9BdS.png" alt="3x9BdS.png"></p>
<p>ps：目前只完成了登录页面和图书馆页面</p>
<h3 id="登录页面："><a href="#登录页面：" class="headerlink" title="登录页面："></a>登录页面：</h3><p><img src="https://s2.ax1x.com/2020/03/08/3xCBOx.png" alt="3xCBOx.png"></p>
<h3 id="图书馆页面："><a href="#图书馆页面：" class="headerlink" title="图书馆页面："></a>图书馆页面：</h3><p><img src="https://s2.ax1x.com/2020/03/08/3xCWpd.png" alt="3xCWpd.png"></p>
<h2 id="1-2后端项目基本结构"><a href="#1-2后端项目基本结构" class="headerlink" title="1.2后端项目基本结构"></a>1.2后端项目基本结构</h2><ul>
<li><p>后台管理模块的常见功能与布局（内容管理、用户\权限管理、运维监控）</p>
</li>
<li><p>用户身份验证、授权、会话管理与信息加密存储</p>
</li>
<li><p>Shiro 框架的使用</p>
</li>
<li><p>实现不同粒度的访问控制（动态菜单、功能控制、数据控制）</p>
<p>后台基本结构如下： </p>
</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/03/08/3xiOLq.png" alt="3xiOLq.png"></p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2.技术栈"></a>2.技术栈</h1><p>目前用到的技术如下所示：</p>
<h2 id="2-1前端技术栈"><a href="#2-1前端技术栈" class="headerlink" title="2.1前端技术栈"></a>2.1前端技术栈</h2><ul>
<li>Vue.js</li>
<li>ElementUI</li>
<li>axios</li>
</ul>
<p>ps：没有系统的学过vue框架，开发过程中查阅了相当多的资料。</p>
<h2 id="2-2后端技术栈"><a href="#2-2后端技术栈" class="headerlink" title="2.2后端技术栈"></a>2.2后端技术栈</h2><ul>
<li>SpringBoot</li>
<li>SpringData + JPA</li>
<li>MySQL5.5</li>
</ul>
<h1 id="3-目前项目进展"><a href="#3-目前项目进展" class="headerlink" title="3.目前项目进展"></a>3.目前项目进展</h1><p>实现了登录、图书展示功能，后端采用JPA实现了书本数据的增删改查，通过外键建立书本表和分类表的关系，对书本数据进行分类展示。下一步计采用Shiro 实现用户信息加密与登录认证。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>web3.js</title>
    <url>/2020/06/30/web3-js/</url>
    <content><![CDATA[<h1 id="介绍-Web3-js"><a href="#介绍-Web3-js" class="headerlink" title="介绍 Web3.js"></a>介绍 Web3.js</h1><p>完成第五课以后，我们的僵尸 DApp 的 Solidity 合约部分就完成了。现在我们来做一个基本的网页好让你的用户能玩它。 要做到这一点，我们将使用以太坊基金发布的 JavaScript 库 —— <strong><em>Web3.js\</em></strong>.</p><h2 id="什么是-Web3-js"><a href="#什么是-Web3-js" class="headerlink" title="什么是 Web3.js?"></a>什么是 Web3.js?</h2><p>还记得么？以太坊网络是由节点组成的，每一个节点都包含了区块链的一份拷贝。当你想要调用一份智能合约的一个方法，你需要从其中一个节点中查找并告诉它:</p><a id="more"></a>

<ol>
<li>智能合约的地址</li>
<li>你想调用的方法，以及</li>
<li>你想传入那个方法的参数</li>
</ol>
<p>以太坊节点只能识别一种叫做 <strong><em>JSON-RPC\</em></strong> 的语言。这种语言直接读起来并不好懂。当你你想调用一个合约的方法的时候，需要发送的查询语句将会是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 哈……祝你写所有这样的函数调用的时候都一次通过</span><br><span class="line">// 往右边拉…… ==&gt;</span><br><span class="line">&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_sendTransaction&quot;,&quot;params&quot;:[&#123;&quot;from&quot;:&quot;0xb60e8dd61c5d32be8058bb8eb970870f07233155&quot;,&quot;to&quot;:&quot;0xd46e8dd67c5d32be8058bb8eb970870f07244567&quot;,&quot;gas&quot;:&quot;0x76c0&quot;,&quot;gasPrice&quot;:&quot;0x9184e72a000&quot;,&quot;value&quot;:&quot;0x9184e72a&quot;,&quot;data&quot;:&quot;0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675&quot;&#125;],&quot;id&quot;:1&#125;</span><br></pre></td></tr></table></figure>

<p>幸运的是 Web3.js 把这些令人讨厌的查询语句都隐藏起来了， 所以你只需要与方便易懂的 JavaScript 界面进行交互即可。</p>
<p>你不需要构建上面的查询语句，在你的代码中调用一个函数看起来将是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CryptoZombies.methods.createRandomZombie(&quot;Vitalik Nakamoto 🤔&quot;)</span><br><span class="line">  .send(&#123; from: &quot;0xb60e8dd61c5d32be8058bb8eb970870f07233155&quot;, gas: &quot;3000000&quot; &#125;)</span><br></pre></td></tr></table></figure>

<p>我们将在接下来的几章详细解释这些语句，不过首先我们来把 Web3.js 环境搭建起来。</p>
<h2 id="准备好了么？"><a href="#准备好了么？" class="headerlink" title="准备好了么？"></a>准备好了么？</h2><p>取决于你的项目工作流程和你的爱好，你可以用一些常用工具把 Web3.js 添加进来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 用 NPM</span><br><span class="line">npm install web3</span><br><span class="line"></span><br><span class="line">// 用 Yarn</span><br><span class="line">yarn add web3</span><br><span class="line"></span><br><span class="line">// 用 Bower</span><br><span class="line">bower install web3</span><br><span class="line"></span><br><span class="line">// ...或者其他。</span><br></pre></td></tr></table></figure>

<p>甚至，你可以从 <a href="https://github.com/ethereum/web3.js/blob/1.0/dist/web3.min.js" target="_blank" rel="noopener">github</a> 直接下载压缩后的 <code>.js</code> 文件 然后包含到你的项目文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;web3.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>因为我们不想让你花太多在项目环境搭建上，在本教程中我们将使用上面的 <code>script</code> 标签来将 Web3.js 引入。</p>
<h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们为你建立了一个HTML 项目空壳 —— <code>index.html</code>。假设在和 <code>index.html</code> 同个文件夹里有一份 <code>web3.min.js</code></p>
<ol>
<li>使用上面的 <code>script</code> 标签代码把 <code>web3.js</code> 添加进去以备接下来使用。</li>
</ol>
<h2 id="页面创建"><a href="#页面创建" class="headerlink" title="页面创建"></a>页面创建</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include web3.js here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Web3-提供者"><a href="#Web3-提供者" class="headerlink" title="Web3 提供者"></a>Web3 提供者</h1><p>太棒了。现在我们的项目中有了Web3.js, 来初始化它然后和区块链对话吧。</p>
<p>首先我们需要 <strong><em>Web3 Provider\</em></strong>.</p>
<p>要记住，以太坊是由共享同一份数据的相同拷贝的 <strong><em>节点</em></strong> 构成的。 在 Web3.js 里设置 Web3 的 <code>Provider</code>（提供者） 告诉我们的代码应该和 <strong>哪个节点</strong> 交互来处理我们的读写。这就好像在传统的 Web 应用程序中为你的 API 调用设置远程 Web 服务器的网址。</p>
<p>你可以运行你自己的以太坊节点来作为 Provider。 不过，有一个第三方的服务，可以让你的生活变得轻松点，让你不必为了给你的用户提供DApp而维护一个以太坊节点— <strong><em>Infura\</em></strong>.</p>
<h2 id="Infura"><a href="#Infura" class="headerlink" title="Infura"></a>Infura</h2><p><a href="https://infura.io/" target="_blank" rel="noopener">Infura</a> 是一个服务，它维护了很多以太坊节点并提供了一个缓存层来实现高速读取。你可以用他们的 API 来免费访问这个服务。 用 Infura 作为节点提供者，你可以不用自己运营节点就能很可靠地向以太坊发送、接收信息。</p>
<p>你可以通过这样把 Infura 作为你的 Web3 节点提供者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var web3 = new Web3(new Web3.providers.WebsocketProvider(&quot;wss://mainnet.infura.io/ws&quot;));</span><br></pre></td></tr></table></figure>

<p>不过，因为我们的 DApp 将被很多人使用，这些用户不单会从区块链读取信息，还会向区块链 <strong><em>写</em></strong> 入信息，我们需要用一个方法让用户可以用他们的私钥给事务签名。</p>
<blockquote>
<p>注意: 以太坊 (以及通常意义上的 blockchains )使用一个公钥/私钥对来对给事务做数字签名。把它想成一个数字签名的异常安全的密码。这样当我修改区块链上的数据的时候，我可以用我的公钥来 <strong>证明</strong> 我就是签名的那个。但是因为没人知道我的私钥，所以没人能伪造我的事务。</p>
</blockquote>
<p>加密学非常复杂，所以除非你是个专家并且的确知道自己在做什么，你最好不要在你应用的前端中管理你用户的私钥。</p>
<p>不过幸运的是，你并不需要，已经有可以帮你处理这件事的服务了： <strong><em>Metamask\</em></strong>.</p>
<h2 id="Metamask"><a href="#Metamask" class="headerlink" title="Metamask"></a>Metamask</h2><p><a href="https://metamask.io/" target="_blank" rel="noopener">Metamask</a> 是 Chrome 和 Firefox 的浏览器扩展， 它能让用户安全地维护他们的以太坊账户和私钥， 并用他们的账户和使用 Web3.js 的网站互动（如果你还没用过它，你肯定会想去安装的——这样你的浏览器就能使用 Web3.js 了，然后你就可以和任何与以太坊区块链通信的网站交互了）</p>
<p>作为开发者，如果你想让用户从他们的浏览器里通过网站和你的DApp交互（就像我们在 CryptoZombies 游戏里一样），你肯定会想要兼容 Metamask 的。</p>
<blockquote>
<p><strong>注意</strong>: Metamask 默认使用 Infura 的服务器做为 web3 提供者。 就像我们上面做的那样。不过它还为用户提供了选择他们自己 Web3 提供者的选项。所以使用 Metamask 的 web3 提供者，你就给了用户选择权，而自己无需操心这一块。</p>
</blockquote>
<h2 id="使用-Metamask-的-web3-提供者"><a href="#使用-Metamask-的-web3-提供者" class="headerlink" title="使用 Metamask 的 web3 提供者"></a>使用 Metamask 的 web3 提供者</h2><p>Metamask 把它的 web3 提供者注入到浏览器的全局 JavaScript对象<code>web3</code>中。所以你的应用可以检查 <code>web3</code> 是否存在。若存在就使用 <code>web3.currentProvider</code> 作为它的提供者。</p>
<p>这里是一些 Metamask 提供的示例代码，用来检查用户是否安装了MetaMask，如果没有安装就告诉用户需要安装MetaMask来使用我们的应用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&apos;load&apos;, function() &#123;</span><br><span class="line"></span><br><span class="line">  // 检查web3是否已经注入到(Mist/MetaMask)</span><br><span class="line">  if (typeof web3 !== &apos;undefined&apos;) &#123;</span><br><span class="line">    // 使用 Mist/MetaMask 的提供者</span><br><span class="line">    web3js = new Web3(web3.currentProvider);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 处理用户没安装的情况， 比如显示一个消息</span><br><span class="line">    // 告诉他们要安装 MetaMask 来使用我们的应用</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 现在你可以启动你的应用并自由访问 Web3.js:</span><br><span class="line">  startApp()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>你可以在你所有的应用中使用这段样板代码，好检查用户是否安装以及告诉用户安装 MetaMask。</p>
<blockquote>
<p>注意: 除了MetaMask，你的用户也可能在使用其他他的私钥管理应用，比如 <strong>Mist</strong> 浏览器。不过，它们都实现了相同的模式来注入 <code>web3</code> 变量。所以我这里描述的方法对两者是通用的。</p>
</blockquote>
<h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们在HTML文件中的 <code>&lt;/body&gt;</code> 标签前面放置了一个空的 <code>script</code> 标签。可以把这节课的 JavaScript 代码写在里面。</p>
<ol>
<li>把上面用来检测 MetaMask 是否安装的模板代码粘贴进来。请粘贴到以 <code>window.addEventListener</code> 开头的代码块中。</li>
</ol>
<h2 id="页面修改"><a href="#页面修改" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// Start here</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 检查web3是否已经注入到(Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用 Mist/MetaMask 的提供者</span></span></span><br><span class="line"><span class="actionscript">    web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 处理用户没安装的情况， 比如显示一个消息</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 告诉他们要安装 MetaMask 来使用我们的应用</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 现在你可以启动你的应用并自由访问 Web3.js:</span></span></span><br><span class="line">  startApp()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="和合约对话"><a href="#和合约对话" class="headerlink" title="和合约对话"></a>和合约对话</h1><p>现在，我们已经用 MetaMask 的 Web3 提供者初始化了 Web3.js。接下来就让它和我们的智能合约对话吧。</p>
<p>Web3.js 需要两个东西来和你的合约对话: 它的 <strong><em>地址</em></strong> 和它的 <strong><em>ABI\</em></strong>。</p>
<h2 id="合约地址"><a href="#合约地址" class="headerlink" title="合约地址"></a>合约地址</h2><p>在你写完了你的智能合约后，你需要编译它并把它部署到以太坊。我们将在<strong>下一课</strong>中详述<strong>部署</strong>，因为它和写代码是截然不同的过程，所以我们决定打乱顺序，先来讲 Web3.js。</p>
<p>在你部署智能合约以后，它将获得一个以太坊上的永久地址。如果你还记得第二课，CryptoKitties 在以太坊上的地址是 <code>0x06012c8cf97BEaD5deAe237070F9587f8E7A266d</code>。</p>
<p>你需要在部署后复制这个地址以来和你的智能合约对话。</p>
<h2 id="合约-ABI"><a href="#合约-ABI" class="headerlink" title="合约 ABI"></a>合约 ABI</h2><p>另一个 Web3.js 为了要和你的智能合约对话而需要的东西是 <strong><em>ABI\</em></strong>。</p>
<p>ABI 意为应用二进制接口（Application Binary Interface）。 基本上，它是以 JSON 格式表示合约的方法，告诉 Web3.js 如何以合同理解的方式格式化函数调用。</p>
<p>当你编译你的合约向以太坊部署时(我们将在第七课详述)， Solidity 编译器会给你 ABI，所以除了合约地址，你还需要把这个也复制下来。</p>
<p>因为我们这一课不会讲述部署，所以现在我们已经帮你编译了 ABI 并放在了名为<code>cryptozombies_abi.js</code>，文件中，保存在一个名为 <code>cryptoZombiesABI</code> 的变量中。</p>
<p>如果我们将<code>cryptozombies_abi.js</code> 包含进我们的项目，我们就能通过那个变量访问 CryptoZombies ABI 。</p>
<h2 id="实例化-Web3-js"><a href="#实例化-Web3-js" class="headerlink" title="实例化 Web3.js"></a>实例化 Web3.js</h2><p>一旦你有了合约的地址和 ABI，你可以像这样来实例化 Web3.js。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 实例化 myContract</span><br><span class="line">var myContract = new web3js.eth.Contract(myABI, myContractAddress);</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>在文件的 <code>&lt;head&gt;</code> 标签块中，用 <code>script</code> 标签引入<code>cryptozombies_abi.js</code>，好把 ABI 的定义引入项目。</li>
<li>在 <code>&lt;body&gt;</code> 里的 <code>&lt;script&gt;</code> 开头 , 定义一个<code>var</code>，取名 <code>cryptoZombies</code>， 不过不要对其赋值，稍后我们将用这个这个变量来存储我们实例化合约。</li>
<li>接下来，创建一个名为 <code>startApp()</code> 的 <code>function</code>。 接下来两步来完成这个方法。</li>
<li><code>startApp()</code> 里应该做的第一件事是定义一个名为<code>cryptoZombiesAddress</code> 的变量并赋值为<code>&quot;你的合约地址&quot;</code> (这是你的合约在以太坊主网上的地址)。</li>
<li>最后，来实例化我们的合约。模仿我们上面的代码，将 <code>cryptoZombies</code> 赋值为 <code>new</code> <code>web3js.eth.Contract</code> (使用我们上面代码中通过 <code>script</code> 引入的 <code>cryptoZombiesABI</code> 和 <code>cryptoZombiesAddress</code>)。</li>
</ol>
<h2 id="页面修改-1"><a href="#页面修改-1" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- Include cryptozombies_abi.js here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cryptozombies_abi.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 2. Start code here</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> cryptoZombies;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"你的合约地址"</span>;</span></span><br><span class="line"><span class="actionscript">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI,cryptoZombiesAddress);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Use Mist/MetaMask's provider</span></span></span><br><span class="line"><span class="actionscript">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span></span><br><span class="line">        startApp()</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="调用和合约函数"><a href="#调用和合约函数" class="headerlink" title="调用和合约函数"></a>调用和合约函数</h1><p>我们的合约配置好了！现在来用 Web3.js 和它对话。</p>
<p>Web3.js 有两个方法来调用我们合约的函数: <code>call</code> and <code>send</code>.</p>
<h3 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h3><p><code>call</code> 用来调用 <code>view</code> 和 <code>pure</code> 函数。它只运行在本地节点，不会在区块链上创建事务。</p>
<blockquote>
<p><strong>复习:</strong> <code>view</code> 和 <code>pure</code> 函数是只读的并不会改变区块链的状态。它们也不会消耗任何gas。用户也不会被要求用MetaMask对事务签名。</p>
</blockquote>
<p>使用 Web3.js，你可以如下 <code>call</code> 一个名为<code>myMethod</code>的方法并传入一个 <code>123</code> 作为参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myContract.methods.myMethod(123).call()</span><br></pre></td></tr></table></figure>

<h3 id="Send"><a href="#Send" class="headerlink" title="Send"></a>Send</h3><p><code>send</code> 将创建一个事务并改变区块链上的数据。你需要用 <code>send</code> 来调用任何非 <code>view</code> 或者 <code>pure</code> 的函数。</p>
<blockquote>
<p><strong>注意:</strong> <code>send</code> 一个事务将要求用户支付gas，并会要求弹出对话框请求用户使用 Metamask 对事务签名。在我们使用 Metamask 作为我们的 web3 提供者的时候，所有这一切都会在我们调用 <code>send()</code> 的时候自动发生。而我们自己无需在代码中操心这一切，挺爽的吧。</p>
</blockquote>
<p>使用 Web3.js, 你可以像这样 <code>send</code> 一个事务调用<code>myMethod</code> 并传入 <code>123</code> 作为参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myContract.methods.myMethod(123).send()</span><br></pre></td></tr></table></figure>

<p>语法几乎 <code>call()</code>一模一样。</p>
<h2 id="获取僵尸数据"><a href="#获取僵尸数据" class="headerlink" title="获取僵尸数据"></a>获取僵尸数据</h2><p>来看一个使用 <code>call</code> 读取我们合约数据的真实例子</p>
<p>回忆一下，我们定义我们的僵尸数组为 <code>公开</code>(public):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Zombie[] public zombies;</span><br></pre></td></tr></table></figure>

<p>在 Solidity 里，当你定义一个 <code>public</code>变量的时候， 它将自动定义一个公开的 “getter” 同名方法， 所以如果你像要查看 id 为 <code>15</code> 的僵尸，你可以像一个函数一样调用它： <code>zombies(15)</code>.</p>
<p>这是如何在外面的前端界面中写一个 JavaScript 方法来传入一个僵尸 id，在我们的合同中查询那个僵尸并返回结果</p>
<blockquote>
<p>注意: 本课中所有的示例代码都使用 Web3.js 的 <strong>1.0 版</strong>，此版本使用的是 Promises 而不是回调函数。你在线上看到的其他教程可能还在使用老版的 Web3.js。在1.0版中，语法改变了不少。如果你从其他教程中复制代码，先确保你们使用的是相同版本的Web3.js。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getZombieDetails(id) &#123;</span><br><span class="line">  return cryptoZombies.methods.zombies(id).call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用函数并做一些其他事情</span><br><span class="line">getZombieDetails(15)</span><br><span class="line">.then(function(result) &#123;</span><br><span class="line">  console.log(&quot;Zombie 15: &quot; + JSON.stringify(result));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们来看看这里都做了什么</p>
<p><code>cryptoZombies.methods.zombies(id).call()</code> 将和 Web3 提供者节点通信，告诉它返回从我们的合约中的 <code>Zombie[] public zombies</code>，<code>id</code>为传入参数的僵尸信息。</p>
<p>注意这是 <strong>异步的</strong>，就像从外部服务器中调用API。所以 Web3 在这里返回了一个 Promises. (如果你对 JavaScript的 Promises 不了解，最好先去学习一下这方面知识再继续)。</p>
<p>一旦那个 <code>promise</code> 被 <code>resolve</code>, (意味着我们从 Web3 提供者那里获得了响应)，我们的例子代码将执行 <code>then</code> 语句中的代码，在控制台打出 <code>result</code>。</p>
<p><code>result</code> 是一个像这样的 JavaScript 对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;H4XF13LD MORRIS&apos;S COOLER OLDER BROTHER&quot;,</span><br><span class="line">  &quot;dna&quot;: &quot;1337133713371337&quot;,</span><br><span class="line">  &quot;level&quot;: &quot;9999&quot;,</span><br><span class="line">  &quot;readyTime&quot;: &quot;1522498671&quot;,</span><br><span class="line">  &quot;winCount&quot;: &quot;999999999&quot;,</span><br><span class="line">  &quot;lossCount&quot;: &quot;0&quot; // Obviously.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以用一些前端逻辑代码来解析这个对象并在前端界面友好展示。</p>
<h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们已经帮你把 <code>getZombieDetails</code> 复制进了代码。</p>
<ol>
<li><p>先为<code>zombieToOwner</code> 创建一个类似的函数。如果你还记得 <code>ZombieFactory.sol</code>，我们有一个长这样的映射：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mapping (uint =&gt; address) public zombieToOwner;</span><br></pre></td></tr></table></figure>

<p>定义一个 JavaScript 方法，起名为 <code>zombieToOwner</code>。和上面的 <code>getZombieDetails</code> 类似， 它将接收一个<code>id</code> 作为参数，并返回一个 Web3.js <code>call</code> 我们合约里的<code>zombieToOwner</code> 。</p>
</li>
<li><p>之后在下面，为 <code>getZombiesByOwner</code> 定义一个方法。如果你还能记起 <code>ZombieHelper.sol</code>，这个方法定义像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getZombiesByOwner(address _owner)</span><br></pre></td></tr></table></figure>

<p>我们的 <code>getZombiesByOwner</code> 方法将接收 <code>owner</code> 作为参数，并返回一个对我们函数 <code>getZombiesByOwner</code>的 Web3.js <code>call</code></p>
</li>
</ol>
<h2 id="页面修改-2"><a href="#页面修改-2" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cryptozombies_abi.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> cryptoZombies;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"YOUR_CONTRACT_ADDRESS"</span>;</span></span><br><span class="line"><span class="actionscript">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombieDetails</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombies(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. Define `zombieToOwner` here</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">zombieToOwner</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombieToOwner(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 2. Define `getZombiesByOwner` here</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span><span class="params">(owner)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.getZombiesByOwner(owner).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Use Mist/MetaMask's provider</span></span></span><br><span class="line"><span class="actionscript">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span></span><br><span class="line">        startApp()</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="MetaMask-和账户"><a href="#MetaMask-和账户" class="headerlink" title="MetaMask 和账户"></a>MetaMask 和账户</h1><p>太棒了！你成功地写了一些前端代码来和你的第一个智能合约交互。</p>
<p>接下来我们综合一下——比如我们想让我们应用的首页显示用户的整个僵尸大军。</p>
<p>毫无疑问我们首先需要用 <code>getZombiesByOwner(owner)</code> 来查询当前用户的所有僵尸ID。</p>
<p>但是我们的 Solidity 合约需要 <code>owner</code> 作为 Solidity <code>address</code>。我们如何能知道应用用户的地址呢？</p>
<h2 id="获得-MetaMask中的用户账户"><a href="#获得-MetaMask中的用户账户" class="headerlink" title="获得 MetaMask中的用户账户"></a>获得 MetaMask中的用户账户</h2><p>MetaMask 允许用户在扩展中管理多个账户。</p>
<p>我们可以通过这样来获取 <code>web3</code> 变量中激活的当前账户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var userAccount = web3.eth.accounts[0]</span><br></pre></td></tr></table></figure>

<p>因为用户可以随时在 MetaMask 中切换账户，我们的应用需要监控这个变量，一旦改变就要相应更新界面。例如，若用户的首页展示它们的僵尸大军，当他们在 MetaMask 中切换了账号，我们就需要更新页面来展示新选择的账户的僵尸大军。</p>
<p>我们可以通过 <code>setInterval</code> 方法来做:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var accountInterval = setInterval(function() &#123;</span><br><span class="line">  // 检查账户是否切换</span><br><span class="line">  if (web3.eth.accounts[0] !== userAccount) &#123;</span><br><span class="line">    userAccount = web3.eth.accounts[0];</span><br><span class="line">    // 调用一些方法来更新界面</span><br><span class="line">    updateInterface();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 100);</span><br></pre></td></tr></table></figure>

<p>这段代码做的是，每100毫秒检查一次 <code>userAccount</code> 是否还等于 <code>web3.eth.accounts[0]</code> (比如：用户是否还激活了那个账户)。若不等，则将 当前激活用户赋值给 <code>userAccount</code>，然后调用一个函数来更新界面。</p>
<h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们来让应用在页面第一次加载的时候显示用户的僵尸大军，监控当前 MetaMask 中的激活账户，并在账户发生改变的时候刷新显示。</p>
<ol>
<li><p>定义一个名为<code>userAccount</code>的变量，不给任何初始值。</p>
</li>
<li><p>在 <code>startApp()</code>函数的最后，复制粘贴上面样板代码中的 <code>accountInterval</code> 方法进去。</p>
</li>
<li><p>将 <code>updateInterface();</code>替换成一个 <code>getZombiesByOwner</code> 的 <code>call</code> 函数，并传入 <code>userAccount</code>。</p>
</li>
<li><p>在 <code>getZombiesByOwner</code> 后面链式调用<code>then</code> 语句，并将返回的结果传入名为 <code>displayZombies</code> 的函数。 (语句像这样: <code>.then(displayZombies);</code>).</p>
<p>我们还没有 <code>displayZombies</code> 函数，将于下一章实现。</p>
</li>
</ol>
<h2 id="页面修改-3"><a href="#页面修改-3" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cryptozombies_abi.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> cryptoZombies;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. declare `userAccount` here</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> userAccount;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"YOUR_CONTRACT_ADDRESS"</span>;</span></span><br><span class="line"><span class="actionscript">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. Create `setInterval` code here</span></span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> accountInterval = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 检查账户是否切换</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (web3.eth.accounts[<span class="number">0</span>] !== userAccount) &#123;</span></span><br><span class="line">            userAccount = web3.eth.accounts[0];</span><br><span class="line"><span class="actionscript">            <span class="comment">// 调用一些方法来更新界面</span></span></span><br><span class="line"><span class="vbscript">            getZombiesByOwner(userAccount).<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 100);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombieDetails</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombies(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">zombieToOwner</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombieToOwner(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span><span class="params">(owner)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.getZombiesByOwner(owner).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Use Mist/MetaMask's provider</span></span></span><br><span class="line"><span class="actionscript">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span></span><br><span class="line">        startApp()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="显示僵尸大军"><a href="#显示僵尸大军" class="headerlink" title="显示僵尸大军"></a>显示僵尸大军</h1><p>如果我们不向你展示如何显示你从合约获取的数据，那这个教程就太不完整了。</p>
<p>在实际应用中，你肯定想要在应用中使用诸如 React 或 Vue.js 这样的前端框架来让你的前端开发变得轻松一些。不过要教授 React 或者 Vue.js 知识的话，就大大超出了本教程的范畴——它们本身就需要几节课甚至一整个教程来教学。</p>
<p>所以为了让 CryptoZombies.io 专注于以太坊和智能合约，我们将使用 JQuery 来做一个快速示例，展示如何解析和展示从智能合约中拿到的数据。</p>
<h2 id="显示僵尸数据-—-一个粗略的例子"><a href="#显示僵尸数据-—-一个粗略的例子" class="headerlink" title="显示僵尸数据 — 一个粗略的例子"></a>显示僵尸数据 — 一个粗略的例子</h2><p>我们已经在代码中添加了一个空的代码块 <code>&lt;div id=&quot;zombies&quot;&gt;&lt;/div&gt;</code>， 在 <code>displayZombies</code> 方法中也同样有一个。</p>
<p>回忆一下在之前章节中我们在 <code>startApp()</code> 方法内部调用了 <code>displayZombies</code> 并传入了 <code>call</code> <code>getZombiesByOwner</code> 获得的结果，它将被传入一个僵尸ID数组，像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0, 13, 47]</span><br></pre></td></tr></table></figure>

<p>因为我们想让我们的 <code>displayZombies</code> 方法做这些事:</p>
<ol>
<li>首先清除 <code>#zombies</code> 的内容以防里面已经有什么内容（这样当用户切换账号的时候，之前账号的僵尸大军数据就会被清除）</li>
<li>循环遍历 <code>id</code>，对每一个id调用 <code>getZombieDetails(id)</code>， 从我们的合约中获得这个僵尸的数据。</li>
<li>将获得的僵尸数据放进一个HTML模板中以格式化显示，追加进 <code>#zombies</code> 里面。</li>
</ol>
<p>再次声明，我们只用了 JQuery，没有任何模板引擎，所以会非常丑。不过这只是一个如何展示僵尸数据的示例而已。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在合约中查找僵尸数据，返回一个对象</span><br><span class="line">getZombieDetails(id)</span><br><span class="line">.then(function(zombie) &#123;</span><br><span class="line">  // 用 ES6 的模板语法来向HTML中注入变量</span><br><span class="line">  // 把每一个都追加进 #zombies div</span><br><span class="line">  $(&quot;#zombies&quot;).append(`&lt;div class=&quot;zombie&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;Name: $&#123;zombie.name&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;DNA: $&#123;zombie.dna&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Level: $&#123;zombie.level&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Wins: $&#123;zombie.winCount&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Losses: $&#123;zombie.lossCount&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Ready Time: $&#123;zombie.readyTime&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="如何来展示僵尸元素呢？"><a href="#如何来展示僵尸元素呢？" class="headerlink" title="如何来展示僵尸元素呢？"></a>如何来展示僵尸元素呢？</h2><p>在上面的例子中，我们只是简单地用字符串来显示 DNA。不过在你的 DApp 中，你将需要把 DNA 转换成图片来显示你的僵尸。</p>
<p>我们通过把 DNA 字符串分割成小的字符串来做到这一点，每2位数字代表一个图片，类似这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 得到一个 1-7 的数字来表示僵尸的头:</span><br><span class="line">var head = parseInt(zombie.dna.substring(0, 2)) % 7 + 1</span><br><span class="line"></span><br><span class="line">// 我们有7张头部图片：</span><br><span class="line">var headSrc = &quot;../assets/zombieparts/head-&quot; + i + &quot;.png&quot;</span><br></pre></td></tr></table></figure>

<p>每一个模块都用 CSS 绝对定位来显示，在一个上面叠加另外一个。</p>
<p>如果你想看我们的具体实现，我们将用来展示僵尸形象的 Vue.js 模块开源了： <a href="https://github.com/loomnetwork/zombie-char-component" target="_blank" rel="noopener">点击这里</a>.</p>
<p>不过，因为那个文件中有太多行代码， 超出了本教程的讨论范围。我们依然还是使用上面超级简单的 JQuery 实现，把美化僵尸的工作作为家庭作业留给你了😉</p>
<h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们为你创建了一个空的 <code>displayZombies</code> 方法。来一起实现它。</p>
<ol>
<li>首先我们需要清空 <code>#zombies</code> 的内容。 用JQuery，你可以这样做： <code>$(&quot;#zombies&quot;).empty();</code>。</li>
<li>接下来，我们要循环遍历所有的 id，循环这样用： <code>for (id of ids) {</code></li>
<li>在循环内部，复制粘贴上面的代码，对每一个id调用 <code>getZombieDetails(id)</code>，然后用 <code>$(&quot;#zombies&quot;).append(...)</code> 把内容追加进我们的 HTML 里面。</li>
</ol>
<h2 id="页面修改-4"><a href="#页面修改-4" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cryptozombies_abi.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zombies"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> cryptoZombies;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> userAccount;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"YOUR_CONTRACT_ADDRESS"</span>;</span></span><br><span class="line"><span class="actionscript">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> accountInterval = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Check if account has changed</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (web3.eth.accounts[<span class="number">0</span>] !== userAccount) &#123;</span></span><br><span class="line">            userAccount = web3.eth.accounts[0];</span><br><span class="line"><span class="actionscript">            <span class="comment">// Call a function to update the UI with the new account</span></span></span><br><span class="line">            getZombiesByOwner(userAccount)</span><br><span class="line"><span class="vbscript">            .<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 100);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">displayZombies</span><span class="params">(ids)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// Start here</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#zombies"</span>).empty();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (id <span class="keyword">of</span> ids) &#123;</span></span><br><span class="line"><span class="actionscript">          getZombieDetails(id).then(<span class="function"><span class="keyword">function</span><span class="params">(zombie)</span> </span>&#123;</span></span><br><span class="line"><span class="vbscript">                        $(<span class="string">"#zombies"</span>).append(`&lt;div <span class="keyword">class</span>=<span class="string">"zombie"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Name: $&#123;zombie.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>DNA: $&#123;zombie.dna&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Level: $&#123;zombie.level&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wins: $&#123;zombie.winCount&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Losses: $&#123;zombie.lossCount&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Ready Time: $&#123;zombie.readyTime&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`);</span></span></span><br><span class="line">          &#125;); </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombieDetails</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombies(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">zombieToOwner</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombieToOwner(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span><span class="params">(owner)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.getZombiesByOwner(owner).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Use Mist/MetaMask's provider</span></span></span><br><span class="line"><span class="actionscript">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span></span><br><span class="line">        startApp()</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="发送事务"><a href="#发送事务" class="headerlink" title="发送事务"></a>发送事务</h1><p>这下我们的界面能检测用户的 MetaMask 账户，并自动在首页显示它们的僵尸大军了，有没有很棒？</p>
<p>现在我们来看看用 <code>send</code> 函数来修改我们智能合约里面的数据。</p>
<p>相对 <code>call</code> 函数，<code>send</code> 函数有如下主要区别:</p>
<ol>
<li><p><code>send</code> 一个事务需要一个 <code>from</code> 地址来表明谁在调用这个函数（也就是你 Solidity 代码里的 <code>msg.sender</code> )。 我们需要这是我们 DApp 的用户，这样一来 MetaMask 才会弹出提示让他们对事务签名。</p>
</li>
<li><p><code>send</code> 一个事务将花费 gas</p>
</li>
<li><p>在用户 <code>send</code> 一个事务到该事务对区块链产生实际影响之间有一个不可忽略的延迟。这是因为我们必须等待事务被包含进一个区块里，以太坊上一个区块的时间平均下来是15秒左右。如果当前在以太坊上有大量挂起事务或者用户发送了过低的 gas 价格，我们的事务可能需要等待数个区块才能被包含进去，往往可能花费数分钟。</p>
<p>所以在我们的代码中我们需要编写逻辑来处理这部分异步特性。</p>
</li>
</ol>
<h2 id="生成一个僵尸"><a href="#生成一个僵尸" class="headerlink" title="生成一个僵尸"></a>生成一个僵尸</h2><p>我们来看一个合约中一个新用户将要调用的第一个函数: <code>createRandomZombie</code>.</p>
<p>作为复习，这里是合约中的 Solidity 代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createRandomZombie(string _name) public &#123;</span><br><span class="line">  require(ownerZombieCount[msg.sender] == 0);</span><br><span class="line">  uint randDna = _generateRandomDna(_name);</span><br><span class="line">  randDna = randDna - randDna % 100;</span><br><span class="line">  _createZombie(_name, randDna);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是如何在用 MetaMask 在 Web3.js 中调用这个函数的示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createRandomZombie(name) &#123;</span><br><span class="line">  // 这将需要一段时间，所以在界面中告诉用户这一点</span><br><span class="line">  // 事务被发送出去了</span><br><span class="line">  $(&quot;#txStatus&quot;).text(&quot;正在区块链上创建僵尸，这将需要一会儿...&quot;);</span><br><span class="line">  // 把事务发送到我们的合约:</span><br><span class="line">  return cryptoZombies.methods.createRandomZombie(name)</span><br><span class="line">  .send(&#123; from: userAccount &#125;)</span><br><span class="line">  .on(&quot;receipt&quot;, function(receipt) &#123;</span><br><span class="line">    $(&quot;#txStatus&quot;).text(&quot;成功生成了 &quot; + name + &quot;!&quot;);</span><br><span class="line">    // 事务被区块链接受了，重新渲染界面</span><br><span class="line">    getZombiesByOwner(userAccount).then(displayZombies);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(&quot;error&quot;, function(error) &#123;</span><br><span class="line">    // 告诉用户合约失败了</span><br><span class="line">    $(&quot;#txStatus&quot;).text(error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的函数 <code>send</code> 一个事务到我们的 Web3 提供者，然后链式添加一些事件监听:</p>
<ul>
<li><code>receipt</code> 将在合约被包含进以太坊区块上以后被触发，这意味着僵尸被创建并保存进我们的合约了。</li>
<li><code>error</code> 将在事务未被成功包含进区块后触发，比如用户未支付足够的 gas。我们需要在界面中通知用户事务失败以便他们可以再次尝试。</li>
</ul>
<blockquote>
<p>注意:你可以在调用 <code>send</code> 时选择指定 <code>gas</code> 和 <code>gasPrice</code>， 例如： <code>.send({ from: userAccount, gas: 3000000 })</code>。如果你不指定，MetaMask 将让用户自己选择数值。</p>
</blockquote>
<h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们添加了一个<code>div</code>， 指定 ID 为 <code>txStatus</code> — 这样我们可以通过更新这个 div 来通知用户事务的状态。</p>
<ol>
<li><p>在 <code>displayZombies</code>下面， 复制粘贴上面 <code>createRandomZombie</code> 的代码。</p>
</li>
<li><p>我们来实现另外一个函数 <code>feedOnKitty</code>：</p>
<p>调用 <code>feedOnKitty</code> 的逻辑几乎一样 — 我们将发送一个事务来调用这个函数，并且成功的事务会为我们创建一个僵尸，所以我们希望在成功后重新绘制界面。</p>
<p>在 <code>createRandomZombie</code> 下面复制粘贴它的代码，改动这些地方:</p>
<p>a) 给其命名为 <code>feedOnKitty</code>， 它将接收两个参数 <code>zombieId</code> 和 <code>kittyId</code></p>
<p>b) <code>#txStatus</code> 的文本内容将更新为: <code>&quot;正在吃猫咪，这将需要一会儿...&quot;</code></p>
<p>c) 让其调用我们合约里面的 <code>feedOnKitty</code> 函数并传入相同的参数</p>
<p>d) <code>#txStatus</code> 里面的的成功信息应该是 <code>&quot;吃了一只猫咪并生成了一只新僵尸！&quot;</code></p>
</li>
</ol>
<h2 id="页面修改-5"><a href="#页面修改-5" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cryptozombies_abi.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"txStatus"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zombies"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> cryptoZombies;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> userAccount;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"YOUR_CONTRACT_ADDRESS"</span>;</span></span><br><span class="line"><span class="actionscript">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> accountInterval = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Check if account has changed</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (web3.eth.accounts[<span class="number">0</span>] !== userAccount) &#123;</span></span><br><span class="line">            userAccount = web3.eth.accounts[0];</span><br><span class="line"><span class="actionscript">            <span class="comment">// Call a function to update the UI with the new account</span></span></span><br><span class="line">            getZombiesByOwner(userAccount)</span><br><span class="line"><span class="vbscript">            .<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 100);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">displayZombies</span><span class="params">(ids)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#zombies"</span>).empty();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (id <span class="keyword">of</span> ids) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Look up zombie details from our contract. Returns a `zombie` object</span></span></span><br><span class="line">          getZombieDetails(id)</span><br><span class="line"><span class="actionscript">          .then(<span class="function"><span class="keyword">function</span><span class="params">(zombie)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Using ES6's "template literals" to inject variables into the HTML.</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Append each one to our #zombies div</span></span></span><br><span class="line"><span class="vbscript">            $(<span class="string">"#zombies"</span>).append(`&lt;div <span class="keyword">class</span>=<span class="string">"zombie"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Name: $&#123;zombie.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>DNA: $&#123;zombie.dna&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Level: $&#123;zombie.level&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wins: $&#123;zombie.winCount&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Losses: $&#123;zombie.lossCount&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Ready Time: $&#123;zombie.readyTime&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`);</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// Start here</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span><span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 这将需要一段时间，所以在界面中告诉用户这一点</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 事务被发送出去了</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"#txStatus"</span>).text(<span class="string">"正在区块链上创建僵尸，这将需要一会儿..."</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 把事务发送到我们的合约:</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> cryptoZombies.methods.createRandomZombie(name)</span></span><br><span class="line">  .send(&#123; from: userAccount &#125;)</span><br><span class="line"><span class="actionscript">  .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span><span class="params">(receipt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#txStatus"</span>).text(<span class="string">"成功生成了 "</span> + name + <span class="string">"!"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 事务被区块链接受了，重新渲染界面</span></span></span><br><span class="line"><span class="vbscript">    getZombiesByOwner(userAccount).<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 告诉用户合约失败了</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#txStatus"</span>).text(error);</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span><span class="params">(zombieId, kittyId)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"#txStatus"</span>).text(<span class="string">"正在吃猫咪，这将需要一会儿..."</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> cryptoZombies.methods.feedOnKitty(zombieId, kittyId)</span></span><br><span class="line">  .send(&#123; from: userAccount &#125;)</span><br><span class="line"><span class="actionscript">  .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span><span class="params">(receipt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#txStatus"</span>).text(<span class="string">"吃了一只猫咪并生成了一只新僵尸！"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 事务被区块链接受了，重新渲染界面</span></span></span><br><span class="line"><span class="vbscript">    getZombiesByOwner(userAccount).<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 告诉用户合约失败了</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#txStatus"</span>).text(error);</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombieDetails</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombies(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">zombieToOwner</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombieToOwner(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span><span class="params">(owner)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.getZombiesByOwner(owner).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Use Mist/MetaMask's provider</span></span></span><br><span class="line"><span class="actionscript">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span></span><br><span class="line">        startApp()</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="调用-Payable-函数"><a href="#调用-Payable-函数" class="headerlink" title="调用 Payable 函数"></a>调用 Payable 函数</h1><p><code>attack</code>, <code>changeName</code>, 以及 <code>changeDna</code> 的逻辑将非常雷同，所以本课将不会花时间在上面。</p>
<blockquote>
<p>实际上，在调用这些函数的时候已经有了非常多的重复逻辑。所以最好是重构代码把相同的代码写成一个函数。（并对<code>txStatus</code>使用模板系统——我们已经看到用类似 Vue.js 类的框架是多么整洁）</p>
</blockquote>
<p>我们来看看另外一种 Web3.js 中需要特殊对待的函数 — <code>payable</code> 函数。</p>
<h2 id="升级！"><a href="#升级！" class="headerlink" title="升级！"></a>升级！</h2><p>回忆一下在 <code>ZombieHelper</code> 里面，我们添加了一个 payable 函数，用户可以用来升级:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function levelUp(uint _zombieId) external payable &#123;</span><br><span class="line">  require(msg.value == levelUpFee);</span><br><span class="line">  zombies[_zombieId].level++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和函数一起发送以太非常简单，只有一点需要注意： 我们需要指定发送多少 <code>wei</code>，而不是以太。</p>
<h2 id="啥是-Wei"><a href="#啥是-Wei" class="headerlink" title="啥是 Wei?"></a>啥是 Wei?</h2><p>一个 <code>wei</code> 是以太的最小单位 — 1 <code>ether</code> 等于 10^18 <code>wei</code></p>
<p>太多0要数了，不过幸运的是 Web3.js 有一个转换工具来帮我们做这件事：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 把 1 ETH 转换成 Wei</span><br><span class="line">web3js.utils.toWei(&quot;1&quot;, &quot;ether&quot;);</span><br></pre></td></tr></table></figure>

<p>在我们的 DApp 里， 我们设置了 <code>levelUpFee = 0.001 ether</code>，所以调用 <code>levelUp</code> 方法的时候，我们可以让用户用以下的代码同时发送 <code>0.001</code> 以太:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cryptoZombies.methods.levelUp(zombieId)</span><br><span class="line">.send(&#123; from: userAccount, value: web3js.utils.toWei(&quot;0.001&quot;,&quot;ether&quot;) &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><p>在 <code>feedOnKitty</code> 下面添加一个 <code>levelUp</code> 方法。代码和 <code>feedOnKitty</code> 将非常相似。不过：</p>
<ol>
<li>函数将接收一个参数, <code>zombieId</code></li>
<li>在发送事务之前，<code>txStatus</code> 的文本应该是 <code>&quot;正在升级您的僵尸...&quot;</code></li>
<li>当它调用合约里的<code>levelUp</code>时，它应该发送<code>&quot;0.001&quot;</code> ETH，并用 <code>toWei</code> 转换，如同上面例子里那样。</li>
<li>成功之后应该显示 <code>&quot;不得了了！僵尸成功升级啦！&quot;</code></li>
<li>我们 <strong>不</strong> 需要在调用 <code>getZombiesByOwner</code> 后重新绘制界面 — 因为在这里我们只是修改了僵尸的级别而已。</li>
</ol>
<h2 id="页面修改-6"><a href="#页面修改-6" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;CryptoZombies front-end&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script language="javascript" type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">    &lt;script language=<span class="string">"javascript"</span> type=<span class="string">"text/javascript"</span> src=<span class="string">"web3.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script language=<span class="string">"javascript"</span> type=<span class="string">"text/javascript"</span> src=<span class="string">"cryptozombies_abi.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="txStatus"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"zombies"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> cryptoZombies;</span><br><span class="line">      <span class="keyword">var</span> userAccount;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"YOUR_CONTRACT_ADDRESS"</span>;</span><br><span class="line">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> accountInterval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// Check if account has changed</span></span><br><span class="line">          <span class="keyword">if</span> (web3.eth.accounts[<span class="number">0</span>] !== userAccount) &#123;</span><br><span class="line">            userAccount = web3.eth.accounts[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// Call a function to update the UI with the new account</span></span><br><span class="line">            getZombiesByOwner(userAccount)</span><br><span class="line">            .then(displayZombies);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">displayZombies</span>(<span class="params">ids</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#zombies"</span>).empty();</span><br><span class="line">        <span class="keyword">for</span> (id <span class="keyword">of</span> ids) &#123;</span><br><span class="line">          <span class="comment">// Look up zombie details from our contract. Returns a `zombie` object</span></span><br><span class="line">          getZombieDetails(id)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">zombie</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Using ES6's "template literals" to inject variables into the HTML.</span></span><br><span class="line">            <span class="comment">// Append each one to our #zombies div</span></span><br><span class="line">            $(<span class="string">"#zombies"</span>).append(<span class="string">`&lt;div class="zombie"&gt;</span></span><br><span class="line"><span class="string">              &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;Name: <span class="subst">$&#123;zombie.name&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;DNA: <span class="subst">$&#123;zombie.dna&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;Level: <span class="subst">$&#123;zombie.level&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;Wins: <span class="subst">$&#123;zombie.winCount&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;Losses: <span class="subst">$&#123;zombie.lossCount&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;Ready Time: <span class="subst">$&#123;zombie.readyTime&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">              &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// This is going to take a while, so update the UI to let the user know</span></span><br><span class="line">        <span class="comment">// the transaction has been sent</span></span><br><span class="line">        $(<span class="string">"#txStatus"</span>).text(<span class="string">"Creating new zombie on the blockchain. This may take a while..."</span>);</span><br><span class="line">        <span class="comment">// Send the tx to our contract:</span></span><br><span class="line">        <span class="keyword">return</span> cryptoZombies.methods.createRandomZombie(name)</span><br><span class="line">        .send(&#123; <span class="attr">from</span>: userAccount &#125;)</span><br><span class="line">        .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">receipt</span>) </span>&#123;</span><br><span class="line">          $(<span class="string">"#txStatus"</span>).text(<span class="string">"Successfully created "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">          <span class="comment">// Transaction was accepted into the blockchain, let's redraw the UI</span></span><br><span class="line">          getZombiesByOwner(userAccount).then(displayZombies);</span><br><span class="line">        &#125;)</span><br><span class="line">        .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// Do something to alert the user their transaction has failed</span></span><br><span class="line">          $(<span class="string">"#txStatus"</span>).text(error);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">zombieId, kittyId</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#txStatus"</span>).text(<span class="string">"Eating a kitty. This may take a while..."</span>);</span><br><span class="line">        <span class="keyword">return</span> cryptoZombies.methods.feedOnKitty(zombieId, kittyId)</span><br><span class="line">        .send(&#123; <span class="attr">from</span>: userAccount &#125;)</span><br><span class="line">        .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">receipt</span>) </span>&#123;</span><br><span class="line">          $(<span class="string">"#txStatus"</span>).text(<span class="string">"Ate a kitty and spawned a new Zombie!"</span>);</span><br><span class="line">          getZombiesByOwner(userAccount).then(displayZombies);</span><br><span class="line">        &#125;)</span><br><span class="line">        .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">          $(<span class="string">"#txStatus"</span>).text(error);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Start here</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">levelUp</span>(<span class="params">zombieId</span>) </span>&#123;</span><br><span class="line">         $(<span class="string">"#txStatus"</span>).text(<span class="string">"正在升级您的僵尸..."</span>);</span><br><span class="line">         <span class="keyword">return</span> cryptoZombies.methods.levelUp(zombieId)</span><br><span class="line">         .send(&#123; <span class="attr">from</span>: userAccount, <span class="attr">value</span>: web3js.utils.toWei(<span class="string">"0.001"</span>,<span class="string">"ether"</span>) &#125;)</span><br><span class="line">         .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">receipt</span>) </span>&#123;</span><br><span class="line">         $(<span class="string">"#txStatus"</span>).text(<span class="string">"不得了了！僵尸成功升级啦！"</span>);</span><br><span class="line">         &#125;)</span><br><span class="line">         .on(<span class="string">"error"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">           $(<span class="string">"#txStatus"</span>).text(error);</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getZombieDetails</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cryptoZombies.methods.zombies(id).call()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">zombieToOwner</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cryptoZombies.methods.zombieToOwner(id).call()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">owner</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cryptoZombies.methods.getZombiesByOwner(owner).call()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">          <span class="comment">// Use Mist/MetaMask's provider</span></span><br><span class="line">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span><br><span class="line">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span><br><span class="line">        startApp()</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="订阅事件"><a href="#订阅事件" class="headerlink" title="订阅事件"></a>订阅事件</h1><p>如你所见，通过 Web3.js 和合约交互非常简单直接——一旦你的环境建立起来， <code>call</code> 函数和 <code>send</code> 事务和普通的网络API并没有多少不同。</p>
<p>还有一点东西我们想要讲到——订阅合约事件</p>
<h2 id="监听新僵尸事件"><a href="#监听新僵尸事件" class="headerlink" title="监听新僵尸事件"></a>监听新僵尸事件</h2><p>如果你还记得 <code>zombiefactory.sol</code>，每次新建一个僵尸后，我们会触发一个 <code>NewZombie</code> 事件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event NewZombie(uint zombieId, string name, uint dna);</span><br></pre></td></tr></table></figure>

<p>在 Web3.js里， 你可以 <strong>订阅</strong> 一个事件，这样你的 Web3 提供者可以在每次事件发生后触发你的一些代码逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cryptoZombies.events.NewZombie()</span><br><span class="line">.on(&quot;data&quot;, function(event) &#123;</span><br><span class="line">  let zombie = event.returnValues;</span><br><span class="line">  console.log(&quot;一个新僵尸诞生了！&quot;, zombie.zombieId, zombie.name, zombie.dna);</span><br><span class="line">&#125;).on(&apos;error&apos;, console.error);</span><br></pre></td></tr></table></figure>

<p>注意这段代码将在 <strong>任何</strong> 僵尸生成的时候激发一个警告信息——而不仅仅是当前用用户的僵尸。如果我们只想对当前用户发出提醒呢？</p>
<h2 id="使用-indexed"><a href="#使用-indexed" class="headerlink" title="使用 indexed"></a>使用 <code>indexed</code></h2><p>为了筛选仅和当前用户相关的事件，我们的 Solidity 合约将必须使用 <code>indexed</code> 关键字，就像我们在 ERC721 实现中的<code>Transfer</code> 事件中那样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);</span><br></pre></td></tr></table></figure>

<p>在这种情况下， 因为<code>_from</code> 和 <code>_to</code> 都是 <code>indexed</code>，这就意味着我们可以在前端事件监听中过滤事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cryptoZombies.events.Transfer(&#123; filter: &#123; _to: userAccount &#125; &#125;)</span><br><span class="line">.on(&quot;data&quot;, function(event) &#123;</span><br><span class="line">  let data = event.returnValues;</span><br><span class="line">  // 当前用户更新了一个僵尸！更新界面来显示</span><br><span class="line">&#125;).on(&apos;error&apos;, console.error);</span><br></pre></td></tr></table></figure>

<p>看到了吧， 使用 <code>event</code> 和 <code>indexed</code> 字段对于监听合约中的更改并将其反映到 DApp 的前端界面中是非常有用的做法。</p>
<h2 id="查询过去的事件"><a href="#查询过去的事件" class="headerlink" title="查询过去的事件"></a>查询过去的事件</h2><p>我们甚至可以用 <code>getPastEvents</code> 查询过去的事件，并用过滤器 <code>fromBlock</code> 和 <code>toBlock</code> 给 Solidity 一个事件日志的时间范围(“block” 在这里代表以太坊区块编号）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cryptoZombies.getPastEvents(&quot;NewZombie&quot;, &#123; fromBlock: 0, toBlock: &apos;latest&apos; &#125;)</span><br><span class="line">.then(function(events) &#123;</span><br><span class="line">  // events 是可以用来遍历的 `event` 对象 </span><br><span class="line">  // 这段代码将返回给我们从开始以来创建的僵尸列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>因为你可以用这个方法来查询从最开始起的事件日志，这就有了一个非常有趣的用例： <strong>用事件来作为一种更便宜的存储</strong>。</p>
<p>若你还能记得，在区块链上保存数据是 Solidity 中最贵的操作之一。但是用事件就便宜太多太多了。</p>
<p>这里的短板是，事件不能从智能合约本身读取。但是，如果你有一些数据需要永久性地记录在区块链中以便可以在应用的前端中读取，这将是一个很好的用例。这些数据不会影响智能合约向前的状态。</p>
<p>举个栗子，我们可以用事件来作为僵尸战斗的历史纪录——我们可以在每次僵尸攻击别人以及有一方胜出的时候产生一个事件。智能合约不需要这些数据来计算任何接下来的事情，但是这对我们在前端向用户展示来说是非常有用的东西。</p>
<h2 id="Web3-js-事件-和-MetaMask"><a href="#Web3-js-事件-和-MetaMask" class="headerlink" title="Web3.js 事件 和 MetaMask"></a>Web3.js 事件 和 MetaMask</h2><p>上面的示例代码是针对 Web3.js 最新版1.0的，此版本使用了 <strong><em>WebSockets\</em></strong> 来订阅事件。</p>
<p>但是，MetaMask 尚且不支持最新的事件 API (尽管如此，他们已经在实现这部分功能了， <a href="https://github.com/MetaMask/metamask-extension/issues/3642" target="_blank" rel="noopener">点击这里</a> 查看进度)</p>
<p>所以现在我们必须使用一个单独 Web3 提供者，它针对事件提供了WebSockets支持。 我们可以用 Infura 来像实例化第二份拷贝：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var web3Infura = new Web3(new Web3.providers.WebsocketProvider(&quot;wss://mainnet.infura.io/ws&quot;));</span><br><span class="line">var czEvents = new web3Infura.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span><br></pre></td></tr></table></figure>

<p>然后我们将使用 <code>czEvents.events.Transfer</code> 来监听事件，而不再使用 <code>cryptoZombies.events.Transfer</code>。我们将继续在课程的其他部分使用 <code>cryptoZombies.methods</code>。</p>
<p>将来，在 MetaMask 升级了 API 支持 Web3.js 后，我们就不用这么做了。但是现在我们还是要这么做，以使用 Web3.js 更好的最新语法来监听事件。</p>
<h2 id="放在一起"><a href="#放在一起" class="headerlink" title="放在一起"></a>放在一起</h2><p>来添加一些代码监听 <code>Transfer</code> 事件，并在当前用户获得一个新僵尸的时候为他更新界面。</p>
<p>我们将需要在 <code>startApp</code> 底部添加代码，以保证在添加事件监听器之前 <code>cryptoZombies</code> 已经初始化了。</p>
<ol>
<li>在 <code>startApp()</code>底部，为 <code>cryptoZombies.events.Transfer</code> 复制粘贴上面的2行事件监听代码块</li>
<li>复制监听 <code>Transfer</code> 事件的代码块，并用 <code>_to: userAccount</code> 过滤。要记得把 <code>cryptoZombies</code> 换成 <code>czEvents</code> 好在这 里使用 Infura 而不是 MetaMask 来作为提供者。</li>
<li>用 <code>getZombiesByOwner(userAccount).then(displayZombies);</code> 来更新界面</li>
</ol>
<h2 id="页面修改-7"><a href="#页面修改-7" class="headerlink" title="页面修改"></a>页面修改</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CryptoZombies front-end<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cryptozombies_abi.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"txStatus"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zombies"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> cryptoZombies;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> userAccount;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">startApp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cryptoZombiesAddress = <span class="string">"YOUR_CONTRACT_ADDRESS"</span>;</span></span><br><span class="line"><span class="actionscript">        cryptoZombies = <span class="keyword">new</span> web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> accountInterval = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Check if account has changed</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (web3.eth.accounts[<span class="number">0</span>] !== userAccount) &#123;</span></span><br><span class="line">            userAccount = web3.eth.accounts[0];</span><br><span class="line"><span class="actionscript">            <span class="comment">// Call a function to update the UI with the new account</span></span></span><br><span class="line">            getZombiesByOwner(userAccount)</span><br><span class="line"><span class="vbscript">            .<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 100);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Start here</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> web3Infura = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.WebsocketProvider(<span class="string">"wss://mainnet.infura.io/ws"</span>));<span class="string">")</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> czEvents = <span class="keyword">new</span> web3Infura.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);</span></span><br><span class="line">        </span><br><span class="line"><span class="vbscript">        czEvents.events.Transfer(&#123; <span class="built_in">filter</span>: &#123; _to: userAccount &#125; &#125;)</span></span><br><span class="line"><span class="actionscript">        .on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> data = event.returnValues;</span></span><br><span class="line"><span class="vbscript">          getZombiesByOwner(userAccount).<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line"><span class="javascript">        &#125;).on(<span class="string">'error'</span>, <span class="built_in">console</span>.error);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">displayZombies</span><span class="params">(ids)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#zombies"</span>).empty();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (id <span class="keyword">of</span> ids) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Look up zombie details from our contract. Returns a `zombie` object</span></span></span><br><span class="line">          getZombieDetails(id)</span><br><span class="line"><span class="actionscript">          .then(<span class="function"><span class="keyword">function</span><span class="params">(zombie)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Using ES6's "template literals" to inject variables into the HTML.</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Append each one to our #zombies div</span></span></span><br><span class="line"><span class="vbscript">            $(<span class="string">"#zombies"</span>).append(`&lt;div <span class="keyword">class</span>=<span class="string">"zombie"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Name: $&#123;zombie.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>DNA: $&#123;zombie.dna&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Level: $&#123;zombie.level&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wins: $&#123;zombie.winCount&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Losses: $&#123;zombie.lossCount&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Ready Time: $&#123;zombie.readyTime&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`);</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span><span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// This is going to take a while, so update the UI to let the user know</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// the transaction has been sent</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#txStatus"</span>).text(<span class="string">"Creating new zombie on the blockchain. This may take a while..."</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// Send the tx to our contract:</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.createRandomZombie(name)</span></span><br><span class="line">        .send(&#123; from: userAccount &#125;)</span><br><span class="line"><span class="actionscript">        .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span><span class="params">(receipt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#txStatus"</span>).text(<span class="string">"Successfully created "</span> + name + <span class="string">"!"</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Transaction was accepted into the blockchain, let's redraw the UI</span></span></span><br><span class="line"><span class="vbscript">          getZombiesByOwner(userAccount).<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Do something to alert the user their transaction has failed</span></span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#txStatus"</span>).text(error);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span><span class="params">(zombieId, kittyId)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#txStatus"</span>).text(<span class="string">"Eating a kitty. This may take a while..."</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.feedOnKitty(zombieId, kittyId)</span></span><br><span class="line">        .send(&#123; from: userAccount &#125;)</span><br><span class="line"><span class="actionscript">        .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span><span class="params">(receipt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#txStatus"</span>).text(<span class="string">"Ate a kitty and spawned a new Zombie!"</span>);</span></span><br><span class="line"><span class="vbscript">          getZombiesByOwner(userAccount).<span class="keyword">then</span>(displayZombies);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#txStatus"</span>).text(error);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">levelUp</span><span class="params">(zombieId)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#txStatus"</span>).text(<span class="string">"Leveling up your zombie..."</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.levelUp(zombieId)</span></span><br><span class="line"><span class="actionscript">        .send(&#123; from: userAccount, value: web3.utils.toWei(<span class="string">"0.001"</span>, <span class="string">"ether"</span>) &#125;)</span></span><br><span class="line"><span class="actionscript">        .on(<span class="string">"receipt"</span>, <span class="function"><span class="keyword">function</span><span class="params">(receipt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#txStatus"</span>).text(<span class="string">"Power overwhelming! Zombie successfully leveled up"</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        .on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#txStatus"</span>).text(error);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombieDetails</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombies(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">zombieToOwner</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.zombieToOwner(id).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span><span class="params">(owner)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> cryptoZombies.methods.getZombiesByOwner(owner).call()</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Checking if Web3 has been injected by the browser (Mist/MetaMask)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Use Mist/MetaMask's provider</span></span></span><br><span class="line"><span class="actionscript">          web3js = <span class="keyword">new</span> Web3(web3.currentProvider);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Handle the case where the user doesn't have Metamask installed</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// Probably show them a message prompting them to install Metamask</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Now you can start your app &amp; access web3 freely:</span></span></span><br><span class="line">        startApp()</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="放在一起-1"><a href="#放在一起-1" class="headerlink" title="放在一起"></a>放在一起</h1><p>恭喜啊少年，你已经成功编写了一个 Web3.js 前端界面来和你的智能合约交互</p>
<h2 id="接下来的步骤"><a href="#接下来的步骤" class="headerlink" title="接下来的步骤"></a>接下来的步骤</h2><p>这节课的内容非常基础。我们想要给你展示和智能合约交互的核心内容，而并不想用太多的时间来教你完整实现。我们也不想花太多时间在HTML/CSS上，因为大部分人都已经知道了。</p>
<p>所以我们把一些实现略去了。这里是你要完整实现所需要完成的基本事项列表：</p>
<ol>
<li><p>为 <code>attack</code>, <code>changeName</code>, <code>changeDna</code> 以及 ERC721 函数 <code>transfer</code>, <code>ownerOf</code>, <code>balanceOf</code> 等实现前端函数。这些函数的实现将和我们讲过的 <code>send</code>事务的函数非常相似。</p>
</li>
<li><p>实现一个“管理界面”，在那里你可以调用 <code>setKittyContractAddress</code>, <code>setLevelUpFee</code>, 以及 <code>withdraw</code>。再次，在前端这块没有什么特别的代码——这些实现之间将非常相似。你应该保证从部署合同时候相同的以太坊地址调用这些函数，因为他们都有<code>onlyOwner</code> 修饰符。</p>
</li>
<li><p>在应用里我们还应该实现一些其他的界面：</p>
<p>a. 一个僵尸页面，在那里你可以查看一个特定僵尸的信息并可以分享它的链接。这个页面应该渲染僵尸的外形，展示它的名字，它的所有者（以及用户主页的链接），它的输赢次数，它的战斗记录等等。</p>
<p>b. 一个用户界面，在那里你可以查看用户的僵尸大军并分享它的链接。</p>
<p>c. 一个主页，就是用户页面的变体，可以展示当前用户的僵尸大军（正如我们在index.html）里面实现的那样。</p>
</li>
<li><p>界面中的一些方法允许用户用 CryptoKitties 喂食僵尸。我们可以给每一个僵尸添加一个按钮，叫做“给我投食”，再给一个输入框让用户输入一个猫咪的ID（或者一个猫咪的网址，比如<a href="https://www.cryptokitties.co/kitty/578397），它将触发我们的" target="_blank" rel="noopener">https://www.cryptokitties.co/kitty/578397），它将触发我们的</a> <code>feedOnKitty</code> 函数。</p>
</li>
<li><p>界面中的一些方法将让用户用来攻击其他用户的僵尸</p>
<p>实现这点的一个方法是，当用户浏览其他用户的页面的时候，可以在对方僵尸旁边显示一个按钮，叫做“攻击这头僵尸”。当用户点击的时候，可以弹出一个模块，展示当前用户的僵尸大军并询问用户“你想用哪头僵尸出战？”</p>
<p>在用户的主页，也可以在每个僵尸旁边显示一个按钮，叫做“攻击一个僵尸”。当用户点击的时候，可以弹出一个模块，展示一个搜索框，可以让用户输入僵尸ID或者网址来搜索，或者也可以有一个按钮叫做“随机攻击一头僵尸”，将随机搜索一头僵尸来。</p>
<p>我们也建议你将在冷却期的僵尸用特殊的颜色显示，比如使其变成灰色。这样界面就能告诉用户不能用冷却期的僵尸来进攻。</p>
</li>
<li><p>在用户的主页，每一个僵尸也应该有选项可以更改名字、DNA、以及升级（通过付费）。若用户等级不到，无法使用的选项应该标灰。</p>
</li>
<li><p>对于新用户，我们应该显示一个欢迎信息，并让其确认用 <code>createRandomZombie()</code>创建一个新僵尸。</p>
</li>
<li><p>也可以为我们的智能合约添加一个包含<code>indexed</code> 的用户地址属性的 <code>Attack</code> 事件。这样就可以创建实时通知了——我们可以在用户的僵尸遭受攻击的时候弹出一条通知，这样他们可以看到谁在用什么僵尸攻击他们并做出报复。</p>
</li>
<li><p>我们也许还想实现一些前端缓存层，这样就不用总是为了相同的数据去访问Infura。（在我们当前实现中，<code>displayZombies</code> 将在每次页面刷新的时候为每一个僵尸调用 <code>getZombieDetails</code>，但是实际中我们将只需要为新加入的僵尸调用这个函数）</p>
</li>
<li><p>一个实时聊天室，这样你就可以在你击溃别人的僵尸大军的同时嘲讽他们？</p>
</li>
</ol>
<p>因为这将需要大量的前端代码来实现全部的界面（HTML， CSS， JavaScript 以及诸如 React 和 Vue.js 这样的框架）。光实现一个这样的前端界面也许会花费多达10节课，所以我们将这个光荣的任务交给你自己去完成。</p>
<blockquote>
<p>注意：尽管智能合约是去中心化的。这个用来和DApp交互的前端界面依然需要放在我们中心化的网络服务器上。不过，有了我们正在内测的<a href="https://medium.com/loom-network-chinese/3d0d686163df" target="_blank" rel="noopener">Loom Network</a> SDK，很快你就可以在应用自己的DApp链上运行前端界面而不是中心化的网络服务器。这样在以太坊和 Loom DApp 链上，你的整个应用都100%运行在区块链上了。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学完第六课。你现在有了编写智能合约和前端界面来让用户交互的所需技能了。</p>
<p>在下一课。 我们将涉及这个历程中最后缺失的一部分——将你的智能合约部署到以太坊。</p>
<p>知道你已经急不可耐了，点击“下一章”领取你的奖励吧。</p>
<p><img src="https://i.loli.net/2020/06/30/HMZXOmk7bAvPoIS.png" alt="image-20200630142837304"></p>
<h1 id="第六课打卡"><a href="#第六课打卡" class="headerlink" title="第六课打卡"></a>第六课打卡</h1><p><img src="https://i.loli.net/2020/06/30/k35KTEDdXcHyVzM.png" alt="image-20200630143006394"></p>
<p><a href="https://share.cryptozombies.io/zh/lesson/6/share/The_Phantom_of_Web3" target="_blank" rel="noopener">我的僵尸大军6</a></p>
]]></content>
      <categories>
        <category>Solidity Path</category>
      </categories>
      <tags>
        <tag>web3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10搭建truffle及出现问题的解决方案</title>
    <url>/2020/02/23/windows10%E6%90%AD%E5%BB%BAtruffle%E5%8F%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="1-版本信息"><a href="#1-版本信息" class="headerlink" title="1.版本信息"></a>1.版本信息</h1><h2 id="1-1-node"><a href="#1-1-node" class="headerlink" title="1.1 node"></a>1.1 node</h2><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><a id="more"></a>


<p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">node.js安装配置</a></p>
<p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">node.js教程</a></p>
<p>node中自带npm（包管理器）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">v12.15.0</span><br></pre></td></tr></table></figure>

<h2 id="1-2-npm"><a href="#1-2-npm" class="headerlink" title="1.2 npm"></a>1.2 npm</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line">6.13.4</span><br><span class="line"><span class="meta">#</span><span class="bash">换源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示配置列表</span></span><br><span class="line">npm config list</span><br><span class="line">; cli configs</span><br><span class="line">metrics-registry = "https://registry.npm.taobao.org/"</span><br><span class="line">scope = ""</span><br><span class="line">user-agent = "npm/6.13.4 node/v12.15.0 win32 x64"</span><br><span class="line"></span><br><span class="line">; userconfig C:\Users\12173\.npmrc</span><br><span class="line">registry = "https://registry.npm.taobao.org/"</span><br><span class="line"></span><br><span class="line">; builtin config undefined</span><br><span class="line">prefix = "C:\\Users\\12173\\AppData\\Roaming\\npm"</span><br><span class="line"></span><br><span class="line">; node bin location = E:\Program Files\nodejs\node.exe</span><br><span class="line">; cwd = C:\Users\12173</span><br><span class="line">; HOME = C:\Users\12173</span><br><span class="line">; "npm config ls -l" to show all defaults.</span><br></pre></td></tr></table></figure>

<h2 id="1-3-git"><a href="#1-3-git" class="headerlink" title="1.3 git"></a>1.3 git</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure>

<h2 id="1-4-安装ganache-cli节点仿真器也可用图形化界面的ganache"><a href="#1-4-安装ganache-cli节点仿真器也可用图形化界面的ganache" class="headerlink" title="1.4 安装ganache-cli节点仿真器也可用图形化界面的ganache"></a>1.4 安装ganache-cli节点仿真器也可用图形化界面的ganache</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1 简介"></a>1.4.1 简介</h3><p>用于测试和开发的快速以太坊RPC客户端。</p>
<p>注意：testrpc 是现在的ganache-cli。 像使用testrpc一样去使用它。</p>
<p> 为了快速开发和测试以太坊DApp，我们通常使用以太坊节点仿真器来模拟区块链，最流行的节点仿真器就是Ganache，之前被称为TeseRPC。 </p>
<h3 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g ganache-cli</span><br><span class="line"></span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\ganache-cli -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\ganache-cli\cli.js</span><br><span class="line">+ ganache-cli@6.9.1</span><br><span class="line">updated 1 package in 5.506s</span><br><span class="line"></span><br><span class="line">ganache-cli --version</span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br></pre></td></tr></table></figure>

<h2 id="1-5-安装solidity编译器"><a href="#1-5-安装solidity编译器" class="headerlink" title="1.5 安装solidity编译器"></a>1.5 安装solidity编译器</h2><h3 id="1-5-1-简介"><a href="#1-5-1-简介" class="headerlink" title="1.5.1 简介"></a>1.5.1 简介</h3><p> solidity是开发以太坊智能合约的编程语言。[ 官网 ] : <a href="https://solidity.readthedocs.io/en/v0.6.3/" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/v0.6.3/</a> </p>
<h3 id="1-5-2-安装"><a href="#1-5-2-安装" class="headerlink" title="1.5.2 安装"></a>1.5.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g solc</span><br><span class="line"></span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\solcjs -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\solc\solcjs</span><br><span class="line">+ solc@0.6.3</span><br><span class="line">added 25 packages from 15 contributors in 39.318s</span><br><span class="line"></span><br><span class="line">solcjs -V</span><br><span class="line">0.6.3+commit.8dda9521.Emscripten.clang</span><br></pre></td></tr></table></figure>

<h2 id="1-6-Web3"><a href="#1-6-Web3" class="headerlink" title="1.6 Web3"></a>1.6 Web3</h2><h3 id="1-6-1-简介"><a href="#1-6-1-简介" class="headerlink" title="1.6.1 简介"></a>1.6.1 简介</h3><p> web3.js是一个库集合，你可以使用HTTP或IPC连接本地或远程以太它节点进行交互。 web3的JavaScript库能够与以太坊区块链交互。 它可以检索用户帐户，发送交易，与智能合约交互等。 </p>
<h3 id="1-6-2-安装"><a href="#1-6-2-安装" class="headerlink" title="1.6.2 安装"></a>1.6.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g web3@0.20.2</span><br><span class="line">+ web3@0.20.2</span><br><span class="line">added 6 packages from 9 contributors in 44.408s</span><br><span class="line"></span><br><span class="line">node -p 'require("web3")'</span><br><span class="line">require(web3)</span><br></pre></td></tr></table></figure>

<h2 id="1-7-Truffle"><a href="#1-7-Truffle" class="headerlink" title="1.7 Truffle"></a>1.7 Truffle</h2><h3 id="1-7-1-简介"><a href="#1-7-1-简介" class="headerlink" title="1.7.1 简介"></a>1.7.1 简介</h3><p> Truffle是针对基于以太坊的Solidity语言的一套开发框架。  本身基于Javascript </p>
<h3 id="1-7-2-安装"><a href="#1-7-2-安装" class="headerlink" title="1.7.2 安装"></a>1.7.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g truffle</span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\truffle -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\truffle\build\cli.bundled.js</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> truffle@5.1.14 postinstall C:\Users\12173\AppData\Roaming\npm\node_modules\truffle</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node ./scripts/postinstall.js</span></span><br><span class="line"></span><br><span class="line">- Fetching solc version list from solc-bin. Attempt #1</span><br><span class="line">- Fetching solc version list from solc-bin. Attempt #2</span><br><span class="line">- Fetching solc version list from solc-bin. Attempt #3</span><br><span class="line">+ truffle@5.1.14</span><br><span class="line">added 27 packages from 439 contributors in 121.064s</span><br><span class="line"></span><br><span class="line">truffle --version</span><br><span class="line">Truffle v5.1.14 - a development framework for Ethereum</span><br><span class="line"></span><br><span class="line">Usage: truffle &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build     Execute build pipeline (if configuration present)</span><br><span class="line">  compile   Compile contract source files</span><br><span class="line">  config    Set user-level configuration options</span><br><span class="line">  console   Run a console with contract abstractions and commands available</span><br><span class="line">  create    Helper to create new contracts, migrations and tests</span><br><span class="line">  debug     Interactively debug any transaction on the blockchain (experimental)</span><br><span class="line">  deploy    (alias for migrate)</span><br><span class="line">  develop   Open a console with a local development blockchain</span><br><span class="line">  exec      Execute a JS module within this Truffle environment</span><br><span class="line">  help      List all commands or provide information about a specific command</span><br><span class="line">  init      Initialize new and empty Ethereum project</span><br><span class="line">  install   Install a package from the Ethereum Package Registry</span><br><span class="line">  migrate   Run migrations to deploy contracts</span><br><span class="line">  networks  Show addresses for deployed contracts on each network</span><br><span class="line">  obtain    Fetch and cache a specified compiler</span><br><span class="line">  opcode    Print the compiled opcodes for a given contract</span><br><span class="line">  publish   Publish a package to the Ethereum Package Registry</span><br><span class="line">  run       Run a third-party command</span><br><span class="line">  test      Run JavaScript and Solidity tests</span><br><span class="line">  unbox     Download a Truffle Box, a pre-built Truffle project</span><br><span class="line">  version   Show version number and exit</span><br><span class="line">  watch     Watch filesystem for changes and rebuild the project automatically</span><br><span class="line"></span><br><span class="line">See more at http://truffleframework.com/docs</span><br></pre></td></tr></table></figure>

<h2 id="1-8webpack"><a href="#1-8webpack" class="headerlink" title="1.8webpack"></a>1.8webpack</h2><h3 id="1-8-1简介"><a href="#1-8-1简介" class="headerlink" title="1.8.1简介"></a>1.8.1简介</h3><p> 本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。 </p>
<h3 id="1-8-2安装"><a href="#1-8-2安装" class="headerlink" title="1.8.2安装"></a>1.8.2安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> npm install -g webpack@3.11.0</span><br><span class="line">C:\Users\12173\AppData\Roaming\npm\webpack -&gt; C:\Users\12173\AppData\Roaming\npm\node_modules\webpack\bin\webpack.js</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> uglifyjs-webpack-plugin@0.4.6 postinstall C:\Users\12173\AppData\Roaming\npm\node_modules\webpack\node_modules\uglifyjs-webpack-plugin</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node lib/post_install.js</span></span><br><span class="line"></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\webpack\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">+ webpack@3.11.0</span><br><span class="line">added 333 packages from 285 contributors in 26.975s</span><br><span class="line"></span><br><span class="line">webpack -v</span><br><span class="line">3.11.0</span><br></pre></td></tr></table></figure>

<h1 id="2-相关知识"><a href="#2-相关知识" class="headerlink" title="2.相关知识"></a>2.相关知识</h1><h2 id="2-1-Truffle与web3初始"><a href="#2-1-Truffle与web3初始" class="headerlink" title="2.1 Truffle与web3初始"></a>2.1 Truffle与web3初始</h2><p><strong>Truffle提供功能如下</strong></p>
<ol>
<li><p>内置智能合约编译、链接、部署和二进制字节码管理</p>
</li>
<li><p>针对快速迭代开发的自动化合约</p>
</li>
<li><p>可脚本化、可扩展部署和迁移框架</p>
</li>
<li><p>网络管理，可部署到任意数量的公共网络和私有网络</p>
</li>
<li><p>使用EthPM和NPM进行包安装管理</p>
</li>
<li><p>用于直接与合约通信的交互式控制台</p>
</li>
<li><p>支持持续集成可配置构建管道</p>
</li>
<li><p>外部脚本运行程序可以在Truffle环境中执行脚本</p>
</li>
<li><p>提供合约抽象接口，可以直接通过var instance = Storage.deployed()拿到合约对象，然后在JavaScript中直接操作对应的合约函数。</p>
</li>
</ol>
<p>*<em>web3.js *</em></p>
<ol>
<li><p>web3.js提供了用于和geth通信的javascript API,其内部使用了JSON-RPC与geth通信。</p>
</li>
<li><p>JSON-RPC是一个无状态且轻量级的远程过程调用，允许使用socket,http等协议进行通信。使用JSON作为数据格式。</p>
</li>
<li><p>web3.js可以与所有支持JSON-RPC的节点通信。不仅支持ETH中的API，还支持ETH生态中其他系统的API，比如whispir</p>
</li>
<li><p>whispir是一个集成进ETH的消息系统 ， 允许DApp发送小量信息进行非实时通信。</p>
</li>
</ol>
<h1 id="3-Truffle项目构建"><a href="#3-Truffle项目构建" class="headerlink" title="3. Truffle项目构建"></a>3. Truffle项目构建</h1><h2 id="3-1初始化Webpack项目（truffle-unbox-webpack）"><a href="#3-1初始化Webpack项目（truffle-unbox-webpack）" class="headerlink" title="3.1初始化Webpack项目（truffle unbox webpack）"></a>3.1初始化Webpack项目（truffle unbox webpack）</h2><p>有时后下载模板会失败，和网络有关系。若无法在终端下载，则可以在github下载相应模板（github下载的模板需要手动安装组件npm install）</p>
<p>truffle init 初始化最基础的项目框架。</p>
<p>truffle unbox 系列，有好多可供下载的模板。比如 truffle unbox vue-box 一个前端基于vue框架的dapp模板。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truffle unbox webpack</span><br><span class="line">This directory is non-empty...</span><br><span class="line">? Proceed anyway? (Y/n)</span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">? Proceed anyway? Yes</span><br><span class="line">√ Preparing to download box</span><br><span class="line">√ Downloading</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! find Python Python is not set from command line or npm configuration</span><br><span class="line">gyp ERR! find Python Python is not set from environment variable PYTHON</span><br><span class="line">gyp ERR! find Python checking if "python" can be used</span><br><span class="line">gyp ERR! find Python - "python" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python2" can be used</span><br><span class="line">gyp ERR! find Python - "python2" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python3" can be used</span><br><span class="line">gyp ERR! find Python - "python3" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if the py launcher can be used to find Python 2</span><br><span class="line">gyp ERR! find Python - "py.exe" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python27\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python27\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python37\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python37\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python You need to install the latest version of Python.</span><br><span class="line">gyp ERR! find Python Node-gyp should be able to find and use Python. If not,</span><br><span class="line">gyp ERR! find Python you can try one of the following options:</span><br><span class="line">gyp ERR! find Python - Use the switch --python="C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python   (accepted by both node-gyp and npm)</span><br><span class="line">gyp ERR! find Python - Set the environment variable PYTHON</span><br><span class="line">gyp ERR! find Python - Set the npm configuration variable python:</span><br><span class="line">gyp ERR! find Python   npm config set python "C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python For more information consult the documentation at:</span><br><span class="line">gyp ERR! find Python https://github.com/nodejs/node-gyp#installation</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Could not find any Python installation to use</span><br><span class="line">gyp ERR! stack     at PythonFinder.fail (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:307:47)</span><br><span class="line">gyp ERR! stack     at PythonFinder.runChecks (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:136:21)</span><br><span class="line">gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:225:16)</span><br><span class="line">gyp ERR! stack     at PythonFinder.execFileCallback (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:271:16)</span><br><span class="line">gyp ERR! stack     at exithandler (child_process.js:302:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.errorhandler (child_process.js:314:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:223:5)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:270:12)</span><br><span class="line">gyp ERR! stack     at onErrorNT (internal/child_process.js:456:16)</span><br><span class="line">gyp ERR! stack     at processTicksAndRejections (internal/process/task_queues.js:81:21)</span><br><span class="line">gyp ERR! System Windows_NT 10.0.16299</span><br><span class="line">gyp ERR! command "E:\\Program Files\\nodejs\\node.exe" "E:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js" "rebuild"</span><br><span class="line">gyp ERR! cwd E:\Dapp\hello\app\node_modules\keccak</span><br><span class="line">gyp ERR! node -v v12.15.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.5</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">/ Downloading</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! keccak@2.1.0 rebuild: `node-gyp rebuild`</span><br><span class="line"></span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the keccak@2.1.0 rebuild script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm WARN Local package.json exists, but node_modules missing, did you mean to install?</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\12173\AppData\Roaming\npm-cache\_logs\2020-02-22T17_26_38_700Z-debug.log</span><br><span class="line">gyp ERR! find Python</span><br><span class="line"></span><br><span class="line">gyp ERR! find Python Python is not set from environment variable PYTHON</span><br><span class="line">gyp ERR! find Python checking if "python" can be used</span><br><span class="line">gyp ERR! find Python - "python" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python2" can be used</span><br><span class="line">gyp ERR! find Python - "python2" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if "python3" can be used</span><br><span class="line">gyp ERR! find Python - "python3" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if the py launcher can be used to find Python 2</span><br><span class="line">gyp ERR! find Python - "py.exe" is not in PATH or produced an error</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python27\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python27\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python checking if Python is C:\Python37\python.exe</span><br><span class="line">gyp ERR! find Python - "C:\Python37\python.exe" could not be run</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python You need to install the latest version of Python.</span><br><span class="line">gyp ERR! find Python Node-gyp should be able to find and use Python. If not,</span><br><span class="line">gyp ERR! find Python you can try one of the following options:</span><br><span class="line">gyp ERR! find Python - Use the switch --python="C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python   (accepted by both node-gyp and npm)</span><br><span class="line">gyp ERR! find Python - Set the environment variable PYTHON</span><br><span class="line">gyp ERR! find Python - Set the npm configuration variable python:</span><br><span class="line">gyp ERR! find Python   npm config set python "C:\Path\To\python.exe"</span><br><span class="line">gyp ERR! find Python For more information consult the documentation at:</span><br><span class="line">gyp ERR! find Python https://github.com/nodejs/node-gyp#installation</span><br><span class="line">gyp ERR! find Python **********************************************************</span><br><span class="line">gyp ERR! find Python</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Could not find any Python installation to use</span><br><span class="line">gyp ERR! stack     at PythonFinder.fail (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:307:47)</span><br><span class="line">gyp ERR! stack     at PythonFinder.runChecks (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:136:21)</span><br><span class="line">gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:225:16)</span><br><span class="line">gyp ERR! stack     at PythonFinder.execFileCallback (E:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\find-python.js:271:16)</span><br><span class="line">gyp ERR! stack     at exithandler (child_process.js:302:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.errorhandler (child_process.js:314:5)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:223:5)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:270:12)</span><br><span class="line">gyp ERR! stack     at onErrorNT (internal/child_process.js:456:16)</span><br><span class="line">gyp ERR! stack     at processTicksAndRejections (internal/process/task_queues.js:81:21)</span><br><span class="line">gyp ERR! System Windows_NT 10.0.16299</span><br><span class="line">gyp ERR! command "E:\\Program Files\\nodejs\\node.exe" "E:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js" "rebuild"</span><br><span class="line">gyp ERR! cwd E:\Dapp\hello\app\node_modules\secp256k1</span><br><span class="line">gyp ERR! node -v v12.15.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.5</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! secp256k1@3.7.1 rebuild: `node-gyp rebuild`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the secp256k1@3.7.1 rebuild script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm WARN Local package.json exists, but node_modules missing, did you mean to install?</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\12173\AppData\Roaming\npm-cache\_logs\2020-02-22T17_26_39_779Z-debug.log</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">√ cleaning up temporary files</span><br><span class="line">√ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful, sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile:              truffle compile</span><br><span class="line">  Migrate:              truffle migrate</span><br><span class="line">  Test contracts:       truffle test</span><br><span class="line">  Run dev server:       cd app &amp;&amp; npm run dev</span><br><span class="line">  Build for production: cd app &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>

<p>解决没有python环境的问题：</p>
<p>我们选择安装windows-build-tools,他的依赖中包含一些Visual Studio Build Tools以及python2.7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global --production windows-build-tools </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> windows-build-tools@5.2.2 postinstall C:\Users\12173\AppData\Roaming\npm\node_modules\windows-build-tools</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node ./dist/index.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading python-2.7.15.amd64.msi</span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">                                            ] 0.0% (0 B/s)</span></span><br><span class="line">Downloaded python-2.7.15.amd64.msi. Saved to C:\Users\12173\.windows-build-tools\python-2.7.15.amd64.msi.</span><br><span class="line">Downloading vs_BuildTools.exe</span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">                                            ] 0.0% (0 B/s)</span></span><br><span class="line">Downloaded vs_BuildTools.exe. Saved to C:\Users\12173\.windows-build-tools\vs_BuildTools.exe.</span><br><span class="line"></span><br><span class="line">Starting installation...</span><br><span class="line">Launched installers, now waiting for them to finish.</span><br><span class="line">This will likely take some time - please be patient!</span><br><span class="line"></span><br><span class="line">Status from the installers:</span><br><span class="line">---------- Visual Studio Build Tools ----------</span><br><span class="line">Successfully installed Visual Studio Build Tools.</span><br><span class="line">------------------- Python --------------------</span><br><span class="line">Action ended 12:45:23: MsiUnpublishAssemblies. Return value 1.</span><br><span class="line">Action start 12:45:23: UnpublishFeatures.</span><br><span class="line">Action ended 12:45:23: UnpublishFeatures. Return value 1.</span><br><span class="line">Action start 12:45:23: StopServices.</span><br><span class="line">Action ended 12:45:23: StopServices. Return value 1.</span><br><span class="line"></span><br><span class="line">Now configuring the Visual Studio Build Tools and Python...</span><br><span class="line"></span><br><span class="line">All done!</span><br><span class="line"></span><br><span class="line">+ windows-build-tools@5.2.2</span><br><span class="line">updated 1 package in 15.463s</span><br></pre></td></tr></table></figure>

<p><strong>配置python2.7的环境变量</strong></p>
<p>在系统变量path下添加如下内容：</p>
<p>C:\Users\12173.windows-build-tools\python27</p>
<p>初始化成功结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle unbox webpack</span></span><br><span class="line"></span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">- Preparing to download box</span><br><span class="line">√ Preparing to download box</span><br><span class="line">- Downloading</span><br><span class="line">√ Downloading</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">- cleaning up temporary files</span><br><span class="line">√ cleaning up temporary files</span><br><span class="line">- Setting up box</span><br><span class="line">√ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful, sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile:              truffle compile</span><br><span class="line">  Migrate:              truffle migrate</span><br><span class="line">  Test contracts:       truffle test</span><br><span class="line">  Run dev server:       cd app &amp;&amp; npm run dev</span><br><span class="line">  Build for production: cd app &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>



<h2 id="3-2-修改truffle配置"><a href="#3-2-修改truffle配置" class="headerlink" title="3.2 修改truffle配置"></a>3.2 修改truffle配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">development: &#123;</span><br><span class="line"> host: <span class="string">"127.0.0.1"</span>,     <span class="comment">// Localhost (default: none)</span></span><br><span class="line"> port: <span class="number">8545</span>,            <span class="comment">// Standard Ethereum port (default: none)</span></span><br><span class="line"> network_id: <span class="string">"*"</span>,       <span class="comment">// Any network (default: none)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="3-3启动节点（-ganache-cli-）"><a href="#3-3启动节点（-ganache-cli-）" class="headerlink" title="3.3启动节点（ ganache-cli ）"></a>3.3启动节点（ ganache-cli ）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ganache-cli</span></span><br><span class="line">Ganache CLI v6.9.1 (ganache-core: 2.10.2)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7 (100 ETH)</span><br><span class="line">(1) 0xd188bc0a7BEE5890dcd0D59d384199520D75665D (100 ETH)</span><br><span class="line">(2) 0xC7be8b832cb3A3285803a006648Fe4dB0E0e4dD9 (100 ETH)</span><br><span class="line">(3) 0xe1F1B3C361fd5361ad131aA9BBfDef9BaC3f009C (100 ETH)</span><br><span class="line">(4) 0x2d8AfB48dA53BDFFd25B52d7f89A1455769571C7 (100 ETH)</span><br><span class="line">(5) 0x8Ce8ceF65b854A49df75D7f9DcCd2a8017E263B8 (100 ETH)</span><br><span class="line">(6) 0x87d5646Fcb48DBB8d0453104EDe3bb8b75fc75b6 (100 ETH)</span><br><span class="line">(7) 0x6B950A801d325a08Fe7d064E2D1A60A700dA0812 (100 ETH)</span><br><span class="line">(8) 0x74C29Af89F6ABD921059B3666168CD78F9144aE7 (100 ETH)</span><br><span class="line">(9) 0x96708eaE55B8D3749493b7069692E31BDc9B4465 (100 ETH)</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 0xe71b27443128f13736d4abf56be959231a495e240827fecda3e89671ddaf03c2</span><br><span class="line">(1) 0xc6d43777cce13673ffce12406437e97d85f10809704643a6b348c00cb7bbeea3</span><br><span class="line">(2) 0x9bdcbb3a51e3645c4788091f27fa33043f6a1c7ad078c654482bc04c847bd41b</span><br><span class="line">(3) 0x0978ac0611e532bac1697beca2b7494981bababc9680a0d8176df3ef8a7f9e13</span><br><span class="line">(4) 0xf0e5af8777fee7fc5aa1dff3ffac6f41f9f28a3da4abd300e9b5439b309822d3</span><br><span class="line">(5) 0x9475d9b1047e2d52be6d9ab4c0eaeba2d0ecc54a305d3e75874551d0308d83cf</span><br><span class="line">(6) 0x496a8ceed4f5c273905ade586e654c1504cbeaab61128e0197aa81bcfa0badd9</span><br><span class="line">(7) 0xea4a812229f425bcab97c684b7aade7399e35bbe3f27971ff6c4d394d862a64f</span><br><span class="line">(8) 0xba0a1f75915f771b4e24ceee2a96841e7d2f57849569b3da4d6e567b3206f278</span><br><span class="line">(9) 0x79fa9edf9864b0f90c0b0e88e69cb56eb7a01e33f07c669b82ee053bd1248d3d</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      deputy explain stock just boat year health desk arrive double almost depend</span><br><span class="line">Base HD Path:  m/44'/60'/0'/0/&#123;account_index&#125;</span><br><span class="line"></span><br><span class="line">Gas Price</span><br><span class="line">==================</span><br><span class="line">20000000000</span><br><span class="line"></span><br><span class="line">Gas Limit</span><br><span class="line">==================</span><br><span class="line">6721975</span><br><span class="line"></span><br><span class="line">Call Gas Limit</span><br><span class="line">==================</span><br><span class="line">9007199254740991</span><br><span class="line"></span><br><span class="line">Listening on 127.0.0.1:8545</span><br></pre></td></tr></table></figure>

<p> 成功之后，会给自动建立10个账户，必须先启动这个之后才能合约的编译与部署。否则部署不成功。 </p>
<h2 id="3-4-安装项目依赖的NPM包"><a href="#3-4-安装项目依赖的NPM包" class="headerlink" title="3.4 安装项目依赖的NPM包"></a>3.4 安装项目依赖的NPM包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm WARN saveError ENOENT: no such file or directory, open 'E:\Dapp\myproject\package.json'</span><br><span class="line">npm WARN enoent ENOENT: no such file or directory, open 'E:\Dapp\myproject\package.json'</span><br><span class="line">npm WARN myproject No description</span><br><span class="line">npm WARN myproject No repository field.</span><br><span class="line">npm WARN myproject No README data</span><br><span class="line">npm WARN myproject No license field.</span><br><span class="line"></span><br><span class="line">up to date in 0.418s</span><br></pre></td></tr></table></figure>

<p><strong>出错原因：</strong></p>
<p>缺少<strong>package.json</strong>文件。</p>
<p>解决办法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化项目</span></span><br><span class="line">npm init -f</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装依赖</span></span><br><span class="line">npm install formidable --save</span><br></pre></td></tr></table></figure>

<p><code>-f</code>表示force的意思，不加这个，npm会让你输入一堆信息，比如name、version之类，如果只是做做实验小demo，直接<code>-f</code>，npm帮你初始化package.json，并填充各种默认值，省事。</p>
<p><code>--save</code>表示将安装的包加入依赖列表的意思，可以看下package.json 里的<code>dependencies</code>字段。后面再运行 <code>npm install</code>，就会把所有依赖安装下来。如果不加<code>--save</code>，什么都不会安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -f</span><br><span class="line">npm WARN using --force I sure hope you know what you are doing.</span><br><span class="line">Wrote to E:\Dapp\myproject\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "myproject",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "truffle-config.js",</span><br><span class="line">  "directories": &#123;</span><br><span class="line">    "test": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC"</span><br><span class="line">  </span><br><span class="line">npm install formidable --save</span><br><span class="line">npm WARN myproject@1.0.0 No description</span><br><span class="line">npm WARN myproject@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ formidable@1.2.1</span><br><span class="line">added 1 package in 0.438s</span><br></pre></td></tr></table></figure>

<p><strong>错误描述：</strong></p>
<p>缺少描述、缺少仓库。</p>
<p><strong>解决办法：</strong></p>
<p>修改package.内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"myproject"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"my first project"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"truffle-config.js"</span>,</span><br><span class="line">  <span class="attr">"directories"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"formidable"</span>: <span class="string">"^1.2.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install formidable --save</span><br><span class="line">+ formidable@1.2.1</span><br><span class="line">updated 1 package in 0.353s</span><br></pre></td></tr></table></figure>

<h2 id="3-5编译合约（truffle-compile）"><a href="#3-5编译合约（truffle-compile）" class="headerlink" title="3.5编译合约（truffle compile）"></a>3.5编译合约（truffle compile）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Dapp\myproject&gt;truffle compile</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\ConvertLib.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\MetaCoin.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to E:\Dapp\myproject\build\contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure>

<h2 id="3-6部署合约（truffle-migrate）"><a href="#3-6部署合约（truffle-migrate）" class="headerlink" title="3.6部署合约（truffle migrate）"></a>3.6部署合约（truffle migrate）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Dapp\myproject&gt;truffle migrate</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\ConvertLib.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\MetaCoin.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to E:\Dapp\myproject\build\contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">'development'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      1582444858253</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 0x6691b7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying 'Migrations'</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xe0b8512e708ca45c8b2e7237f689f61f658b4075f149f76cb8c842363f848af0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x9A73F98453dF48993F7a252C1e7810C05C976891</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        1</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1582446022</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.9967165</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            164175</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0032835 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:           0.0032835 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying 'ConvertLib'</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xb5e1469996cbd6f1592edce0d68c9661abb9c6d47d1b9af3b9121e7273c4c987</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xe8b65D954EC3dB61A068184DAFAEcc7a4Ce3784E</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        3</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1582446023</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.99396028</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            95470</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0019094 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   Linking</span><br><span class="line">   -------</span><br><span class="line">   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib (at address: 0xe8b65D954EC3dB61A068184DAFAEcc7a4Ce3784E)</span><br><span class="line"></span><br><span class="line">   Deploying 'MetaCoin'</span><br><span class="line">   --------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0x411669a9e6bb3c8986d411433ce92e4c2a89228069221b2d2f25efe01764bc9b</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xC0B8C2A1384b4bacE94FA448B7cA1fD01C012f68</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        4</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1582446023</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc1a8803eAA83aCb7bf942e5cAf4284b0e2AdcDD7</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.98822898</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            286565</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0057313 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:           0.0076407 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total deployments:   3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Final cost:          0.0109242 ETH</span></span><br></pre></td></tr></table></figure>

<h2 id="3-7启动Dapp（npm-run-dev）"><a href="#3-7启动Dapp（npm-run-dev）" class="headerlink" title="3.7启动Dapp（npm run dev）"></a>3.7启动Dapp（npm run dev）</h2><p><strong>注意：</strong>需要在app目录下执行，或者在当前目录执行cd app &amp;&amp; npm run dev</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line">npm ERR! missing script: dev</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\12173\AppData\Roaming\npm-cache\_logs\2020-02-23T08_21_47_877Z-debug.log</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\Dapp\webpacktest\app&gt;npm run dev</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> app@1.0.0 dev E:\Dapp\webpacktest\app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> webpack-dev-server</span></span><br><span class="line"></span><br><span class="line">i ｢wds｣: Project is running at http://localhost:8080/</span><br><span class="line">i ｢wds｣: webpack output is served from /</span><br><span class="line">i ｢wds｣: Content not from webpack is served from E:\Dapp\webpacktest\app\dist</span><br><span class="line">× ｢wdm｣: Hash: 438dc1a71410c6fb5b06</span><br><span class="line">Version: webpack 4.41.2</span><br><span class="line">Time: 1794ms</span><br><span class="line">Built at: 2020-02-23 16:52:17</span><br><span class="line">     Asset       Size  Chunks             Chunk Names</span><br><span class="line">index.html  879 bytes          [emitted]</span><br><span class="line">  index.js   2.37 MiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = index.js</span><br><span class="line">[0] multi (webpack)-dev-server/client?http://localhost:8080 ./src/index.js 40 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/ansi-html/index.js] 4.16 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/html-entities/index.js] 231 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/loglevel/lib/loglevel.js] 8.36 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/web3/src/index.js] 2.01 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/index.js?http://localhost:8080] (webpack)-dev-server/client?http://localhost:8080 4.29 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.51 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.53 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/createSocketUrl.js] (webpack)-dev-server/client/utils/createSocketUrl.js 2.89 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/log.js] (webpack)-dev-server/client/utils/log.js 964 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/reloadApp.js] (webpack)-dev-server/client/utils/reloadApp.js 1.59 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/client/utils/sendMessage.js] (webpack)-dev-server/client/utils/sendMessage.js 402 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js] (webpack)-dev-server/node_modules/strip-ansi/index.js 161 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack/hot sync ^\.\/log$] (webpack)/hot sync nonrecursive ^\.\/log$ 170 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/index.js] 2.08 KiB &#123;main&#125; [built]</span><br><span class="line">    + 349 hidden modules</span><br><span class="line"></span><br><span class="line">ERROR in ./src/index.js</span><br><span class="line">Module not found: Error: Can't resolve '../../build/contracts/MetaCoin.json' in 'E:\Dapp\webpacktest\app\src'</span><br><span class="line"> @ ./src/index.js 2:0-67 15:30-46 17:8-24</span><br><span class="line">i ｢wdm｣: Failed to compile.</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://s2.ax1x.com/2020/02/23/3188K0.png" alt="3188K0.png"></p>
<p>注：<strong>从3.3以后的操作都在项目工程的app目录下进行</strong></p>
<h1 id="4-以太坊宠物商店‘"><a href="#4-以太坊宠物商店‘" class="headerlink" title="4. 以太坊宠物商店‘"></a>4. 以太坊宠物商店‘</h1><h2 id="4-1初始化项目（truffle-unbox-pet-shop）"><a href="#4-1初始化项目（truffle-unbox-pet-shop）" class="headerlink" title="4.1初始化项目（truffle unbox pet-shop）"></a>4.1初始化项目（truffle unbox pet-shop）</h2><p>在指定目录下执行<strong>truffle unbox pet-shop</strong>命令初始化项目。生成目录如下：</p>
<p><img src="https://s2.ax1x.com/2020/02/26/3NA3DS.png" alt="pet-shop.png"></p>
<h2 id="4-2编写智能合约"><a href="#4-2编写智能合约" class="headerlink" title="4.2编写智能合约"></a>4.2编写智能合约</h2><p>在contracts目录下创建新合约文件<strong>Adoption.sol</strong>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.21 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract Adoption &#123;</span><br><span class="line">	//定义变量 数组类型的 adopters   保存领养者地址</span><br><span class="line">	address[16] public adopters;</span><br><span class="line">	</span><br><span class="line">	// 定义方法  </span><br><span class="line">	//Adopting a pet 领养宠物</span><br><span class="line">	function adopt(uint petId) public returns (uint) &#123;</span><br><span class="line">		require(petId &gt;= 0 &amp;&amp; petId &lt;= 15);</span><br><span class="line"></span><br><span class="line">		adopters[petId] = msg.sender;</span><br><span class="line"></span><br><span class="line">	return petId;</span><br><span class="line">	&#125;</span><br><span class="line">	// Retrieving the adopters  检索领养者</span><br><span class="line">	function getAdopters() public view returns (address[16] memory) &#123;</span><br><span class="line">		return adopters;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3编译和迁移智能合约"><a href="#4-3编译和迁移智能合约" class="headerlink" title="4.3编译和迁移智能合约"></a>4.3编译和迁移智能合约</h2><h3 id="4-3-1汇编"><a href="#4-3-1汇编" class="headerlink" title="4.3.1汇编"></a>4.3.1汇编</h3><p>Solidity是一种编译语言，这意味着我们需要将Solidity编译为字节代码，以供以太坊虚拟机（EVM）执行。将其视为将人类可读的Solidity转换为EVM可以理解的东西。</p>
<ol>
<li><p>在项目根目录下执行<strong>truffle compile</strong></p>
<p>可以看到如下输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle compile</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Adoption.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to E:\Dapp\guide-pet-shop\build\contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-3-2迁移"><a href="#4-3-2迁移" class="headerlink" title="4.3.2迁移"></a>4.3.2迁移</h3><p>在成功编译合约后，需将合约迁移到区块链上。</p>
<p> <strong>迁移是一种部署脚本，旨在更改应用程序合同的状态</strong>，将其从一种状态转移到另一种状态。对于第一次迁移，您可能只是在部署新代码，但是随着时间的推移，其他迁移可能会移动数据或用新合同替换合同。 </p>
<p>您将在<code>migrations/</code>目录中看到一个JavaScript文件：<code>1_initial_migration.js</code>。这将处理部署<code>Migrations.sol</code>合同以观察后续的智能合同迁移，并确保我们将来不会重复迁移未更改的合同。</p>
<p>现在，我们准备创建自己的迁移脚本。</p>
<ol>
<li><p>在<code>migrations/</code>目录中创建一个新的js文件命名为 <strong>2_deploy_contracts.js</strong> 。 </p>
</li>
<li><p>添加如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Adoption = artifacts.require(<span class="string">"Adoption"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Adoption);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在将合同迁移到区块链之前，我们需要运行一个区块链。在此我使用的是ganache</p>
<p>运行ganache</p>
<p><img src="https://s2.ax1x.com/2020/02/26/3Nu4W4.png" alt="3Nu4W4.png"></p>
</li>
</ol>
<ol start="4">
<li>回到我们的终端，将合同迁移到区块链(truffle migrate)。 </li>
</ol>
<pre><code>在打开的 Ganache 里可以看到区块链状态的变化，现在产生了 4 个区块。 </code></pre><p>   <img src="https://s2.ax1x.com/2020/02/26/3NKuXn.png" alt="3NKuXn.png"></p>
<h2 id="4-4测试智能合约"><a href="#4-4测试智能合约" class="headerlink" title="4.4测试智能合约"></a>4.4测试智能合约</h2><p> Truffle在智能合约测试方面非常灵活，因为测试可以用JavaScript或Solidity编写。在此，我们将使用Solidity编写测试。 </p>
<ol>
<li><p>在<code>test/</code>目录中创建一个新文件 <code>TestAdoption.sol</code>。 </p>
</li>
<li><p>写入内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.5.16;</span><br><span class="line"></span><br><span class="line">import &quot;truffle/Assert.sol&quot;;   // 引入的断言</span><br><span class="line">import &quot;truffle/DeployedAddresses.sol&quot;;  // 用来获取被测试合约的地址</span><br><span class="line">import &quot;../contracts/Adoption.sol&quot;;      // 被测试合约</span><br><span class="line"></span><br><span class="line">contract TestAdoption &#123;</span><br><span class="line">  Adoption adoption = Adoption(DeployedAddresses.Adoption());</span><br><span class="line"></span><br><span class="line">  // 领养测试用例</span><br><span class="line">  function testUserCanAdoptPet() public &#123;</span><br><span class="line">    uint returnedId = adoption.adopt(8);</span><br><span class="line"></span><br><span class="line">    uint expected = 8;</span><br><span class="line">    Assert.equal(returnedId, expected, &quot;Adoption of pet ID 8 should be recorded.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 宠物所有者测试用例</span><br><span class="line">  function testGetAdopterAddressByPetId() public &#123;</span><br><span class="line">    // 期望领养者的地址就是本合约地址，因为交易是由测试合约发起交易，</span><br><span class="line">    address expected = this;</span><br><span class="line">    address adopter = adoption.adopters(8);</span><br><span class="line">    Assert.equal(adopter, expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    // 测试所有领养者</span><br><span class="line">  function testGetAdopterAddressByPetIdInArray() public &#123;</span><br><span class="line">  // 领养者的地址就是本合约地址</span><br><span class="line">    address expected = this;</span><br><span class="line">    address[16] memory adopters = adoption.getAdopters();</span><br><span class="line">    Assert.equal(adopters[8], expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle <span class="built_in">test</span></span></span><br><span class="line">Using network 'development'.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Adoption.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\contracts\Migrations.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling .\<span class="built_in">test</span>\TestAdoption.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to C:\Users\12173\AppData\Local\Temp\<span class="built_in">test</span>-2020126-25536-1azqqoo.mstk</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  TestAdoption</span><br><span class="line">    1) "before all" hook: prepare suite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  0 passing (320ms)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1) TestAdoption</span><br><span class="line">       "before all" hook: prepare suite:</span><br><span class="line">     TypeError: Error parsing E:/Dapp/guide-pet-shop/contracts/Adoption.sol: Cannot destructure property `body` of 'undefined' or 'null'.</span><br><span class="line">      at getImports (C:\Users\12173\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\compile-solidity\profiler\getImports.js:5:1)</span><br><span class="line">      at C:\Users\12173\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\compile-solidity\profiler\index.js:145:1</span><br></pre></td></tr></table></figure>

<p><strong>Cannot destructure property <code>body</code> of ‘undefined’ or ‘null’</strong></p>
<p>暂无解决方案。无法进行智能合约测试，但不影响正常使用。</p>
</li>
</ol>
<h2 id="4-5创建用户界面以与智能合约进行交互"><a href="#4-5创建用户界面以与智能合约进行交互" class="headerlink" title="4.5创建用户界面以与智能合约进行交互"></a>4.5创建用户界面以与智能合约进行交互</h2><p>现在我们已经创建了智能合约，并将其部署到本地测试区块链中，并确认我们可以通过控制台与之交互，是时候创建一个UI，以便Pete可以在他的宠物店中使用它了！</p>
<p><code>pet-shop</code>truffle盒中包含该应用程序前端的代码。该代码存在于<code>src/</code>目录中。</p>
<h3 id="4-5-1实例化web3"><a href="#4-5-1实例化web3" class="headerlink" title="4.5.1实例化web3"></a>4.5.1实例化web3</h3><ol>
<li><code>/src/js/app.js</code>在文本编辑器中打开。</li>
<li>检查文件。请注意，存在一个全局<code>App</code>对象来管理我们的应用程序，将数据加载到其中<code>init()</code>，然后调用函数<code>initWeb3()</code>。该<a href="https://github.com/ethereum/web3.js/" target="_blank" rel="noopener">WEB3 JavaScript库</a>交互与复仇blockchain。它可以检索用户帐户，发送交易，与智能合约进行交互等等。</li>
<li>从内部删除多行注释，<code>initWeb3</code>并将其替换为以下内容：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ethereum) &#123;</span><br><span class="line">  App.web3Provider = <span class="built_in">window</span>.ethereum;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Request account access</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">window</span>.ethereum.enable();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// User denied account access...</span></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"User denied account access"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Legacy dapp browsers...</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.web3) &#123;</span><br><span class="line">  App.web3Provider = <span class="built_in">window</span>.web3.currentProvider;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If no injected web3 instance is detected, fall back to Ganache</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  App.web3Provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://localhost:7545'</span>);</span><br><span class="line">&#125;</span><br><span class="line">web3 = <span class="keyword">new</span> Web3(App.web3Provider);</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>首先，我们检查，如果我们使用现代DAPP浏览器或更近的版本<a href="https://github.com/MetaMask" target="_blank" rel="noopener">MetaMask</a>其中一个<code>ethereum</code>供应商被注入<code>window</code>对象。如果是这样，我们将使用它来创建我们的web3对象，但是我们还需要通过显式请求访问帐户<code>ethereum.enable()</code>。</li>
<li>如果<code>ethereum</code>对象不存在，则检查注入的<code>web3</code>实例。如果存在，则表明我们使用的是较旧的dapp浏览器（如<a href="https://github.com/ethereum/mist" target="_blank" rel="noopener">Mist</a>或较旧的MetaMask版本）。如果是这样，我们将获得其提供程序并使用它来创建我们的web3对象。</li>
<li>如果不存在注入的web3实例，我们将基于本地提供程序创建web3对象。（这种后备方式适用于开发环境，但不安全且不适合生产。）</li>
</ul>
<h3 id="4-5-2实例化合同"><a href="#4-5-2实例化合同" class="headerlink" title="4.5.2实例化合同"></a>4.5.2实例化合同</h3><p> 现在我们可以通过web3与以太坊进行交互，我们需要实例化我们的智能合约，以便web3知道在哪里可以找到它以及它是如何工作的。truffle有一个名为的库来帮助您解决此问题<code>truffle-contract</code>。它使有关合同的信息与迁移保持同步，因此您无需手动更改合同的部署地址。 </p>
<ol>
<li><p>仍在中<code>/src/js/app.js</code>，从内部删除多行注释，<code>initContract</code>并将其替换为以下内容： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.getJSON(<span class="string">'Adoption.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Get the necessary contract artifact file and instantiate it with truffle-contract</span></span><br><span class="line">  <span class="keyword">var</span> AdoptionArtifact = data;</span><br><span class="line">  App.contracts.Adoption = TruffleContract(AdoptionArtifact);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the provider for our contract</span></span><br><span class="line">  App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use our contract to retrieve and mark the adopted pets</span></span><br><span class="line">  <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>我们首先检索智能合约的工件文件。<strong>工件是有关我们合同的信息，例如其部署地址和应用程序二进制接口（ABI）</strong>。<strong>ABI是一个JavaScript对象，定义了如何与合同进行交互，包括其变量，函数及其参数。</strong></li>
<li>回调中包含工件后，便将它们传递给<code>TruffleContract()</code>。这将创建一个我们可以与之交互的合同实例。</li>
<li>实例化合同后，我们使用<code>App.web3Provider</code>设置web3时存储的值来设置其web3提供程序。</li>
<li>然后<code>markAdopted()</code>，如果以前访问过任何宠物，我们都会调用该应用程序的功能。我们将其封装在一个单独的函数中，因为每次更改智能合约的数据时都需要更新UI。</li>
</ul>
<h3 id="4-5-3获取被收养的宠物并更新UI"><a href="#4-5-3获取被收养的宠物并更新UI" class="headerlink" title="4.5.3获取被收养的宠物并更新UI"></a>4.5.3获取被收养的宠物并更新UI</h3><ol>
<li><p>仍在中<code>/src/js/app.js</code>，从中删除多行注释，<code>markAdopted</code>并将其替换为以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">  adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> adoptionInstance.getAdopters.call();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">adopters</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; adopters.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (adopters[i] !== <span class="string">'0x0000000000000000000000000000000000000000'</span>) &#123;</span><br><span class="line">      $(<span class="string">'.panel-pet'</span>).eq(i).find(<span class="string">'button'</span>).text(<span class="string">'Success'</span>).attr(<span class="string">'disabled'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>我们访问已部署的<code>Adoption</code>合同，然后调用<code>getAdopters()</code>该实例。</li>
<li>我们首先<code>adoptionInstance</code>在智能合约调用之外声明变量，以便在最初检索实例后可以访问该实例。</li>
<li>使用<strong>call（）</strong>允许我们从区块链读取数据，而不必发送完整的交易，这意味着我们不必花费任何以太币。</li>
<li>致电后<code>getAdopters()</code>，我们将遍历所有这些对象，检查是否为每个宠物存储了地址。由于数组包含地址类型，因此以太坊使用16个空地址初始化数组。这就是为什么我们检查一个空的地址字符串而不是null或其他虚假值的原因。</li>
<li>一旦<code>petId</code>找到具有相应地址的，我们将禁用其采用按钮，并将按钮文本更改为“成功”，以便用户获得一些反馈。</li>
<li>任何错误都会记录到控制台。</li>
</ul>
<h3 id="4-5-4处理take（）函数"><a href="#4-5-4处理take（）函数" class="headerlink" title="4.5.4处理take（）函数"></a>4.5.4处理take（）函数</h3><ol>
<li><p>仍在中<code>/src/js/app.js</code>，从中删除多行注释，<code>handleAdopt</code>并将其替换为以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">web3.eth.getAccounts(<span class="function"><span class="keyword">function</span>(<span class="params">error, accounts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> account = accounts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">    adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute adopt as a transaction by sending account</span></span><br><span class="line">    <span class="keyword">return</span> adoptionInstance.adopt(petId, &#123;<span class="attr">from</span>: account&#125;);</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>我们使用web3获取用户的帐户。在错误检查后的回调中，我们选择第一个帐户。</li>
<li>从那里，我们像上面一样获得已部署的合同，并将实例存储在中<code>adoptionInstance</code>。不过这次，我们将发送<strong>交易</strong>而不是致电。交易需要一个“发件人”地址，并具有相关的成本。这种以醚支付的费用称为<strong>煤气</strong>。气体成本是在智能合约中执行计算和/或存储数据的费用。我们通过<code>adopt()</code>同时使用宠物ID和包含帐户地址的对象执行该函数来发送交易，该地址先前存储在中<code>account</code>。</li>
<li>发送交易的结果是交易对象。如果没有错误，我们将继续调用<code>markAdopted()</code>函数以将UI与新存储的数据同步。</li>
</ul>
<h3 id="4-5-5dapp与浏览器中的交互"><a href="#4-5-5dapp与浏览器中的交互" class="headerlink" title="4.5.5dapp与浏览器中的交互"></a>4.5.5dapp与浏览器中的交互</h3><ul>
<li><p><strong>安装和配置MetaMask</strong></p>
</li>
<li><p><strong>安装和配置Lite服务器</strong></p>
<p>现在，我们可以启动本地Web服务器并使用dapp。我们正在使用该<code>lite-server</code>库来提供我们的静态文件。这是<code>pet-shop</code>松露盒随附的，但让我们看一下它是如何工作的。</p>
<ol>
<li><p><code>bs-config.json</code>在文本编辑器（在项目的根目录中）中打开并检查内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"server"</span>: &#123;</span><br><span class="line">    <span class="string">"baseDir"</span>: [<span class="string">"./src"</span>, <span class="string">"./build/contracts"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这告诉<code>lite-server</code>哪些文件要包含在我们的基本目录中。我们<code>./src</code>为网站文件添加目录，<code>./build/contracts</code>为合同工件添加目录。</p>
<p>我们还向项目根目录中文件中的对象添加了<code>dev</code>命令。该对象允许我们将控制台命令别名为单个npm命令。在这种情况下，我们仅执行单个命令，但是可能具有更复杂的配置。这是您的样子：<code>scripts``package.json``scripts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"lite-server"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>这告诉npm 从控制台<code>lite-server</code>执行时运行本地安装<code>npm run dev</code>。</p>
</li>
</ol>
</li>
</ul>
<h3 id="4-6使用dapp"><a href="#4-6使用dapp" class="headerlink" title="4.6使用dapp"></a>4.6使用dapp</h3><ol>
<li><p>启动本地Web服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>开发服务器将启动并自动打开一个包含您的dapp的新浏览器选项卡。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/dapp.png" alt="皮特的宠物店"></p>
<p>皮特的宠物店</p>
</li>
<li><p>应该会出现一个MetaMask弹出窗口，要求您批准，以允许Pete的Pet Shop连接到您的MetaMask钱包。未经明确批准，您将无法与dapp进行交互。单击<strong>连接</strong>。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/metamask-transactionconfirm.png" alt="MetaMask批准请求"></p>
<p>MetaMask批准请求</p>
</li>
<li><p>要使用dapp，请在您选择的宠物上单击“ <strong>采用”</strong>按钮。</p>
</li>
<li><p>MetaMask将自动提示您批准交易。单击<strong>提交</strong>以批准交易。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/metamask-transactionconfirm.png" alt="收养交易审查"></p>
<p>收养交易审查</p>
</li>
<li><p>正如我们指定的那样，您将看到已收养宠物旁边的按钮更改为“成功”并被禁用，因为该宠物现已被收养。</p>
<p><img src="https://www.trufflesuite.com/img/tutorials/pet-shop/dapp-success.png" alt="收养成功"></p>
<p>收养成功</p>
</li>
</ol>
]]></content>
      <categories>
        <category>truffle</category>
      </categories>
      <tags>
        <tag>truffle</tag>
      </tags>
  </entry>
  <entry>
    <title>僵尸作战系统</title>
    <url>/2020/06/27/%E5%83%B5%E5%B0%B8%E4%BD%9C%E6%88%98%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="可支付"><a href="#可支付" class="headerlink" title="可支付"></a>可支付</h1><p>截至目前，我们只接触到很少的 <strong><em>函数修饰符\</em></strong>。 要记住所有的东西很难，所以我们来个概览：</p><ol>
<li>我们有决定函数何时和被谁调用的可见性修饰符: <code>private</code> 意味着它只能被合约内部调用； <code>internal</code> 就像 <code>private</code> 但是也能被继承的合约调用； <code>external</code> 只能从合约外部调用；最后 <code>public</code> 可以在任何地方调用，不管是内部还是外部。</li>
<li>我们也有状态修饰符， 告诉我们函数如何和区块链交互: <code>view</code> 告诉我们运行这个函数不会更改和保存任何数据； <code>pure</code> 告诉我们这个函数不但不会往区块链写数据，它甚至不从区块链读取数据。这两种在被从合约外部调用的时候都不花费任何gas（但是它们在被内部其他函数调用的时候将会耗费gas）。</li>
<li>然后我们有了自定义的 <code>modifiers</code>，例如在第三课学习的: <code>onlyOwner</code> 和 <code>aboveLevel</code>。 对于这些修饰符我们可以自定义其对函数的约束逻辑。</li>
</ol><a id="more"></a>

<p>这些修饰符可以同时作用于一个函数定义上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test() external view onlyOwner anotherModifier &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure>

<p>在这一章，我们来学习一个新的修饰符 <code>payable</code>.</p>
<h2 id="payable-修饰符"><a href="#payable-修饰符" class="headerlink" title="payable 修饰符"></a><code>payable</code> 修饰符</h2><p><code>payable</code> 方法是让 Solidity 和以太坊变得如此酷的一部分 —— 它们是一种可以接收以太的特殊函数。</p>
<p>先放一下。当你在调用一个普通网站服务器上的API函数的时候，你无法用你的函数传送美元——你也不能传送比特币。</p>
<p>但是在以太坊中， 因为钱 (<em>以太</em>), 数据 (<em>事务负载</em>)， 以及合约代码本身都存在于以太坊。你可以在同时调用函数 <strong>并</strong>付钱给另外一个合约。</p>
<p>这就允许出现很多有趣的逻辑， 比如向一个合约要求支付一定的钱来运行一个函数。</p>
<h2 id="来看个例子"><a href="#来看个例子" class="headerlink" title="来看个例子"></a>来看个例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract OnlineStore &#123;</span><br><span class="line">  function buySomething() external payable &#123;</span><br><span class="line">    // 检查以确定0.001以太发送出去来运行函数:</span><br><span class="line">    require(msg.value == 0.001 ether);</span><br><span class="line">    // 如果为真，一些用来向函数调用者发送数字内容的逻辑</span><br><span class="line">    transferThing(msg.sender);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，<code>msg.value</code> 是一种可以查看向合约发送了多少以太的方法，另外 <code>ether</code> 是一个內建单元。</p>
<p>这里发生的事是，一些人会从 web3.js 调用这个函数 (从DApp的前端)， 像这样 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 假设 `OnlineStore` 在以太坊上指向你的合约:</span><br><span class="line">OnlineStore.buySomething().send(from: web3.eth.defaultAccount, value: web3.utils.toWei(0.001))</span><br></pre></td></tr></table></figure>

<p>注意这个 <code>value</code> 字段， JavaScript 调用来指定发送多少(0.001)<code>以太</code>。如果把事务想象成一个信封，你发送到函数的参数就是信的内容。 添加一个 <code>value</code> 很像在信封里面放钱 —— 信件内容和钱同时发送给了接收者。</p>
<blockquote>
<p>注意： 如果一个函数没标记为<code>payable</code>， 而你尝试利用上面的方法发送以太，函数将拒绝你的事务。</p>
</blockquote>
<h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们来在僵尸游戏里面创建一个<code>payable</code> 函数。</p>
<p>假定在我们的游戏中，玩家可以通过支付ETH来升级他们的僵尸。ETH将存储在你拥有的合约中 —— 一个简单明了的例子，向你展示你可以通过自己的游戏赚钱。</p>
<ol>
<li>定义一个 <code>uint</code> ，命名为 <code>levelUpFee</code>, 将值设定为 <code>0.001 ether</code>。</li>
<li>定义一个名为 <code>levelUp</code> 的函数。 它将接收一个 <code>uint</code> 参数 <code>_zombieId</code>。 函数应该修饰为 <code>external</code> 以及 <code>payable</code>。</li>
<li>这个函数首先应该 <code>require</code> 确保 <code>msg.value</code> 等于 <code>levelUpFee</code>。</li>
<li>然后它应该增加僵尸的 <code>level</code>: <code>zombies[_zombieId].level++</code>。</li>
</ol>
<h2 id="合约修改"><a href="#合约修改" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里定义 levelUpFee</span></span><br><span class="line">  uint levelUpFee = <span class="number">0.001</span> ether;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 在这里插入 levelUp 函数 </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">levelUp</span>(<span class="params">uint _zombieId</span>) <span class="title">external</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.value == levelUpFee);</span><br><span class="line">    zombies[_zombieId].level++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">address _owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint[]</span>) </span>&#123;</span><br><span class="line">    uint[] memory result = <span class="keyword">new</span> uint[](ownerZombieCount[_owner]);</span><br><span class="line">    uint counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; zombies.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (zombieToOwner[i] == _owner) &#123;</span><br><span class="line">        result[counter] = i;</span><br><span class="line">        counter++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="提现"><a href="#提现" class="headerlink" title="提现"></a>提现</h1><p>在上一章，我们学习了如何向合约发送以太，那么在发送之后会发生什么呢？</p>
<p>在你发送以太之后，它将被存储进以合约的以太坊账户中， 并冻结在哪里 —— 除非你添加一个函数来从合约中把以太提现。</p>
<p>你可以写一个函数来从合约中提现以太，类似这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract GetPaid is Ownable &#123;</span><br><span class="line">  function withdraw() external onlyOwner &#123;</span><br><span class="line">    owner.transfer(this.balance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意我们使用 <code>Ownable</code> 合约中的 <code>owner</code> 和 <code>onlyOwner</code>，假定它已经被引入了。</p>
<p>你可以通过 <code>transfer</code> 函数向一个地址发送以太， 然后 <code>this.balance</code> 将返回当前合约存储了多少以太。 所以如果100个用户每人向我们支付1以太， <code>this.balance</code> 将是100以太。</p>
<p>你可以通过 <code>transfer</code> 向任何以太坊地址付钱。 比如，你可以有一个函数在 <code>msg.sender</code> 超额付款的时候给他们退钱：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint itemFee = 0.001 ether;</span><br><span class="line">msg.sender.transfer(msg.value - itemFee);</span><br></pre></td></tr></table></figure>

<p>或者在一个有卖家和卖家的合约中， 你可以把卖家的地址存储起来， 当有人买了它的东西的时候，把买家支付的钱发送给它 <code>seller.transfer(msg.value)</code>。</p>
<p>有很多例子来展示什么让以太坊编程如此之酷 —— 你可以拥有一个不被任何人控制的去中心化市场。</p>
<h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>在我们的合约里创建一个 <code>withdraw</code> 函数，它应该几乎和上面的<code>GetPaid</code>一样。</p>
</li>
<li><p>以太的价格在过去几年内翻了十几倍，在我们写这个教程的时候 0.01 以太相当于1美元，如果它再翻十倍 0.001 以太将是10美元，那我们的游戏就太贵了。</p>
<p>所以我们应该再创建一个函数，允许我们以合约拥有者的身份来设置 <code>levelUpFee</code>。</p>
<p>a. 创建一个函数，名为 <code>setLevelUpFee</code>， 其接收一个参数 <code>uint _fee</code>，是 <code>external</code> 并使用修饰符 <code>onlyOwner</code>。</p>
<p>b. 这个函数应该设置 <code>levelUpFee</code> 等于 <code>_fee</code>。</p>
</li>
</ol>
<h2 id="合约完善"><a href="#合约完善" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  uint levelUpFee = <span class="number">0.001</span> ether;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里创建 withdraw 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    owner.transfer(<span class="keyword">this</span>.balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 在这里创建 setLevelUpFee 函数 </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setLevelUpFee</span>(<span class="params">uint _fee</span>) <span class="title">external</span> <span class="title">onlyOwner</span></span>&#123;</span><br><span class="line">    levelUpFee = _fee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">levelUp</span>(<span class="params">uint _zombieId</span>) <span class="title">external</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.value == levelUpFee);</span><br><span class="line">    zombies[_zombieId].level++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">address _owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint[]</span>) </span>&#123;</span><br><span class="line">    uint[] memory result = <span class="keyword">new</span> uint[](ownerZombieCount[_owner]);</span><br><span class="line">    uint counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; zombies.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (zombieToOwner[i] == _owner) &#123;</span><br><span class="line">        result[counter] = i;</span><br><span class="line">        counter++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸战斗"><a href="#僵尸战斗" class="headerlink" title="僵尸战斗"></a>僵尸战斗</h1><p>在我们学习了可支付函数和合约余额之后，是时候为僵尸战斗添加功能了。</p>
<p>遵循上一章的格式，我们新建一个攻击功能合约，并将代码放进新的文件中，引入上一个合约。</p>
<h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><p>再来新建一个合约吧。熟能生巧。</p>
<p>如果你不记得怎么做了, 查看一下 <code>zombiehelper.sol</code> — 不过最好先试着做一下，检查一下你掌握的情况。</p>
<ol>
<li>在文件开头定义 Solidity 的版本 <code>^0.4.19</code>.</li>
<li><code>import</code> 自 <code>zombiehelper.sol</code> .</li>
<li>声明一个新的 <code>contract</code>，命名为 <code>ZombieBattle</code>， 继承自<code>ZombieHelper</code>。函数体就先空着吧。</li>
</ol>
<h2 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h2><p>Zombieattack.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>你太棒了！接下来我们梳理一下战斗逻辑。</p>
<p>优秀的游戏都需要一些随机元素，那么我们在 Solidity 里如何生成随机数呢？</p>
<p>真正的答案是你不能，或者最起码，你无法安全地做到这一点。</p>
<p>我们来看看为什么</p>
<h2 id="用-keccak256-来制造随机数。"><a href="#用-keccak256-来制造随机数。" class="headerlink" title="用 keccak256 来制造随机数。"></a>用 <code>keccak256</code> 来制造随机数。</h2><p>Solidity 中最好的随机数生成器是 <code>keccak256</code> 哈希函数.</p>
<p>我们可以这样来生成一些随机数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 生成一个0到100的随机数:</span><br><span class="line">uint randNonce = 0;</span><br><span class="line">uint random = uint(keccak256(now, msg.sender, randNonce)) % 100;</span><br><span class="line">randNonce++;</span><br><span class="line">uint random2 = uint(keccak256(now, msg.sender, randNonce)) % 100;</span><br></pre></td></tr></table></figure>

<p>这个方法首先拿到 <code>now</code> 的时间戳、 <code>msg.sender</code>、 以及一个自增数 <code>nonce</code> （一个仅会被使用一次的数，这样我们就不会对相同的输入值调用一次以上哈希函数了）。</p>
<p>然后利用 <code>keccak</code> 把输入的值转变为一个哈希值, 再将哈希值转换为 <code>uint</code>, 然后利用 <code>% 100</code> 来取最后两位, 就生成了一个0到100之间随机数了。</p>
<h3 id="这个方法很容易被不诚实的节点攻击"><a href="#这个方法很容易被不诚实的节点攻击" class="headerlink" title="这个方法很容易被不诚实的节点攻击"></a>这个方法很容易被不诚实的节点攻击</h3><p>在以太坊上, 当你在和一个合约上调用函数的时候, 你会把它广播给一个节点或者在网络上的 <strong><em>transaction\</em></strong> 节点们。 网络上的节点将收集很多事务, 试着成为第一个解决计算密集型数学问题的人，作为“工作证明”，然后将“工作证明”(Proof of Work, PoW)和事务一起作为一个 <strong><em>block\</em></strong> 发布在网络上。</p>
<p>一旦一个节点解决了一个PoW, 其他节点就会停止尝试解决这个 PoW, 并验证其他节点的事务列表是有效的，然后接受这个节点转而尝试解决下一个节点。</p>
<p><strong>这就让我们的随机数函数变得可利用了</strong></p>
<p>我们假设我们有一个硬币翻转合约——正面你赢双倍钱，反面你输掉所有的钱。假如它使用上面的方法来决定是正面还是反面 (<code>random &gt;= 50</code> 算正面, <code>random &lt; 50</code> 算反面)。</p>
<p>如果我正运行一个节点，我可以 <strong>只对我自己的节点</strong> 发布一个事务，且不分享它。 我可以运行硬币翻转方法来偷窥我的输赢 — 如果我输了，我就不把这个事务包含进我要解决的下一个区块中去。我可以一直运行这个方法，直到我赢得了硬币翻转并解决了下一个区块，然后获利。</p>
<h2 id="所以我们该如何在以太坊上安全地生成随机数呢"><a href="#所以我们该如何在以太坊上安全地生成随机数呢" class="headerlink" title="所以我们该如何在以太坊上安全地生成随机数呢"></a>所以我们该如何在以太坊上安全地生成随机数呢</h2><p>因为区块链的全部内容对所有参与者来说是透明的， 这就让这个问题变得很难，它的解决方法不在本课程讨论范围，你可以阅读 <a href="https://ethereum.stackexchange.com/questions/191/how-can-i-securely-generate-a-random-number-in-my-smart-contract" target="_blank" rel="noopener">这个 StackOverflow 上的讨论</a> 来获得一些主意。 一个方法是利用 <strong><em>oracle\</em></strong> 来访问以太坊区块链之外的随机数函数。</p>
<p>当然， 因为网络上成千上万的以太坊节点都在竞争解决下一个区块，我能成功解决下一个区块的几率非常之低。 这将花费我们巨大的计算资源来开发这个获利方法 — 但是如果奖励异常地高(比如我可以在硬币翻转函数中赢得 1个亿)， 那就很值得去攻击了。</p>
<p>所以尽管这个方法在以太坊上不安全，在实际中，除非我们的随机函数有一大笔钱在上面，你游戏的用户一般是没有足够的资源去攻击的。</p>
<p>因为在这个教程中，我们只是在编写一个简单的游戏来做演示，也没有真正的钱在里面，所以我们决定接受这个不足之处，使用这个简单的随机数生成函数。但是要谨记它是不安全的。</p>
<h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们来实现一个随机数生成函数，好来计算战斗的结果。虽然这个函数一点儿也不安全。</p>
<ol>
<li>给我们合约一个名为 <code>randNonce</code> 的 <code>uint</code>，将其值设置为 <code>0</code>。</li>
<li>建立一个函数，命名为 <code>randMod</code> (random-modulus)。它将作为<code>internal</code> 函数，传入一个名为 <code>_modulus</code>的 <code>uint</code>，并 <code>returns</code> 一个 <code>uint</code>。</li>
<li>这个函数首先将为 <code>randNonce</code>加一， (使用 <code>randNonce++</code> 语句)。</li>
<li>最后，它应该 (在一行代码中) 计算 <code>now</code>, <code>msg.sender</code>, 以及 <code>randNonce</code> 的 <code>keccak256</code> 哈希值并转换为 <code>uint</code>—— 最后 <code>return</code> <code>% _modulus</code> 的值。 （天! 听起来太拗口了。如果你有点理解不过来，看一下我们上面计算随机数的例子，它们的逻辑非常相似）</li>
</ol>
<h2 id="合约修改-1"><a href="#合约修改-1" class="headerlink" title="合约修改"></a>合约修改</h2><p>Zombieattack.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line">  <span class="comment">// 在这里开始</span></span><br><span class="line">  uint randNonce = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randMod</span>(<span class="params">uint _modulus</span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    randNonce++;</span><br><span class="line">    <span class="keyword">return</span> uint(keccak256(now, msg.sender, randNonce)) % _modulus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸对战"><a href="#僵尸对战" class="headerlink" title="僵尸对战"></a>僵尸对战</h1><p>我们的合约已经有了一些随机性的来源，可以用进我们的僵尸战斗中去计算结果。</p>
<p>我们的僵尸战斗看起来将是这个流程：</p>
<ul>
<li>你选择一个自己的僵尸，然后选择一个对手的僵尸去攻击。</li>
<li>如果你是攻击方，你将有70%的几率获胜，防守方将有30%的几率获胜。</li>
<li>所有的僵尸（攻守双方）都将有一个 <code>winCount</code> 和一个 <code>lossCount</code>，这两个值都将根据战斗结果增长。</li>
<li>若攻击方获胜，这个僵尸将升级并产生一个新僵尸。</li>
<li>如果攻击方失败，除了失败次数将加一外，什么都不会发生。</li>
<li>无论输赢，当前僵尸的冷却时间都将被激活。</li>
</ul>
<p>这有一大堆的逻辑需要处理，我们将把这些步骤分解到接下来的课程中去。</p>
<h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>给我们合约一个 <code>uint</code> 类型的变量，命名为 <code>attackVictoryProbability</code>, 将其值设定为 <code>70</code>。</li>
<li>创建一个名为 <code>attack</code>的函数。它将传入两个参数: <code>_zombieId</code> (<code>uint</code> 类型) 以及 <code>_targetId</code> (也是 <code>uint</code>)。它将是一个 <code>external</code> 函数。</li>
</ol>
<p>函数体先留空吧。</p>
<h2 id="合约修改-2"><a href="#合约修改-2" class="headerlink" title="合约修改"></a>合约修改</h2><p>Zombieattack.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line">  uint randNonce = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 在这里创建 attackVictoryProbability</span></span><br><span class="line">  uint attackVictoryProbability = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randMod</span>(<span class="params">uint _modulus</span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    randNonce++;</span><br><span class="line">    <span class="keyword">return</span> uint(keccak256(now, msg.sender, randNonce)) % _modulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里创建新函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params">uint _zombieId, uint _targetId</span>) <span class="title">external</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重构通用逻辑"><a href="#重构通用逻辑" class="headerlink" title="重构通用逻辑"></a>重构通用逻辑</h1><p>不管谁调用我们的 <code>attack</code> 函数 —— 我们想确保用户的确拥有他们用来攻击的僵尸。如果你能用其他人的僵尸来攻击将是一个很大的安全问题。</p>
<p>你能想一下我们如何添加一个检查步骤来看看调用这个函数的人就是他们传入的 <code>_zombieId</code> 的拥有者么？</p>
<p>想一想，看看你能不能自己找到一些答案。</p>
<p>花点时间…… 参考我们前面课程的代码来获得灵感。</p>
<p>答案在下面，在你有一些想法之前不要继续阅读。</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>我们在前面的课程里面已经做过很多次这样的检查了。 在 <code>changeName()</code>, <code>changeDna()</code>, 和 <code>feedAndMultiply()</code>里，我们做过这样的检查：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(msg.sender == zombieToOwner[_zombieId]);</span><br></pre></td></tr></table></figure>

<p>这和我们 <code>attack</code> 函数将要用到的检查逻辑是相同的。 正因我们要多次调用这个检查逻辑，让我们把它移到它自己的 <code>modifier</code> 中来清理代码并避免重复编码。</p>
<h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们回到了 <code>zombiefeeding.sol</code>， 因为这是我们第一次调用检查逻辑的地方。让我们把它重构进它自己的 <code>modifier</code>。</p>
<ol>
<li><p>创建一个 <code>modifier</code>， 命名为 <code>ownerOf</code>。它将传入一个参数， <code>_zombieId</code> (一个 <code>uint</code>)。</p>
<p>它的函数体应该 <code>require</code> <code>msg.sender</code> 等于 <code>zombieToOwner[_zombieId]</code>， 然后继续这个函数剩下的内容。 如果你忘记了修饰符的写法，可以参考 <code>zombiehelper.sol</code>。</p>
</li>
<li><p>将这个函数的 <code>feedAndMultiply</code> 定义修改为其使用修饰符 <code>ownerOf</code>。</p>
</li>
<li><p>现在我们使用 <code>modifier</code>了，你可以删除这行了： <code>require(msg.sender == zombieToOwner[_zombieId]);</code></p>
</li>
</ol>
<h2 id="合约修改-3"><a href="#合约修改-3" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  KittyInterface kittyContract;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里创建 modifier</span></span><br><span class="line">  modifier ownerOf(uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    _;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setKittyContractAddress</span>(<span class="params">address _address</span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    kittyContract = KittyInterface(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_triggerCooldown</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    _zombie.readyTime = uint32(now + cooldownTime);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isReady</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (_zombie.readyTime &lt;= now);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 在函数定义时增加 modifier :</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string _species</span>) <span class="title">internal</span> <span class="title">ownerOf</span>(<span class="params">_zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 移除这一行</span></span><br><span class="line">    <span class="comment">//require(msg.sender == zombieToOwner[_zombieId]);</span></span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    <span class="built_in">require</span>(_isReady(myZombie));</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keccak256(_species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">    _triggerCooldown(myZombie);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="更多重构"><a href="#更多重构" class="headerlink" title="更多重构"></a>更多重构</h1><p>在 <code>zombiehelper.sol</code>里有几处地方，需要我们实现我们新的 <code>modifier</code>—— <code>ownerOf</code>。</p>
<h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>修改 <code>changeName()</code> 使其使用 <code>ownerOf</code></li>
<li>修改 <code>changeDna()</code> 使其使用 <code>ownerOf</code></li>
</ol>
<h2 id="合约修改-4"><a href="#合约修改-4" class="headerlink" title="合约修改"></a>合约修改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  uint levelUpFee = <span class="number">0.001</span> ether;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    owner.transfer(<span class="keyword">this</span>.balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setLevelUpFee</span>(<span class="params">uint _fee</span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    levelUpFee = _fee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">levelUp</span>(<span class="params">uint _zombieId</span>) <span class="title">external</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.value == levelUpFee);</span><br><span class="line">    zombies[_zombieId].level++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 使用 `ownerOf` 修改这个函数:</span></span><br><span class="line">  <span class="comment">//function changeName(uint _zombieId, string _newName) external aboveLevel(2, _zombieId) &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) <span class="title">ownerOf</span>(<span class="params">_zombieId</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">//require(msg.sender == zombieToOwner[_zombieId]);</span></span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 对这个函数做同样的事:</span></span><br><span class="line">  <span class="comment">//function changeDna(uint _zombieId, uint _newDna) external aboveLevel(20, _zombieId) &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) <span class="title">ownerOf</span>(<span class="params">_zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//require(msg.sender == zombieToOwner[_zombieId]);</span></span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">address _owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint[]</span>) </span>&#123;</span><br><span class="line">    uint[] memory result = <span class="keyword">new</span> uint[](ownerZombieCount[_owner]);</span><br><span class="line">    uint counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; zombies.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (zombieToOwner[i] == _owner) &#123;</span><br><span class="line">        result[counter] = i;</span><br><span class="line">        counter++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="回到攻击！"><a href="#回到攻击！" class="headerlink" title="回到攻击！"></a>回到攻击！</h1><p>重构完成了，回到 <code>zombieattack.sol</code>。</p>
<p>继续来完善我们的 <code>attack</code> 函数， 现在我们有了 <code>ownerOf</code> 修饰符来用了。</p>
<h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>将 <code>ownerOf</code> 修饰符添加到 <code>attack</code> 来确保调用者拥有<code>_zombieId</code>.</p>
</li>
<li><p>我们的函数所需要做的第一件事就是获得一个双方僵尸的 <code>storage</code> 指针， 这样我们才能很方便和它们交互：</p>
<p>a. 定义一个 <code>Zombie storage</code> 命名为 <code>myZombie</code>，使其值等于 <code>zombies[_zombieId]</code>。</p>
<p>b. 定义一个 <code>Zombie storage</code> 命名为 <code>enemyZombie</code>， 使其值等于 <code>zombies[_targetId]</code>。</p>
</li>
<li><p>我们将用一个0到100的随机数来确定我们的战斗结果。 定义一个 <code>uint</code>，命名为 <code>rand</code>， 设定其值等于 <code>randMod</code> 函数的返回值，此函数传入 <code>100</code>作为参数。</p>
</li>
</ol>
<h2 id="合约修改-5"><a href="#合约修改-5" class="headerlink" title="合约修改"></a>合约修改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line">  uint randNonce = <span class="number">0</span>;</span><br><span class="line">  uint attackVictoryProbability = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randMod</span>(<span class="params">uint _modulus</span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    randNonce++;</span><br><span class="line">    <span class="keyword">return</span> uint(keccak256(now, msg.sender, randNonce)) % _modulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里增加 modifier</span></span><br><span class="line">  <span class="comment">//function attack(uint _zombieId, uint _targetId) external &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params">uint _zombieId, uint _targetId</span>) <span class="title">external</span> <span class="title">ownerOf</span>(<span class="params">_zombieId</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 2. 在这里开始定义函数</span></span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    Zombie storage enemyZombie = zombies[_targetId];</span><br><span class="line">    uint rand = randMod(<span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸的输赢"><a href="#僵尸的输赢" class="headerlink" title="僵尸的输赢"></a>僵尸的输赢</h1><p>对我们的僵尸游戏来说，我们将要追踪我们的僵尸输赢了多少场。有了这个我们可以在游戏里维护一个 “僵尸排行榜”。</p>
<p>有多种方法在我们的DApp里面保存一个数值 — 作为一个单独的映射，作为一个“排行榜”结构体，或者保存在 <code>Zombie</code> 结构体内。</p>
<p>每个方法都有其优缺点，取决于我们打算如何和这些数据打交道。在这个教程中，简单起见我们将这个状态保存在 <code>Zombie</code> 结构体中，将其命名为 <code>winCount</code> 和 <code>lossCount</code>。</p>
<p>我们跳回 <code>zombiefactory.sol</code>, 将这些属性添加进 <code>Zombie</code> 结构体.</p>
<h2 id="实战演习-8"><a href="#实战演习-8" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>修改 <code>Zombie</code> 结构体，添加两个属性:</p>
<p>a. <code>winCount</code>, 一个 <code>uint16</code></p>
<p>b. <code>lossCount</code>, 也是一个 <code>uint16</code></p>
<blockquote>
<p>注意： 记住, 因为我们能在结构体中包装<code>uint</code>, 我们打算用适合我们的最小的 <code>uint</code>。 一个 <code>uint8</code> 太小了， 因为 2^8 = 256 —— 如果我们的僵尸每天都作战，不到一年就溢出了。但是 2^16 = 65536 （<code>uint16</code>）—— 除非一个僵尸连续179年每天作战，否则我们就是安全的。</p>
</blockquote>
</li>
<li><p>现在我们的 <code>Zombie</code> 结构体有了新的属性， 我们需要修改 <code>_createZombie()</code> 中的函数定义。</p>
<p>修改僵尸生成定义，让每个新僵尸都有 <code>0</code> 赢和 <code>0</code> 输。</p>
</li>
</ol>
<h2 id="合约修改-6"><a href="#合约修改-6" class="headerlink" title="合约修改"></a>合约修改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./ownable.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory is Ownable &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line">    uint cooldownTime = <span class="number">1</span> days;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">      string name;</span><br><span class="line">      uint dna;</span><br><span class="line">      uint32 level;</span><br><span class="line">      uint32 readyTime;</span><br><span class="line">      <span class="comment">// 1. 在这里添加新的属性</span></span><br><span class="line">      uint16 winCount;</span><br><span class="line">      uint16 lossCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 在这里修改修改新僵尸的创建:</span></span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna, <span class="number">1</span>, uint32(now + cooldownTime), <span class="number">0</span> ,<span class="number">0</span>)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        randDna = randDna - randDna % <span class="number">100</span>;</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸胜利了-😄"><a href="#僵尸胜利了-😄" class="headerlink" title="僵尸胜利了 😄"></a>僵尸胜利了 😄</h1><p>有了 <code>winCount</code> 和 <code>lossCount</code>，我们可以根据僵尸哪个僵尸赢了战斗来更新它们了。</p>
<p>在第六章我们计算出来一个0到100的随机数。现在让我们用那个数来决定那谁赢了战斗，并以此更新我们的状态。</p>
<h2 id="实战演习-9"><a href="#实战演习-9" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>创建一个 <code>if</code> 语句来检查 <code>rand</code> 是不是 <strong><em>小于或者等于\</em></strong> <code>attackVictoryProbability</code>。</p>
</li>
<li><p>如果以上条件为 <code>true</code>， 我们的僵尸就赢了！所以：</p>
<p>a. 增加 <code>myZombie</code> 的 <code>winCount</code>。</p>
<p>b. 增加 <code>myZombie</code> 的 <code>level</code>。 (升级了啦!!!!!!!)</p>
<p>c. 增加 <code>enemyZombie</code> 的 <code>lossCount</code>. (输家!!!!!! 😫 😫 😫)</p>
<p>d. 运行 <code>feedAndMultiply</code> 函数。 在 <code>zombiefeeding.sol</code> 里查看调用它的语句。 对于第三个参数 (<code>_species</code>)，传入字符串 “zombie”. （现在它实际上什么都不做，不过在稍后， 如果我们愿意，可以添加额外的方法，用来制造僵尸变的僵尸）。</p>
</li>
</ol>
<h2 id="合约修改-7"><a href="#合约修改-7" class="headerlink" title="合约修改"></a>合约修改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line">  uint randNonce = <span class="number">0</span>;</span><br><span class="line">  uint attackVictoryProbability = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randMod</span>(<span class="params">uint _modulus</span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    randNonce++;</span><br><span class="line">    <span class="keyword">return</span> uint(keccak256(now, msg.sender, randNonce)) % _modulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params">uint _zombieId, uint _targetId</span>) <span class="title">external</span> <span class="title">ownerOf</span>(<span class="params">_zombieId</span>) </span>&#123;</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    Zombie storage enemyZombie = zombies[_targetId];</span><br><span class="line">    uint rand = randMod(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//在这里开始</span></span><br><span class="line">    <span class="keyword">if</span> (rand &lt;= attackVictoryProbability) &#123;</span><br><span class="line">      myZombie.winCount++;</span><br><span class="line">      myZombie.level++;</span><br><span class="line">      enemyZombie.lossCount++;</span><br><span class="line">      feedAndMultiply(_zombieId, enemyZombie.dna, <span class="string">"zombie"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸失败-😞"><a href="#僵尸失败-😞" class="headerlink" title="僵尸失败 😞"></a>僵尸失败 😞</h1><p>我们已经编写了你的僵尸赢了之后会发生什么， 该看看 <strong>输了</strong> 的时候要怎么做了。</p>
<p>在我们的游戏中，僵尸输了后并不会降级 —— 只是简单地给 <code>lossCount</code> 加一，并触发冷却，等待一天后才能再次参战。</p>
<p>要实现这个逻辑，我们需要一个 <code>else</code> 语句。</p>
<p><code>else</code> 语句和 JavaScript 以及很多其他语言的 else 语句一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (zombieCoins[msg.sender] &gt; 100000000) &#123;</span><br><span class="line">  // 你好有钱!!!</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // 我们需要更多的僵尸币...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-10"><a href="#实战演习-10" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>添加一个 <code>else</code> 语句。 若我们的僵尸输了：</p>
<p>a. 增加 <code>myZombie</code> 的 <code>lossCount</code>。</p>
<p>b. 增加 <code>enemyZombie</code> 的 <code>winCount</code>。</p>
</li>
<li><p>在 <code>else</code> 最后， 对 <code>myZombie</code> 运行 <code>_triggerCooldown</code> 方法。这让每个僵尸每天只能参战一次。</p>
</li>
</ol>
<h2 id="合约修改-8"><a href="#合约修改-8" class="headerlink" title="合约修改"></a>合约修改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiehelper.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieBattle is ZombieHelper &#123;</span><br><span class="line">  uint randNonce = <span class="number">0</span>;</span><br><span class="line">  uint attackVictoryProbability = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randMod</span>(<span class="params">uint _modulus</span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    randNonce++;</span><br><span class="line">    <span class="keyword">return</span> uint(keccak256(now, msg.sender, randNonce)) % _modulus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params">uint _zombieId, uint _targetId</span>) <span class="title">external</span> <span class="title">ownerOf</span>(<span class="params">_zombieId</span>) </span>&#123;</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    Zombie storage enemyZombie = zombies[_targetId];</span><br><span class="line">    uint rand = randMod(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (rand &lt;= attackVictoryProbability) &#123;</span><br><span class="line">      myZombie.winCount++;</span><br><span class="line">      myZombie.level++;</span><br><span class="line">      enemyZombie.lossCount++;</span><br><span class="line">      feedAndMultiply(_zombieId, enemyZombie.dna, <span class="string">"zombie"</span>);</span><br><span class="line">    &#125; <span class="comment">// 在这里开始</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      myZombie.lossCount++;</span><br><span class="line">      enemyZombie.winCount++;</span><br><span class="line">      _triggerCooldown(myZombie);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="放在一起"><a href="#放在一起" class="headerlink" title="放在一起"></a>放在一起</h1><p>恭喜你啊，又完成了第四课。</p>
<p>在右边测试你的战斗函数把。</p>
<h2 id="认领你的战利品"><a href="#认领你的战利品" class="headerlink" title="认领你的战利品"></a>认领你的战利品</h2><p>在赢了战斗之后：</p>
<ol>
<li>你的僵尸将会升级</li>
<li>你僵尸的 <code>winCount</code> 将会增加</li>
<li>你将为你的僵尸大军获得一个新的僵尸</li>
</ol>
<p>继续测试战斗，玩够了以后点击下一章来完成本课。</p>
<p><img src="https://i.loli.net/2020/06/29/zGLUjP6cl83DWnb.png" alt="image-20200629183952262"></p>
<p><img src="https://i.loli.net/2020/06/29/KnkTaeBd7Axcjo4.png" alt="image-20200629184010049"></p>
<h1 id="第四课打卡"><a href="#第四课打卡" class="headerlink" title="第四课打卡"></a>第四课打卡</h1><p><img src="https://i.loli.net/2020/06/29/x7Bh6KUI2ceaD1L.png" alt="image-20200629184139044"></p>
<p><a href="https://share.cryptozombies.io/zh/lesson/4/share/%E9%99%88%E5%A5%95%E8%BF%85?id=W251bGwsMSwxNF0=" target="_blank" rel="noopener">我的僵尸大军4</a></p>
]]></content>
      <categories>
        <category>Solidity Path</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>使用truffle测试智能合约</title>
    <url>/2020/06/30/%E4%BD%BF%E7%94%A8truffle%E6%B5%8B%E8%AF%95%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<hr><p><strong>引言：</strong>这部分的教程网址没做中文页面，我自己英语不太好😫，就用谷歌翻译，翻译了下，大家凑合看吧。英语好的同学可以<a href="https://cryptozombies.io/zh/lesson/11" target="_blank" rel="noopener">点击这里</a>去网站学习。</p><h1 id="Getting-Set-Up"><a href="#Getting-Set-Up" class="headerlink" title="Getting Set Up"></a>Getting Set Up</h1><p>在本课程中，我们将介绍测试<strong>以太坊</strong>智能合约背后的理论，重点是<strong>Truffle</strong>，<strong>Mocha</strong>和<strong>Chai</strong>。您将需要对<strong>Solidity</strong>和<strong>JavaScript</strong>有中等程度的了解，以帮助您充分利用这些课程。</p><a id="more"></a>


<p>如果您没有接触<strong>Solidity的经验</strong>，或者想修改某些概念，请继续学习我们的<a href="https://cryptozombies.io/lesson/1" target="_blank" rel="noopener">第一课</a>。</p>
<p>如果您不熟悉<strong>JavaScript</strong>，请在开始本课程之前考虑阅读其他地方的教程。</p>
<h2 id="让我们深入研究我们的项目"><a href="#让我们深入研究我们的项目" class="headerlink" title="让我们深入研究我们的项目"></a>让我们深入研究我们的项目</h2><p>如果您按照我们之前的课程学习，那么您应该已经构建了一个以僵尸为主题的游戏，并且已经准备就绪，并且文件结构应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── build</span><br><span class="line">  ├── contracts</span><br><span class="line">      ├── Migrations.json</span><br><span class="line">      ├── CryptoZombies.json</span><br><span class="line">      ├── erc721.json</span><br><span class="line">      ├── ownable.json</span><br><span class="line">      ├── safemath.json</span><br><span class="line">      ├── zombieattack.json</span><br><span class="line">      ├── zombiefactory.json</span><br><span class="line">      ├── zombiefeeding.json</span><br><span class="line">      ├── zombiehelper.json</span><br><span class="line">      ├── zombieownership.json</span><br><span class="line">├── contracts</span><br><span class="line">  ├── Migrations.sol</span><br><span class="line">  ├── CryptoZombies.sol</span><br><span class="line">  ├── erc721.sol</span><br><span class="line">  ├── ownable.sol</span><br><span class="line">  ├── safemath.sol</span><br><span class="line">  ├── zombieattack.sol</span><br><span class="line">  ├── zombiefactory.sol</span><br><span class="line">  ├── zombiefeeding.sol</span><br><span class="line">  ├── zombiehelper.sol</span><br><span class="line">  ├── zombieownership.sol</span><br><span class="line">├── migrations</span><br><span class="line">└── test</span><br><span class="line">. package-lock.json</span><br><span class="line">. truffle-config.js</span><br><span class="line">. truffle.js</span><br></pre></td></tr></table></figure>

<p>看到<code>test</code>文件夹了吗？这是我们要进行测试的地方。</p>
<p><em>Truffle</em>支持使用<em>JavaScript</em>和<em>Solidity</em>编写的测试，但是，在本课程的范围内，我们将使事情变得简单并坚持使用<em>JavaScript</em>。</p>
<h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><p>最佳实践是为每个合约创建一个单独的测试文件，并为其指定智能合约的名称。从长远来看，这使测试的管理变得更加简单，尤其是随着项目的增长和变更。</p>
<ol>
<li>在右侧的终端中，运行<code>touch test/CryptoZombies.js</code>。</li>
</ol>
<p>如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/30/wTUWA4odB2DXFcj.png" alt="image-20200630145051119"></p>
<h1 id="Getting-Set-Up-cont’d"><a href="#Getting-Set-Up-cont’d" class="headerlink" title="Getting Set Up (cont’d)"></a>Getting Set Up (cont’d)</h1><p>让我们前进。在本章中，我们将继续进行设置，以便我们可以编写和运行测试。</p>
<h2 id="建立Artifacts"><a href="#建立Artifacts" class="headerlink" title="建立Artifacts"></a>建立Artifacts</h2><p>每次编译智能合约时，<em>Solidity</em>编译器都会生成一个JSON文件（称为<strong>构建工件</strong>），其中包含该合约的二进制表示形式并将其保存在<code>build/contracts</code>文件夹中。</p>
<p>接下来，当您运行迁移时，<em>Truffle会</em>使用与该网络相关的信息来更新此文件。</p>
<p>每次开始编写新的测试套件时，您需要做的第一件事是加载要与之交互的合同的构建工件。这样，<strong>Truffle</strong>就会知道如何以合约可以理解的方式来格式化我们的函数调用。</p>
<p>让我们看一个简单的例子。</p>
<p>假设有一个合同叫做<code>myAwesomeContract</code>。我们可以执行以下操作来加载构建工件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeContract = artifacts.require(“myAwesomeContract”);</span><br></pre></td></tr></table></figure>

<p>该函数返回称为<strong><em>合同抽象的\</em></strong>东西。简而言之，<em>合同抽象</em>隐藏了与<strong>以太坊</strong>进行交互的复杂性，并为我们的<em>Solidity</em>智能合同提供了便捷的<em>JavaScript</em>接口。我们将在下一章中使用它。</p>
<h2 id="contract（）函数"><a href="#contract（）函数" class="headerlink" title="contract（）函数"></a>contract（）函数</h2><p>在幕后，<strong>Truffle</strong>在<strong>Mocha</strong>周围添加了一个薄包装纸，以简化测试。由于我们的课程专注于<strong>以太坊</strong>开发，因此我们不会花太多时间来解释<em>Mocha</em>的位和字节。如果您想进一步了解<em>Mocha</em>，请在完成本课程后<a href="https://mochajs.org/" target="_blank" rel="noopener">访问其网站</a>。现在，您只需要了解我们在这里介绍的内容-如何：</p>
<ul>
<li><p>通过调用名为的函数对<strong>测试</strong>进行<strong>分组</strong><code>contract()</code>。它通过提供<strong>用于测试</strong>并进行一些清理<strong>的帐户列表来</strong>扩展<strong>Mocha</strong>的功能。<code>describe()</code></p>
<p><code>contract()</code>有两个参数。第一个是<code>string</code>，必须指出我们要测试的内容。第二个参数 <code>callback</code>是我们实际编写测试的地方。</p>
</li>
<li><p><strong>执行它们</strong>：我们将执行此操作的方法是调用一个名为named的函数<code>it()</code>，该函数也带有两个参数：a <code>string</code>描述测试的实际作用，描述<code>callback</code>。</p>
</li>
</ul>
<p>放在一起，这是一个简单的测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract(<span class="string">"MyAwesomeContract"</span>, (accounts) =&gt; &#123;</span><br><span class="line">  it(<span class="string">"should be able to receive Ethers"</span>, () =&gt; &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：经过深思熟虑的测试可以解释代码的实际作用。确保对测试套件和测试用例的描述可以作为<strong>一致的语句</strong>一起阅读。就像您在编写文档一样。</p>
</blockquote>
<p>您要编写的每个测试都遵循这种简单的模式。很简单，不是吗？😁</p>
<h2 id="进行测试-1"><a href="#进行测试-1" class="headerlink" title="进行测试"></a>进行测试</h2><p>现在我们已经创建了一个空<code>CryptoZombies.js</code>文件，让我们填写它。</p>
<ol>
<li><p>代码的第一行应声明一个<code>const</code>类型的变量，名为<code>CryptoZombies</code>，并将其设置为等于<code>artifacts.require</code>函数的结果，并以我们要测试的合同名称作为参数。</p>
</li>
<li><p>接下来，继续并从上方复制/粘贴测试。</p>
</li>
<li><p>更改我们的调用方式<code>contract()</code>，以使第一个参数为智能合约的名称。</p>
<blockquote>
<p>注意：不用担心<code>accounts</code>参数。我们将在下一章中对其进行解释。</p>
</blockquote>
</li>
<li><p>传递给<code>it()</code>函数的第一个参数（在我们的示例中，就是“应该能够接收以太坊”）应该是测试的名称。由于我们将从创建新的僵尸开始，因此请确保将第一个参数设置为“应该能够创建新的僵尸”。</p>
</li>
</ol>
<p>我们都准备好了。让我们进入下一章。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里给出的测试是用<strong>JavaScript</strong>语言对<strong>solidity</strong>进行测试，也可以采用<strong>solidity</strong>对<strong>solidity</strong>进行测试。等我学会了再说吧😂。</p>
<p>test/CryptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="comment">//使用 artifacts.require 语句来取得准备部署的合约</span></span><br><span class="line"></span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, () =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="第一个测试-创建一个新的僵尸"><a href="#第一个测试-创建一个新的僵尸" class="headerlink" title="第一个测试-创建一个新的僵尸"></a>第一个测试-创建一个新的僵尸</h1><p>在部署到<strong>以太坊</strong>之前，最好在本地测试您的智能合约。</p>
<p>您可以使用名为<a href="https://truffleframework.com/ganache" target="_blank" rel="noopener">Ganache</a>的工具来进行此操作，该工具可以设置本地<strong>以太坊</strong>网络。</p>
<p><em>Ganache</em>每次启动时，都会创建10个测试帐户，并为它们提供100个以太币，以使测试更加容易。由于<em>Ganache</em>和<em>Truffle</em>紧密集成在一起，我们可以通过<code>accounts</code>上一章中提到的数组访问这些帐户。</p>
<p>但是使用<code>accounts[0]</code>和<code>accounts[1]</code>不会使我们的测试读得好对吗？</p>
<p>为了帮助理解，我们想使用两个占位符名称-Alice和Bob。因此，在<code>contract()</code>函数内部，让我们像这样初始化它们：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [alice, bob] = accounts;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：请宽恕较差的语法。在<em>JavaScript中</em>，约定是对变量名使用小写字母。</p>
</blockquote>
<p>为什么选择爱丽丝和鲍勃？有一个古老的传统，使Alice和Bob或“ A和B”成为密码学，物理学，程序设计等中的通用名称。这是一段简短但有趣的历史，在您完成本课程后，非常值得一 <a href="http://cryptocouple.com/" target="_blank" rel="noopener">读</a>。</p>
<p>现在，让我们继续第一个测试。</p>
<h2 id="创建一个新的僵尸"><a href="#创建一个新的僵尸" class="headerlink" title="创建一个新的僵尸"></a>创建一个新的僵尸</h2><p>说爱丽丝想玩我们很棒的游戏。如果是这样，她要做的第一件事就是<strong>创建自己的僵尸</strong>🧟。为此，前端（在本例中为<em>Truffle</em>）将必须调用该<code>createRandomZombie</code>函数。</p>
<blockquote>
<p>注意：作为回顾，以下是我们合同中的<em>Solidity</em>代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createRandomZombie(string _name) public &#123;</span><br><span class="line">  require(ownerZombieCount[msg.sender] == 0);</span><br><span class="line">  uint randDna = _generateRandomDna(_name);</span><br><span class="line">  randDna = randDna - randDna % 100;</span><br><span class="line">  _createZombie(_name, randDna);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们首先测试此功能。</p>
<h2 id="进行测试-2"><a href="#进行测试-2" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li><code>contract()</code>函数的第一行应声明两个名为的变量<code>alice</code> ，<code>bob</code>然后如上所示初始化它们。</li>
<li>接下来，我们要适当地调用该<code>it()</code>函数。第二个参数（一个<code>callback</code>函数）将与区块链“对话”，这意味着该函数是异步的。只需在<code>async</code>关键字前面加上。这样，每次使用<code>await</code>关键字调用此函数时，我们的测试就会等待它返回。</li>
</ol>
<blockquote>
<p>解释承诺如何工作超出了本课程的范围。学完本课程后，请随时查看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">官方文档</a>以进一步了解。</p>
</blockquote>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>test/CryptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="comment">//1. 初始化 `alice` 和 `bob`</span></span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123; </span><br><span class="line">        <span class="comment">//2 &amp; 3. 替换第一个参数并使回调异步</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="第一次测试-创建新的僵尸（续）"><a href="#第一次测试-创建新的僵尸（续）" class="headerlink" title="第一次测试-创建新的僵尸（续）"></a>第一次测试-创建新的僵尸（续）</h1><p>很好！既然我们已经有了第一个测试的外壳，那么让我向您介绍测试的工作原理。</p>
<p>通常，每个测试都有以下阶段：</p>
<ol>
<li><strong>set up</strong>：我们定义初始状态并初始化输入。</li>
<li><strong>act</strong>：我们实际在哪里测试代码。始终确保<em>只测试一件事</em>。</li>
<li><strong>assert：</strong>我们在哪里检查结果。</li>
</ol>
<p>让我们更详细地看看我们的测试应该做什么。</p>
<h2 id="1-set-up"><a href="#1-set-up" class="headerlink" title="1.set up"></a>1.set up</h2><p>在第2章中，您学习了如何创建<em>合同抽象</em>。但是，顾名思义，<em>合同抽象</em>只是一种抽象。为了与智能合约进行实际交互，我们必须创建一个<em>JavaScript</em>对象，该对象将作为合约的<strong>实例</strong>。继续我们的示例<code>myAwesomeContract</code>，我们可以使用<em>契约抽象</em>来初始化我们的实例，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contractInstance = <span class="keyword">await</span> myAwesomeContract.new();</span><br></pre></td></tr></table></figure>

<p>好，接下来该怎么办？</p>
<p>调用<code>createRandomZombie</code>要求我们将僵尸的名称作为参数传递给它。因此，下一步将是给爱丽丝的僵尸起个名字。诸如“爱丽丝的真棒僵尸”之类的东西。</p>
<p>但是，如果我们对每个测试都这样做，那么我们的代码将看起来不那么漂亮。更好的方法是如下初始化全局数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie #1"</span>, <span class="string">"Zombie #2"</span>];</span><br></pre></td></tr></table></figure>

<p>然后，调用合同的方法，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：例如，如果要编写一个可以创建1000个僵尸而不是一个或两个的僵尸的测试，使用数组存储僵尸的名称将非常方便。</p>
</blockquote>
<h2 id="进行测试-3"><a href="#进行测试-3" class="headerlink" title="进行测试"></a>进行测试</h2><p>我们已经<code>zombieNames</code>为您初始化了数组。</p>
<ol>
<li>让我们创建一个合同实例。声明一个<code>const</code>名为的新名称<code>contractInstance</code>，并将其设置为等于<code>CryptoZombies.new()</code>函数的结果。</li>
<li><code>CryptoZombies.new()</code>与区块链“对话”。这意味着它是一个异步函数。让我们<code>await</code>在函数调用之前添加关键字。</li>
</ol>
<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p>test/CryptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">// start here</span></span><br><span class="line">        <span class="keyword">const</span> contractInstance = <span class="keyword">await</span> CryptoZombies.new();   </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="第一个测试-创建一个新的僵尸（续）"><a href="#第一个测试-创建一个新的僵尸（续）" class="headerlink" title="第一个测试-创建一个新的僵尸（续）"></a>第一个测试-创建一个新的僵尸（续）</h1><p>现在我们已经排好了鸭-僵尸僵尸-让我们前进到下一个阶段… 🧟🦆‍🧟🦆🧟🦆‍🧟🦆🧟🦆‍🧟🦆</p>
<h2 id="2-act"><a href="#2-act" class="headerlink" title="2.act"></a>2.act</h2><p>我们已经到达要调用为Alice-创建新僵尸的函数的部分<code>createRandomZombie</code>。</p>
<p>但是有一个小问题-我们怎么做才能让方法“知道”谁调用它？另一种表达方式是-我们如何确保爱丽丝（而不是鲍勃）将成为这个新僵尸的所有者？🧐</p>
<p>嗯…问题可以通过<em>合同抽象</em>解决。<em>Truffle</em>的功能之一是它包装了原始的<em>Solidity</em>实现，并让我们通过传递该地址作为参数来指定进行函数调用的地址。</p>
<p>以下调用<code>createRandomZombie</code>并确保<code>msg.sender</code>将其设置为爱丽丝的地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br></pre></td></tr></table></figure>

<p>现在，我有一个简单的问题要问：您知道存储在其中的内容<code>result</code>吗？</p>
<p>好吧，让我解释一下。</p>
<h4 id="日志和事件"><a href="#日志和事件" class="headerlink" title="日志和事件"></a>日志和事件</h4><p>一旦指定了要使用进行测试的合同<code>artifacts.require</code>，<em>Truffle</em> 便会自动提供由智能合同生成的日志。这意味着我们现在可以<code>name</code>使用类似以下内容来检索Alice的新创建的僵尸：<code>result.logs[0].args.name</code>。以类似的方式，我们可以得到<code>id</code>和<code>_dna</code>。</p>
<p>除了这些信息之外，<code>result</code>还将为我们提供有关交易的其他一些有用的细节：</p>
<ul>
<li><code>result.tx</code>：交易哈希</li>
<li><code>result.receipt</code>：包含交易收据的对象。如果<code>result.receipt.status</code>等于，<code>true</code>则表示交易成功。否则，意味着事务失败。</li>
</ul>
<blockquote>
<p>注意：请注意，日志也可以用作存储数据的便宜得多的选项。缺点是无法从智能合约本身内部对其进行访问。</p>
</blockquote>
<h2 id="3-assert"><a href="#3-assert" class="headerlink" title="3.assert"></a>3.assert</h2><p>在本章中，我们将使用内置的断言模块，该模块带有一组断言函数，例如<code>equal()</code>和<code>deepEqual()</code>。简而言之，<code>throw</code>如果结果与预期不符，这些功能将检查条件和错误。由于我们将比较简单的值，因此我们将开始运行<code>assert.equal()</code>。</p>
<h2 id="进行测试-4"><a href="#进行测试-4" class="headerlink" title="进行测试"></a>进行测试</h2><p>让我们结束第一个测试。</p>
<ol>
<li>声明一个<code>const</code>名为 <code>result</code>，并将其设置为等于以<code>contractInstance.createRandomZombie</code>僵尸的名称（zombieNames[0],）和所有者{from: alice}作为参数的结果。</li>
<li>一旦有了<code>result</code>，请<code>assert.equal</code>使用两个参数－<code>result.receipt.status</code>和进行调用<code>true</code>。</li>
</ol>
<p>如果上述条件成立，我们可以假设我们的测试已通过。为了安全起见，我们在这里时再添加一张支票。</p>
<ol>
<li>在下一行中，检查是否<code>result.logs[0].args.name</code>等于<code>zombieNames[0]</code>。使用<code>assert.equal</code>，就像我们上面所做的一样。</li>
</ol>
<p>现在，该运行<code>truffle test</code>并查看我们的第一个测试是否通过了。这种工作方式是<em>Truffle</em>只会检查<em>“ test”</em>目录并执行在该目录中找到的文件。</p>
<p>实际上，我们已经为您做到了。输出应如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (323ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  1 passing (768ms)</span><br></pre></td></tr></table></figure>

<p>至此，您的第一个测试结束了-做得好！还有更多其他内容，所以让我们继续下一课…</p>
<h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">        <span class="comment">// start here</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="在游戏中保持乐趣"><a href="#在游戏中保持乐趣" class="headerlink" title="在游戏中保持乐趣"></a>在游戏中保持乐趣</h1><p>到目前为止很棒的工作！现在我们可以确定用户可以创建新的僵尸了。</p>
<p>但是，如果他们可以继续调用此功能以在其军队中创建无限的僵尸，则游戏将不会很有趣。因此，在<a href="https://cryptozombies.io/en/lesson/2/chapter/4" target="_blank" rel="noopener">第2课的第4章中，</a>我们向添加了一条<code>require</code>语句，以<code>createZombieFunction()</code>确保每个用户不能拥有一个以上的僵尸：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(ownerZombieCount[msg.sender] == 0)</span><br></pre></td></tr></table></figure>

<p>让我们测试一下此功能，看看它是否有效。</p>
<h2 id="钩子（hooks）"><a href="#钩子（hooks）" class="headerlink" title="钩子（hooks）"></a>钩子（hooks）</h2><p>在短短几分钟内🤞，我们将进行多个测试，而工作方式是每个测试都应以一张干净的纸开始。因此，对于每个测试，我们都必须创建一个智能合约的新实例，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br></pre></td></tr></table></figure>

<p>如果您可以只编写一次并让<em>Truffle</em>在每次测试中都自动运行它，那会不会很好？</p>
<p>好吧… <em>Mocha</em>（和<em>Truffle</em>）的功能之一是能够在测试之前或之后运行一些称为<em>钩子</em>的代码片段。要在执行测试之前运行某些程序，应将代码放在名为函数中<code>beforeEach()</code>。</p>
<p>因此，<code>contract.new()</code>您不必像这样写几次，只需这样做一次：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// let's put here the code that creates a new contract instance</span></span><br><span class="line">  <span class="comment">//让我们将创建新合约实例的代码放在这里</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后，<code>Truffle</code>会照顾好一切。真是太好了，不是吗？</p>
<h2 id="进行测试-5"><a href="#进行测试-5" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li><p>在初始化<code>alice</code>和bob的代码行下方，我们声明一个名为的变量<code>contractInstance</code>。不要将其分配给任何东西。</p>
<blockquote>
<p>注意：我们希望<code>contractInstance</code>将范围限制为定义它的块。使用<code>let</code>代替<code>var</code>。</p>
</blockquote>
</li>
<li><p>接下来，从上方复制/粘贴代码段以定义<code>beforeEach()</code>功能。</p>
</li>
<li><p>让我们填写新函数的主体。继续并<strong>移动</strong>在<code>beforeEach()</code>函数内部创建新合同实例的代码行。现在我们在<code>contractInstance</code>其他地方定义了，您可以删除<code>const</code>限定符。</p>
</li>
<li><p>我们将需要一个<code>it</code>用于测试的新空函数。将测试名称（这是我们传递给<code>it</code>函数的第一个参数）设置为“不应允许两个僵尸”。</p>
</li>
</ol>
<p>我们将在下一章继续充实此功能！</p>
<hr>
<h3 id="be‍♂️这里是…各种各样的僵尸-🧟‍♂️"><a href="#be‍♂️这里是…各种各样的僵尸-🧟‍♂️" class="headerlink" title="be‍♂️这里是…各种各样的僵尸!!! 🧟‍♂️"></a>be‍♂️这里是…各种各样的僵尸!!! 🧟‍♂️</h3><p>如果您确实非常想<strong><em>精通掌握\</em></strong>，请继续阅读。否则，只需单击下一步，然后转到下一章。</p>
<p>你还在吗？</p>
<p>太棒了！毕竟，您为什么要否认自己很多很棒的事情？</p>
<p>现在，让我们回到<code>contract.new</code>工作原理上来。基本上，每次我们调用此函数时，<em>Truffle</em>都会使它<em>生效</em>，以便部署新合同。</p>
<p>一方面，这很有用，因为它使我们可以使用干净的表开始每个测试。</p>
<p>另一方面，如果每个人都将创建无数合同，则区块链将变得肿。我们希望您随处逛逛，但不要您的旧测试合同！</p>
<p>我们想防止这种情况发生，对吧？</p>
<p>令人高兴的是，解决方案非常简单…… <code>selfdestruct</code>一旦不再需要我们的合同。</p>
<p>其工作方式如下：</p>
<ul>
<li><p><strong>首先</strong>，我们希望<code>CryptoZombies</code>像这样向智能合约添加新功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function kill() public onlyOwner &#123;</span><br><span class="line">   selfdestruct(owner());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果您想了解更多信息<code>selfdestruct()</code>，可以在<a href="https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html#self-destruct" target="_blank" rel="noopener">此处</a>阅读<em>Solidity</em>文档 。要记住的最重要的事情是，将特定地址的代码从区块链中删除的<em>唯一</em>方法。这使其成为非常重要的功能！<code>selfdestruct</code></p>
</blockquote>
</li>
<li><p><strong>接下来</strong>，与<code>beforeEach()</code>上面解释的功能有些相似，我们将创建一个名为<code>afterEach()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">afterEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">   <span class="keyword">await</span> contractInstance.kill();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>最后</strong>，<em>松露</em>将确保在执行测试后调用此函数。</p>
</li>
</ul>
<p>瞧，智能合约将其移除！</p>
<p>在本课程中，我们有很多基础要讨论，而实现此功能可能至少需要增加2章。因此，我们相信您可以添加它。💪🏻</p>
<h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="comment">// start here</span></span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">//const contractInstance = await CryptoZombies.new();</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//define the new it() function</span></span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="在游戏中保持乐趣（续）"><a href="#在游戏中保持乐趣（续）" class="headerlink" title="在游戏中保持乐趣（续）"></a>在游戏中保持乐趣（续）</h1><p>在本章中，我们将填写第二个测试的正文。这是应该做的：</p>
<ul>
<li>首先，爱丽丝应该打电话<code>createRandomZombie</code>给它<code>zombieNames[0]</code>，并将其作为她的第一个僵尸的名字。</li>
<li>接下来，爱丽丝应该尝试创建她的第二个僵尸。唯一不同的是，这次，僵尸名称应设置为<code>zombieNames[1]</code>。</li>
<li>在这一点上，我们期望合同<code>throw</code>有误。</li>
<li>由于仅当智能合约出错时我们的测试才能通过，因此我们的逻辑看起来会有所不同。我们必须将第二个<code>createRandomZombie</code>函数调用包装在一个<code>try/catch</code>块内，如下所示：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//try to create the second zombie</span></span><br><span class="line">    <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">    assert(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">assert(<span class="literal">false</span>, <span class="string">"The contract did not throw."</span>);</span><br></pre></td></tr></table></figure>

<p>现在我们已经有了我们想要的，对吗？</p>
<p>嗯…我们离我们很近，但还不在那里。</p>
<p>为了使测试保持整洁，我们将上面的代码移至，<code>helpers/utils.js</code>然后将其导入“ CryptoZombies.js”，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br></pre></td></tr></table></figure>

<p>这就是调用该函数的代码行的样子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> utils.shouldThrow(myAwesomeContractInstance.myAwesomeFunction());</span><br></pre></td></tr></table></figure>

<h2 id="进行测试-6"><a href="#进行测试-6" class="headerlink" title="进行测试"></a>进行测试</h2><p>在上一章中，我们为第二个测试创建了一个空外壳。让我们填写它。</p>
<ol>
<li>首先，让爱丽丝创建她的第一个僵尸。给它<code>zombieNames[0]</code>起名字，不要忘记正确设置所有者。</li>
<li>爱丽丝创建第一个僵尸之后，<code>shouldThrow</code>使用<code>createRandomZombie</code>作为参数运行。如果您不记得执行此操作的语法，请从上面检查示例。但是首先，请尝试不偷看。</li>
</ol>
<p>太棒了，您刚刚编写完第二个测试！</p>
<p>现在，我们已经开始<code>truffle test</code>为您服务。这是输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (129ms)</span><br><span class="line">    ✓ should not allow two zombies (148ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2 passing (1s)</span><br></pre></td></tr></table></figure>

<p>测试通过了。万岁！</p>
<h2 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">// start here</span></span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Zombie-Transfers"><a href="#Zombie-Transfers" class="headerlink" title="Zombie Transfers"></a>Zombie Transfers</h1><p>问题-说爱丽丝想把僵尸送给鲍勃。我们可以测试一下吗？</p>
<p>当然！</p>
<p>如果您一直遵循前面的课程，则应该知道，除其他外，我们的僵尸继承自<em>ERC721</em>。而<em>ERC721</em>规范有两种不同的方式来传输令牌：</p>
<p><strong>(1)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function transferFrom(address _from, address _to, uint256 _tokenId) external payable;</span><br></pre></td></tr></table></figure>

<p>第一种方法是让<em>爱丽丝</em>（所有者）呼叫<code>transferFrom</code>她<code>address</code>作为<code>_from</code>参数，鲍勃 <code>address</code>作为<code>_to</code>参数，然后<code>zombieId</code>她想转移。</p>
<p><strong>(2)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function approve(address _approved, uint256 _tokenId) external payable;</span><br></pre></td></tr></table></figure>

<p>其次是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function transferFrom(address _from, address _to, uint256 _tokenId) external payable;</span><br></pre></td></tr></table></figure>

<p>第二种方法是让Alice首先<code>approve</code>用Bob的地址和呼叫<code>zombieId</code>。合同然后存储鲍勃被批准采取僵尸。接下来，当Alice或Bob致电时<code>transferFrom</code>，合同检查该地址<code>msg.sender</code>是否等于Alice或Bob的地址。如果是这样，它将僵尸转移给Bob。</p>
<p>我们将这两种转移僵尸的方式称为“方案”。为了测试每种情况，我们希望创建两个不同的测试组并为其提供有意义的描述。</p>
<p>为什么要分组？我们只有一些测试…</p>
<p>是的，现在我们的逻辑非常简单，但这可能并非总是如此。不过，第二种情况（<code>approve</code>后跟<code>transferFrom</code>）至少需要进行两项测试：</p>
<ul>
<li>首先，我们必须检查爱丽丝本人是否能够转移僵尸。</li>
<li>其次，我们还必须检查Bob是否被允许运行<code>transferFrom</code>。</li>
</ul>
<p>此外，将来，您可能希望添加其他功能，这些功能需要进行不同的测试。我们认为最好从一开始就将可伸缩的结构放在适当的位置。如果您花了一些时间专注于其他事情，那么对于外部人员或您自己来说，了解代码将变得更加容易。</p>
<blockquote>
<p>注意：如果您最终处于与其他编码人员一起工作的位置，则会发现他们更有可能遵循您在初始代码中规定的任何约定。如果您想从事大型，成功的项目，那么有效地协作是您需要的关键技能之一。养成良好的习惯，尽早地帮助您做到这一点，将使您作为一名编码员的生活更轻松，更成功。</p>
</blockquote>
<h2 id="上下文功能"><a href="#上下文功能" class="headerlink" title="上下文功能"></a>上下文功能</h2><p>为了对测试进行分组，<em>松露</em>提供了一个名为的功能<code>context</code>。让我快速向您展示如何使用它，以更好地构建我们的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Test the single-step transfer scenario.</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">context(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The approved address calls transferFrom</span></span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The owner calls transferFrom</span></span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果我们将其添加到<code>CryptoZombies.js</code>文件中然后运行<code>truffle test</code>，输出将类似于以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (100ms)</span><br><span class="line">    ✓ should not allow two zombies (251ms)</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      ✓ should transfer a zombie</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      ✓ should approve and <span class="keyword">then</span> transfer a zombie when the owner calls transferForm</span><br><span class="line">      ✓ should approve and <span class="keyword">then</span> transfer a zombie when the approved address calls transferForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  5 passing (2s)</span><br></pre></td></tr></table></figure>

<p>好？</p>
<p>嗯…</p>
<p>再看一看-以上输出存在问题。看来所有测试都通过了，这显然是错误的，因为我们甚至还没有编写它们！</p>
<p>幸运的是，有一个简单的解决方案-如果我们仅将a <code>x</code>放在<code>context()</code>函数前面，如下所示：<code>xcontext()</code>，<code>Truffle</code>将跳过这些测试。</p>
<blockquote>
<p>注意：<code>x</code>也可以放置在<code>it()</code>功能的前面。编写完这些功能的测试后，别忘了删除所有x！</p>
</blockquote>
<p>现在，让我们开始吧<code>truffle test</code>。输出应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (199ms)</span><br><span class="line">    ✓ should not allow two zombies (175ms)</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      - should transfer a zombie</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      - should approve and then transfer a zombie when the owner calls transferForm</span><br><span class="line">      - should approve and then transfer a zombie when the approved address calls transferForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2 passing (827ms)</span><br><span class="line">  3 pending</span><br></pre></td></tr></table></figure>

<p>其中“-”表示已被该“ x”标记跳过的测试。</p>
<p>很整洁吧？现在，您可以继续进行测试，并标记出空白的函数，以备不时之需。</p>
<h2 id="进行测试-7"><a href="#进行测试-7" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li>继续并从上面复制/粘贴代码。</li>
<li>现在，让我们<em>跳过</em>我们的新<code>context</code>功能。</li>
</ol>
<p>我们的测试只是空壳，要实现它们，需要编写很多逻辑。在接下来的章节中，我们将以较小的部分来做。</p>
<h2 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start herex</span></span><br><span class="line">    xcontext(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Test the single-step transfer scenario.</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">xcontext(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The approved address calls transferFrom</span></span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The owner calls transferFrom</span></span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="ERC721令牌转移-单步方案"><a href="#ERC721令牌转移-单步方案" class="headerlink" title="ERC721令牌转移-单步方案"></a>ERC721令牌转移-单步方案</h1><p>到目前为止，我们只是在热身…</p>
<p>但是现在是时候真正炫耀您所知道的！</p>
<p>在下一章中，我们将把我们学到的东西放在一起，并测试一些很酷的东西。</p>
<p>首先，我们将一步一步测试<em>Alice</em>将她的ERC721令牌转移给<em>Bob</em>的场景。</p>
<p>这是我们的测试应执行的操作：</p>
<ul>
<li>为爱丽丝创建一个新的僵尸（记住，僵尸不过是ERC721令牌）。</li>
<li>做到这一点，以便Alice将她的ERC721令牌转让给Bob。</li>
<li>此时，Bob应该拥有ERC721令牌。如果是这样，<code>ownerOf</code>将返回一个等于鲍勃地址的值。</li>
<li>让我们结束它通过检查Bob是<code>newOwner</code>，里面的<code>assert</code>。</li>
</ul>
<h2 id="进行测试-8"><a href="#进行测试-8" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li><p>函数的第一行应调用<code>createRandomZombie</code>。为其<code>zombieNames[0]</code>命名，并确保Alice是所有者。</p>
</li>
<li><p>第二行应声明一个<code>const</code>named <code>zombieId</code>，并将其设置为等于僵尸的id。在第4章中，您学习了如何检索此信息。如有必要，请刷新您的内存。</p>
</li>
<li><p>然后，我们必须<code>transferFrom</code>使用<code>alice</code>和<code>bob</code>作为第一个参数进行调用。确保Alice调用了此函数，并且<code>await</code>在继续下一步之前，我们希望它能够完成运行。</p>
</li>
<li><p>声明一个<code>const</code>被叫<code>newOwner</code>。将其设置为<code>ownerOf</code>与一起调用<code>zombieId</code>。</p>
</li>
<li><p>最后，让我们检查Bob是否拥有此ERC721令牌。将其放入代码中，意味着我们应该<code>assert.equal</code>使用<code>newOwner</code>和 <code>bob</code>作为参数运行；</p>
<blockquote>
<p>注意：<code>assert.equal(newOwner, bob)</code>和<code>assert.equal(bob, newOwner)</code>基本上是同一回事。但是我们的命令行解释器不是太高级，因此除非您键入第一个选项，否则它将不会认为您的答案正确。</p>
</blockquote>
</li>
<li><p>我是否说上一步是最后一步！好吧…这是个谎言。我们要做的最后一件事是通过删除来“跳过”第一种情况<code>x</code>。</p>
</li>
</ol>
<p>！那是很多代码。希望您能正确解决。如果没有，请随时单击“显示答案”。</p>
<p>现在运行<code>truffle test</code>，看看我们的新测试是否通过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">  ✓ should be able to create a new zombie (146ms)</span><br><span class="line">  ✓ should not allow two zombies (235ms)</span><br><span class="line">  with the single-step transfer scenario</span><br><span class="line">    ✓ should transfer a zombie (382ms)</span><br><span class="line">  with the two-step transfer scenario</span><br><span class="line">    - should approve and <span class="keyword">then</span> transfer a zombie when the owner calls transferForm</span><br><span class="line">    - should approve and <span class="keyword">then</span> transfer a zombie when the approved address calls transferForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 passing (1s)</span><br><span class="line">2 pending</span><br></pre></td></tr></table></figure>

<p>在那里！我们的代码以出色的表现通过了测试👏🏻。</p>
<p>在下一章中，我们将继续进行两步方案，<code>approve</code>其后是<code>transferFrom</code>。</p>
<h2 id="测试-7"><a href="#测试-7" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="comment">// start here.</span></span><br><span class="line">          <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">          <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">          <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">          <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">          assert.equal(newOwner, bob);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    xcontext(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The approved address calls transferFrom</span></span><br><span class="line">        &#125;)</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The owner calls transferFrom</span></span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="ERC721代币转移-两步方案"><a href="#ERC721代币转移-两步方案" class="headerlink" title="ERC721代币转移-两步方案"></a>ERC721代币转移-两步方案</h1><p>现在，<code>approve</code>接下来的<code>transferFrom</code>转移ERC721令牌的方法远非在公园散步，但我在这里为您提供帮助。</p>
<p>简而言之，我们必须测试两种不同的情况：</p>
<ul>
<li>爱丽丝批准鲍勃使用ERC721令牌。然后，鲍勃（<strong>批准的地址</strong>）致电<code>transferFrom</code>。</li>
<li>爱丽丝批准鲍勃使用ERC721令牌。接下来，爱丽丝转移ERC721令牌。</li>
</ul>
<p>在这两种情况的区别在于<strong><em>谁</em></strong>调用实际转移，甲和乙。</p>
<p>我们让它看起来很简单，对吧？</p>
<p>让我们看一下第一种情况。</p>
<h2 id="鲍勃调用transferFrom函数"><a href="#鲍勃调用transferFrom函数" class="headerlink" title="鲍勃调用transferFrom函数"></a>鲍勃调用transferFrom函数</h2><p>此方案的步骤如下：</p>
<ul>
<li>爱丽丝创建一个新的ERC721令牌，然后呼叫<code>approve</code>。</li>
<li>接下来，Bob运行<code>transferFrom</code>，这应该使他成为EC721令牌的所有者。</li>
<li>最后，我们必须<code>assert.equal</code>使用<code>newOwner</code>和<code>bob</code>作为参数进行调用。</li>
</ul>
<h2 id="进行测试-9"><a href="#进行测试-9" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li>我们测试的前两行代码与之前的测试相似。我们已继续为您复制粘贴。</li>
<li>接下来，为了让Bob批准使用ERC721令牌，请调用approve()<code>。该函数以</code>bob<code>和</code>zombieId`作为参数。另外，请确保Alice调用了该方法（因为将传输她的ERC721令牌）。</li>
<li>最后三行代码<strong>几乎与</strong>之前的测试<strong>相似</strong>。同样，我们已继续为您复制粘贴它们。让我们更新<code>transferFrom()</code>函数调用，以使发送者为Bob。</li>
<li>最后，让我们“跳过”这种情况，“跳过”最后一个测试用例，我们仍然要编写一个测试用例。</li>
</ol>
<p>是时候运行<code>truffle test</code>，看看我们的测试是否通过了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (218ms)</span><br><span class="line">    ✓ should not allow two zombies (175ms)</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      ✓ should transfer a zombie (334ms)</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      ✓ should approve and <span class="keyword">then</span> transfer a zombie when the owner calls transferForm (360ms)</span><br><span class="line">      - should approve and <span class="keyword">then</span> transfer a zombie when the approved address calls transferForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  4 passing (2s)</span><br><span class="line">  1 pending</span><br></pre></td></tr></table></figure>

<h2 id="测试-8"><a href="#测试-8" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner, bob);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="comment">// start here</span></span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: bob&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner,bob);</span><br><span class="line">        &#125;)</span><br><span class="line">        xit(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Test the two-step scenario.  The owner calls transferFrom</span></span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="ERC721代币转移-两步方案（续）"><a href="#ERC721代币转移-两步方案（续）" class="headerlink" title="ERC721代币转移-两步方案（续）"></a>ERC721代币转移-两步方案（续）</h1><p>我们即将完成对转移的测试！现在让我们测试Alice调用的场景<code>transferFrom</code>。</p>
<p>我们为您带来一些好消息-此测试非常简单。您要做的就是复制并粘贴上一章中的代码，并进行编写，以便<strong>Alice</strong>（而非Bob）调用<code>transferFrom</code>：</p>
<h2 id="进行测试-10"><a href="#进行测试-10" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li>复制并粘贴上一个测试中的代码，并进行Alice调用<code>transferFrom</code>。</li>
<li>“跳过”它，我们都准备好了。</li>
</ol>
<p>如果运行<code>truffle test</code>，输出将类似于以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (201ms)</span><br><span class="line">    ✓ should not allow two zombies (486ms)</span><br><span class="line">    ✓ should <span class="built_in">return</span> the correct owner (382ms)</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      ✓ should transfer a zombie (337ms)</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      ✓ should approve and <span class="keyword">then</span> transfer a zombie when the approved address calls transferForm (266ms)</span><br><span class="line">  5 passing (3s)</span><br></pre></td></tr></table></figure>

<p>我想不出与传输相关的其他任何测试，因此我们现在就完成了。</p>
<h2 id="测试-9"><a href="#测试-9" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner, bob);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: bob&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner,bob);</span><br><span class="line">        &#125;)</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> start</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner,bob);</span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Zombie-Attacks"><a href="#Zombie-Attacks" class="headerlink" title="Zombie Attacks"></a>Zombie Attacks</h1><p>哇！前面的章节是非常密集的信息，但是我们涵盖了很多基础。</p>
<p>那么我们现在完成所有方案了吗？不，我们还没有到那儿。我们把最好的东西留到了最后。</p>
<p>我们已经建立了一个僵尸游戏，<strong>最好的部分</strong>是僵尸之间相互搏斗，对吧？</p>
<p>该测试非常简单，包括以下步骤：</p>
<ul>
<li><strong>首先</strong>，我们将创建两个新的僵尸-一个用于爱丽丝，另一个用于Bob。</li>
<li><strong>其次</strong>，爱丽丝（Alice）将以<code>attack</code>鲍勃（Bob’s）<code>zombieId</code>作为参数运行她的僵尸</li>
<li><strong>最后</strong>，为了通过测试，我们将检查是否<code>result.receipt.status</code>等于<code>true</code></li>
</ul>
<p>假设我们在这里，我已经对所有这些逻辑进行了快速编码，将其包装在一个<code>it()</code>函数中，然后运行<code>truffle test</code>。</p>
<p>然后，输出将如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (102ms)</span><br><span class="line">    ✓ should not allow two zombies (321ms)</span><br><span class="line">    ✓ should <span class="built_in">return</span> the correct owner (333ms)</span><br><span class="line">    1) zombies should be able to attack another zombie</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      ✓ should transfer a zombie (307ms)</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      ✓ should approve and <span class="keyword">then</span> transfer a zombie when the approved address calls transferFrom (357ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  5 passing (7s)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1) Contract: CryptoZombies</span><br><span class="line">       zombies should be able to attack another zombie:</span><br><span class="line">     Error: Returned error: VM Exception <span class="keyword">while</span> processing transaction: revert</span><br></pre></td></tr></table></figure>

<p>哦哦 我们的测试刚刚失败☹️。</p>
<p>但为什么？</p>
<p>让我们弄清楚。首先，我们将仔细研究背后的代码<code>createRandomZombie()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createRandomZombie(string _name) public &#123;</span><br><span class="line">  require(ownerZombieCount[msg.sender] == 0);</span><br><span class="line">  uint randDna = _generateRandomDna(_name);</span><br><span class="line">  randDna = randDna - randDna % 100;</span><br><span class="line">  _createZombie(_name, randDna);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到目前为止，一切都很好。继续前进，让我们深入探讨<code>_createZombie()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function _createZombie(string _name, uint _dna) internal &#123;</span><br><span class="line">  uint id = zombies.push(Zombie(_name, _dna, 1, uint32(now + cooldownTime), 0, 0)) - 1;</span><br><span class="line">  zombieToOwner[id] = msg.sender;</span><br><span class="line">  ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(1);</span><br><span class="line">  emit NewZombie(id, _name, _dna);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哦，看到这个问题了吗？</p>
<p>我们的测试失败了，因为我们为游戏增加了<strong>冷却</strong>时间，并使其僵尸不得不在攻击（或进食）后等待<strong>1天</strong>才能再次攻击。</p>
<p>没有这个，僵尸每天可能攻击并增加无数次，这会使游戏变得太容易了。</p>
<p>现在，我们现在该怎么办…等待一天？</p>
<h2 id="时间旅行"><a href="#时间旅行" class="headerlink" title="时间旅行"></a>时间旅行</h2><p>幸运的是，我们不必等待那么多。实际上，根本不需要等待。这是因为<em>Ganache</em>提供了一种通过两个助手功能及时前进的方法：</p>
<ul>
<li><code>evm_increaseTime</code>：增加下一个程序段的时间。</li>
<li><code>evm_mine</code>：挖掘一个新块。</li>
</ul>
<p>您甚至不需要Tardis或DeLorean这样的时光旅行。</p>
<p>让我解释一下这些功能如何工作：</p>
<ul>
<li>每次开采新区块时，矿工都会为其添加时间戳。假设造成僵尸的交易在第5区块中被开采。</li>
<li>接下来，我们称之为，<code>evm_increaseTime</code>但是，由于区块链是不可变的，因此无法修改现有区块。因此，当合同检查时间时，它不会增加。</li>
<li>如果运行<code>evm_mine</code>，将挖出（并加盖时间戳）第6块，这意味着，当我们将僵尸进行战斗时，智能合约将“看到”一天过去了。</li>
</ul>
<p>放在一起，我们可以通过以下方式来修正测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> web3.currentProvider.sendAsync(&#123;</span><br><span class="line">  jsonrpc: <span class="string">"2.0"</span>,</span><br><span class="line">  method: <span class="string">"evm_increaseTime"</span>,</span><br><span class="line">  params: [<span class="number">86400</span>],  <span class="comment">// there are 86400 seconds in a day</span></span><br><span class="line">  id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">&#125;, () =&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">web3.currentProvider.send(&#123;</span><br><span class="line">    jsonrpc: <span class="string">'2.0'</span>,</span><br><span class="line">    method: <span class="string">'evm_mine'</span>,</span><br><span class="line">    params: [],</span><br><span class="line">    id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>是的，那是一段不错的代码，但是我们不想将此逻辑添加到<code>CryptoZombies.js</code>文件中。</p>
<p>我们已将所有内容移至名为的新文件中<code>helpers/time.js</code>。要增加时间，您只需致电：<code>time.increaseTime(86400);</code></p>
<p>是的，还不够好。毕竟，我们真的希望您知道一天中头顶有几秒钟吗？</p>
<p>当然不是。这就是为什么我们添加了另一个名为<em>helper的函数的原因</em><code>days</code>，该<em>函数</em>占用了我们想要增加时间的天数作为参数。您可以这样调用此函数：<code>await time.increase(time.duration.days(1))</code></p>
<blockquote>
<p>注意：显然，主网上或矿工保护的任何可用测试链上都没有时间旅行。如果任何人都可以选择改变时间在现实世界中的运行方式，那将是一团糟。为了测试智能合约，时间旅行可能是编码员的基本组成部分。</p>
</blockquote>
<h2 id="进行测试-11"><a href="#进行测试-11" class="headerlink" title="进行测试"></a>进行测试</h2><p>我们继续进行并填写了失败的测试版本。</p>
<ol>
<li>向下滚动到我们为您留下的评论。接下来，通过<code>await time.increase</code>如上所述运行来修复测试用例。</li>
</ol>
<p>我们都准备好了。让我们运行<code>truffle test</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (119ms)</span><br><span class="line">    ✓ should not allow two zombies (112ms)</span><br><span class="line">    ✓ should return the correct owner (109ms)</span><br><span class="line">    ✓ zombies should be able to attack another zombie (475ms)</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      ✓ should transfer a zombie (235ms)</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      ✓ should approve and then transfer a zombie when the owner calls transferForm (181ms)</span><br><span class="line">      ✓ should approve and then transfer a zombie when the approved address calls transferForm (152ms)</span><br></pre></td></tr></table></figure>

<p>然后你去！这是本章的最后一步。</p>
<h2 id="测试-10"><a href="#测试-10" class="headerlink" title="测试"></a>测试</h2><p>test/CruptoZombies.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> time = <span class="built_in">require</span>(<span class="string">"./helpers/time"</span>);</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">        assert.equal(result.logs[<span class="number">0</span>].args.name,zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner, bob);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: bob&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner,bob);</span><br><span class="line">        &#125;)</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            assert.equal(newOwner,bob);</span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"zombies should be able to attack another zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> result;</span><br><span class="line">        result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">const</span> firstZombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">        result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: bob&#125;);</span><br><span class="line">        <span class="keyword">const</span> secondZombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> increase the time</span></span><br><span class="line">        <span class="keyword">await</span> time.increase(time.duration.days(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> contractInstance.attack(firstZombieId, secondZombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        assert.equal(result.receipt.status, <span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="与chai的更多表达断言"><a href="#与chai的更多表达断言" class="headerlink" title="与chai的更多表达断言"></a>与chai的更多表达断言</h1><p>到目前为止，我们一直在使用内置<code>assert</code>模块来编写我们的断言。虽然还不错，但该<code>assert</code>模块有一个主要缺点-代码读取效果不佳。幸运的是，那里有几个更好的断言模块，并且<code>Chai</code>是最好的之一。</p>
<h2 id="chai断言图书馆"><a href="#chai断言图书馆" class="headerlink" title="chai断言图书馆"></a>chai断言图书馆</h2><p><code>Chai</code>是非常强大的功能，在本课程的范围内，我们将只涉及一些问题。学完本课程后，请随时查看<a href="https://www.chaijs.com/guide/" target="_blank" rel="noopener">他们的指南</a>以进一步了解您的知识。</p>
<p>也就是说，让我们看看捆绑到的三种断言样式<code>Chai</code>：</p>
<ul>
<li><p><em>Expect</em>：让您链接自然语言断言，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lessonTitle = <span class="string">"Testing Smart Contracts with Truffle"</span>;</span><br><span class="line">expect(lessonTitle).to.be.a(<span class="string">"string"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><em>应该</em>：允许与<code>expect</code>接口类似的断言，但是链以一个<code>should</code>属性开始：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lessonTitle = <span class="string">"Testing Smart Contracts with Truffle"</span>;</span><br><span class="line">lessonTitle.should.be.a(<span class="string">"string"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><em>assert</em>：提供与node.js打包的符号类似的符号，并包括其他一些测试，并且与浏览器兼容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lessonTitle = <span class="string">"Testing Smart Contracts with Truffle"</span>;</span><br><span class="line">assert.typeOf(lessonTitle, <span class="string">"string"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在本章中，我们将向您展示如何使用改善断言<code>expect</code>。</p>
<blockquote>
<p>注意：我们假设该<code>chai</code>软件包已安装在您的计算机上。如果不是这种情况，您可以像这样轻松地安装它：<code>npm -g install chai</code></p>
</blockquote>
<p>为了使用<code>expect</code>样式，我们首先要做的就是将其导入到我们的项目中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br></pre></td></tr></table></figure>

<h2 id="Expect（）-to-equal（）"><a href="#Expect（）-to-equal（）" class="headerlink" title="Expect（）.to.equal（）"></a>Expect（）.to.equal（）</h2><p>现在，我们已经将导入<code>expect</code>到我们的项目中，检查两个字符串是否相等如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> zombieName = <span class="string">'My Awesome Zombie'</span>;</span><br><span class="line">expect(zombieName).to.equal(<span class="string">'My Awesome Zombie'</span>);</span><br></pre></td></tr></table></figure>

<p>聊够了。让我们的<code>Chai</code>权力得到充分利用！</p>
<h2 id="进行测试-12"><a href="#进行测试-12" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li>导入<code>expect</code>我们的项目。</li>
<li>继续上面的示例<code>zombieName</code>，我们可以使用<code>expect</code>来测试是否成功完成事务，如下所示：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(result.receipt.status).to.equal(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>我们可以检查爱丽丝是否拥有这样的僵尸：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(zombieOwner).to.equal(alice);</span><br></pre></td></tr></table></figure>

<ol>
<li>用替换所有出现<code>assert.equal</code>的<code>expect</code>。我们在代码中留下了很多注释，以使其易于查找。</li>
</ol>
<h2 id="测试-11"><a href="#测试-11" class="headerlink" title="测试"></a>测试</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoZombies = artifacts.require(<span class="string">"CryptoZombies"</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">"./helpers/utils"</span>);</span><br><span class="line"><span class="keyword">const</span> time = <span class="built_in">require</span>(<span class="string">"./helpers/time"</span>);</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> import expect into our project</span></span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line"><span class="keyword">const</span> zombieNames = [<span class="string">"Zombie 1"</span>, <span class="string">"Zombie 2"</span>];</span><br><span class="line">contract(<span class="string">"CryptoZombies"</span>, (accounts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [alice, bob] = accounts;</span><br><span class="line">    <span class="keyword">let</span> contractInstance;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        contractInstance = <span class="keyword">await</span> CryptoZombies.new();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should be able to create a new zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> replace with expect</span></span><br><span class="line">        <span class="comment">//assert.equal(result.receipt.status, true);</span></span><br><span class="line">        expect(result.receipt.status).to.equal(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//assert.equal(result.logs[0].args.name,zombieNames[0]);</span></span><br><span class="line">        expect(result.logs[<span class="number">0</span>].args.name).to.equal(zombieNames[<span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"should not allow two zombies"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">await</span> utils.shouldThrow(contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: alice&#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the single-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should transfer a zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> replace with expect</span></span><br><span class="line">            <span class="comment">//expect(zombieOwner).to.equal(alice);</span></span><br><span class="line">            <span class="comment">//assert.equal(newOwner, bob);</span></span><br><span class="line">            expect(newOwner).to.equal(bob);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    context(<span class="string">"with the two-step transfer scenario"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the approved address calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: bob&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> replace with expect</span></span><br><span class="line">            <span class="comment">//assert.equal(newOwner,bob);</span></span><br><span class="line">            expect(newOwner).to.equal(bob);</span><br><span class="line">        &#125;)</span><br><span class="line">        it(<span class="string">"should approve and then transfer a zombie when the owner calls transferForm"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> zombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">            <span class="keyword">await</span> contractInstance.approve(bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">await</span> contractInstance.transferFrom(alice, bob, zombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">            <span class="keyword">const</span> newOwner = <span class="keyword">await</span> contractInstance.ownerOf(zombieId);</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> replace with expect</span></span><br><span class="line">            <span class="comment">//assert.equal(newOwner,bob);</span></span><br><span class="line">            expect(newOwner).to.equal(bob);</span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    it(<span class="string">"zombies should be able to attack another zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> result;</span><br><span class="line">        result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">0</span>], &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="keyword">const</span> firstZombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">        result = <span class="keyword">await</span> contractInstance.createRandomZombie(zombieNames[<span class="number">1</span>], &#123;<span class="attr">from</span>: bob&#125;);</span><br><span class="line">        <span class="keyword">const</span> secondZombieId = result.logs[<span class="number">0</span>].args.zombieId.toNumber();</span><br><span class="line">        <span class="keyword">await</span> time.increase(time.duration.days(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">await</span> contractInstance.attack(firstZombieId, secondZombieId, &#123;<span class="attr">from</span>: alice&#125;);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> replace with expect</span></span><br><span class="line">        <span class="comment">//assert.equal(result.receipt.status, true);</span></span><br><span class="line">        expect(result.receipt.status).to.equal(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Testing-Against-Loom"><a href="#Testing-Against-Loom" class="headerlink" title="Testing Against Loom"></a>Testing Against Loom</h1><p>令人印象深刻！你一定一直在练习。</p>
<p>现在，如果不向您展示如何针对<strong><em>Loom\</em></strong> Testnet 进行测试，本教程将是不完整的。</p>
<p>回想一下我们以前的课程，在 <strong><em>Loom上\</em></strong>，与<strong>以太坊</strong>相比，用户可以更快，更<strong>省油地进行</strong>交易。这使得DAppChains更适合于游戏或面向用户的DApp。</p>
<p>你知道吗？针对<strong>Loom进行</strong>部署和测试完全没有什么不同。我们已经进行了总结，总结了需要做的事情，以便您可以对<strong><em>Loom\</em></strong>进行测试。让我们快速看一下。</p>
<h2 id="配置松露在织布机上测试"><a href="#配置松露在织布机上测试" class="headerlink" title="配置松露在织布机上测试"></a>配置松露在<strong>织布机上</strong>测试</h2><p>首先是第一件事。让我们通过在<code>networks</code>对象内部放置以下代码片段来告诉Truffle如何部署到Loom Testnet 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loom_testnet: &#123;</span><br><span class="line">  provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> privateKey = <span class="string">'YOUR_PRIVATE_KEY'</span>;</span><br><span class="line">    <span class="keyword">const</span> chainId = <span class="string">'extdev-plasma-us1'</span>;</span><br><span class="line">    <span class="keyword">const</span> writeUrl = <span class="string">'wss://extdev-basechain-us1.dappchains.com/websocket'</span>;</span><br><span class="line">    <span class="keyword">const</span> readUrl = <span class="string">'wss://extdev-basechain-us1.dappchains.com/queryws'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">  &#125;,</span><br><span class="line">  network_id: <span class="string">'extdev'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：切勿泄露您的私钥！我们只是为了简单起见这样做。一种更安全的解决方案是将私钥保存到文件中，然后从该文件中读取其值。如果这样做，请确保避免将保存私钥的文件推送到GitHub，任何人都可以看到它。</p>
</blockquote>
<h2 id="帐户数组"><a href="#帐户数组" class="headerlink" title="帐户数组"></a>帐户数组</h2><p>为了使<em>Truffle</em>与<strong>Loom</strong>进行对话，我们已将默认值替换为<code>HDWalletProvider</code>我们自己的<a href="https://github.com/loomnetwork/loom-truffle-provider" target="_blank" rel="noopener">Truffle Provider</a>。结果，我们必须告诉我们的提供者填写<code>accounts</code>数组，以便我们可以测试游戏。为此，我们需要替换<code>return</code>sa new 的代码行<code>LoomTruffleProvider</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey)</span><br></pre></td></tr></table></figure>

<p>有了这个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loomTruffleProvider = <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">loomTruffleProvider.createExtraAccountsFromMnemonic(mnemonic, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> loomTruffleProvider;</span><br></pre></td></tr></table></figure>

<h2 id="进行测试-13"><a href="#进行测试-13" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li>用上面的代码段替换<code>return</code>新代码行<code>LoomTruffleProvider</code>。</li>
</ol>
<p>我们还要注意一件事。仅在针对<em>Ganache</em>进行测试时才可以使用时间旅行，因此我们应该跳过此测试。您已经知道如何通过在函数名称前放置一个来<em>跳过</em>测试<code>x</code>。但是，这次我们希望您学习一些新知识。长话短说…您可以通过简单地链接函数调用来<em>跳过</em>测试，<code>skip()</code>如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">it.skip(<span class="string">"zombies should be able to attack another zombie"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//We're skipping the body of the function for brevity</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>我们已经为您跳过测试。然后，我们跑了<code>truffle test --network loom_testnet</code>。</p>
<p>如果从上方输入命令，则输出应类似于以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Contract: CryptoZombies</span><br><span class="line">    ✓ should be able to create a new zombie (6153ms)</span><br><span class="line">    ✓ should not allow two zombies (12895ms)</span><br><span class="line">    ✓ should <span class="built_in">return</span> the correct owner (6962ms)</span><br><span class="line">    - zombies should be able to attack another zombie</span><br><span class="line">    with the single-step transfer scenario</span><br><span class="line">      ✓ should transfer a zombie (13810ms)</span><br><span class="line">    with the two-step transfer scenario</span><br><span class="line">      ✓ should approve and <span class="keyword">then</span> transfer a zombie when the approved address calls transferForm (22388ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  5 passing (2m)</span><br><span class="line">  1 pending</span><br></pre></td></tr></table></figure>

<p>伙计们，到此为止！我们已经完成了对<code>CryptoZombies</code>智能合约的测试。</p>
<h2 id="测试-12"><a href="#测试-12" class="headerlink" title="测试"></a>测试</h2><p>truffle.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"><span class="keyword">const</span> LoomTruffleProvider = <span class="built_in">require</span>(<span class="string">'loom-truffle-provider'</span>);</span><br><span class="line"><span class="keyword">const</span> mnemonic = <span class="string">"YOUR MNEMONIC HERE"</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// Object with configuration for each network</span></span><br><span class="line">    networks: &#123;</span><br><span class="line">        <span class="comment">//development</span></span><br><span class="line">        development: &#123;</span><br><span class="line">            host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            port: <span class="number">7545</span>,</span><br><span class="line">            network_id: <span class="string">"*"</span>,</span><br><span class="line">            gas: <span class="number">9500000</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Configuration for Ethereum Mainnet</span></span><br><span class="line">        mainnet: &#123;</span><br><span class="line">            provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://mainnet.infura.io/v3/&lt;YOUR_INFURA_API_KEY&gt;"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            network_id: <span class="string">"1"</span> <span class="comment">// Match any network id</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Configuration for Rinkeby Metwork</span></span><br><span class="line">        rinkeby: &#123;</span><br><span class="line">            provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://rinkeby.infura.io/v3/&lt;YOUR_INFURA_API_KEY&gt;"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            network_id: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Configuration for Loom Testnet</span></span><br><span class="line">        loom_testnet: &#123;</span><br><span class="line">            provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> privateKey = <span class="string">'YOUR_PRIVATE_KEY'</span>;</span><br><span class="line">                <span class="keyword">const</span> chainId = <span class="string">'extdev-plasma-us1'</span>;</span><br><span class="line">                <span class="keyword">const</span> writeUrl = <span class="string">'wss://extdev-basechain-us1.dappchains.com/websocket'</span>;</span><br><span class="line">                <span class="keyword">const</span> readUrl = <span class="string">'wss://extdev-basechain-us1.dappchains.com/queryws'</span>;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> Replace the line below</span></span><br><span class="line">                <span class="comment">//return new LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span></span><br><span class="line">                <span class="keyword">const</span> loomTruffleProvider = <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">                loomTruffleProvider.createExtraAccountsFromMnemonic(mnemonic, <span class="number">10</span>);</span><br><span class="line">                <span class="keyword">return</span> loomTruffleProvider;</span><br><span class="line">            &#125;,</span><br><span class="line">            network_id: <span class="string">'9545242630824'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    compilers: &#123;</span><br><span class="line">        solc: &#123;</span><br><span class="line">            version: <span class="string">"0.4.25"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/07/02/LhYN2jKCUDtm6WJ.png" alt="image-20200702102922238"></p>
]]></content>
      <tags>
        <tag>truffle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用truffle部署DAPP</title>
    <url>/2020/07/02/%E4%BD%BF%E7%94%A8truffle%E9%83%A8%E7%BD%B2DAPP/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>如果您是<strong>CryptoZombies的新手</strong>，强烈建议您在开始本课程之前先阅读前六个课程。请花一些时间来熟悉编写智能合约。否则，将很难上这节课。</p><h2 id="失踪的一块"><a href="#失踪的一块" class="headerlink" title="失踪的一块"></a>失踪的一块</h2><p>因此，您已经完成了之前的课程。太棒了！这意味着您几乎已经掌握了构建DApp的技巧。</p><p>但是，这个难题的一个重要部分仍然缺失。</p><p>是的…您仍然必须学习如何<strong><em>部署智能合约\</em></strong>。</p><a id="more"></a>



<p>现在，如果您有前端开发的背景，那么您可能已经习惯于使用<em>Webpack，Gulp或Browserify</em>等众多工具来简化开发人员的工作。</p>
<p>但是，<strong>Solidity</strong>开发人员使用哪些工具？</p>
<h2 id="truffle"><a href="#truffle" class="headerlink" title="truffle"></a>truffle</h2><p><strong>truffle</strong>是有理由的最受欢迎的区块链开发框架-它具有许多有用的功能：</p>
<ul>
<li>轻松编写智能合约</li>
<li>自动ABI生成</li>
<li>集成的智能合约测试-甚至还支持<strong>Mocha</strong>和<strong>Chai</strong>！</li>
<li>支持多种网络-代码可以部署到Rinkeby，<strong><em>Ethereum\</em></strong>甚至<strong><em>Loom\</em></strong>。稍后我们将引导您完成😉</li>
</ul>
<p>只要<code>npm</code>和<code>node</code>已安装在计算机上，我们会要你安装<strong>松露</strong>，并使其在全球上市。</p>
<h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><p>我们将从基础开始。启动一个新的终端窗口，创建一个名为的目录<code>CryptoZombies</code>，并<code>cd</code>进入该目录。</p>
<ol>
<li><p>现在，让我们安装<strong>Truffle</strong>并使其在全球范围内可用。</p>
<blockquote>
<p>注意：以下是<code>npm</code>用于安装软件包并使之在全球范围内可用的方法：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install package_name -g</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="https://i.loli.net/2020/07/02/VZp7b8dcnF3EGCY.png" alt="image-20200702103709631"></p>
<h1 id="Truffle入门"><a href="#Truffle入门" class="headerlink" title="Truffle入门"></a>Truffle入门</h1><p>现在我们已经安装了 <strong>Truffle</strong>，是时候通过运行初始化我们的新项目了<code>truffle init</code>。它要做的就是创建具有以下结构的一组文件夹和配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── contracts</span><br><span class="line">    ├── Migrations.sol</span><br><span class="line">├── migrations</span><br><span class="line">    ├── 1_initial_migration.js</span><br><span class="line">└── test</span><br><span class="line">truffle-config.js</span><br><span class="line">truffle.js</span><br></pre></td></tr></table></figure>

<p>合同，迁移，测试…这非常复杂😟</p>
<p>别担心，学习使用<strong>松露</strong>不会吃掉你的大脑。本章将向您介绍<strong>Truffle</strong>的默认项目结构，一旦您知道如何使用<strong>Truffle</strong>，部署智能合约将变得轻而易举。</p>
<h2 id="Truffle的默认目录结构"><a href="#Truffle的默认目录结构" class="headerlink" title="Truffle的默认目录结构"></a>Truffle的默认目录结构</h2><p>因此，<code>truffle init</code>在<code>CryptoZombies</code>目录中运行命令，应创建多个目录以及一些JavaScript和Solidity文件。让我们仔细看看：</p>
<ul>
<li><p><strong><em>合同\</em></strong>： <strong>Truffle</strong>希望在这里找到我们所有的智能合同。为了使代码井井有条，我们甚至可以创建诸如的嵌套文件夹<code>contracts/tokens</code>。挺整齐的。</p>
<blockquote>
<p>注意：<code>truffle init</code>应自动创建一个名为的合同<code>Migrations.sol</code>和相应的迁移文件。我们稍后再解释。</p>
</blockquote>
</li>
<li><p><strong><em>迁移\</em></strong>：迁移是一个JavaScript文件，可告诉 <strong>Truffle</strong>如何部署智能合约。</p>
</li>
<li><p><strong><em>测试\</em></strong>：在这里，我们希望将单元测试放在JavaScript或Solidity文件中。请记住，合同一旦部署就无法更改，因此必须在部署智能合约之前对其进行测试。</p>
</li>
<li><p><strong><em>truffle.js\</em></strong>和 <strong><em>truffle\</em></strong> <strong><em>-config.js\</em></strong>：用于存储用于部署的网络设置的配置文件。<strong>松露</strong>需要两个配置文件，因为在Windows上同时具有这两个文件夹<code>truffle.js</code>并且<code>truffle.exe</code>在同一文件夹中可能会产生冲突。长话短说-如果您正在运行Windows，建议将其删除<code>truffle.js</code>并<code>truffle-config.js</code>用作默认配置文件。查阅 <strong>Truffle</strong>的<a href="https://truffleframework.com/docs/truffle/reference/configuration" target="_blank" rel="noopener">官方文档</a>以进一步了解。</p>
</li>
</ul>
<p>但是，为什么要使用此目录结构？我不习惯，看起来很复杂…</p>
<p>好吧，有几个很好的理由。首先，如果您更改这些文件夹的名称，<strong>松露</strong>将无法正常工作。</p>
<p>其次，通过遵守该约定，其他开发人员将容易理解您的项目。简而言之，使用标准的文件夹结构和代码约定可以使将来扩展或更改团队变得更容易。</p>
<h2 id="Truffle-hdwallet-provider"><a href="#Truffle-hdwallet-provider" class="headerlink" title="Truffle-hdwallet-provider"></a>Truffle-hdwallet-provider</h2><p>在本课程中，我们将使用<em>Infura</em>将代码部署到<strong><em>Ethereum\</em></strong>。这样，我们可以运行应用程序而无需设置我们自己的<strong><em>以太坊\</em></strong>节点或钱包。但是，为了确保安全，<em>Infura</em>不管理私钥，这意味着它无法代表我们签署交易。由于部署智能合约需要<strong>Truffle</strong>签署交易，因此我们需要一个名为的工具<code>truffle-hdwallet-provider</code>。它的唯一目的是处理事务签名。</p>
<blockquote>
<p>注意：也许您在问为什么我们选择不<code>truffle-hdwallet-provider</code>使用上一章中的内容来安装：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install truffle truffle-hdwallet-provider</span><br></pre></td></tr></table></figure>

<p>好吧…该<code>truffle init</code>命令希望找到一个空目录。如果那里有任何文件，它将出错。因此，我们需要按正确的顺序进行所有操作并<code>truffle-hdwallet-provider</code>在运行后安装<code>truffle init</code>。</p>
<h2 id="进行测试："><a href="#进行测试：" class="headerlink" title="进行测试："></a>进行测试：</h2><ol>
<li>运行<code>truffle init</code>。该命令生成我们已经讨论过的目录结构。</li>
<li>运行<code>npm install truffle-hdwallet-provider</code>。</li>
</ol>
<p><img src="https://i.loli.net/2020/07/02/NiHjG4p1BPgb7f2.png" alt="image-20200702103851398"></p>
<h1 id="编译智能合约源码"><a href="#编译智能合约源码" class="headerlink" title="编译智能合约源码"></a>编译智能合约源码</h1><p>恭喜你！现在，我们已经建立了项目结构并进行了设置<code>truffle-hdwallet-provider</code>，让我们编译合同。</p>
<p>您问为什么我们需要编译？</p>
<p><em>以太坊虚拟机</em>在<em>编写</em>时无法直接理解Solidity源代码。因此，我们需要运行一个将智能合约“翻译”成机器可读<strong><em>字节码的编译器\</em></strong>。然后，虚拟机执行字节码，并完成我们的智能合约所需的操作。</p>
<p>对字节码的外观感到好奇吗？让我们来看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0x60806040526010600155600154600a0a6002556201518060035566038d7ea4c6800060085560006009556046600a55336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1...&quot;</span><br></pre></td></tr></table></figure>

<p>如您所见，人类几乎可以像现实中的僵尸一样读取字节码！</p>
<h2 id="使用Solidity编译器"><a href="#使用Solidity编译器" class="headerlink" title="使用Solidity编译器"></a>使用Solidity编译器</h2><p>现在我们正在谈论Solidity编译器，我们应该提到开发人员设法引入了一些漂亮的功能。</p>
<p>假设我们要修改<code>add</code>包含在其中的函数的定义<code>SafeMath</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(uint16 a, uint16 b) internal returns (uint16) &#123;</span><br><span class="line">    uint16 c = a + b;</span><br><span class="line">    assert(c &gt;= a);</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们要编译此函数，Solidity编译器将<strong><em>发出警告\</em></strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">safemath.sol:110:11: Warning: Function state mutability can be restricted to pure</span><br><span class="line">          function add(uint16 a, uint16 b) internal returns (uint16) &#123;</span><br><span class="line">          ^ (Relevant source part starts here and spans across multiple lines).</span><br></pre></td></tr></table></figure>

<p>编译器试图说的是，我们的函数不从/向区块链读取或写入，我们应该使用<code>pure</code>修饰符。</p>
<p>为什么这很重要？</p>
<p>好吧，发挥作用<code>pure</code>或<code>view</code>节省我们的精力。由于这些功能不会修改区块链的状态，因此矿工无需执行它们。把它放在了几句话，<code>pure</code>和<code>view</code>功能可以<code>call</code>编为免费。</p>
<h2 id="CryptoZombies-游戏"><a href="#CryptoZombies-游戏" class="headerlink" title="CryptoZombies-游戏"></a>CryptoZombies-游戏</h2><p>请记住，我们已经将逻辑嵌入到名为的智能合约中<code>ZombieOwnership.sol</code>。</p>
<p>嗯…不是游戏的好名字。</p>
<p>幸运的是，这不是问题。我们可以使用继承来创建具有相同操作和功能的智能合约，而无论选择什么名称。</p>
<p>让我们创建一个新的智能合约<code>CryptoZombies</code>，该合约继承自<code>ZombieOwnership.sol</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;./zombieownership.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract CryptoZombies is ZombieOwnership</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们将所有智能合约复制到该<code>./contracts</code>文件夹中。现在，项目结构应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── contracts</span><br><span class="line">    ├── Migrations.sol</span><br><span class="line">    ├── CryptoZombies.sol</span><br><span class="line">    ├── erc721.sol</span><br><span class="line">    ├── ownable.sol</span><br><span class="line">    ├── safemath.sol</span><br><span class="line">    ├── zombieattack.sol</span><br><span class="line">    ├── zombiefactory.sol</span><br><span class="line">    ├── zombiefeeding.sol</span><br><span class="line">    ├── zombiehelper.sol</span><br><span class="line">    ├── zombieownership.sol</span><br><span class="line">├── migrations</span><br><span class="line">└── test</span><br></pre></td></tr></table></figure>

<p>一切都已正确设置。让我们编译我们的项目。</p>
<h2 id="进行测试：-1"><a href="#进行测试：-1" class="headerlink" title="进行测试："></a>进行测试：</h2><ol>
<li><p>执行<code>truffle compile</code>。此命令应创建构建工件并将其放置在<code>./build/contracts</code>目录中。</p>
<blockquote>
<p>注意：构建工件由智能合约，ABI的“字节码”版本以及<strong>Truffle</strong>用来正确部署代码的一些内部数据组成。避免编辑这些文件，否则<strong>Truffle</strong>可能无法正常工作。</p>
</blockquote>
</li>
</ol>
<p><img src="https://i.loli.net/2020/07/02/BH4RlXErygd6fk3.png" alt="image-20200702104326875"></p>
<h1 id="Migrations"><a href="#Migrations" class="headerlink" title="Migrations"></a>Migrations</h1><p>通常，在这一点上，在部署到<strong><em>以太坊\</em></strong>之前，您需要在本地测试智能合约。您可以使用名为<a href="https://truffleframework.com/ganache" target="_blank" rel="noopener">Ganache</a>的工具来进行此操作，该工具可以设置本地<strong><em>以太坊\</em></strong>网络。</p>
<p>但是，尽管测试非常重要，但它需要覆盖整个课程-因此，我们将在本课程中坚持部署。如果您愿意的话，想了解更多有关测试的信息，我建议您<a href="http://cryptozombies.io/en/lesson/10" target="_blank" rel="noopener">使用“松露测试智能合约”</a>课程。</p>
<p>要部署到<strong><em>以太坊，\</em></strong>我们将不得不创建一种称为<strong>迁移的</strong>东西。</p>
<p>迁移是JavaScript文件，可帮助<strong>Truffle</strong>将代码部署到<strong><em>以太坊\</em></strong>。请注意，<code>truffle init</code>创建了一个特殊合同<code>Migrations.sol</code>，该合同跟踪您对代码所做的更改。它的工作方式是将更改历史记录保存在链上。因此，您将永远不会两次部署相同的代码。</p>
<h2 id="创建一个新的迁移"><a href="#创建一个新的迁移" class="headerlink" title="创建一个新的迁移"></a>创建一个新的迁移</h2><p>我们将从<code>truffle init</code>为我们创建的文件开始<code>./contracts/1_initial_migration.js</code>。让我们看看里面是什么：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Migrations);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>很简单，不是吗？</p>
<p>首先，脚本告诉<strong>Truffle</strong>我们要与<code>Migrations</code>合同进行交互。</p>
<p>接下来，它导出一个函数，该函数接受一个称为<code>deployer</code>参数的对象。该对象充当您（开发人员）和<strong>Truffle</strong>的部署引擎之间的接口。即使<code>deployer</code>提供了许多有用的功能，我们也不会在本课程的范围内使用它们。完成后，如果您想进一步了解<strong>Truffle</strong>的功能，请随时查阅<strong>Truffle</strong>的<a href="https://truffleframework.com/docs/truffle/getting-started/running-migrations" target="_blank" rel="noopener">文档</a>。</p>
<p>为了使一切准备就绪，我们已经开始创建一个新文件<code>./contracts/2_crypto_zombies.js</code>，然后从中复制和粘贴内容<code>./contracts/1_initial_migration.js</code>。</p>
<h2 id="进行测试：-2"><a href="#进行测试：-2" class="headerlink" title="进行测试："></a>进行测试：</h2><ol>
<li>修改<code>./contracts/2_crypto_zombies.js</code>为此：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CryptoZombies = artifacts.require(<span class="string">"./CryptoZombies.sol"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(CryptoZombies);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/07/02/CrWfFGH9wRZLDeO.png" alt="image-20200702104510599"></p>
<h1 id="Configuration-Files"><a href="#Configuration-Files" class="headerlink" title="Configuration Files"></a>Configuration Files</h1><p>太棒了！您已经成功编译了源代码并创建了迁移文件。</p>
<p>在部署之前，还有另外一件事要做。我们必须编辑配置文件，以告知<strong>Truffle</strong>我们要部署到的网络。</p>
<p>等等，我以为只有一个<strong><em>以太坊\</em></strong>网络。我在这里想念什么？</p>
<h2 id="以太坊测试网络"><a href="#以太坊测试网络" class="headerlink" title="以太坊测试网络"></a>以太坊测试网络</h2><p>几个公共的<strong><em>以太坊\</em></strong>测试网络可让您在将合约部署到主网上之前免费测试合约（记住，一旦将合约部署到主网上就无法更改）。这些测试网络使用与主网络不同的共识算法（通常是PoA），而Ether可以自由地鼓励进行彻底的测试。</p>
<p>在本课程中，我们将使用以太坊基金会创建的公共测试网络Rinkeby。</p>
<h2 id="truffle-js配置文件"><a href="#truffle-js配置文件" class="headerlink" title="truffle.js配置文件"></a>truffle.js配置文件</h2><p>现在，让我们看一下默认的<strong>Truffle</strong>配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat truffle.js</span><br><span class="line">/*</span><br><span class="line"> * NB: since truffle-hdwallet-provider 0.0.5 you must wrap HDWallet providers <span class="keyword">in</span> a</span><br><span class="line"> * <span class="keyword">function</span> when declaring them. Failure to <span class="keyword">do</span> so will cause commands to hang. ex:</span><br><span class="line"> *</span><br><span class="line"> * mainnet: &#123;</span><br><span class="line"> *     provider: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line"> *       <span class="built_in">return</span> new HDWalletProvider(mnemonic, <span class="string">'https://mainnet.infura.io/&lt;infura-key&gt;'</span>)</span><br><span class="line"> *     &#125;,</span><br><span class="line"> *     network_id: <span class="string">'1'</span>,</span><br><span class="line"> *     gas: 4500000,</span><br><span class="line"> *     gasPrice: 10000000000,</span><br><span class="line"> *   &#125;,</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>它只是一个空壳。因此，我们将需要更新此文件，以允许我们将合同部署到Rinkeby和以太坊主网。</p>
<h3 id="Truffle-hdwallet-provider-1"><a href="#Truffle-hdwallet-provider-1" class="headerlink" title="Truffle-hdwallet-provider"></a>Truffle-hdwallet-provider</h3><p>还记得第二章吗？</p>
<p>我们要求您安装一个名为<strong>Truffle</strong>的附加软件包<code>truffle-hdwallet-provider</code>，以帮助进行交易。</p>
<p>现在，我们要编辑配置文件以使用<code>HDWalletProvider</code>。为了使其正常工作，我们将在文件顶部添加一行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br></pre></td></tr></table></figure>

<p>接下来，我们将创建一个新变量来存储助记符：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mnemonic = <span class="string">"onions carrots beans ..."</span>;</span><br></pre></td></tr></table></figure>

<p>请注意，我们不建议在配置文件中存储诸如助记符或私钥之类的机密。</p>
<p>…但为什么？</p>
<p>配置文件经常被推送到GitHub，任何人都可以看到它们，这让您很容易受到攻击😱！为避免显示助记符（或私钥！），应从文件中读取该助记符并将其添加到中<code>.gitignore</code>。稍后我们将向您展示如何执行此操作。</p>
<p><strong>为了使这种情况简单</strong>，我们已经复制了助记符并将其存储在变量中。</p>
<h3 id="为Rinkeby和以太坊主网设置Truffle"><a href="#为Rinkeby和以太坊主网设置Truffle" class="headerlink" title="为Rinkeby和以太坊主网设置Truffle"></a>为Rinkeby和以太坊主网设置Truffle</h3><p>接下来，要确保<strong>Truffle``</strong>知道’’我们要部署到的网络，我们将必须创建两个单独的对象-一个用于Rinkeby，另一个用于<strong><em>以太坊\</em></strong>主网：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">networks: &#123;</span><br><span class="line">  <span class="comment">// Configuration for mainnet</span></span><br><span class="line">  mainnet: &#123;</span><br><span class="line">    provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://mainnet.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    network_id: <span class="string">"1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Configuration for rinkeby network</span></span><br><span class="line">  rinkeby: &#123;</span><br><span class="line">    <span class="comment">// Special function to setup the provider</span></span><br><span class="line">    provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://rinkeby.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Network id is 4 for Rinkeby</span></span><br><span class="line">    network_id: <span class="number">4</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：提供程序值包装在一个函数中，以确保在需要之前不会对其进行初始化。</p>
</blockquote>
<h3 id="包起来"><a href="#包起来" class="headerlink" title="包起来"></a>包起来</h3><p>现在，让我们将这些片段放在一起，看看我们的配置文件应如何显示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize HDWalletProvider</span></span><br><span class="line"><span class="keyword">const</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your own mnemonic here</span></span><br><span class="line"><span class="keyword">const</span> mnemonic = <span class="string">"YOUR_MNEMONIC"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Module exports to make this configuration available to Truffle itself</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// Object with configuration for each network</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    <span class="comment">// Configuration for mainnet</span></span><br><span class="line">    mainnet: &#123;</span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://mainnet.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      network_id: <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Configuration for rinkeby network</span></span><br><span class="line">    rinkeby: &#123;</span><br><span class="line">      <span class="comment">// Special function to setup the provider</span></span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://rinkeby.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Network id is 4 for Rinkeby</span></span><br><span class="line">      network_id: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="进行测试：-3"><a href="#进行测试：-3" class="headerlink" title="进行测试："></a>进行测试：</h2><p>我们已经为您更新了大部分配置文件。让我们填写缺失的部分：</p>
<ol>
<li>在文件顶部，添加用于初始化的代码行<code>truffle-hdwallet-provider</code>。</li>
<li>填写<code>network_id</code>Rinkeby网络。如果您不记得该参数的值，请从上方检查代码段。</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>truffle.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1. Initialize `truffle-hdwallet-provider`</span></span><br><span class="line"><span class="keyword">const</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"><span class="comment">// Set your own mnemonic here</span></span><br><span class="line"><span class="keyword">const</span> mnemonic = <span class="string">"YOUR_MNEMONIC"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Module exports to make this configuration available to Truffle itself</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// Object with configuration for each network</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    <span class="comment">// Configuration for mainnet</span></span><br><span class="line">    mainnet: &#123;</span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://mainnet.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      network_id: <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Configuration for rinkeby network</span></span><br><span class="line">    rinkeby: &#123;</span><br><span class="line">      <span class="comment">// Special function to setup the provider</span></span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://rinkeby.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      network_id: <span class="number">4</span> <span class="comment">//Fill in the `network_id` for the Rinkeby network.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Deploying-Our-Smart-Contract"><a href="#Deploying-Our-Smart-Contract" class="headerlink" title="Deploying Our Smart Contract"></a>Deploying Our Smart Contract</h1><p>棒极了！那是困难的部分-实际部署到Rinkeby将会很简单。为此，<strong>松露</strong>依赖于称为<strong>migration的</strong>东西。</p>
<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>听起来迁移似乎涉及很多事情，但是在实践中，迁移无非是一个JavaScript文件，该文件告诉<strong>Truffle</strong>如何修改智能合约的状态。</p>
<p>显然，第一次迁移将仅部署智能合约。其他一些迁移会部署新版本的代码以添加功能或修复错误。</p>
<p>简而言之，迁移提供了一种方便的方法来跟踪您对代码所做的更改。</p>
<p>如果要部署多个合同，则必须为每个合同创建一个单独的迁移文件。迁移始终以1,2,3等顺序执行。</p>
<p>在本课程中，我们将仅部署到Rinkeby。部署到主网将需要实际资金来支付天然气，一旦部署，我们将无法修改代码。因此，最好先部署到Rinkeby，并彻底测试代码。</p>
<h2 id="得到一些Ether"><a href="#得到一些Ether" class="headerlink" title="得到一些Ether"></a>得到一些Ether</h2><p>在进行部署之前，请确保您的帐户中有足够的以太币。为了测试目的而获得Ether的最简单方法是通过称为的服务<code>faucet</code>。我们建议在Rinkeby上运行的<a href="https://faucet.rinkeby.io/" target="_blank" rel="noopener">Authenticated水龙头</a>。按照说明进行操作，然后在几分钟之内，您的地址将被记入一些以太币。</p>
<h2 id="进行测试-1"><a href="#进行测试-1" class="headerlink" title="进行测试"></a>进行测试</h2><ol>
<li><p>现在一切都已设置好，是时候部署到Rinkeby了。为此，请<code>truffle migrate --network rinkeby</code>在右侧的终端中运行。请注意如何按顺序执行迁移。</p>
<blockquote>
<p>注意：<code>truffle deploy</code>只是的别名<code>truffle migrate</code>。但是，由于我们的命令行解释器非常基础，因此除非您使用，否则它不会认为答案正确<code>migrate</code>。</p>
</blockquote>
</li>
</ol>
<p>部署到主网根本不复杂。测试智能合约后，您只需运行：<code>truffle migrate --network mainnet</code>。别忘了，您将需要支付汽油费！我们相信您将能够做到。</p>
<p>如果一切顺利，您将看到与右边的响应类似的响应。</p>
<p><img src="https://i.loli.net/2020/07/02/uMxCfRLOanoU9k5.png" alt="image-20200702110413711"></p>
<h1 id="Use-Truffle-with-Loom"><a href="#Use-Truffle-with-Loom" class="headerlink" title="Use Truffle with Loom!"></a>Use Truffle with Loom!</h1><p>看起来似乎不多，但您只是部署了<code>CryptoZombies</code>智能合约！</p>
<p>即使<strong>松露起到</strong>了很大的作用，这也不是一件容易的事，所以请轻敲自己。</p>
<h2 id="织机基础链"><a href="#织机基础链" class="headerlink" title="织机基础链"></a>织机基础链</h2><p>现在，如果您想在<strong><em>以太坊\</em></strong>上构建<strong><em>DApp\</em></strong>，则需要注意一件事-在主网上，用户需要<strong><em>为每笔交易支付汽油费\</em></strong>。但这对于面向用户的DApp或游戏而言并不理想。它很容易破坏用户体验。</p>
<p>相反，在<strong><em>Loom上\</em></strong>，您的用户可以更快，更省钱地进行交易，从而使其更适合游戏和其他非金融应用程序。</p>
<p>这意味着您的<strong><em>织机\</em></strong>僵尸将是快速僵尸！</p>
<p>不仅如此-部署到<strong><em>Loom\</em></strong>与部署到Rinkeby或以太坊主网没有什么不同。如果您知道该怎么做，那么您也知道该如何做。</p>
<p>在下一章中，我们将引导您完成部署到<strong><em>Loom的过程\</em></strong>。</p>
<h2 id="织机松露供应商"><a href="#织机松露供应商" class="headerlink" title="织机松露供应商"></a>织机松露供应商</h2><p><strong><em>Loom的\</em></strong>我们正在使用<strong>Truffle</strong>来构建，测试和部署我们的智能合约。为了使我们的生活更轻松，我们开发了一种称为<strong><em>提供程序的服务程序\</em></strong>，该<strong><em>服务程序\</em></strong>使Truffle部署到<strong><em>Loom\</em></strong>，就像部署到Rinkeby或以太坊主网一样。</p>
<p>无需过多研究细节，该提供程序就像一座桥梁，使Web3调用与<strong><em>Loom\</em></strong>兼容。它的优点在于，使用它时，您不必了解它是如何工作的。</p>
<h2 id="进行测试：-4"><a href="#进行测试：-4" class="headerlink" title="进行测试："></a>进行测试：</h2><ol>
<li><p>我们已经取得了<code>loom-truffle-provider</code>可以作为一个<code>npm</code>包。让我们安装它。</p>
<blockquote>
<p>注意：这一次，无需使程序包全局可用。</p>
</blockquote>
</li>
</ol>
<p><img src="https://i.loli.net/2020/07/02/uAwQUt4sT9ezYgp.png" alt="image-20200702110704581"></p>
<h1 id="Deploy-to-Loom-Testnet"><a href="#Deploy-to-Loom-Testnet" class="headerlink" title="Deploy to Loom Testnet"></a>Deploy to Loom Testnet</h1><p>在本章中，我们将智能合约部署到<strong><em>Loom\</em></strong> Testnet，但是在进行部署之前，需要做一些准备工作。</p>
<p>首先，我们应该创建自己的<strong><em>Loom\</em></strong>私钥。最简单的方法是根据本<a href="https://loomx.io/developers/en/basic-install-all.html" target="_blank" rel="noopener">教程</a>下载并安装<strong><em>Loom\</em></strong>。</p>
<p>接下来，创建私钥是如此简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$./loom genkey -a public_key -k private_key</span><br><span class="line"><span class="built_in">local</span> address: 0x42F401139048AB106c9e25DCae0Cf4b1Df985c39</span><br><span class="line"><span class="built_in">local</span> address base64: QvQBE5BIqxBsniXcrgz0sd+YXDk=</span><br><span class="line"><span class="variable">$cat</span> private_key</span><br><span class="line">/i0Qi8e/E+kVEIJLRPV5HJgn0sQBVi88EQw/Mq4ePFD1JGV1Nm14dA446BsPe3ajte3t/tpj7HaHDL84+Ce4Dg==</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：切勿泄露您的私钥！为了简化起见，我们只是这样做。</p>
</blockquote>
<h2 id="更新truffle-js"><a href="#更新truffle-js" class="headerlink" title="更新truffle.js"></a>更新truffle.js</h2><p>我们需要做的第一件事是初始化<code>loom-truffle-provider</code>。语法类似于我们已经使用的语法<code>HDWalletProvider</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LoomTruffleProvider = <span class="built_in">require</span>(<span class="string">'loom-truffle-provider'</span>);</span><br></pre></td></tr></table></figure>

<p>接下来，就像在第5章中所做的那样，我们必须让<strong><em>Truffle\</em></strong>知道如何在<strong><em>Loom\</em></strong>测试网上进行部署。为此，我们将一个新对象添加到<code>truffle.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loom_testnet: &#123;</span><br><span class="line">  provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> privateKey = <span class="string">'YOUR_PRIVATE_KEY'</span></span><br><span class="line">    <span class="keyword">const</span> chainId = <span class="string">'extdev-plasma-us1'</span>;</span><br><span class="line">    <span class="keyword">const</span> writeUrl = <span class="string">'http://extdev-plasma-us1.dappchains.com:80/rpc'</span>;</span><br><span class="line">    <span class="keyword">const</span> readUrl = <span class="string">'http://extdev-plasma-us1.dappchains.com:80/query'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">    &#125;,</span><br><span class="line">  network_id: <span class="string">'9545242630824'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进行测试：-5"><a href="#进行测试：-5" class="headerlink" title="进行测试："></a>进行测试：</h2><ol>
<li>添加初始化代码行<code>LoomTruffleProvider</code>。</li>
<li>将配置<code>loom_testnet</code>放在文件底部附近。</li>
</ol>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>./truffle.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize HDWalletProvider</span></span><br><span class="line"><span class="keyword">const</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Initialize LoomTruffleProvider</span></span><br><span class="line"><span class="keyword">const</span> LoomTruffleProvider = <span class="built_in">require</span>(<span class="string">'loom-truffle-provider'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your own mnemonic here</span></span><br><span class="line"><span class="keyword">const</span> mnemonic = <span class="string">"YOUR_MNEMONIC"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Module exports to make this configuration available to Truffle itself</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// Object with configuration for each network</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    <span class="comment">// Configuration for mainnet</span></span><br><span class="line">    mainnet: &#123;</span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://mainnet.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      network_id: <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Configuration for rinkeby network</span></span><br><span class="line">    rinkeby: &#123;</span><br><span class="line">      <span class="comment">// Special function to setup the provider</span></span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://rinkeby.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Network id is 4 for Rinkeby</span></span><br><span class="line">      network_id: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. Put here the configuration for loom_dapp_chain</span></span><br><span class="line">  loom_testnet: &#123;</span><br><span class="line">  provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> privateKey = <span class="string">'YOUR_PRIVATE_KEY'</span></span><br><span class="line">    <span class="keyword">const</span> chainId = <span class="string">'extdev-plasma-us1'</span>;</span><br><span class="line">    <span class="keyword">const</span> writeUrl = <span class="string">'http://extdev-plasma-us1.dappchains.com:80/rpc'</span>;</span><br><span class="line">    <span class="keyword">const</span> readUrl = <span class="string">'http://extdev-plasma-us1.dappchains.com:80/query'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">    &#125;,</span><br><span class="line">  network_id: <span class="string">'9545242630824'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Deploy-to-Loom-continued"><a href="#Deploy-to-Loom-continued" class="headerlink" title="Deploy to Loom- continued"></a>Deploy to Loom- continued</h1><p>现在，我们只需一个命令就可以将所有内容部署到<strong><em>Loom\</em></strong> Testnet。</p>
<h1 id="进行测试：-6"><a href="#进行测试：-6" class="headerlink" title="进行测试："></a>进行测试：</h1><ol>
<li><p>运行<code>truffle migrate --network loom_testnet</code>并检查输出。</p>
<p>是的，您看起来很简单！simple</p>
</li>
</ol>
<p><img src="https://i.loli.net/2020/07/02/aUi9XmrMh6Gwpv4.png" alt="image-20200702122942844"></p>
<p><img src="https://i.loli.net/2020/07/02/KXj51Uzu4hdfVIB.png" alt="image-20200702131804011"></p>
<h1 id="Deploy-to-Basechain"><a href="#Deploy-to-Basechain" class="headerlink" title="Deploy to Basechain"></a>Deploy to Basechain</h1><p>恭喜你！您已成功部署到<strong><em>Loom\</em></strong> Testnet。但是你能猜出接下来会发生什么吗？🤔</p>
<p>是的，你是对的！本章将<strong><em>引导\</em></strong>您完成部署到<strong><em>Basechain\</em></strong>（即我们的Mainnet）的过程。</p>
<p>以下是本章将要执行的操作的简要概述：</p>
<ul>
<li>创建一个新的私钥。</li>
<li>创建一个新的私钥非常简单。但是，由于我们正在谈论部署到主网络，因此该变得更加重视安全性了。因此，我们将向您展示如何安全地将私钥传递给<strong>Truffle</strong>。</li>
<li>通过向配置文件添加新对象，告诉<strong>Truffle</strong>如何部署到<strong><em>Basechain\</em></strong><code>truffle.js</code>。</li>
<li>将部署密钥列入白名单，以便您可以部署到<strong><em>Basechain\</em></strong>。</li>
<li>最后，我们通过实际部署智能合约来包装所有内容。</li>
</ul>
<h3 id="创建一个新的私钥"><a href="#创建一个新的私钥" class="headerlink" title="创建一个新的私钥"></a>创建一个新的私钥</h3><p>您已经知道如何创建私钥。但是，我们必须更改要在其中保存文件的文件名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./loom genkey -a mainnet_public_key -k mainnet_private_key</span><br><span class="line"><span class="built_in">local</span> address: 0x07419790A773Cc6a2840f1c092240922B61eC778</span><br><span class="line"><span class="built_in">local</span> address base64: B0GXkKdzzGooQPHAkiQJIrYex3g=</span><br></pre></td></tr></table></figure>

<h3 id="安全地将私钥传递给truffle"><a href="#安全地将私钥传递给truffle" class="headerlink" title="安全地将私钥传递给truffle"></a>安全地将私钥传递给truffle</h3><p>我们要做的下一件事是防止将私钥文件推送到GitHub。为此，我们创建一个名为的新文件<code>.gitignore</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure>

<p>现在让我们“告诉” GitHub，我们希望它通过输入以下命令来忽略保存私钥的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> mainnet_private_key &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure>

<p>现在，我们确保不会将自己的秘密发送到GitHub，我们必须编辑<code>truffle.js</code>配置文件并将其创建，以便<strong>Truffle</strong>从该文件读取私钥。</p>
<p>让我们从导入几件事开始：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br></pre></td></tr></table></figure>

<p>接下来，我们想定义一个函数，该函数从文件中读取私钥并初始化一个新的<code>LoomTruffleProvider</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLoomProviderWithPrivateKey</span> (<span class="params">privateKeyPath, chainId, writeUrl, readUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> privateKey = readFileSync(privateKeyPath, <span class="string">'utf-8'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单，不是吗？</p>
<h3 id="告诉Truffle如何部署到Basechain"><a href="#告诉Truffle如何部署到Basechain" class="headerlink" title="告诉Truffle如何部署到Basechain"></a>告诉Truffle如何部署到Basechain</h3><p>现在，我们必须让<strong>Truffle</strong>知道如何部署到<strong><em>Basechain\</em></strong>。为此，我们将一个新对象添加到<code>truffle.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">basechain: &#123;</span><br><span class="line">  provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> chainId = <span class="string">'default'</span>;</span><br><span class="line">    <span class="keyword">const</span> writeUrl = <span class="string">'http://basechain.dappchains.com/rpc'</span>;</span><br><span class="line">    <span class="keyword">const</span> readUrl = <span class="string">'http://basechain.dappchains.com/query'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">    <span class="keyword">const</span> privateKeyPath = path.join(__dirname, <span class="string">'mainnet_private_key'</span>);</span><br><span class="line">    <span class="keyword">const</span> loomTruffleProvider = getLoomProviderWithPrivateKey(privateKeyPath, chainId, writeUrl, readUrl);</span><br><span class="line">    <span class="keyword">return</span> loomTruffleProvider;</span><br><span class="line">    &#125;,</span><br><span class="line">  network_id: <span class="string">'*'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，您的<code>truffle.js</code>文件应类似于以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize HDWalletProvider</span></span><br><span class="line"><span class="keyword">const</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your own mnemonic here</span></span><br><span class="line"><span class="keyword">const</span> mnemonic = <span class="string">"YOUR_MNEMONIC"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLoomProviderWithPrivateKey</span> (<span class="params">privateKeyPath, chainId, writeUrl, readUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> privateKey = readFileSync(privateKeyPath, <span class="string">'utf-8'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Module exports to make this configuration available to Truffle itself</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// Object with configuration for each network</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    <span class="comment">// Configuration for mainnet</span></span><br><span class="line">    mainnet: &#123;</span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://mainnet.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      network_id: <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Configuration for rinkeby network</span></span><br><span class="line">    rinkeby: &#123;</span><br><span class="line">      <span class="comment">// Special function to setup the provider</span></span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Setting the provider with the Infura Rinkeby address and Token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, <span class="string">"https://rinkeby.infura.io/v3/YOUR_TOKEN"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Network id is 4 for Rinkeby</span></span><br><span class="line">      network_id: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    basechain: &#123;</span><br><span class="line">      provider: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> chainId = <span class="string">'default'</span>;</span><br><span class="line">        <span class="keyword">const</span> writeUrl = <span class="string">'http://basechain.dappchains.com/rpc'</span>;</span><br><span class="line">        <span class="keyword">const</span> readUrl = <span class="string">'http://basechain.dappchains.com/query'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoomTruffleProvider(chainId, writeUrl, readUrl, privateKey);</span><br><span class="line">        <span class="keyword">const</span> privateKeyPath = path.join(__dirname, <span class="string">'mainnet_private_key'</span>);</span><br><span class="line">        <span class="keyword">const</span> loomTruffleProvider = getLoomProviderWithPrivateKey(privateKeyPath, chainId, writeUrl, readUrl);</span><br><span class="line">        <span class="keyword">return</span> loomTruffleProvider;</span><br><span class="line">        &#125;,</span><br><span class="line">      network_id: <span class="string">'*'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="将您的部署密钥列入白名单"><a href="#将您的部署密钥列入白名单" class="headerlink" title="将您的部署密钥列入白名单"></a>将您的部署密钥列入白名单</h3><p>在部署到<strong><em>Basechain\</em></strong>之前，您需要按照我们的<a href="https://loomx.io/developers/en/deploy-loom-mainnet.html" target="_blank" rel="noopener">Deploy to Mainnet</a>指南中的说明将密钥列入白名单。现在不必担心，但是请记住，在完成本教程后，您必须这样做。</p>
<p>我们已经进行了所有这些步骤，现在可以部署到<strong><em>Basechain了\</em></strong>！</p>
<h2 id="进行测试：-7"><a href="#进行测试：-7" class="headerlink" title="进行测试："></a>进行测试：</h2><ol>
<li>运行<code>truffle migrate --network basechain</code>。</li>
</ol>
<p>太棒了，您刚刚将智能合约部署到了Basechain！👏🏻</p>
<p><img src="https://i.loli.net/2020/07/02/XkoyHzR9WZ4gbxj.png" alt="image-20200702134923452"></p>
<p><img src="https://i.loli.net/2020/07/02/UCDd3pTSZh1iMoE.png" alt="image-20200702135051581"></p>
<p><img src="https://i.loli.net/2020/07/02/l8kdcmxJAnoMQXh.png" alt="image-20200702135127702"></p>
]]></content>
      <tags>
        <tag>truffle</tag>
      </tags>
  </entry>
  <entry>
    <title>僵尸攻击人类</title>
    <url>/2020/06/27/%E5%83%B5%E5%B0%B8%E6%94%BB%E5%87%BB%E4%BA%BA%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="第二课概览"><a href="#第二课概览" class="headerlink" title="第二课概览"></a>第二课概览</h1><p>在第一课中，我们创建了一个函数用来生成僵尸，并且将它放入区块链上的僵尸数据库中。 在第二课里，我们会让我们的 app 看起来更像一个游戏： 它得支持多用户，并且采用更加有趣,而不仅仅使用随机的方式，来生成新的僵尸。</p><p>如何生成新的僵尸呢？通过让现有的僵尸猎食其他生物！</p><h2 id="僵尸猎食"><a href="#僵尸猎食" class="headerlink" title="僵尸猎食"></a>僵尸猎食</h2><p>僵尸猎食的时候，僵尸病毒侵入猎物，这些病毒会将猎物变为新的僵尸，加入你的僵尸大军。系统会通过猎物和猎食者僵尸的DNA计算出新僵尸的DNA。</p><a id="more"></a>


<p>僵尸最喜欢猎食什么物种呢？ 等你学完第二课就知道了！</p>
<h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><p>右边是一个简单的猎食演示。点击一个“人”，看看僵尸猎食的时候会发生什么? 可见，新僵尸的DNA是通过从原来的僵尸的DNA, 加上猎物的DNA计算得来的。</p>
<p>学完这一章，请点击“下一章”， 我们该让游戏支持多玩家模式了。</p>
<p><img src="https://i.loli.net/2020/06/27/SMihkOofrwEHxTF.png" alt="image-20200627095657273"></p>
<h1 id="映射（Mapping）和地址（Address）"><a href="#映射（Mapping）和地址（Address）" class="headerlink" title="映射（Mapping）和地址（Address）"></a>映射（Mapping）和地址（Address）</h1><p>我们通过给数据库中的僵尸指定“主人”， 来支持“多玩家”模式。</p>
<p>如此一来，我们需要引入2个新的数据类型：<code>mapping</code>（映射） 和 <code>address</code>（地址）。</p>
<h2 id="Addresses-（地址）"><a href="#Addresses-（地址）" class="headerlink" title="Addresses （地址）"></a>Addresses （地址）</h2><p>以太坊区块链由 <strong>_ account _</strong> (账户)组成，你可以把它想象成银行账户。一个帐户的余额是 <strong><em>以太</em></strong> （在以太坊区块链上使用的币种），你可以和其他帐户之间支付和接受以太币，就像你的银行帐户可以电汇资金到其他银行帐户一样。</p>
<p>每个帐户都有一个“地址”，你可以把它想象成银行账号。这是账户唯一的标识符，它看起来长这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0cE446255506E92DF41614C46F1d6df9Cc969183</span><br></pre></td></tr></table></figure>

<p>（这是 CryptoZombies 团队的地址，如果你喜欢 CryptoZombies 的话，请打赏我们一些以太币！😉）</p>
<p>我们将在后面的课程中介绍地址的细节，现在你只需要了解<strong>地址属于特定用户（或智能合约）的</strong>。</p>
<p>所以我们可以指定“地址”作为僵尸主人的 ID。当用户通过与我们的应用程序交互来创建新的僵尸时，新僵尸的所有权被设置到调用者的以太坊地址下。</p>
<h2 id="Mapping（映射）"><a href="#Mapping（映射）" class="headerlink" title="Mapping（映射）"></a>Mapping（映射）</h2><p>在第1课中，我们看到了 <strong>_ 结构体 _</strong> 和 <strong>_ 数组 _</strong> 。 <strong><em>映射</em></strong> 是另一种在 Solidity 中存储有组织数据的方法。</p>
<p>映射是这样定义的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//对于金融应用程序，将用户的余额保存在一个 uint类型的变量中：</span><br><span class="line">mapping (address =&gt; uint) public accountBalance;</span><br><span class="line">//或者可以用来通过userId 存储/查找的用户名</span><br><span class="line">mapping (uint =&gt; string) userIdToName;</span><br></pre></td></tr></table></figure>

<p>映射本质上是存储和查找数据所用的键-值对。在第一个例子中，键是一个 <code>address</code>，值是一个 <code>uint</code>，在第二个例子中，键是一个<code>uint</code>，值是一个 <code>string</code>。</p>
<h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><p>为了存储僵尸的所有权，我们会使用到两个映射：一个记录僵尸拥有者的地址，另一个记录某地址所拥有僵尸的数量。</p>
<p>1.创建一个叫做 <code>zombieToOwner</code> 的映射。其键是一个<code>uint</code>（我们将根据它的 id 存储和查找僵尸），值为 <code>address</code>。映射属性为<code>public</code>。</p>
<p>2.创建一个名为 <code>ownerZombieCount</code> 的映射，其中键是 <code>address</code>，值是 <code>uint</code>。</p>
<h2 id="合约完善"><a href="#合约完善" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieFactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里定义映射</span></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Msg-sender"><a href="#Msg-sender" class="headerlink" title="Msg.sender"></a>Msg.sender</h1><p>现在有了一套映射来记录僵尸的所有权了，我们可以修改 <code>_createZombie</code> 方法来运用它们。</p>
<p>为了做到这一点，我们要用到 <code>msg.sender</code>。</p>
<h2 id="msg-sender"><a href="#msg-sender" class="headerlink" title="msg.sender"></a>msg.sender</h2><p>在 Solidity 中，有一些全局变量可以被所有函数调用。 其中一个就是 <code>msg.sender</code>，它指的是当前调用者（或智能合约）的 <code>address</code>。</p>
<blockquote>
<p>注意：在 Solidity 中，功能执行始终需要从外部调用者开始。 一个合约只会在区块链上什么也不做，除非有人调用其中的函数。所以 <code>msg.sender</code>总是存在的。</p>
</blockquote>
<p>以下是使用 <code>msg.sender</code> 来更新 <code>mapping</code> 的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) favoriteNumber;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMyNumber</span>(<span class="params">uint _myNumber</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 更新我们的 `favoriteNumber` 映射来将 `_myNumber`存储在 `msg.sender`名下</span></span><br><span class="line">  favoriteNumber[msg.sender] = _myNumber;</span><br><span class="line">  <span class="comment">// 存储数据至映射的方法和将数据存储在数组相似</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whatIsMyNumber</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到存储在调用者地址名下的值</span></span><br><span class="line">  <span class="comment">// 若调用者还没调用 setMyNumber， 则值为 `0`</span></span><br><span class="line">  <span class="keyword">return</span> favoriteNumber[msg.sender];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个小小的例子中，任何人都可以调用 <code>setMyNumber</code> 在我们的合约中存下一个 <code>uint</code> 并且与他们的地址相绑定。 然后，他们调用 <code>whatIsMyNumber</code> 就会返回他们存储的 <code>uint</code>。</p>
<p>使用 <code>msg.sender</code> 很安全，因为它具有以太坊区块链的安全保障 —— 除非窃取与以太坊地址相关联的私钥，否则是没有办法修改其他人的数据的。</p>
<h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们来修改第1课的 <code>_createZombie</code> 方法，将僵尸分配给函数调用者吧。</p>
<ol>
<li>首先，在得到新的僵尸 <code>id</code> 后，更新 <code>zombieToOwner</code> 映射，在 <code>id</code> 下面存入 <code>msg.sender</code>。</li>
<li>然后，我们为这个 <code>msg.sender</code> 名下的 <code>ownerZombieCount</code> 加 1。</li>
</ol>
<p>跟在 JavaScript 中一样， 在 Solidity 中你也可以用 <code>++</code> 使 <code>uint</code> 递增。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uint number = <span class="number">0</span>;</span><br><span class="line">number++;</span><br><span class="line"><span class="comment">// `number` 现在是 `1`了</span></span><br></pre></td></tr></table></figure>

<p>修改两行代码即可。</p>
<h2 id="合约完善-1"><a href="#合约完善-1" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieFactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 从这里开始</span></span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Require"><a href="#Require" class="headerlink" title="Require"></a>Require</h1><p>在第一课中，我们成功让用户通过调用 <code>createRandomZombie</code>函数 并输入一个名字来创建新的僵尸。 但是，如果用户能持续调用这个函数来创建出无限多个僵尸加入他们的军团，这游戏就太没意思了！</p>
<p>于是，我们作出限定：每个玩家只能调用一次这个函数。 这样一来，新玩家可以在刚开始玩游戏时通过调用它，为其军团创建初始僵尸。</p>
<p>我们怎样才能限定每个玩家只调用一次这个函数呢？</p>
<p>答案是使用<code>require</code>。 <code>require</code>使得函数在执行过程中，当不满足某些条件时抛出错误，并停止执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHiToVitalik</span>(<span class="params">string _name</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 比较 _name 是否等于 "Vitalik". 如果不成立，抛出异常并终止程序</span></span><br><span class="line">  <span class="comment">// (敲黑板: Solidity 并不支持原生的字符串比较, 我们只能通过比较</span></span><br><span class="line">  <span class="comment">// 两字符串的 keccak256 哈希值来进行判断)</span></span><br><span class="line">  <span class="built_in">require</span>(keccak256(_name) == keccak256(<span class="string">"Vitalik"</span>));</span><br><span class="line">  <span class="comment">// 如果返回 true, 运行如下语句</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hi!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你这样调用函数 <code>sayHiToVitalik（“Vitalik”）</code> ,它会返回“Hi！”。而如果调用的时候使用了其他参数，它则会抛出错误并停止执行。</p>
<p>因此，在调用一个函数之前，用 <code>require</code> 验证前置条件是非常有必要的。</p>
<h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><p>在我们的僵尸游戏中，我们不希望用户通过反复调用 <code>createRandomZombie</code> 来給他们的军队创建无限多个僵尸 —— 这将使得游戏非常无聊。</p>
<p>我们使用了 <code>require</code> 来确保这个函数只有在每个用户第一次调用它的时候执行，用以创建初始僵尸。</p>
<ol>
<li>在 <code>createRandomZombie</code> 的前面放置 <code>require</code> 语句。 使得函数先检查 <code>ownerZombieCount [msg.sender]</code> 的值为 <code>0</code> ，不然就抛出一个错误。</li>
</ol>
<blockquote>
<p>注意：在 Solidity 中，关键词放置的顺序并不重要</p>
<ul>
<li>虽然参数的两个位置是等效的。 但是，由于我们的答案检查器比较呆板，它只能认定其中一个为正确答案</li>
<li>于是在这里，我们就约定把<code>ownerZombieCount [msg.sender]</code>放前面吧</li>
</ul>
</blockquote>
<h2 id="合约完善-2"><a href="#合约完善-2" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieFactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// start here</span></span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h1><p>我们的游戏代码越来越长。 当代码过于冗长的时候，最好将代码和逻辑分拆到多个不同的合约中，以便于管理。</p>
<p>有个让 Solidity 的代码易于管理的功能，就是合约 <strong>inheritance</strong> (继承)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Doge &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">catchphrase</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"So Wow CryptoDoge"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract BabyDoge is Doge &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">anotherCatchphrase</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Such Moon BabyDoge"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 <code>BabyDoge</code> 是从 <code>Doge</code> 那里 <strong>inherits</strong> （继承)过来的。 这意味着当你编译和部署了 <code>BabyDoge</code>，它将可以访问 <code>catchphrase()</code> 和 <code>anotherCatchphrase()</code>和其他我们在 <code>Doge</code> 中定义的其他公共函数。</p>
<p>这可以用于逻辑继承（比如表达子类的时候，<code>Cat</code> 是一种 <code>Animal</code>）。 但也可以简单地将类似的逻辑组合到不同的合约中以组织代码。</p>
<h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><p>在接下来的章节中，我们将要为僵尸实现各种功能，让它可以“猎食”和“繁殖”。 通过将这些运算放到父类 <code>ZombieFactory</code> 中，使得所有 <code>ZombieFactory</code> 的继承者合约都可以使用这些方法。</p>
<ol>
<li>在 <code>ZombieFactory</code> 下创建一个叫 <code>ZombieFeeding</code> 的合约，它是继承自 `ZombieFactory 合约的。</li>
</ol>
<h2 id="合约完善-3"><a href="#合约完善-3" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieFactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start here</span></span><br><span class="line">contract ZombieFeeding is ZombieFactory &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="引入（Import）"><a href="#引入（Import）" class="headerlink" title="引入（Import）"></a>引入（Import）</h1><p>哇！你有没有注意到，我们只是清理了下右边的代码，现在你的编辑器的顶部就多了个选项卡。 尝试点击它的标签，看看会发生什么吧！</p>
<p>代码已经够长了，我们把它分成多个文件以便于管理。 通常情况下，当 Solidity 项目中的代码太长的时候我们就是这么做的。</p>
<p>在 Solidity 中，当你有多个文件并且想把一个文件导入另一个文件时，可以使用 <code>import</code> 语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./someothercontract.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract newContract is SomeOtherContract &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样当我们在合约（contract）目录下有一个名为 <code>someothercontract.sol</code> 的文件（ <code>./</code> 就是同一目录的意思），它就会被编译器导入。</p>
<h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><p>现在我们已经建立了一个多文件架构，并用 <code>import</code> 来读取来自另一个文件中合约的内容：</p>
<p>1.将 <code>zombiefactory.sol</code> 导入到我们的新文件 <code>zombiefeeding.sol</code> 中。</p>
<h2 id="合约完善-4"><a href="#合约完善-4" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// put import statement here</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line">contract ZombieFeeding is ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Storage与Memory"><a href="#Storage与Memory" class="headerlink" title="Storage与Memory"></a>Storage与Memory</h1><p>在 Solidity 中，有两个地方可以存储变量 —— <code>storage</code> 或 <code>memory</code>。</p>
<p><strong><em>Storage\</em></strong> 变量是指永久存储在区块链中的变量。 <strong><em>Memory\</em></strong> 变量则是临时的，当外部函数对某合约调用完成时，内存型变量即被移除。 你可以把它想象成存储在你电脑的硬盘或是RAM中数据的关系。</p>
<p>大多数时候你都用不到这些关键字，默认情况下 Solidity 会自动处理它们。 状态变量（在函数之外声明的变量）默认为“存储”形式，并永久写入区块链；而在函数内部声明的变量是“内存”型的，它们函数调用结束后消失。</p>
<p>然而也有一些情况下，你需要手动声明存储类型，主要用于处理函数内的 <strong>_ 结构体 _</strong> 和 <strong>_ 数组 _</strong> 时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract SandwichFactory &#123;</span><br><span class="line">  struct Sandwich &#123;</span><br><span class="line">    string name;</span><br><span class="line">    string status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Sandwich[] sandwiches;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eatSandwich</span>(<span class="params">uint _index</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Sandwich mySandwich = sandwiches[_index];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ^ 看上去很直接，不过 Solidity 将会给出警告</span></span><br><span class="line">    <span class="comment">// 告诉你应该明确在这里定义 `storage` 或者 `memory`。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所以你应该明确定义 `storage`:</span></span><br><span class="line">    Sandwich storage mySandwich = sandwiches[_index];</span><br><span class="line">    <span class="comment">// ...这样 `mySandwich` 是指向 `sandwiches[_index]`的指针</span></span><br><span class="line">    <span class="comment">// 在存储里，另外...</span></span><br><span class="line">    mySandwich.status = <span class="string">"Eaten!"</span>;</span><br><span class="line">    <span class="comment">// ...这将永久把 `sandwiches[_index]` 变为区块链上的存储</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果你只想要一个副本，可以使用`memory`:</span></span><br><span class="line">    Sandwich memory anotherSandwich = sandwiches[_index + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// ...这样 `anotherSandwich` 就仅仅是一个内存里的副本了</span></span><br><span class="line">    <span class="comment">// 另外</span></span><br><span class="line">    anotherSandwich.status = <span class="string">"Eaten!"</span>;</span><br><span class="line">    <span class="comment">// ...将仅仅修改临时变量，对 `sandwiches[_index + 1]` 没有任何影响</span></span><br><span class="line">    <span class="comment">// 不过你可以这样做:</span></span><br><span class="line">    sandwiches[_index + <span class="number">1</span>] = anotherSandwich;</span><br><span class="line">    <span class="comment">// ...如果你想把副本的改动保存回区块链存储</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你还没有完全理解究竟应该使用哪一个，也不用担心 —— 在本教程中，我们将告诉你何时使用 <code>storage</code> 或是 <code>memory</code>，并且当你不得不使用到这些关键字的时候，Solidity 编译器也发警示提醒你的。</p>
<p>现在，只要知道在某些场合下也需要你显式地声明 <code>storage</code> 或 <code>memory</code>就够了！</p>
<h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><p>是时候给我们的僵尸增加“猎食”和“繁殖”功能了！</p>
<p>当一个僵尸猎食其他生物体时，它自身的DNA将与猎物生物的DNA结合在一起，形成一个新的僵尸DNA。</p>
<ol>
<li>创建一个名为 <code>feedAndMultiply</code> 的函数。 使用两个参数：<code>_zombieId</code>（ <code>uint</code>类型 ）和<code>_targetDna</code> （也是 <code>uint</code> 类型）。 设置属性为 <code>public</code> 的。</li>
<li>我们不希望别人用我们的僵尸去捕猎。 首先，我们确保对自己僵尸的所有权。 通过添加一个<code>require</code> 语句来确保 <code>msg.sender</code> 只能是这个僵尸的主人（类似于我们在 <code>createRandomZombie</code> 函数中做过的那样）。</li>
</ol>
<blockquote>
<p>注意：同样，因为我们的答案检查器比较呆萌，只认识把 <code>msg.sender</code> 放在前面的答案，如果你切换了参数的顺序，它就不认得了。 但你正常编码时，如何安排参数顺序都是正确的。</p>
</blockquote>
<ol>
<li>为了获取这个僵尸的DNA，我们的函数需要声明一个名为 <code>myZombie</code> 数据类型为<code>Zombie</code>的本地变量（这是一个 <code>storage</code> 型的指针）。 将其值设定为在 <code>zombies</code> 数组中索引为<code>_zombieId</code>所指向的值。</li>
</ol>
<p>到目前为止，包括函数结束符 <code>}</code> 的那一行， 总共4行代码。</p>
<p>下一章里，我们会继续丰富这个功能。</p>
<h2 id="合约完善-5"><a href="#合约完善-5" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFeeding is ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start here</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸的DNA"><a href="#僵尸的DNA" class="headerlink" title="僵尸的DNA"></a>僵尸的DNA</h1><p>我们来把 <code>feedAndMultiply</code> 函数写完吧。</p>
<p>获取新的僵尸DNA的公式很简单：计算猎食僵尸DNA和被猎僵尸DNA之间的平均值。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDnaSplicing</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">  uint zombieDna = <span class="number">2222222222222222</span>;</span><br><span class="line">  uint targetDna = <span class="number">4444444444444444</span>;</span><br><span class="line">  uint newZombieDna = (zombieDna + targetDna) / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// newZombieDna 将等于 3333333333333333</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后，我们也可以让函数变得更复杂些，比方给新的僵尸的 DNA 增加一些随机性之类的。但现在先从最简单的开始 —— 以后还可以回来完善它嘛。</p>
<h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>首先我们确保 <code>_targetDna</code> 不长于16位。要做到这一点，我们可以设置 <code>_targetDna</code> 为 <code>_targetDna ％ dnaModulus</code> ，并且只取其最后16位数字。</li>
<li>接下来为我们的函数声明一个名叫 <code>newDna</code> 的 <code>uint</code>类型的变量，并将其值设置为 <code>myZombie</code>的 DNA 和 <code>_targetDna</code> 的平均值（如上例所示）。</li>
</ol>
<blockquote>
<p>注意：您可以用 <code>myZombie.name</code> 或 <code>myZombie.dna</code> 访问 <code>myZombie</code> 的属性。</p>
</blockquote>
<ol>
<li>一旦我们计算出新的DNA，再调用 <code>_createZombie</code> 就可以生成新的僵尸了。如果你忘了调用这个函数所需要的参数，可以查看 <code>zombiefactory.sol</code> 选项卡。请注意，需要先给它命名，所以现在我们把新的僵尸的名字设为<code>NoName</code> - 我们回头可以编写一个函数来更改僵尸的名字。</li>
</ol>
<blockquote>
<p>注意：对于 Solidity 高手，你可能会注意到我们的代码存在一个问题。别担心，下一章会解决这个问题的 ;）</p>
</blockquote>
<h2 id="合约完善-6"><a href="#合约完善-6" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFeeding is ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    <span class="comment">// start here</span></span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="更多关于函数可见性"><a href="#更多关于函数可见性" class="headerlink" title="更多关于函数可见性"></a>更多关于函数可见性</h1><p><strong>我们上一课的代码有问题！</strong></p>
<p>编译的时候编译器就会报错。</p>
<p>错误在于，我们尝试从 <code>ZombieFeeding</code> 中调用 <code>_createZombie</code> 函数，但 <code>_createZombie</code> 却是 <code>ZombieFactory</code> 的 <code>private</code> （私有）函数。这意味着任何继承自 <code>ZombieFactory</code> 的子合约都不能访问它。</p>
<h2 id="internal-和-external"><a href="#internal-和-external" class="headerlink" title="internal 和 external"></a>internal 和 external</h2><p>除 <code>public</code> 和 <code>private</code> 属性之外，Solidity 还使用了另外两个描述函数可见性的修饰词：<code>internal</code>（内部） 和 <code>external</code>（外部）。</p>
<p><code>internal</code> 和 <code>private</code> 类似，不过， 如果某个合约继承自其父合约，这个合约即可以访问父合约中定义的“内部”函数。（嘿，这听起来正是我们想要的那样！）。</p>
<p><code>external</code> 与<code>public</code> 类似，只不过这些函数只能在合约之外调用 - 它们不能被合约内的其他函数调用。稍后我们将讨论什么时候使用 <code>external</code> 和 <code>public</code>。</p>
<p>声明函数 <code>internal</code> 或 <code>external</code> 类型的语法，与声明 <code>private</code> 和 <code>public</code>类 型相同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Sandwich &#123;</span><br><span class="line">  uint private sandwichesEaten = 0;</span><br><span class="line"></span><br><span class="line">  function eat() internal &#123;</span><br><span class="line">    sandwichesEaten++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract BLT is Sandwich &#123;</span><br><span class="line">  uint private baconSandwichesEaten = 0;</span><br><span class="line"></span><br><span class="line">  function eatWithBacon() public returns (string) &#123;</span><br><span class="line">    baconSandwichesEaten++;</span><br><span class="line">    // 因为eat() 是internal 的，所以我们能在这里调用</span><br><span class="line">    eat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-8"><a href="#实战演习-8" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li><p>将 <code>_createZombie()</code> 函数的属性从 <code>private</code> 改为 <code>internal</code> ， 使得其他的合约也能访问到它。</p>
<p>我们已经成功把你的注意力集中在到<code>zombiefactory.sol</code>这个选项卡上啦。</p>
</li>
</ol>
<h2 id="合约完善-7"><a href="#合约完善-7" class="headerlink" title="合约完善"></a>合约完善</h2><p>ZombieFactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里修改函数的功能</span></span><br><span class="line">    <span class="comment">//function _createZombie(string _name, uint _dna) private &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="僵尸吃什么"><a href="#僵尸吃什么" class="headerlink" title="僵尸吃什么?"></a>僵尸吃什么?</h1><p>是时候让我们的僵尸去捕猎！ 那僵尸最喜欢的食物是什么呢？</p>
<p>Crypto 僵尸喜欢吃的是…</p>
<p><strong>CryptoKitties！</strong> 😱😱😱</p>
<p>（正经点，我可不是开玩笑😆）</p>
<p>为了做到这一点，我们要读出 CryptoKitties 智能合约中的 kittyDna。这些数据是公开存储在区块链上的。区块链是不是很酷？</p>
<p>别担心 —— 我们的游戏并不会伤害到任何真正的CryptoKitty。 我们只 <em>读取</em> CryptoKitties 数据，但却无法在物理上删除它。</p>
<h2 id="与其他合约的交互"><a href="#与其他合约的交互" class="headerlink" title="与其他合约的交互"></a>与其他合约的交互</h2><p>如果我们的合约需要和区块链上的其他的合约会话，则需先定义一个 <strong><em>interface\</em></strong> (接口)。</p>
<p>先举一个简单的栗子。 假设在区块链上有这么一个合约：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract LuckyNumber &#123;</span><br><span class="line">  mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) numbers;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setNum</span>(<span class="params">uint _num</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    numbers[msg.sender] = _num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getNum</span>(<span class="params">address _myAddress</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers[_myAddress];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是个很简单的合约，您可以用它存储自己的幸运号码，并将其与您的以太坊地址关联。 这样其他人就可以通过您的地址查找您的幸运号码了。</p>
<p>现在假设我们有一个外部合约，使用 <code>getNum</code> 函数可读取其中的数据。</p>
<p>首先，我们定义 <code>LuckyNumber</code> 合约的 <strong><em>interface\</em></strong> ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract NumberInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getNum</span>(<span class="params">address _myAddress</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>请注意，这个过程虽然看起来像在定义一个合约，但其实内里不同：</p>
<p>首先，我们只声明了要与之交互的函数 —— 在本例中为 <code>getNum</code> —— 在其中我们没有使用到任何其他的函数或状态变量。</p>
<p>其次，我们并没有使用大括号（<code>{</code> 和 <code>}</code>）定义函数体，我们单单用分号（<code>;</code>）结束了函数声明。这使它看起来像一个合约框架。</p>
<p>编译器就是靠这些特征认出它是一个接口的。</p>
<p>在我们的 app 代码中使用这个接口，合约就知道其他合约的函数是怎样的，应该如何调用，以及可期待什么类型的返回值。</p>
<p>在下一课中，我们将真正调用其他合约的函数。目前我们只要声明一个接口，用于调用 CryptoKitties 合约就行了。</p>
<h2 id="实战演习-9"><a href="#实战演习-9" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们已经为你查看过了 CryptoKitties 的源代码，并且找到了一个名为 <code>getKitty</code>的函数，它返回所有的加密猫的数据，包括它的“基因”（我们的僵尸游戏要用它生成新的僵尸）。</p>
<p>该函数如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    Kitty storage kit = kitties[_id];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this variable is 0 then it's not gestating</span></span><br><span class="line">    isGestating = (kit.siringWithId != <span class="number">0</span>);</span><br><span class="line">    isReady = (kit.cooldownEndBlock &lt;= block.number);</span><br><span class="line">    cooldownIndex = uint256(kit.cooldownIndex);</span><br><span class="line">    nextActionAt = uint256(kit.cooldownEndBlock);</span><br><span class="line">    siringWithId = uint256(kit.siringWithId);</span><br><span class="line">    birthTime = uint256(kit.birthTime);</span><br><span class="line">    matronId = uint256(kit.matronId);</span><br><span class="line">    sireId = uint256(kit.sireId);</span><br><span class="line">    generation = uint256(kit.generation);</span><br><span class="line">    genes = kit.genes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数看起来跟我们习惯的函数不太一样。 它竟然返回了…一堆不同的值！ 如果您用过 JavaScript 之类的编程语言，一定会感到奇怪 —— 在 Solidity中，您可以让一个函数返回多个值。</p>
<p>现在我们知道这个函数长什么样的了，就可以用它来创建一个接口：</p>
<p>1.定义一个名为 <code>KittyInterface</code> 的接口。 请注意，因为我们使用了 <code>contract</code> 关键字， 这过程看起来就像创建一个新的合约一样。</p>
<p>2.在interface里定义了 <code>getKitty</code> 函数（不过是复制/粘贴上面的函数，但在 <code>returns</code> 语句之后用分号，而不是大括号内的所有内容。</p>
<h2 id="合约完善-8"><a href="#合约完善-8" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create KittyInterface here</span></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用接口"><a href="#使用接口" class="headerlink" title="使用接口"></a>使用接口</h1><p>继续前面 <code>NumberInterface</code> 的例子，我们既然将接口定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract NumberInterface &#123;</span><br><span class="line">  function getNum(address _myAddress) public view returns (uint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在合约中这样使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">  address NumberInterfaceAddress = 0xab38...;</span><br><span class="line">  // ^ 这是FavoriteNumber合约在以太坊上的地址</span><br><span class="line">  NumberInterface numberContract = NumberInterface(NumberInterfaceAddress);</span><br><span class="line">  // 现在变量 `numberContract` 指向另一个合约对象</span><br><span class="line"></span><br><span class="line">  function someFunction() public &#123;</span><br><span class="line">    // 现在我们可以调用在那个合约中声明的 `getNum`函数:</span><br><span class="line">    uint num = numberContract.getNum(msg.sender);</span><br><span class="line">    // ...在这儿使用 `num`变量做些什么</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这种方式，只要将您合约的可见性设置为<code>public</code>(公共)或<code>external</code>(外部)，它们就可以与以太坊区块链上的任何其他合约进行交互。</p>
<h2 id="实战演习-10"><a href="#实战演习-10" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们来建个自己的合约去读取另一个智能合约– CryptoKitties 的内容吧！</p>
<ol>
<li>我已经将代码中 CryptoKitties 合约的地址保存在一个名为 <code>ckAddress</code> 的变量中。在下一行中，请创建一个名为 <code>kittyContract</code> 的 KittyInterface，并用 <code>ckAddress</code> 为它初始化 —— 就像我们为 <code>numberContract</code>所做的一样。</li>
</ol>
<h2 id="合约完善-9"><a href="#合约完善-9" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  address ckAddress = <span class="number">0x06012c8cf97BEaD5deAe237070F9587f8E7A266d</span>;</span><br><span class="line">  <span class="comment">// Initialize kittyContract here using `ckAddress` from above</span></span><br><span class="line">  KittyInterface kittyContract = KittyInterface(ckAddress);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="处理多返回值"><a href="#处理多返回值" class="headerlink" title="处理多返回值"></a>处理多返回值</h1><p><code>getKitty</code> 是我们所看到的第一个返回多个值的函数。我们来看看是如何处理的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multipleReturns</span>(<span class="params"></span>) <span class="title">internal</span> <span class="title">returns</span>(<span class="params">uint a, uint b, uint c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processMultipleReturns</span>(<span class="params"></span>) <span class="title">external</span> </span>&#123;</span><br><span class="line">  uint a;</span><br><span class="line">  uint b;</span><br><span class="line">  uint c;</span><br><span class="line">  <span class="comment">// 这样来做批量赋值:</span></span><br><span class="line">  (a, b, c) = multipleReturns();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者如果我们只想返回其中一个变量:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastReturnValue</span>(<span class="params"></span>) <span class="title">external</span> </span>&#123;</span><br><span class="line">  uint c;</span><br><span class="line">  <span class="comment">// 可以对其他字段留空:</span></span><br><span class="line">  (,,c) = multipleReturns();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-11"><a href="#实战演习-11" class="headerlink" title="实战演习"></a>实战演习</h2><p>是时候与 CryptoKitties 合约交互起来了！</p>
<p>我们来定义一个函数，从 kitty 合约中获取它的基因：</p>
<ol>
<li><p>创建一个名为 <code>feedOnKitty</code> 的函数。它需要2个 <code>uint</code> 类型的参数，<code>_zombieId</code> 和<code>_kittyId</code> ，这是一个 <code>public</code> 类型的函数。</p>
</li>
<li><p>函数首先要声明一个名为 <code>kittyDna</code> 的 <code>uint</code>。</p>
<blockquote>
<p>注意：在我们的 <code>KittyInterface</code> 中，<code>genes</code> 是一个 <code>uint256</code> 类型的变量，但是如果你记得，我们在第一课中提到过，<code>uint</code> 是 <code>uint256</code> 的别名，也就是说它们是一回事。</p>
</blockquote>
</li>
<li><p>这个函数接下来调用 <code>kittyContract.getKitty</code>函数, 传入 <code>_kittyId</code> ，将返回的 <code>genes</code> 存储在 <code>kittyDna</code> 中。记住 —— <code>getKitty</code> 会返回一大堆变量。 （确切地说10个 - 我已经为你数过了，不错吧！）。但是我们只关心最后一个– <code>genes</code>。数逗号的时候小心点哦！</p>
</li>
<li><p>最后，函数调用了 <code>feedAndMultiply</code> ，并传入了 <code>_zombieId</code> 和 <code>kittyDna</code> 两个参数。</p>
</li>
</ol>
<h2 id="合约完善-10"><a href="#合约完善-10" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  address ckAddress = <span class="number">0x06012c8cf97BEaD5deAe237070F9587f8E7A266d</span>;</span><br><span class="line">  KittyInterface kittyContract = KittyInterface(ckAddress);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// define function here</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="奖励-Kitty-基因"><a href="#奖励-Kitty-基因" class="headerlink" title="奖励: Kitty 基因"></a>奖励: Kitty 基因</h1><p>我们的功能逻辑主体已经完成了…现在让我们来添一个奖励功能吧。</p>
<p>这样吧，给从小猫制造出的僵尸添加些特征，以显示他们是猫僵尸。</p>
<p>要做到这一点，咱们在新僵尸的DNA中添加一些特殊的小猫代码。</p>
<p>还记得吗，第一课中我们提到，我们目前只使用16位DNA的前12位数来指定僵尸的外观。所以现在我们可以使用最后2个数字来处理“特殊”的特征。</p>
<p>这样吧，把猫僵尸DNA的最后两个数字设定为<code>99</code>（因为猫有9条命）。所以在我们这么来写代码：<code>如果</code>这个僵尸是一只猫变来的，就将它DNA的最后两位数字设置为<code>99</code>。</p>
<h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if语句的语法在 Solidity 中，与在 JavaScript 中差不多：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function eatBLT(string sandwich) public &#123;</span><br><span class="line">  // 看清楚了，当我们比较字符串的时候，需要比较他们的 keccak256 哈希码</span><br><span class="line">  if (keccak256(sandwich) == keccak256(&quot;BLT&quot;)) &#123;</span><br><span class="line">    eat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-12"><a href="#实战演习-12" class="headerlink" title="实战演习"></a>实战演习</h2><p>让我们在我们的僵尸代码中实现小猫的基因。</p>
<ol>
<li><p>首先，我们修改下 <code>feedAndMultiply</code> 函数的定义，给它传入第三个参数：一条名为 <code>_species</code> 的字符串。</p>
</li>
<li><p>接下来，在我们计算出新的僵尸的DNA之后，添加一个 <code>if</code> 语句来比较 <code>_species</code> 和字符串 <code>&quot;kitty&quot;</code> 的 <code>keccak256</code> 哈希值。</p>
</li>
<li><p>在 <code>if</code> 语句中，我们用 <code>99</code> 替换了新僵尸DNA的最后两位数字。可以这么做：<code>newDna = newDna - newDna % 100 + 99;</code>。</p>
<blockquote>
<p>解释：假设 <code>newDna</code> 是 <code>334455</code>。那么 <code>newDna % 100</code> 是 <code>55</code>，所以 <code>newDna - newDna % 100</code> 得到 <code>334400</code>。最后加上 <code>99</code> 可得到 <code>334499</code>。</p>
</blockquote>
</li>
<li><p>最后，我们修改了 <code>feedOnKitty</code> 中的函数调用。当它调用 <code>feedAndMultiply</code> 时，增加 <code>“kitty”</code> 作为最后一个参数。</p>
</li>
</ol>
<h2 id="合约完善-11"><a href="#合约完善-11" class="headerlink" title="合约完善"></a>合约完善</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  address ckAddress = <span class="number">0x06012c8cf97BEaD5deAe237070F9587f8E7A266d</span>;</span><br><span class="line">  KittyInterface kittyContract = KittyInterface(ckAddress);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里修改函数定义</span></span><br><span class="line">  <span class="comment">//function feedAndMultiply(uint _zombieId, uint _targetDna) public &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string _species</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 这里增加一个 if 语句</span></span><br><span class="line">    <span class="keyword">if</span> (keccak256(_species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    <span class="comment">// 并修改函数调用</span></span><br><span class="line">    <span class="comment">//feedAndMultiply(_zombieId, kittyDna);</span></span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="放在一起"><a href="#放在一起" class="headerlink" title="放在一起"></a>放在一起</h1><p>至此，你已经学完第二课了！</p>
<p>查看下→_→的演示，看看他们怎么运行起来得吧。继续，你肯定等不及看完这一页😉。点击小猫，攻击！看到你斩获一个新的小猫僵尸了吧！</p>
<h2 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h2><p>我们只用编译和部署 <code>ZombieFeeding</code>，就可以将这个合约部署到以太坊了。我们最终完成的这个合约继承自 <code>ZombieFactory</code>，因此它可以访问自己和父辈合约中的所有 public 方法。</p>
<p>我们来看一个与我们的刚部署的合约进行交互的例子， 这个例子使用了 JavaScript 和 web3.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abi = <span class="comment">/* abi generated by the compiler */</span></span><br><span class="line"><span class="keyword">var</span> ZombieFeedingContract = web3.eth.contract(abi)</span><br><span class="line"><span class="keyword">var</span> contractAddress = <span class="comment">/* our contract address on Ethereum after deploying */</span></span><br><span class="line"><span class="keyword">var</span> ZombieFeeding = ZombieFeedingContract.at(contractAddress)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们有我们的僵尸ID和要攻击的猫咪ID</span></span><br><span class="line"><span class="keyword">let</span> zombieId = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> kittyId = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要拿到猫咪的DNA，我们需要调用它的API。这些数据保存在它们的服务器上而不是区块链上。</span></span><br><span class="line"><span class="comment">// 如果一切都在区块链上，我们就不用担心它们的服务器挂了，或者它们修改了API，</span></span><br><span class="line"><span class="comment">// 或者因为不喜欢我们的僵尸游戏而封杀了我们</span></span><br><span class="line"><span class="keyword">let</span> apiUrl = <span class="string">"https://api.cryptokitties.co/kitties/"</span> + kittyId</span><br><span class="line">$.<span class="keyword">get</span>(apiUrl, function(data) &#123;</span><br><span class="line">  <span class="keyword">let</span> imgUrl = data.image_url</span><br><span class="line">  <span class="comment">// 一些显示图片的代码</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户点击一只猫咪的时候:</span></span><br><span class="line">$(<span class="string">".kittyImage"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用我们合约的 `feedOnKitty` 函数</span></span><br><span class="line">  ZombieFeeding.feedOnKitty(zombieId, kittyId)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听来自我们合约的新僵尸事件好来处理</span></span><br><span class="line">ZombieFactory.NewZombie(<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 这个函数用来显示僵尸:</span></span><br><span class="line">  generateZombie(result.zombieId, result.name, result.dna)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-13"><a href="#实战演习-13" class="headerlink" title="实战演习"></a>实战演习</h2><p>选择一只你想猎食的小猫。你自家僵尸的 DNA 会和小猫的 DNA 结合，生成一个新的小猫僵尸，加入你的军团！</p>
<p>看到新僵尸上那可爱的猫咪腿了么？这是新僵尸最后DNA中最后两位数字 <code>99</code> 的功劳！</p>
<p>你想要的话随时可以重新开始。捕获了一只猫咪僵尸，你一定很高兴吧！（不过你只能持有一只），继续前进到下一章，完成第二课吧！</p>
<p><img src="https://i.loli.net/2020/06/27/vQ8uDOcFknPNsmy.png" alt="image-20200627105007659"></p>
<h2 id="融合"><a href="#融合" class="headerlink" title="融合"></a>融合</h2><p><img src="https://i.loli.net/2020/06/27/I9YxPTeVDuKcfmr.png" alt="image-20200627105033754"></p>
<h1 id="第二课打卡"><a href="#第二课打卡" class="headerlink" title="第二课打卡"></a>第二课打卡</h1><p><img src="https://i.loli.net/2020/06/27/9w4d6EMHsi2Sgo3.png" alt="image-20200627105401927"></p>
<p><a href="https://share.cryptozombies.io/zh/lesson/2/share/truffle_solidity_web3.js_javaScript" target="_blank" rel="noopener">我的僵尸大军2</a></p>
]]></content>
      <categories>
        <category>Solidity Path</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣每日一题之合并两个有序链表</title>
    <url>/2020/06/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><h1 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h1 id="3、思路"><a href="#3、思路" class="headerlink" title="3、思路"></a>3、思路</h1><p>在循环中比较两个升序链表的节点元素大小，将值较小的节点（必定是表头）移除，添加至new的节点后面。当其中一条链表为null时，将另一条链表接在重排序的链表后面，排序完成，但是多出一个新创建的头节点，故输出listNode4.next。</p><a id="more"></a>



<h1 id="4、代码及测试"><a href="#4、代码及测试" class="headerlink" title="4、代码及测试"></a>4、代码及测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.leetCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.soap.Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo21</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode4 <span class="title">mergeTwoLists</span><span class="params">(ListNode4 l1, ListNode4 l2)</span> </span>&#123;</span><br><span class="line">        ListNode4 listNode4 = <span class="keyword">new</span> ListNode4(-<span class="number">1</span>);</span><br><span class="line">        ListNode4 re = listNode4;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">                re.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                re.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            re = re.next;</span><br><span class="line">        &#125;</span><br><span class="line">        re.next = l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">return</span> listNode4.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode4 node = <span class="keyword">new</span> ListNode4(<span class="number">1</span>);</span><br><span class="line">        ListNode4  node1= <span class="keyword">new</span> ListNode4(<span class="number">2</span>);</span><br><span class="line">        ListNode4 node2 = <span class="keyword">new</span> ListNode4(<span class="number">4</span>);</span><br><span class="line">        node.next = node1;</span><br><span class="line">        node1.next = node2;</span><br><span class="line"></span><br><span class="line">        ListNode4 nod = <span class="keyword">new</span> ListNode4(<span class="number">1</span>);</span><br><span class="line">        ListNode4  nod1= <span class="keyword">new</span> ListNode4(<span class="number">3</span>);</span><br><span class="line">        ListNode4 nod2 = <span class="keyword">new</span> ListNode4(<span class="number">4</span>);</span><br><span class="line">        nod.next = nod1;</span><br><span class="line">        nod1.next = nod2;</span><br><span class="line"></span><br><span class="line">        ListNode4 node4 = mergeTwoLists(node, nod);</span><br><span class="line">        <span class="keyword">while</span> (node4.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(node4.val);</span><br><span class="line">            node4 = node4.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(node4.val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果：</strong></p>
<p><img src="https://i.loli.net/2020/06/21/lLq1CgPZNBHpJD2.png" alt="image-20200621160908070"></p>
<p><a href="https://github.com/yym08090809/my-java-demo/blob/master/src/main/java/com/lcx/leetCode/Demo21.java" target="_blank" rel="noopener">代码已上传至github</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣每日一题之有效的括号</title>
    <url>/2020/06/18/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><h1 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h1><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><a id="more"></a>






<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>示例 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>示例 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h1 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3.算法分析"></a>3.算法分析</h1><p>采用栈的特性，对括号进行匹配，左括号入栈，将即将插入的元素与栈顶元素进行匹配，如果未</p>
<p>栈顶元素的另一半则，弹出栈顶元素，最后若栈为空则返回true，否则返回false。</p>
<ol>
<li><p>初始化栈 S。</p>
</li>
<li><p>一次处理表达式的每个括号。</p>
</li>
<li><p>如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地</p>
<p>转到前面的 子表达式。</p>
</li>
<li><p>如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左</p>
<p>括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。</p>
</li>
<li><p>如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</p>
</li>
</ol>
<h1 id="4、代码实现及测试结果"><a href="#4、代码实现及测试结果" class="headerlink" title="4、代码实现及测试结果"></a>4、代码实现及测试结果</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.leetCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo20</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character, Character&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo20</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line">        map.put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">        map.put(<span class="string">'&#125;'</span>, <span class="string">'&#123;'</span>);</span><br><span class="line">        map.put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.map.containsKey(c)) &#123;</span><br><span class="line">                <span class="comment">//获取栈中的栈顶元素，若栈顶元素为空则设置为‘#’</span></span><br><span class="line">                <span class="keyword">char</span> topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (topElement != <span class="keyword">this</span>.map.get(c)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"()[]&#123;&#125;"</span>;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Demo20().isValid(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"><span class="string">"E:\Program Files\Java\jdk1.8.0_201\bin\java.exe"</span></span><br></pre></td></tr></table></figure>
<p>true<br>```</p>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣每日一题之快乐数</title>
    <url>/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 True ；不是，则返回 False 。</p><a id="more"></a>


<h1 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure>

<h1 id="3、算法分析"><a href="#3、算法分析" class="headerlink" title="3、算法分析"></a>3、算法分析</h1><p> 第 1 部分我们按照题目的要求做数位分离，求平方和。 </p>
<p> 第 2 部分按照一系列的数字来判断我们是否进入了一个循环。</p>
<p>存在两种情况：</p>
<ul>
<li>收敛于1</li>
</ul>
<img src="/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/1.png" class title="Router">

<ul>
<li>陷入循环</li>
</ul>
<img src="/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/2.png" class title="Router">

<p>通过反复调用getnum(n)得到的是一个隐式链表。隐式意味着我们没有实际的链表节点和指针，但数据仍然形成链表结构。起始数字是链表的头 “节点”，链中的所有其他数字都是节点。next 指针是通过调用 getnum(n) 函数获得。</p>
<p>意识到我们实际有个链表，那么这个问题就可以转换为检测一个链表是否有环。因此我们在这里可以使用弗洛伊德循环查找算法。这个算法是两个奔跑选手，一个跑的快，一个跑得慢。在龟兔赛跑的寓言中，跑的快的称为 “乌龟”，跑得快的称为 “兔子”。</p>
<p> 不管乌龟和兔子在循环中从哪里开始，它们最终都会相遇。这是因为兔子每走一步就向乌龟靠近一个节点（在它们的移动方向上）。 </p>
<p>如下图所示：</p>
<img src="/2020/04/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E4%B9%8B%E5%BF%AB%E4%B9%90%E6%95%B0/1.gif" class title="Router">

<p>我们不是只跟踪链表中的一个值，而是跟踪两个值，称为快跑者和慢跑者。在算法的每一步中，慢速在链表中前进 1 个节点，快跑者前进 2 个节点（对 getnum(n) 函数的嵌套调用）。</p>
<p>如果 n 是一个快乐数，即没有循环，那么快跑者最终会比慢跑者先到达数字 1。</p>
<p>如果 n 不是一个快乐的数字，那么最终快跑者和慢跑者将在同一个数字上相遇。</p>
<h1 id="4-代码如下："><a href="#4-代码如下：" class="headerlink" title="4.代码如下："></a>4.代码如下：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = n, fast;</span><br><span class="line">        slow = getsum(slow);</span><br><span class="line">        fast = getsum(slow);</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="number">1</span> &amp;&amp; slow != fast) &#123;</span><br><span class="line">            slow = getsum(slow);</span><br><span class="line">            fast = getsum(getsum(fast));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个各个位数平方和的结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            sum += temp * temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isHappy(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结归纳</title>
    <url>/2020/03/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<hr><h1 id="1、排序的定义"><a href="#1、排序的定义" class="headerlink" title="1、排序的定义"></a>1、排序的定义</h1><p> 对一序列对象根据某个关键字进行排序。 </p><h1 id="2、排序算法表"><a href="#2、排序算法表" class="headerlink" title="2、排序算法表"></a>2、排序算法表</h1><p><img src="https://s1.ax1x.com/2020/03/20/8cBdkn.jpg" alt="8cBdkn.jpg"></p><p><strong>图片名词解释：</strong></p><ul>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存</li>
</ul><h1 id="3、术语说明"><a href="#3、术语说明" class="headerlink" title="3、术语说明"></a>3、术语说明</h1><ul>
<li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； </li>
<li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面； </li>
<li><strong>内排序</strong>：所有排序操作都在内存中完成； </li>
<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行； </li>
<li><strong>时间复杂度：</strong> 一个算法执行所耗费的时间。 </li>
<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。 </li>
</ul><a id="more"></a>





<h1 id="4、算法的分类"><a href="#4、算法的分类" class="headerlink" title="4、算法的分类"></a>4、算法的分类</h1><p><img src="https://s1.ax1x.com/2020/03/20/8cDmcT.jpg" alt="8cDmcT.jpg"></p>
<h1 id="5、比较和非比较的区别"><a href="#5、比较和非比较的区别" class="headerlink" title="5、比较和非比较的区别"></a>5、比较和非比较的区别</h1><p> <strong>常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。</strong>在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。 </p>
<p> 在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。<strong>在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。</strong> </p>
<p> 比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。<strong>可以说，比较排序适用于一切需要排序的情况。</strong> </p>
<p> <strong>计数排序、基数排序、桶排序则属于非比较排序。</strong>非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。 </p>
<h1 id="6、排序算法的简述及java代码实现"><a href="#6、排序算法的简述及java代码实现" class="headerlink" title="6、排序算法的简述及java代码实现"></a>6、排序算法的简述及java代码实现</h1><h2 id="6-1-冒泡排序（Bubble-Sort）"><a href="#6-1-冒泡排序（Bubble-Sort）" class="headerlink" title="6.1 冒泡排序（Bubble Sort）"></a>6.1 冒泡排序（Bubble Sort）</h2><h3 id="6-1-1-概述"><a href="#6-1-1-概述" class="headerlink" title="6.1.1 概述"></a>6.1.1 概述</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p>
<h3 id="6-1-2-算法描述"><a href="#6-1-2-算法描述" class="headerlink" title="6.1.2 算法描述"></a>6.1.2 算法描述</h3><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个； </li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； </li>
<li>针对所有的元素重复以上的步骤，除了最后一个； </li>
<li>重复步骤1~3，直到排序完成。 </li>
</ul>
<h3 id="6-1-3-动图演示"><a href="#6-1-3-动图演示" class="headerlink" title="6.1.3 动图演示"></a>6.1.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8crNin.gif" alt="8crNin.gif"></p>
<h3 id="6-1-4-代码实现"><a href="#6-1-4-代码实现" class="headerlink" title="6.1.4 代码实现"></a>6.1.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">    <span class="keyword">if</span>(array.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j]&gt;array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] =array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = bubbleSort(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-1-5-算法分析"><a href="#6-1-5-算法分析" class="headerlink" title="6.1.5 算法分析"></a>6.1.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n)  最差情况：T(n) = O(n^2)  平均情况：T(n) = O(n^2)</strong>==</p>
<h2 id="6-2-选择排序（Selection-Sort）"><a href="#6-2-选择排序（Selection-Sort）" class="headerlink" title="6.2 选择排序（Selection Sort）"></a>6.2 选择排序（Selection Sort）</h2><h3 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h3><p><strong>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。</strong>唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>
<p> 选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。  </p>
<h3 id="6-2-2-算法描述"><a href="#6-2-2-算法描述" class="headerlink" title="6.2.2 算法描述"></a>6.2.2 算法描述</h3><p> n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下： </p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空； </li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区； </li>
<li>n-1趟结束，数组有序化了。 </li>
</ul>
<h3 id="6-2-3-动图演示"><a href="#6-2-3-动图演示" class="headerlink" title="6.2.3 动图演示"></a>6.2.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8ccDpR.gif" alt="8ccDpR.gif"></p>
<h3 id="6-2-4-代码实现"><a href="#6-2-4-代码实现" class="headerlink" title="6.2.4 代码实现"></a>6.2.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[index])&#123;<span class="comment">//找到最小的数</span></span><br><span class="line">                index = j;<span class="comment">//将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[index];</span><br><span class="line">        arr[index] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = selectionSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-5-算法分析"><a href="#6-2-5-算法分析" class="headerlink" title="6.2.5 算法分析"></a>6.2.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n^2)  最差情况：T(n) = O(n^2)  平均情况：T(n) = O(n^2)</strong>==</p>
<h2 id="6-3-插入排序（Insertion-Sort）"><a href="#6-3-插入排序（Insertion-Sort）" class="headerlink" title="6.3 插入排序（Insertion Sort）"></a>6.3 插入排序（Insertion Sort）</h2><h3 id="6-3-1-概述"><a href="#6-3-1-概述" class="headerlink" title="6.3.1 概述"></a>6.3.1 概述</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="6-3-2-算法描述"><a href="#6-3-2-算法描述" class="headerlink" title="6.3.2 算法描述"></a>6.3.2 算法描述</h3><p> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下： </p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序； </li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描； </li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置； </li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； </li>
<li>将新元素插入到该位置后； </li>
<li>重复步骤2~5。 </li>
</ul>
<h3 id="6-3-3-动图演示"><a href="#6-3-3-动图演示" class="headerlink" title="6.3.3 动图演示"></a>6.3.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8cRJXt.gif" alt="8cRJXt.gif"></p>
<h3 id="6-3-4-代码实现"><a href="#6-3-4-代码实现" class="headerlink" title="6.3.4 代码实现"></a>6.3.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        current = arr[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> preIndex = i;</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[preIndex])&#123;</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] =current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">18</span>,<span class="number">4</span>,<span class="number">35</span>,<span class="number">22</span>,<span class="number">72</span>,<span class="number">17</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = insertionSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">11</span> <span class="number">17</span> <span class="number">18</span> <span class="number">22</span> <span class="number">35</span> <span class="number">72</span> <span class="number">99</span> <span class="number">101</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-5-算法分析"><a href="#6-3-5-算法分析" class="headerlink" title="6.3.5 算法分析"></a>6.3.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n)  最差情况：T(n) = O(n^2)  平均情况：T(n) = O(n^2)</strong>==</p>
<h2 id="6-4-希尔排序（Shell-Sort）"><a href="#6-4-希尔排序（Shell-Sort）" class="headerlink" title="6.4 希尔排序（Shell Sort）"></a>6.4 希尔排序（Shell Sort）</h2><h3 id="6-4-1-概述"><a href="#6-4-1-概述" class="headerlink" title="6.4.1 概述"></a>6.4.1 概述</h3><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>
<p>==<strong>希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</strong>==</p>
<h3 id="6-4-2-算法描述"><a href="#6-4-2-算法描述" class="headerlink" title="6.4.2 算法描述"></a>6.4.2 算法描述</h3><p><strong>我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。</strong>希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li>
<li>按增量序列个数k，对序列进行k 趟排序； </li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。 </li>
</ul>
<h3 id="6-4-3-过程演示"><a href="#6-4-3-过程演示" class="headerlink" title="6.4.3 过程演示"></a>6.4.3 过程演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8cq97d.jpg" alt="8cq97d.jpg"></p>
<h3 id="6-4-4-代码演示"><a href="#6-4-4-代码演示" class="headerlink" title="6.4.4 代码演示"></a>6.4.4 代码演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">int</span> temp,gap = len/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> preIndex = i - gap;</span><br><span class="line">            <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex]&gt;temp)&#123;</span><br><span class="line">                arr[preIndex + gap] = arr[preIndex];</span><br><span class="line">                preIndex -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[preIndex + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        gap /=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr  = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = shellSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">56</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-5-算法分析"><a href="#6-4-5-算法分析" class="headerlink" title="6.4.5 算法分析"></a>6.4.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(nlog2 n)  最坏情况：T(n) = O(nlog2 n)  平均情况：T(n) =O(nlog2n)</strong>==</p>
<h2 id="6-5-归并排序（Merge-Sort）"><a href="#6-5-归并排序（Merge-Sort）" class="headerlink" title="6.5 归并排序（Merge Sort）"></a>6.5 归并排序（Merge Sort）</h2><h3 id="6-5-1-概述"><a href="#6-5-1-概述" class="headerlink" title="6.5.1 概述"></a>6.5.1 概述</h3><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。</p>
<p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p>
<h3 id="6-5-2-算法描述"><a href="#6-5-2-算法描述" class="headerlink" title="6.5.2 算法描述"></a>6.5.2 算法描述</h3><ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列； </li>
<li>对这两个子序列分别采用归并排序； </li>
<li>将两个排序好的子序列合并成一个最终的排序序列。 </li>
</ul>
<h3 id="6-5-3-动图演示"><a href="#6-5-3-动图演示" class="headerlink" title="6.5.3 动图演示"></a>6.5.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8cveTe.gif" alt="8cveTe.gif"></p>
<h3 id="6-5-4-代码实现"><a href="#6-5-4-代码实现" class="headerlink" title="6.5.4 代码实现"></a>6.5.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = arr.length / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//copyOfRange方法复制的数组不包含mid，及[0,mid)</span></span><br><span class="line">    <span class="keyword">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">int</span>[] right = Arrays.copyOfRange(arr, mid, arr.length);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] re = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>; index &lt; re.length; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= left.length) &#123;</span><br><span class="line">            re[index] = right[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= right.length) &#123;</span><br><span class="line">            re[index] = left[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left[i] &gt; right[j]) &#123;</span><br><span class="line">            re[index] = right[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            re[index] = left[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = mergeSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-5-5-算法分析"><a href="#6-5-5-算法分析" class="headerlink" title="6.5.5 算法分析"></a>6.5.5 算法分析</h3><p>==<strong>最佳情况：T(n) = O(n)  最差情况：T(n) = O(nlogn)  平均情况：T(n) = O(nlogn)</strong>==</p>
<h2 id="6-6-快速排序（Quick-Sort）"><a href="#6-6-快速排序（Quick-Sort）" class="headerlink" title="6.6 快速排序（Quick Sort）"></a>6.6 快速排序（Quick Sort）</h2><h3 id="6-6-1-概述"><a href="#6-6-1-概述" class="headerlink" title="6.6.1 概述"></a>6.6.1 概述</h3><p> 快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。 </p>
<h3 id="6-6-2-算法描述"><a href="#6-6-2-算法描述" class="headerlink" title="6.6.2 算法描述"></a>6.6.2 算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（==<strong>pivot</strong>==）； </li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作； </li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。 </li>
</ul>
<h3 id="6-6-3-动图演示"><a href="#6-6-3-动图演示" class="headerlink" title="6.6.3 动图演示"></a>6.6.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8gDqOO.gif" alt="8gDqOO.gif"></p>
<h3 id="6-6-4-代码实现"><a href="#6-6-4-代码实现" class="headerlink" title="6.6.4 代码实现"></a>6.6.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">1</span> || start &lt; <span class="number">0</span> || end &gt;= arr.length || start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> smallIndex = partition(arr, start, end);</span><br><span class="line">    <span class="keyword">if</span>(smallIndex &gt; start)&#123;</span><br><span class="line">        quickSort(arr,start,smallIndex-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(smallIndex &lt;end)&#123;</span><br><span class="line">        quickSort(arr,smallIndex+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = (<span class="keyword">int</span>) (start + Math.random() * (end - start + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> smallIndex = start - <span class="number">1</span>;</span><br><span class="line">    swap(arr, pivot, end);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[end]) &#123;</span><br><span class="line">            smallIndex++;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; smallIndex) &#123;</span><br><span class="line">                swap(arr, i, smallIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smallIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] re = quickSort(arr,start,end);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-6-5-算法分析"><a href="#6-6-5-算法分析" class="headerlink" title="6.6.5 算法分析"></a>6.6.5 算法分析</h3><p> ==<strong>最佳情况：T(n) = O(nlogn)  最差情况：T(n) = O(n2)  平均情况：T(n) = O(nlogn)</strong>==　 </p>
<h2 id="6-7-堆排序（Heap-Sort）"><a href="#6-7-堆排序（Heap-Sort）" class="headerlink" title="6.7 堆排序（Heap Sort）"></a>6.7 堆排序（Heap Sort）</h2><h3 id="6-7-1-概述"><a href="#6-7-1-概述" class="headerlink" title="6.7.1 概述"></a>6.7.1 概述</h3><p> 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。 </p>
<h3 id="6-7-2-算法描述"><a href="#6-7-2-算法描述" class="headerlink" title="6.7.2 算法描述"></a>6.7.2 算法描述</h3><ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区； </li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]； </li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li>
</ul>
<h3 id="6-7-3-动图演示"><a href="#6-7-3-动图演示" class="headerlink" title="6.7.3 动图演示"></a>6.7.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8gouOH.gif" alt="8gouOH.gif"></p>
<h3 id="6-7-4-代码实现"><a href="#6-7-4-代码实现" class="headerlink" title="6.7.4 代码实现"></a>6.7.4 代码实现</h3><p>==注意：这里用到了完全二叉树的部分性质。== </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明全局变量，用于记录数组array的长度；</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    len = arr.length;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.构建一个最大堆</span></span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line">    <span class="comment">//2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class="line">    <span class="keyword">while</span> (len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        swap(arr,<span class="number">0</span>,len-<span class="number">1</span>);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(arr,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (len -<span class="number">1</span>)/<span class="number">2</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(arr,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调整使之成为最大堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxIndex = i;</span><br><span class="line">    <span class="comment">//如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> &lt; len &amp;&amp; arr[i * <span class="number">2</span>] &gt; arr[maxIndex])&#123;</span><br><span class="line">        maxIndex = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt; len &amp;&amp; arr[i * <span class="number">2</span> + <span class="number">1</span>] &gt; arr[maxIndex])&#123;</span><br><span class="line">        maxIndex = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class="line">    <span class="keyword">if</span> (maxIndex != i) &#123;</span><br><span class="line">        swap(arr, maxIndex, i);</span><br><span class="line">        adjustHeap(arr, maxIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = heapSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-7-5-算法分析"><a href="#6-7-5-算法分析" class="headerlink" title="6.7.5 算法分析"></a>6.7.5 算法分析</h3><p> ==<strong>最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn)</strong>==</p>
<h2 id="6-8-计数排序（Counting-Sort）"><a href="#6-8-计数排序（Counting-Sort）" class="headerlink" title="6.8 计数排序（Counting Sort）"></a>6.8 计数排序（Counting Sort）</h2><h3 id="6-8-1-概述"><a href="#6-8-1-概述" class="headerlink" title="6.8.1 概述"></a>6.8.1 概述</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<p>计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。</p>
<h3 id="6-8-2-算法描述"><a href="#6-8-2-算法描述" class="headerlink" title="6.8.2 算法描述"></a>6.8.2 算法描述</h3><ul>
<li>找出待排序的数组中最大和最小的元素； </li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项； </li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）； </li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。 </li>
</ul>
<h3 id="6-8-3-动图演示"><a href="#6-8-3-动图演示" class="headerlink" title="6.8.3 动图演示"></a>6.8.3 动图演示</h3><p><img src="https://s1.ax1x.com/2020/03/20/8gOm59.gif" alt="8gOm59.gif"></p>
<h3 id="6-8-4-代码实现"><a href="#6-8-4-代码实现" class="headerlink" title="6.8.4 代码实现"></a>6.8.4 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bias,min = arr[<span class="number">0</span>],max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;min)&#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bias = <span class="number">0</span> - min;</span><br><span class="line">    <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max - min +<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(bucket,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        bucket[arr[i]+bias]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>,i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index&lt;arr.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bucket[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            arr[index] = i -bias;</span><br><span class="line">            bucket[i]--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] re = countingSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.length; i++) &#123;</span><br><span class="line">            System.out.print(re[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">43</span> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="6-8-5-算法分析"><a href="#6-8-5-算法分析" class="headerlink" title="6.8.5 算法分析"></a>6.8.5 算法分析</h3><p>当输入的元素是n 个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。 </p>
<p> ==<strong>最佳情况：T(n) = O(n+k)  最差情况：T(n) = O(n+k)  平均情况：T(n) = O(n+k)</strong>== </p>
<h2 id="6-9-桶排序（Bucket-Sort）"><a href="#6-9-桶排序（Bucket-Sort）" class="headerlink" title="6.9 桶排序（Bucket Sort）"></a>6.9 桶排序（Bucket Sort）</h2><h3 id="6-9-1-概述"><a href="#6-9-1-概述" class="headerlink" title="6.9.1 概述"></a>6.9.1 概述</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>
<p>桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排。</p>
<h3 id="6-9-2-算法描述"><a href="#6-9-2-算法描述" class="headerlink" title="6.9.2 算法描述"></a>6.9.2 算法描述</h3><ul>
<li><p>人为设置一个BucketSize，作为每个桶所能放置多少个不同数值（例如当BucketSize==5时，该桶可以存放｛1,2,3,4,5｝这几种数字，但是容量不限，即可以存放100个3）； </p>
</li>
<li><p>遍历输入数据，并且把数据一个一个放到对应的桶里去； </p>
</li>
<li><p>对每个不是空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序； </p>
</li>
<li><p>从不是空的桶里把排好序的数据拼接起来。  </p>
<p><strong>注意，如果递归使用桶排序为各个桶排序，则当桶数量为1时要手动减小BucketSize增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。</strong> </p>
</li>
</ul>
<h3 id="6-9-3-图片演示"><a href="#6-9-3-图片演示" class="headerlink" title="6.9.3 图片演示"></a>6.9.3 图片演示</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/zxoLaeCI28RgPBKvBRIiaribLhcBenhoVWvXPkViccgjmetibPRUWzib63lYHH8rBqbR2NBUkMCLTYExtVbXOnJMEsg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<h3 id="6-9-4-代码实现"><a href="#6-9-4-代码实现" class="headerlink" title="6.9.4 代码实现"></a>6.9.4 代码实现</h3>]]></content>
      <categories>
        <category>java</category>
        <category>排序算法总结</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04系统移植过及程序焼写</title>
    <url>/2020/01/08/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<h1 id="ubuntu18-04系统移植过及程序焼写"><a href="#ubuntu18-04系统移植过及程序焼写" class="headerlink" title="ubuntu18.04系统移植过及程序焼写"></a>ubuntu18.04系统移植过及程序焼写</h1><h2 id="ubuntu18-04系统移植（目标版为contex-A系列）"><a href="#ubuntu18-04系统移植（目标版为contex-A系列）" class="headerlink" title="ubuntu18.04系统移植（目标版为contex A系列）"></a>ubuntu18.04系统移植（目标版为contex A系列）</h2><h3 id="一、tftp文件服务器"><a href="#一、tftp文件服务器" class="headerlink" title="一、tftp文件服务器"></a>一、tftp文件服务器</h3><ul>
<li><strong>tftp的作用</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在嵌入式系统开发中，经常需要从主机上传送映像、文件等到目标机上。实现的方法有很多。如tftp，scp等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TFTP（Trivial File Transfer Protocol）是用来下载远程文件的最简单的网络协议，它基于UDP协议而实现。</li>
<li><strong>安装tftp-hpa</strong></li>
</ul><a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftp-hpa</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tftp-hpa是客户端，作用是从别人的TFTP服务器端上传/下载东西。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftpd-hpa</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tftpd-hpa是服务端，字母d代表daemon，作用是为别人提供TFTP服务，供别人上传/下载东西。</p>
<ul>
<li><strong>创建TFTP目录</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在此我使用的是默认文件夹。</li>
<li><strong>修改配置文件</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/tftpd-hpa</span><br></pre></td></tr></table></figure>

<p>更改后内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 # /etc/default/tftpd-hpa                                                    </span><br><span class="line">2 </span><br><span class="line">3 TFTP_USERNAME=&quot;tftp&quot;</span><br><span class="line">4 TFTP_DIRECTORY=&quot;/var/lib/tftpboot&quot;  // 指定tftp的共享目录 </span><br><span class="line">5 TFTP_ADDRESS=&quot;0.0.0.0:69&quot;</span><br><span class="line">6 TFTP_OPTIONS=&quot;-c -s -l&quot;</span><br></pre></td></tr></table></figure>

<p>修改配置后重启tfti服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service tftpd-hpa restart</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>上传文件时注意权限<br>建议给最大权限（777）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R  777  目录名</span><br></pre></td></tr></table></figure>

<h3 id="二、nfs网络文件系统"><a href="#二、nfs网络文件系统" class="headerlink" title="二、nfs网络文件系统"></a>二、nfs网络文件系统</h3><ul>
<li><strong>nfs的作用</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个嵌入式操作系统的核心组成部分：内核和文件系统。在本次课设中，使用的内核是别人提供的，使用的操作系统是nfs网络文件系统。在内核中应添加对nfs的支持，实质是在内核启动过程中，启动了一个nfs客户端通过配置文件去读取nfs服务端上的文件系统。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将pcNFS是由Sun开发并发展起来的一项在不同机器、不同操作系统之间通过网络共享文件的技术。在嵌入式Linux系统的开发调试阶段，可以利用该技术在主机上建立基于NFS 的根文件系统，挂载到嵌入式设备，可以很方便地修改根文件系统的内容。以上讨论的都是基于存储设备的文件系统(memory-based file system)，它们都可用作Linux的根文件系统。实际上，Linux还支持逻辑的或伪文件系统(logical or pseudo file system)，例如procfs(proc文件系统)，用于获取系统信息，以及devfs(设备文件系统)和sysfs，用于维护设备文件。<br><strong>安装nfs服务器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server</span><br></pre></td></tr></table></figure>

<p><strong>配置nfs服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/exports</span><br></pre></td></tr></table></figure>

<p>更改后内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 # /etc/exports: the access control list for filesystems which may be exporte    d                                                                           </span><br><span class="line"> 2 #       to NFS clients.  See exports(5).</span><br><span class="line"> 3 #</span><br><span class="line"> 4 # Example for NFSv2 and NFSv3:</span><br><span class="line"> 5 # /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_    subtree_check)</span><br><span class="line"> 6 #</span><br><span class="line"> 7 # Example for NFSv4:</span><br><span class="line"> 8 # /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class="line"> 9 # /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class="line">10 #</span><br><span class="line">11 /home/source/rootfs *(rw,sync,no_root_squash)</span><br><span class="line"># 指定共享目录为/home/source/rootfs  权限为读写 ...</span><br></pre></td></tr></table></figure>

<p><strong>复制文件系统压缩包至指定目录并解压</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将根文件系统的压缩包rootfs.tar.xz拷贝至/home/source，然后解压，注意权限<br><strong>解压指令:</strong>sudo tar -xvf  rootfs.tar.xz<br><strong>重启NFS服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nfs-kernel-server restart</span><br></pre></td></tr></table></figure>

<p><strong>进行挂载测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount -t nfs localhost:/source/rootfs /mnt</span><br><span class="line">ls -l /mnt</span><br></pre></td></tr></table></figure>

<p><strong>卸载测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt/</span><br></pre></td></tr></table></figure>

<h3 id="三、开发板的环境搭建（contex-A系列）"><a href="#三、开发板的环境搭建（contex-A系列）" class="headerlink" title="三、开发板的环境搭建（contex A系列）"></a>三、开发板的环境搭建（contex A系列）</h3><ul>
<li><strong>查看串口驱动</strong><br><strong>指令如下：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ cd /dev/</span><br><span class="line">lcx@lcx-linux:/dev$ ls ttyUSB*</span><br><span class="line">crw-rw-rw- 1 root dialout 188, 0 2020-01-08 10:38 ttyUSB0</span><br><span class="line">lcx@lcx-linux:/dev$</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装传串口通讯软件（putty ）</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install putty</span><br></pre></td></tr></table></figure>

<p>设置端口：位/秒 115200，数据位 8，奇偶校验 无，停止位 1，数据流控制 无</p>
<ul>
<li><strong>连接串口线到开发板</strong><br>给开发板上电，应该能从putty看到串口信息。</li>
<li><strong>配置开发板的环境变量</strong><br>setenv ipaddr 192.168.1.3—-&gt;开发板IP<br>setenv serverip 192.168.1.2—&gt;nfs服务器IP<br><strong>ping 测试</strong><br>开发板ping 192.168.1.2<br>显示alive ping通了  也可用主机ping开发板<br><strong>系统启动参数</strong><br>setenv bootcmd tftp 41000000 uImage;tftp 42000000 exynos4412-fs4412.dtb;bootm 41000000 - 42000000<br><strong>内核启动nfs文件系统参数</strong><br>setenv bootargs root=/dev/nfs nfsroot=192.168.1.2:/home/source/rootfs rw ip=192.168.1.3 console=ttySAC2,115200 init=/linuxrc</li>
</ul>
<h3 id="四、交叉编译工具链"><a href="#四、交叉编译工具链" class="headerlink" title="四、交叉编译工具链"></a>四、交叉编译工具链</h3><ul>
<li><strong>交叉编译工具链的作用：</strong><br>arm交叉编译工具链是用于在一种平台上编译出能运行在体系结构不同的另一种平台上的程序，比如在PC平台（X86 CPU）上编译出能运行在以ARM为内核的CPU平台上的程序，编译得到的程序在X86 CPU平台上是不能运行的，必须放到ARM CPU平台上才能运行，虽然两个平台用的都是Linux系统。</li>
<li><strong>下载交叉编译链工具</strong><br><strong>方法一：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载指令：</span><br><span class="line">sudo apt-get install gcc-arm-linux-gnueabihf </span><br><span class="line">卸载指令：</span><br><span class="line">sudo apt-get remove gcc-arm-linux-gnueabihf</span><br></pre></td></tr></table></figure>

<p>这种方法不需要配置环境  但是可能出现not found的问题   该问题是因为你的linux系统是64位的系统的而你安装的arm-linux-gcc-4.4.3是32位的软件，虽然64位系统可以运行32位的软件，但需要安装32位的运行库，你没安装32位运行库就不能使用。<br><strong>方法二：</strong><br>1.从网上下载对应版本的交叉编译工具。<br>2.使用tar命令解压安装包，即在Terminal中输入以下命令：（前面的sudo表示使用root权限执行该命令）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~/下载$ sudo tar -xvf gcc-4.6.4.tar.xz</span><br></pre></td></tr></table></figure>

<p>3.查看解压后bin目录的全路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ cd 下载/gcc-4.6.4/bin/</span><br><span class="line">lcx@lcx-linux:~/下载/gcc-4.6.4/bin$ pwd</span><br><span class="line">/home/lcx/下载/gcc-4.6.4/bin</span><br><span class="line">lcx@lcx-linux:~/下载/gcc-4.6.4/bin$</span><br></pre></td></tr></table></figure>

<p>4.添加环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ vim .bashrc</span><br></pre></td></tr></table></figure>

<p>最后一行添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 交叉编译工具链</span><br><span class="line"> export PATH=$PATH:/home/lcx/下载/gcc-4.6.4/bin</span><br></pre></td></tr></table></figure>

<p>执行如下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:~$ source .bashrc</span><br></pre></td></tr></table></figure>

<h2 id="程序的烧写"><a href="#程序的烧写" class="headerlink" title="程序的烧写"></a>程序的烧写</h2><h3 id="一、文件拷贝项目"><a href="#一、文件拷贝项目" class="headerlink" title="一、文件拷贝项目"></a>一、文件拷贝项目</h3><p>1.将项目程序拷贝至nfs文件系统中<br>2.在ubuntu18.04中将项目程序使用交叉编译工具链进行编译<br>代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx@lcx-linux:/home/source/rootfs$ arm-none-linux-gnueabi-gcc-4.6.4 -o write write.c</span><br></pre></td></tr></table></figure>

<p>3.在开发板上执行程序<br>代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@farsight ]# ./write 1.txt 2.txt</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open source file ok!</span><br><span class="line">Create new file successfully!</span><br><span class="line">Write ok!</span><br></pre></td></tr></table></figure>

<p>项目代码如下（实现文件拷贝功能）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">6</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> <span class="number">7</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="number">8</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="meta"># <span class="meta-keyword">define</span> BUF_SIZE 20</span></span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="keyword">int</span> fd,fd1;</span><br><span class="line"><span class="number">14</span>     <span class="keyword">char</span> bufs[<span class="number">20</span>];</span><br><span class="line"><span class="number">15</span>     <span class="keyword">int</span> len;</span><br><span class="line"><span class="number">16</span>     <span class="keyword">if</span>(argc != <span class="number">3</span>)&#123;</span><br><span class="line"><span class="number">17</span>         <span class="built_in">printf</span>(<span class="string">"please input file name!\n"</span>);</span><br><span class="line"><span class="number">18</span>         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span>     <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">21</span>         <span class="comment">//1 打开源文件</span></span><br><span class="line"><span class="number">22</span>         fd = open(argv[<span class="number">1</span>],O_RDONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">23</span>         <span class="keyword">if</span>(<span class="number">-1</span> == fd)&#123;</span><br><span class="line"><span class="number">24</span>             perror(<span class="string">"open read file error!\n"</span>);</span><br><span class="line"><span class="number">25</span>             <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">26</span>         &#125;</span><br><span class="line"><span class="number">27</span>         <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">28</span>             <span class="built_in">printf</span>(<span class="string">"open source file ok!\n"</span>);</span><br><span class="line"><span class="number">29</span>         <span class="comment">//2 打开目标文件 </span></span><br><span class="line"><span class="number">30</span>             <span class="comment">//如果目标文件不存在  则创建目标文件</span></span><br><span class="line"><span class="number">31</span>             fd1 = open(argv[<span class="number">2</span>],O_WRONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">32</span>             <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line"><span class="number">33</span>                 <span class="comment">//创建目标文件</span></span><br><span class="line"><span class="number">34</span>                 fd1 = creat(argv[<span class="number">2</span>],<span class="number">0775</span>);</span><br><span class="line"><span class="number">35</span>                 <span class="built_in">printf</span>(<span class="string">"Create new file successfully!\n"</span>);</span><br><span class="line"><span class="number">36</span>                 fd1 = open(argv[<span class="number">2</span>],O_WRONLY,<span class="number">0666</span>);</span><br><span class="line"><span class="number">37</span>             <span class="comment">// cp</span></span><br><span class="line"><span class="number">38</span>                 <span class="keyword">while</span>((len = read(fd,bufs,BUF_SIZE))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">39</span>                       write(fd1,bufs,len);</span><br><span class="line"><span class="number">40</span>                 &#125;</span><br><span class="line"><span class="number">41</span>                 <span class="built_in">printf</span>(<span class="string">"Write ok!\n"</span>);</span><br><span class="line"><span class="number">42</span> </span><br><span class="line"><span class="number">43</span>                 <span class="keyword">if</span>(<span class="number">-1</span> == fd1)</span><br><span class="line"><span class="number">44</span>                 &#123;</span><br><span class="line"><span class="number">45</span>                 perror(<span class="string">"open write file error!\n"</span>);</span><br><span class="line"><span class="number">46</span>                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">47</span>                 &#125;                                                                                                                                                                                             </span><br><span class="line"><span class="number">48</span>             &#125;</span><br><span class="line"><span class="number">49</span>             <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">50</span>                 <span class="built_in">printf</span>(<span class="string">"open destination file ok!\n"</span>);</span><br><span class="line"><span class="number">51</span>         <span class="comment">//3  如果存在 则复制到目标文件</span></span><br><span class="line"><span class="number">52</span>                 <span class="keyword">while</span>((len = read(fd,bufs,BUF_SIZE))&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">53</span>                     write(fd1,bufs,len);</span><br><span class="line"><span class="number">54</span> </span><br><span class="line"><span class="number">55</span>                 &#125;</span><br><span class="line"><span class="number">56</span>                 <span class="built_in">printf</span>(<span class="string">"write ok!\n"</span>);</span><br><span class="line"><span class="number">57</span>             &#125;</span><br><span class="line"><span class="number">58</span>             close(fd);</span><br><span class="line"><span class="number">59</span>             close(fd1);</span><br><span class="line"><span class="number">60</span>             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">61</span>         &#125;</span><br><span class="line"><span class="number">62</span>     &#125;</span><br><span class="line"><span class="number">63</span> &#125;</span><br></pre></td></tr></table></figure>

<p>由于开发板不支持中文格式，故将测试源文件命名为1.txt，内容为舌尖上的中国英译版文案 ,在此不创建目标文件。（拷贝时创建）<br>测试结果如下：<br><img src="https://s2.ax1x.com/2020/01/08/l26KL6.png" alt="运行编译后的可执行文件.png"><br><img src="https://s2.ax1x.com/2020/01/08/l26koF.png" alt="2.txt.png"></p>
<h3 id="二、百度网盘项目"><a href="#二、百度网盘项目" class="headerlink" title="二、百度网盘项目"></a>二、百度网盘项目</h3><ul>
<li><strong>项目简介及使用</strong><br>由两个c程序实现网盘文件传输功能，是基于tcp协议的文件传输程序。其功能是使用TCP协议从client端向server端传输文件。将server程序通过gcc编译运行在开发机上，将client程序通过交叉编译链编译运行在开发板上。<br>具体用法如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> 编译：</span><br><span class="line"></span><br><span class="line">     lcx@lcx-linux:~/test/百度网盘低配版$ gcc -o server server.c </span><br><span class="line">lcx@lcx-linux:~/test/百度网盘低配版$ arm-none-linux-gnueabi-gcc-4.6.4 -o client client.c </span><br><span class="line"></span><br><span class="line">     运行：</span><br><span class="line"></span><br><span class="line">           client端：./client  server IP  端口号  上传文件名</span><br><span class="line">           server端：./server   端口号   保存为文件名</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>知识储备</strong><br>tcp传输协议、网络套接字编程、c语言。</li>
<li><strong>测试结果如下</strong><br><img src="https://s2.ax1x.com/2020/01/09/lR4sje.png" alt="客户端"><br><strong>注意</strong>  先打开server程序 设置好端口号，再打开client程序。图中上半部分为错误案例。<br><img src="https://s2.ax1x.com/2020/01/09/lR5SvF.png" alt="服务端"><br>接收到的文件名指定为1.txt<br>打开1.txt如下图所示：<br><img src="https://s2.ax1x.com/2020/01/09/lR5Ban.png" alt="lR5Ban.png"></li>
<li><strong>代码如下</strong><br><strong>client.c</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE        1024</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"usage :%s ipaddr portnum filename\n"</span>, command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span>                   buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span>                    sock_id;</span><br><span class="line">    <span class="keyword">int</span>                    read_len;</span><br><span class="line">    <span class="keyword">int</span>                    send_len;</span><br><span class="line">    FILE                   *fp;</span><br><span class="line">    <span class="keyword">int</span>                    i_ret;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">        usage(argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* open the file to be transported commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">3</span>],<span class="string">"r"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Open file failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* create the socket commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">if</span> ((sock_id = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Create socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;serv_addr.sin_addr);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* connect the server commented by guoqingbo*/</span></span><br><span class="line">    i_ret = connect(sock_id, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(struct sockaddr));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == i_ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Connect socket failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* transported the file commented by guoqingbo*/</span></span><br><span class="line">    bzero(buf, MAXLINE);</span><br><span class="line">    <span class="keyword">while</span> ((read_len = fread(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), MAXLINE, fp)) &gt;<span class="number">0</span> ) &#123;</span><br><span class="line">        send_len = send(sock_id, buf, read_len, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( send_len &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            perror(<span class="string">"Send file failed\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buf, MAXLINE);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    close(sock_id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Send Finish\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>server.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE        1024</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"usage :%s portnum filename\n"</span>, command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>     <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span>                   buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span>                    sock_id;</span><br><span class="line">    <span class="keyword">int</span>                    link_id;</span><br><span class="line">    <span class="keyword">int</span>                    recv_len;</span><br><span class="line">    <span class="keyword">int</span>                    write_leng;</span><br><span class="line">    <span class="keyword">int</span>                    clie_addr_len;</span><br><span class="line">    FILE                   *fp;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        usage(argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">2</span>], <span class="string">"w"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Open file failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((sock_id = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Create socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*fill the server sockaddr_in struct commented by guoqingbo*/</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (bind(sock_id, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"Bind socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == listen(sock_id, <span class="number">10</span>)) &#123;</span><br><span class="line">        perror(<span class="string">"Listen socket failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* server part commented by guoqingbo*/</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">        link_id = accept(sock_id, (struct sockaddr *)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == link_id) &#123;</span><br><span class="line">            perror(<span class="string">"Accept socket failed\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buf, MAXLINE);</span><br><span class="line">        <span class="keyword">while</span> (recv_len = recv(link_id, buf, MAXLINE, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* receiver data part commented by guoqingbo*/</span></span><br><span class="line">            <span class="keyword">if</span>(recv_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Recieve Data From Server Failed!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">            write_leng = fwrite(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), recv_len, fp);</span><br><span class="line">            <span class="keyword">if</span> (write_leng &lt; recv_len) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Write file failed\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bzero(buf,MAXLINE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nFinish Recieve\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        close(link_id);</span><br><span class="line">    &#125;</span><br><span class="line">    close(sock_id); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><strong>注意事项</strong><br>在使用开发板前，应打开tftp服务器和nfs服务器。<br>开发板属于热插拔器件，应断电后插拔。<br>在使用nfs网络文件系统时，应注意在编译内核的过程中，选择nfs选项，使得在内核启动过程中去创建一个nfs客户端去连接服务端 获取文件系统。</li>
<li><strong>可能出现的问题</strong><br>在内核启动过程中无法加在nfs文件系统。<br>应从以下几个方面去查错：<br>1.内核编译时是否选择nfs文件系统选项。<br>2.nfs服务器是否搭建完成。（需要做本机挂载测试）<br>3.网络是否通畅。（ping 命令查看）<br>4.nfs参数配置是否正确。</li>
<li><strong>最严重的问题</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VFS: Unable to mount root fs via NFS, trying floppy.</span><br><span class="line">VFS: Cannot open root device &quot;nfs&quot; or unknown-block(2,0): error -6</span><br><span class="line">Please append a correct &quot;root=&quot; boot option; here are the available partitions:</span><br><span class="line">1f00             256 mtdblock0  (driver?)</span><br><span class="line">1f01             128 mtdblock1  (driver?)</span><br><span class="line">1f02            2048 mtdblock2  (driver?)</span><br><span class="line">1f03          259712 mtdblock3  (driver?)</span><br><span class="line">Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0)</span><br></pre></td></tr></table></figure>

<p>查找资料发现从Ubuntu17.04开始，nfs默认只支持协议3和协议4，而kernel中默认支持协议2，所以才会出现挂载失败的情况，现有两种方法可以解决该问题：</p>
<ol>
<li>设置Ubuntu18.04系统中的nfs服务支持协议2，修改nfs配置文件 /etc/default/nfs-kernel-server,在文件末尾加入一句：RPCNFSDOPTS=”–nfs-version 2,3,4 –debug –syslog”。</li>
<li>如果kernel版本较高支持nfs协议3的话，可以在Uboot传到Kernel的bootargs参数中加入’nfsvers=3’,使kernel使用nfs协议3。</li>
</ol>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>系统移植</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客刷题之兔子繁殖</title>
    <url>/2020/06/25/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E4%B9%8B%E5%85%94%E5%AD%90%E7%B9%81%E6%AE%96/</url>
    <content><![CDATA[<h1 id="一、兔子繁殖"><a href="#一、兔子繁殖" class="headerlink" title="一、兔子繁殖"></a>一、兔子繁殖</h1><p><a href="https://www.nowcoder.com/questionTerminal/1221ec77125d4370833fd3ad5ba72395" target="_blank" rel="noopener">题目链接</a></p><p>有一只兔子，从出生后第3个月起每个月都生一只兔子，小兔子长到第三个月后每个月又生一只兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计出兔子总数。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> monthCount 第几个月</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 兔子总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(<span class="keyword">int</span> monthCount)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a>



<h1 id="二、输入描述"><a href="#二、输入描述" class="headerlink" title="二、输入描述"></a>二、输入描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入int型表示month</span><br></pre></td></tr></table></figure>

<h1 id="三、输出描述"><a href="#三、输出描述" class="headerlink" title="三、输出描述"></a>三、输出描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出兔子总数int型</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<p>输入：12</p>
<p>输出：144</p>
<h1 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.niuke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(<span class="keyword">int</span> monthCount)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>;</span><br><span class="line">            map.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            map.put(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= monthCount; i++) &#123;</span><br><span class="line">            map.put(i,map.get(i-<span class="number">1</span>)+map.get(i-<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(monthCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">int</span> mountCount = scanner.nextInt();</span><br><span class="line">            System.out.println(getTotalCount(mountCount));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、思路"><a href="#五、思路" class="headerlink" title="五、思路"></a>五、思路</h1><p>经过列表分析，得到规律，是斐波那契数列，采用map集合将月份与兔子总数一一对应。</p>
<p>采用消耗空间的办法，来减少程序运行时间。</p>
<p><a href="https://github.com/yym08090809/my-java-demo/blob/master/src/main/java/com/lcx/niuke/Rabbit.java" target="_blank" rel="noopener">代码已上传至github</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建僵尸工厂</title>
    <url>/2020/06/27/%E6%90%AD%E5%BB%BA%E5%83%B5%E5%B0%B8%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p>在学习solidity的过程中发现一个在线学习平台，这是一个第三方的在线智能合约学习环境，目标是教会大家实现 DApp 游戏。这个网站的特点是自作非常精良，各种辅助学习材料丰富，并且是对 Solidity 小白友好的。</p><p><a href="https://cryptozombies.io/" target="_blank" rel="noopener">点击这里进入学习平台</a></p><h1 id="一、课程概述"><a href="#一、课程概述" class="headerlink" title="一、课程概述"></a>一、课程概述</h1><p>第一课你将创造一个”僵尸工厂”， 用它建立一支僵尸部队。</p><a id="more"></a>


<ul>
<li>我们的工厂会把我们部队中所有的僵尸保存到数据库中</li>
<li>工厂会有一个函数能产生新的僵尸</li>
<li>每个僵尸会有一个随机的独一无二的面孔</li>
</ul>
<p>在后面的课程里，我们会增加功能。比如，让僵尸能攻击人类或其它僵尸! 但是在实现这些好玩的功能之前，我们先要实现创建僵尸这样的基本功能。</p>
<h2 id="僵尸DNA如何运作"><a href="#僵尸DNA如何运作" class="headerlink" title="僵尸DNA如何运作"></a>僵尸DNA如何运作</h2><p>僵尸的面孔取决于它的DNA。它的DNA很简单，由一个16位的整数组成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8356281049284737</span><br></pre></td></tr></table></figure>

<p>如同真正的DNA, 这个数字的不同部分会对应不同的特点。 前2位代表头型，紧接着的2位代表眼睛，等等。</p>
<blockquote>
<p>注: 本教程我们尽量简化。我们的僵尸只有7种头型(虽然2位数字允许100种可能性)。以后我们会加入更多的头型, 如果我们想让僵尸有更多造型。</p>
</blockquote>
<p>例如，前两位数字是 <code>83</code>， 计算僵尸的头型，我们做<code>83 % 7 + 1</code> = 7 运算， 此僵尸将被赋予第七类头型。</p>
<p>在右边页面，移动头基因<code>head gene</code> 滑块到第七位置(圣诞帽)可见<code>83</code>所对应的特点。</p>
<h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>玩一下页面右侧的滑块。检验一下不同的数字对应不同的僵尸的长相。</li>
</ol>
<p>好了，这已经足够你玩一会儿了。 当你想继续的时候，点击下面的”下一章”，让我们来钻研 Solidity ！</p>
<p><img src="https://i.loli.net/2020/06/27/u3XFU5HpdvCiTOE.png" alt="image-20200627010605297"></p>
<h1 id="二、合约"><a href="#二、合约" class="headerlink" title="二、合约"></a>二、合约</h1><p>从最基本的开始入手:</p>
<p>Solidity 的代码都包裹在<strong>合约</strong>里面. 一份<code>合约</code>就是以太应币应用的基本模块， 所有的变量和函数都属于一份合约, 它是你所有应用的起点.</p>
<p>一份名为 <code>HelloWorld</code> 的空合约如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="版本指令"><a href="#版本指令" class="headerlink" title="版本指令"></a>版本指令</h2><p>所有的 Solidity 源码都必须冠以 “version pragma” — 标明 Solidity 编译器的版本. 以避免将来新的编译器可能破坏你的代码。</p>
<p>例如: <code>pragma solidity ^0.4.19;</code> (当前 Solidity 的最新版本是 0.4.19).</p>
<p>综上所述， 下面就是一个最基本的合约 — 每次建立一个新的项目时的第一段代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.19;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><p>为了建立我们的僵尸部队， 让我们先建立一个基础合约，称为 <code>ZombieFactory</code>。</p>
<ol>
<li>在右边的输入框里输入 <code>0.4.19</code>，我们的合约基于这个版本的编译器。</li>
<li>建立一个空合约 <code>ZombieFactory</code>。</li>
</ol>
<p>一切完毕，点击下面 “答案” . 如果没效果，点击 “提示”。</p>
<h2 id="合约的创建"><a href="#合约的创建" class="headerlink" title="合约的创建"></a>合约的创建</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"><span class="comment">//pragma solidity //1. 这里写版本指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 这里建立智能合约</span></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>指定版本必须放在第一行，第一行前加注释也不可以。</p>
<h1 id="三、状态变量和整数"><a href="#三、状态变量和整数" class="headerlink" title="三、状态变量和整数"></a>三、状态变量和整数</h1><p>真棒！我们已经为我们的合约做了一个外壳， 下面学习 Solidity 中如何使用变量。</p>
<p><strong><em>状态变量\</em></strong>是被永久地保存在合约中。也就是说它们被写入以太币区块链中. 想象成写入一个数据库。</p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Example &#123;</span><br><span class="line">  // 这个无符号整数将会永久的被保存在区块链中</span><br><span class="line">  uint myUnsignedInteger = 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，定义 <code>myUnsignedInteger</code> 为 <code>uint</code> 类型，并赋值100。</p>
<h2 id="无符号整数-uint"><a href="#无符号整数-uint" class="headerlink" title="无符号整数: uint"></a>无符号整数: <code>uint</code></h2><p><code>uint</code> 无符号数据类型， 指<strong>其值不能是负数</strong>，对于有符号的整数存在名为 <code>int</code> 的数据类型。</p>
<blockquote>
<p>注: Solidity中， <code>uint</code> 实际上是 <code>uint256</code>代名词， 一个256位的无符号整数。你也可以定义位数少的uints — <code>uint8</code>， <code>uint16</code>， <code>uint32</code>， 等…… 但一般来讲你愿意使用简单的 <code>uint</code>， 除非在某些特殊情况下，这我们后面会讲。</p>
</blockquote>
<h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们的僵尸DNA将由一个十六位数字组成。</p>
<p>定义 <code>dnaDigits</code> 为 <code>uint</code> 数据类型, 并赋值 <code>16</code>。</p>
<h2 id="合约完善"><a href="#合约完善" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line">    <span class="comment">//这里开始</span></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、数学运算"><a href="#四、数学运算" class="headerlink" title="四、数学运算"></a>四、数学运算</h1><p>在 Solidity 中，数学运算很直观明了，与其它程序设计语言相同:</p>
<ul>
<li>加法: <code>x + y</code></li>
<li>减法: <code>x - y</code>,</li>
<li>乘法: <code>x * y</code></li>
<li>除法: <code>x / y</code></li>
<li>取模 / 求余: <code>x % y</code> <em>(例如, <code>13 % 5</code> 余 <code>3</code>, 因为13除以5，余3)</em></li>
</ul>
<p>Solidity 还支持 <strong><em>乘方操作\</em></strong> (如：x 的 y次方） // 例如： 5 ** 2 = 25</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint x = 5 ** 2; // equal to 5^2 = 25</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><p>为了保证我们的僵尸的DNA只含有16个字符，我们先造一个<code>uint</code>数据，让它等于10^16。这样一来以后我们可以用模运算符 <code>%</code> 把一个整数变成16位。</p>
<ol>
<li>建立一个<code>uint</code>类型的变量，名字叫<code>dnaModulus</code>, 令其等于 <strong>10 的 <code>dnaDigits</code> 次方</strong>.</li>
</ol>
<h2 id="合约完善-1"><a href="#合约完善-1" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    <span class="comment">//这里开始</span></span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、结构体"><a href="#五、结构体" class="headerlink" title="五、结构体"></a>五、结构体</h1><p>有时你需要更复杂的数据类型，Solidity 提供了 <strong>结构体</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Person &#123;</span><br><span class="line">  uint age;</span><br><span class="line">  string name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体允许你生成一个更复杂的数据类型，它有多个属性。</p>
<blockquote>
<p>注：我们刚刚引进了一个新类型, <code>string</code>。 字符串用于保存任意长度的 UTF-8 编码数据。 如： <code>string greeting = &quot;Hello world!&quot;</code>。</p>
</blockquote>
<h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><p>在我们的程序中，我们将创建一些僵尸！每个僵尸将拥有多个属性，所以这是一个展示结构体的完美例子。</p>
<ol>
<li>建立一个<code>struct</code> 命名为 <code>Zombie</code>.</li>
<li>我们的 <code>Zombie</code> 结构体有两个属性： <code>name</code> (类型为 <code>string</code>), 和 <code>dna</code> (类型为 <code>uint</code>)。</li>
</ol>
<h2 id="合约完善-2"><a href="#合约完善-2" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里开始</span></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、数组"><a href="#六、数组" class="headerlink" title="六、数组"></a>六、数组</h1><p>如果你想建立一个集合，可以用 <strong><em>数组</em></strong>这样的数据类型. Solidity 支持两种数组: <strong><em>静态</em></strong> 数组和<strong><em>动态</em></strong> 数组:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 固定长度为2的静态数组:</span><br><span class="line">uint[2] fixedArray;</span><br><span class="line">// 固定长度为5的string类型的静态数组:</span><br><span class="line">string[5] stringArray;</span><br><span class="line">// 动态数组，长度不固定，可以动态添加元素:</span><br><span class="line">uint[] dynamicArray;</span><br></pre></td></tr></table></figure>

<p>你也可以建立一个 <strong><em>结构体\</em></strong>类型的数组 例如，上一章提到的 <code>Person</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person[] people; // 这是动态数组，我们可以不断添加元素</span><br></pre></td></tr></table></figure>

<p>记住：状态变量被永久保存在区块链中。所以在你的合约中创建动态数组来保存成结构的数据是非常有意义的。</p>
<h2 id="公共数组"><a href="#公共数组" class="headerlink" title="公共数组"></a>公共数组</h2><p>你可以定义 <code>public</code> 数组, Solidity 会自动创建 <strong><em>getter\</em></strong> 方法. 语法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person[] public people;</span><br></pre></td></tr></table></figure>

<p>其它的合约可以从这个数组读取数据（但不能写入数据），所以这在合约中是一个有用的保存公共数据的模式。</p>
<h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><p>为了把一个僵尸部队保存在我们的APP里，并且能够让其它APP看到这些僵尸，我们需要一个公共数组。</p>
<ol>
<li>创建一个数据类型为 <code>Zombie</code> 的结构体数组，用 <code>public</code> 修饰，命名为：<code>zombies</code>.</li>
</ol>
<h2 id="合约完善-3"><a href="#合约完善-3" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里开始</span></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、定义函数"><a href="#七、定义函数" class="headerlink" title="七、定义函数"></a>七、定义函数</h1><p>在 Solidity 中函数定义的句法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function eatHamburgers(string _name, uint _amount) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个名为 <code>eatHamburgers</code> 的函数，它接受两个参数：一个 <code>string</code>类型的 和 一个 <code>uint</code>类型的。现在函数内部还是空的。</p>
<blockquote>
<p>注：: 习惯上函数里的变量都是以(<code>_</code>)开头 (但不是硬性规定) 以区别全局变量。我们整个教程都会沿用这个习惯。</p>
</blockquote>
<p>我们的函数定义如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eatHamburgers(&quot;vitalik&quot;, 100);</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><p>在我们的应用里，我们要能创建一些僵尸，让我们写一个函数做这件事吧！</p>
<ol>
<li>建立一个函数 <code>createZombie</code>。 它有两个参数: <strong>_name</strong> (类型为<code>string</code>), 和 <strong>_dna</strong> (类型为<code>uint</code>)。</li>
</ol>
<p>暂时让函数空着——我们在后面会增加内容。</p>
<h2 id="合约完善-4"><a href="#合约完善-4" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里开始</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createZombie</span>(<span class="params">string _name, uint _dna</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、使用结构体和数组"><a href="#八、使用结构体和数组" class="headerlink" title="八、使用结构体和数组"></a>八、使用结构体和数组</h1><h2 id="创建新的结构体"><a href="#创建新的结构体" class="headerlink" title="创建新的结构体"></a>创建新的结构体</h2><p>还记得上个例子中的 <code>Person</code> 结构吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Person &#123;</span><br><span class="line">  uint age;</span><br><span class="line">  string name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person[] public people;</span><br></pre></td></tr></table></figure>

<p>现在我们学习创建新的 <code>Person</code> 结构，然后把它加入到名为 <code>people</code> 的数组中.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建一个新的Person:</span><br><span class="line">Person satoshi = Person(172, &quot;Satoshi&quot;);</span><br><span class="line"></span><br><span class="line">// 将新创建的satoshi添加进people数组:</span><br><span class="line">people.push(satoshi);</span><br></pre></td></tr></table></figure>

<p>你也可以两步并一步，用一行代码更简洁:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">people.push(Person(16, &quot;Vitalik&quot;));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>array.push()</code> 在数组的 <strong>尾部</strong> 加入新元素 ，所以元素在数组中的顺序就是我们添加的顺序， 如:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint[] numbers;</span><br><span class="line">numbers.push(5);</span><br><span class="line">numbers.push(10);</span><br><span class="line">numbers.push(15);</span><br><span class="line">// numbers is now equal to [5, 10, 15]</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><p>让我们创建名为createZombie的函数来做点儿什么吧。</p>
<ol>
<li>在函数体里新创建一个 <code>Zombie</code>， 然后把它加入 <code>zombies</code> 数组中。 新创建的僵尸的 <code>name</code> 和 <code>dna</code>，来自于函数的参数。</li>
<li>让我们用一行代码简洁地完成它。</li>
</ol>
<h2 id="合约完善-5"><a href="#合约完善-5" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createZombie</span>(<span class="params">string _name, uint _dna</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里开始</span></span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、私有-公共函数"><a href="#九、私有-公共函数" class="headerlink" title="九、私有 / 公共函数"></a>九、私有 / 公共函数</h1><p>Solidity 定义的函数的属性默认为<code>公共</code>。 这就意味着任何一方 (或其它合约) 都可以调用你合约里的函数。</p>
<p>显然，不是什么时候都需要这样，而且这样的合约易于受到攻击。 所以将自己的函数定义为<code>私有</code>是一个好的编程习惯，只有当你需要外部世界调用它时才将它设置为<code>公共</code>。</p>
<p>如何定义一个私有的函数呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint[] numbers;</span><br><span class="line"></span><br><span class="line">function _addToArray(uint _number) private &#123;</span><br><span class="line">  numbers.push(_number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这意味着只有我们合约中的其它函数才能够调用这个函数，给 <code>numbers</code> 数组添加新成员。</p>
<p>可以看到，在函数名字后面使用关键字 <code>private</code> 即可。和函数的参数类似，私有函数的名字用(<code>_</code>)起始。</p>
<h2 id="实战演习-8"><a href="#实战演习-8" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们合约的函数 <code>createZombie</code> 的默认属性是公共的，这意味着任何一方都可以调用它去创建一个僵尸。 咱们来把它变成私有吧！</p>
<ol>
<li>变 <code>createZombie</code> 为私有函数，不要忘记遵守命名的规矩哦！</li>
</ol>
<h2 id="合约修改"><a href="#合约修改" class="headerlink" title="合约修改"></a>合约修改</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//function createZombie(string _name, uint _dna) &#123;</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、函数的更多属性"><a href="#十、函数的更多属性" class="headerlink" title="十、函数的更多属性"></a>十、函数的更多属性</h1><p>本章中我们将学习函数的返回值和修饰符。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>要想函数返回一个数值，按如下定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string greeting = &quot;What&apos;s up dog&quot;;</span><br><span class="line"></span><br><span class="line">function sayHello() public returns (string) &#123;</span><br><span class="line">  return greeting;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Solidity 里，函数的定义里可包含返回值的数据类型(如本例中 <code>string</code>)。</p>
<h2 id="函数的修饰符"><a href="#函数的修饰符" class="headerlink" title="函数的修饰符"></a>函数的修饰符</h2><p>上面的函数实际上没有改变 Solidity 里的状态，即，它没有改变任何值或者写任何东西。</p>
<p>这种情况下我们可以把函数定义为 <strong><em>view\</em></strong>, 意味着它只能读取数据不能更改数据:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sayHello() public view returns (string) &#123;</span><br></pre></td></tr></table></figure>

<p>Solidity 还支持 <strong><em>pure\</em></strong> 函数, 表明这个函数甚至都不访问应用里的数据，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function _multiply(uint a, uint b) private pure returns (uint) &#123;</span><br><span class="line">  return a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数甚至都不读取应用里的状态 — 它的返回值完全取决于它的输入参数，在这种情况下我们把函数定义为 <strong><em>pure\</em></strong>.</p>
<blockquote>
<p>注：可能很难记住何时把函数标记为 pure/view。 幸运的是， Solidity 编辑器会给出提示，提醒你使用这些修饰符。</p>
</blockquote>
<h2 id="实战演习-9"><a href="#实战演习-9" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们想建立一个帮助函数，它根据一个字符串随机生成一个DNA数据。</p>
<ol>
<li>创建一个 <code>private</code> 函数，命名为 <code>_generateRandomDna</code>。它只接收一个输入变量 <code>_str</code> (类型 <code>string</code>), 返回一个 <code>uint</code> 类型的数值。</li>
<li>此函数只读取我们合约中的一些变量，所以标记为<code>view</code>。</li>
<li>函数内部暂时留空，以后我们再添加代码。</li>
</ol>
<h2 id="合约完善-6"><a href="#合约完善-6" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里开始</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十一、Keccak256-和-类型转换"><a href="#十一、Keccak256-和-类型转换" class="headerlink" title="十一、Keccak256 和 类型转换"></a>十一、Keccak256 和 类型转换</h1><p>如何让 <code>_generateRandomDna</code> 函数返回一个全(半) 随机的 <code>uint</code>?</p>
<p>Ethereum 内部有一个散列函数<code>keccak256</code>，它用了SHA3版本。一个散列函数基本上就是把一个字符串转换为一个256位的16进制数字。字符串的一个微小变化会引起散列数据极大变化。</p>
<p>这在 Ethereum 中有很多应用，但是现在我们只是用它造一个伪随机数。</p>
<p>例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//6e91ec6b618bb462a4a6ee5aa2cb0e9cf30f7a052bb467b0ba58b8748c00d2e5</span><br><span class="line">keccak256(&quot;aaaab&quot;);</span><br><span class="line">//b1f078126895a1424524de5321b339ab00408010b7cf0e6ed451514981e58aa9</span><br><span class="line">keccak256(&quot;aaaac&quot;);</span><br></pre></td></tr></table></figure>

<p>显而易见，输入字符串只改变了一个字母，输出就已经天壤之别了。</p>
<blockquote>
<p>注: 在区块链中<strong>安全地</strong>产生一个随机数是一个很难的问题， 本例的方法不安全，但是在我们的Zombie DNA算法里不是那么重要，已经很好地满足我们的需要了。</p>
</blockquote>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>有时你需要变换数据类型。例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint8 a = 5;</span><br><span class="line">uint b = 6;</span><br><span class="line">// 将会抛出错误，因为 a * b 返回 uint, 而不是 uint8:</span><br><span class="line">uint8 c = a * b;</span><br><span class="line">// 我们需要将 b 转换为 uint8:</span><br><span class="line">uint8 c = a * uint8(b);</span><br></pre></td></tr></table></figure>

<p>上面, <code>a * b</code> 返回类型是 <code>uint</code>, 但是当我们尝试用 <code>uint8</code> 类型接收时, 就会造成潜在的错误。如果把它的数据类型转换为 <code>uint8</code>, 就可以了，编译器也不会出错。</p>
<h2 id="实战演习-10"><a href="#实战演习-10" class="headerlink" title="实战演习"></a>实战演习</h2><p>给 <code>_generateRandomDna</code> 函数添加代码! 它应该完成如下功能:</p>
<ol>
<li>第一行代码取 <code>_str</code> 的 <code>keccak256</code> 散列值生成一个伪随机十六进制数，类型转换为 <code>uint</code>, 最后保存在类型为 <code>uint</code> 名为 <code>rand</code> 的变量中。</li>
<li>我们只想让我们的DNA的长度为16位 (还记得 <code>dnaModulus</code>?)。所以第二行代码应该 <code>return</code> 上面计算的数值对 <code>dnaModulus</code> 求余数(<code>%</code>)。</li>
</ol>
<h2 id="合约完善-7"><a href="#合约完善-7" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里开始</span></span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、放在一起"><a href="#十二、放在一起" class="headerlink" title="十二、放在一起"></a>十二、放在一起</h1><p>我们就快完成我们的随机僵尸制造器了，来写一个公共的函数把所有的部件连接起来。</p>
<p>写一个公共函数，它有一个参数，用来接收僵尸的名字，之后用它生成僵尸的DNA。</p>
<h2 id="实战演习-11"><a href="#实战演习-11" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>创建一个 <code>public</code> 函数，命名为<code>createRandomZombie</code>. 它将被传入一个变量 <code>_name</code> (数据类型是 <code>string</code>)。 <em>(注: 定义公共函数 <code>public</code> 和定义一个私有 <code>private</code> 函数的做法一样)</em>。</li>
<li>函数的第一行应该调用 <code>_generateRandomDna</code> 函数，传入 <code>_name</code> 参数, 结果保存在一个类型为 <code>uint</code> 的变量里，命名为 <code>randDna</code>。</li>
<li>第二行调用 <code>_createZombie</code> 函数， 传入参数： <code>_name</code> 和 <code>randDna</code>。</li>
<li>整个函数应该是4行代码 (包括函数的结束符号 <code>}</code> )。</li>
</ol>
<h2 id="合约完善-8"><a href="#合约完善-8" class="headerlink" title="合约完善"></a>合约完善</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从这里开始</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、事件"><a href="#十三、事件" class="headerlink" title="十三、事件"></a>十三、事件</h1><p>我们的合约几乎就要完成了！让我们加上一个<strong>事件</strong>.</p>
<p><strong>事件</strong> 是合约和区块链通讯的一种机制。你的前端应用“监听”某些事件，并做出反应。</p>
<p>例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 这里建立事件</span><br><span class="line">event IntegersAdded(uint x, uint y, uint result);</span><br><span class="line"></span><br><span class="line">function add(uint _x, uint _y) public &#123;</span><br><span class="line">  uint result = _x + _y;</span><br><span class="line">  //触发事件，通知app</span><br><span class="line">  IntegersAdded(_x, _y, result);</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你的 app 前端可以监听这个事件。JavaScript 实现如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YourContract.IntegersAdded(function(error, result) &#123; </span><br><span class="line">  // 干些事</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实战演习-12"><a href="#实战演习-12" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们想每当一个僵尸创造出来时，我们的前端都能监听到这个事件，并将它显示出来。</p>
<p>1。 定义一个 <code>事件</code> 叫做 <code>NewZombie</code>。 它有3个参数: <code>zombieId</code> (<code>uint</code>)， <code>name</code> (<code>string</code>)， 和 <code>dna</code> (<code>uint</code>)。</p>
<p>2。 修改 <code>_createZombie</code> 函数使得当新僵尸造出来并加入<code>zombies</code>数组后，生成事件<code>NewZombie</code>。</p>
<p>3。 需要定义僵尸<code>id</code>。 <code>array.push()</code> 返回数组的长度类型是<code>uint</code> - 因为数组的第一个元素的索引是 0， <code>array.push() - 1</code> 将是我们加入的僵尸的索引。 <code>zombies.push() - 1</code> 就是 <code>id</code>，数据类型是 <code>uint</code>。在下一行中你可以把它用到 <code>NewZombie</code> 事件中。</p>
<h2 id="合约修改-1"><a href="#合约修改-1" class="headerlink" title="合约修改"></a>合约修改</h2><p>Contract.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里建立事件</span></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">private</span> </span>&#123;</span><br><span class="line">        <span class="comment">//zombies.push(Zombie(_name, _dna));</span></span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 这里触发事件</span></span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十四、Web3-js"><a href="#十四、Web3-js" class="headerlink" title="十四、Web3.js"></a>十四、Web3.js</h1><p>我们的 Solidity 合约完工了！ 现在我们要写一段 JavaScript 前端代码来调用这个合约。</p>
<p>以太坊有一个 JavaScript 库，名为<strong><em>Web3.js\</em></strong>。</p>
<p>在后面的课程里，我们会进一步地教你如何安装一个合约，如何设置Web3.js。 但是现在我们通过一段代码来了解 Web3.js 是如何和我们发布的合约交互的吧。</p>
<p>如果下面的代码你不能全都理解，不用担心。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面是调用合约的方式:</span></span><br><span class="line"><span class="keyword">var</span> abi = <span class="comment">/* abi是由编译器生成的 */</span></span><br><span class="line"><span class="keyword">var</span> ZombieFactoryContract = web3.eth.contract(abi)</span><br><span class="line"><span class="keyword">var</span> contractAddress = <span class="comment">/* 发布之后在以太坊上生成的合约地址 */</span></span><br><span class="line"><span class="keyword">var</span> ZombieFactory = ZombieFactoryContract.at(contractAddress)</span><br><span class="line"><span class="comment">// `ZombieFactory` 能访问公共的函数以及事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 某个监听文本输入的监听器:</span></span><br><span class="line">$(<span class="string">"#ourButton"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = $(<span class="string">"#nameInput"</span>).val()</span><br><span class="line">  <span class="comment">//调用合约的 `createRandomZombie` 函数:</span></span><br><span class="line">  ZombieFactory.createRandomZombie(name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 `NewZombie` 事件, 并且更新UI</span></span><br><span class="line"><span class="keyword">var</span> event = ZombieFactory.NewZombie(<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span></span><br><span class="line">  generateZombie(result.zombieId, result.name, result.dna)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Zombie 的 dna, 更新图像</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateZombie</span>(<span class="params">id, name, dna</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dnaStr = <span class="built_in">String</span>(dna)</span><br><span class="line">  <span class="comment">// 如果dna少于16位,在它前面用0补上</span></span><br><span class="line">  <span class="keyword">while</span> (dnaStr.length &lt; <span class="number">16</span>)</span><br><span class="line">    dnaStr = <span class="string">"0"</span> + dnaStr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> zombieDetails = &#123;</span><br><span class="line">    <span class="comment">// 前两位数构成头部.我们可能有7种头部, 所以 % 7</span></span><br><span class="line">    <span class="comment">// 得到的数在0-6,再加上1,数的范围变成1-7</span></span><br><span class="line">    <span class="comment">// 通过这样计算：</span></span><br><span class="line">    headChoice: dnaStr.substring(<span class="number">0</span>, <span class="number">2</span>) % <span class="number">7</span> + <span class="number">1</span>，</span><br><span class="line">    <span class="comment">// 我们得到的图片名称从head1.png 到 head7.png</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来的两位数构成眼睛, 眼睛变化就对11取模:</span></span><br><span class="line">    eyeChoice: dnaStr.substring(<span class="number">2</span>, <span class="number">4</span>) % <span class="number">11</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 再接下来的两位数构成衣服，衣服变化就对6取模:</span></span><br><span class="line">    shirtChoice: dnaStr.substring(<span class="number">4</span>, <span class="number">6</span>) % <span class="number">6</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//最后6位控制颜色. 用css选择器: hue-rotate来更新</span></span><br><span class="line">    <span class="comment">// 360度:</span></span><br><span class="line">    skinColorChoice: <span class="built_in">parseInt</span>(dnaStr.substring(<span class="number">6</span>, <span class="number">8</span>) / <span class="number">100</span> * <span class="number">360</span>),</span><br><span class="line">    eyeColorChoice: <span class="built_in">parseInt</span>(dnaStr.substring(<span class="number">8</span>, <span class="number">10</span>) / <span class="number">100</span> * <span class="number">360</span>),</span><br><span class="line">    clothesColorChoice: <span class="built_in">parseInt</span>(dnaStr.substring(<span class="number">10</span>, <span class="number">12</span>) / <span class="number">100</span> * <span class="number">360</span>),</span><br><span class="line">    zombieName: name,</span><br><span class="line">    zombieDescription: <span class="string">"A Level 1 CryptoZombie"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> zombieDetails</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的 JavaScript 所做的就是获取由<code>zombieDetails</code> 产生的数据, 并且利用浏览器里的 JavaScript 神奇功能 (我们用 Vue.js)，置换出图像以及使用CSS过滤器。在后面的课程中，你可以看到全部的代码。</p>
<h2 id="试一下吧"><a href="#试一下吧" class="headerlink" title="试一下吧!"></a>试一下吧!</h2><p>在右面的输入框里输入你的名字，看看你能得到哪种僵尸！</p>
<p><strong>一旦你得到一个满意的僵尸, 点击下面的 “下一章” 按钮保存你的僵尸，结束第一课!</strong></p>
<p><img src="https://i.loli.net/2020/06/30/YUAskPcnzdBjy8K.png" alt="image-20200630154641819"></p>
<h1 id="十五、第一课打卡"><a href="#十五、第一课打卡" class="headerlink" title="十五、第一课打卡"></a>十五、第一课打卡</h1><p><img src="https://i.loli.net/2020/06/30/YUAskPcnzdBjy8K.png" alt="image-20200630154657089"></p>
<p><a href="https://share.cryptozombies.io/zh/lesson/1/share/truffle_solidity_web3.js_javaScript" target="_blank" rel="noopener">我的僵尸大军1</a></p>
]]></content>
      <categories>
        <category>Solidity Path</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>椭圆曲线密码系统</title>
    <url>/2019/11/11/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="椭圆曲线密码系统"><a href="#椭圆曲线密码系统" class="headerlink" title="椭圆曲线密码系统"></a>椭圆曲线密码系统</h1><h2 id="一个简单的RAS算法"><a href="#一个简单的RAS算法" class="headerlink" title="一个简单的RAS算法"></a>一个简单的RAS算法</h2><p>​        RAS密码系统最让人头疼的问题就是，在加解密或者签名的时候需要庞大的运算量，所需较长的运算时间。对于一些处理器不强大的设备，比如手机、PDA（Personal Digital Assistant）或者及时响应的系统不友好。因此有了椭圆曲线密码系统（ECC）。ECC运算量较少，因此能提高效率。</p><a id="more"></a>
<h2 id="椭圆曲线的加法概念"><a href="#椭圆曲线的加法概念" class="headerlink" title="椭圆曲线的加法概念"></a>椭圆曲线的加法概念</h2><p><strong>中心思想：</strong></p>
<p>​        椭圆曲线的密码系统主要是利用椭圆曲线所构成的有限群来代替传统的RSA或ElGamal所使用的有限群，这里所使用的椭圆曲线方程式可以简化为 :<br>$$<br>y^2=x^3+ax+b<br>$$<br>它的曲线恰好对称于y=0这条直线，但在决定参数a、b时，必须让曲线没有重根（如此才能确保唯一解），因此a和b必须满足：<br>$$<br>4a^3+27b^2!=0<br>$$<br>​        决定参数a和b后，就可以在椭圆曲线上定义出一个有限加法群，这个加法与一般的加法不同，它的几何概念时令其加法单位元素为一无穷远的点O，且O=-O，并且此加法单位元素要满足：若椭圆曲线上某三点共线的话，其和就等于O。</p>
<p>​        椭圆曲线的加法运算是将椭圆曲线上两个坐标点相加，依坐标点的位置不同共有共有以下几种情况，其加法的过程都要满足3点共线时其和为O的这一项要求。</p>
<ul>
<li><h3 id="椭圆曲线上的不同坐标点相加"><a href="#椭圆曲线上的不同坐标点相加" class="headerlink" title="椭圆曲线上的不同坐标点相加"></a>椭圆曲线上的不同坐标点相加</h3><p>A、B为椭圆曲线上的不同点，将两个坐标相加，其做法如下：</p>
<p>&lt;1&gt;.先找出A与B这两点所构成的直线。</p>
<p>&lt;2&gt;.接着找出这条直线与椭圆曲线的交点R。</p>
<p>&lt;3&gt;.由于A、B、R这三点共线，根据椭圆曲线加法定义可知A+B+R=O,因此可求得A+B=-R，这里-R表示坐标点R对y=0这条直线的影射，也就是R对称于y轴的坐标点（如下图所示）。</p>
<p><a href="https://imgchr.com/i/MQLB59" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/11/MQLB59.md.png" alt="MQLB59.md.png"></a></p>
</li>
<li><h3 id="椭圆曲线上相同坐标点相加"><a href="#椭圆曲线上相同坐标点相加" class="headerlink" title="椭圆曲线上相同坐标点相加"></a>椭圆曲线上相同坐标点相加</h3><p>若椭圆曲线上的相同点做相加，其做法如下：</p>
<p>&lt;1&gt;.找出A点在椭圆曲线上的切线。</p>
<p>&lt;2&gt;.找出这条切线与椭圆曲线的交点R。</p>
<p>&lt;3&gt;.可以看成A、A、R这三点共线，根据椭圆曲线加法的定义可知A+A+R=O，因此A+A=-R(如下图所示)。</p>
<p><a href="https://imgchr.com/i/Ml3d1J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/11/Ml3d1J.md.png" alt="Ml3d1J.md.png"></a></p>
</li>
<li><h3 id="椭圆曲线上一坐标点与无穷远点相加"><a href="#椭圆曲线上一坐标点与无穷远点相加" class="headerlink" title="椭圆曲线上一坐标点与无穷远点相加"></a>椭圆曲线上一坐标点与无穷远点相加</h3><p>第三种状况是椭圆曲线上一A点与无穷远点做相加，其几何概念如下图所示：</p>
<p><img src="https://s2.ax1x.com/2019/11/11/MltcSU.png" alt="MltcSU.png"></p>
<p>把无穷远点视为y轴上一个正向极远的点，依据定义此无穷远的点就是O。此无穷远点与A点所构成的直线，可视为一条垂直线。因此，此垂直线与椭圆曲线会相交于另一点R，因此可求得A+oo=-R，而R与A刚好互为y轴的对称点（A=-R），故A+oo=A。</p>
</li>
</ul>
<ul>
<li><h3 id="椭圆曲线上两对称点相加"><a href="#椭圆曲线上两对称点相加" class="headerlink" title="椭圆曲线上两对称点相加"></a>椭圆曲线上两对称点相加</h3></li>
</ul>
<h2 id="在有限体内的椭圆曲线运算"><a href="#在有限体内的椭圆曲线运算" class="headerlink" title="在有限体内的椭圆曲线运算"></a>在有限体内的椭圆曲线运算</h2><h2 id="椭圆曲线的公开密钥加密机制"><a href="#椭圆曲线的公开密钥加密机制" class="headerlink" title="椭圆曲线的公开密钥加密机制"></a>椭圆曲线的公开密钥加密机制</h2><h2 id="椭圆曲线的数字签名"><a href="#椭圆曲线的数字签名" class="headerlink" title="椭圆曲线的数字签名"></a>椭圆曲线的数字签名</h2><p>​    </p>
]]></content>
      <categories>
        <category>加密算法</category>
        <category>椭圆曲线</category>
      </categories>
      <tags>
        <tag>网络信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客刷题之洗牌</title>
    <url>/2020/06/21/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E4%B9%8B%E6%B4%97%E7%89%8C/</url>
    <content><![CDATA[<h1 id="一、洗牌"><a href="#一、洗牌" class="headerlink" title="一、洗牌"></a>一、洗牌</h1><p><a href="https://www.nowcoder.com/questionTerminal/5a0a2c7e431e4fbbbb1ff32ac6e8dfa0" target="_blank" rel="noopener">题目链接</a></p><p>洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。首先，我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。接着就开始洗牌的过程，先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，直到最后放下左手的第一张牌。接着把牌合并起来就可以了。 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3；右手拿着4,5,6。在洗牌过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。 现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列。</p><a id="more"></a>

<h1 id="二、输入描述"><a href="#二、输入描述" class="headerlink" title="二、输入描述"></a>二、输入描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个数T(T ≤ 100)，表示数据组数。对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，接下来一行有2n个数a1,a2,...,a2n(1 ≤ ai ≤ 1000000000)。表示原始牌组从上到下的序列。</span><br></pre></td></tr></table></figure>

<h1 id="三、输出描述"><a href="#三、输出描述" class="headerlink" title="三、输出描述"></a>三、输出描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末输出多余的空格。</span><br></pre></td></tr></table></figure>

<h1 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcx.niuke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//洗牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shuffle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//input</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> T = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                ArrayList&lt;Integer&gt; card = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * n; j++) &#123;</span><br><span class="line">                    card.add(sc.nextInt());</span><br><span class="line">                &#125;</span><br><span class="line">                ShuffleCord(card, k, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShuffleCord</span><span class="params">(ArrayList&lt;Integer&gt; card, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; LeftCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; RightCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//初始化左边手牌</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                LeftCard.add(card.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">                RightCard.add(card.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//洗牌   洗牌前将cord清空 否则洗牌后的顺序将在index=7的位置添加</span></span><br><span class="line">            card.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                card.add(LeftCard.get(i));</span><br><span class="line">                card.add(RightCard.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">            <span class="comment">//同理 完成一波洗牌后 将左右手牌清空</span></span><br><span class="line">            LeftCard.clear();</span><br><span class="line">            RightCard.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r:card) &#123;</span><br><span class="line">            System.out.print(r+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线编程之剑指</title>
    <url>/2019/11/18/%E7%89%9B%E5%AE%A2%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%89%91%E6%8C%87/</url>
    <content><![CDATA[<h1 id="一、栈的压入、弹出序列"><a href="#一、栈的压入、弹出序列" class="headerlink" title="一、栈的压入、弹出序列"></a>一、栈的压入、弹出序列</h1><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><a id="more"></a>
<h6 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h6><p>​        用一个栈来模拟入栈和出栈的过程。</p>
<h6 id="Stack包中常用的方法："><a href="#Stack包中常用的方法：" class="headerlink" title="Stack包中常用的方法："></a>Stack包中常用的方法：</h6><p>​        push(); 将一个项目推到这个堆栈的顶部。(给堆栈里添加元素，也就是入栈。)</p>
<p>​        pop():在这个堆栈的顶部删除队形，并返回该对象的值作为该函数的返回值。（即弹栈）</p>
<p>​        peek():查看此堆栈顶部的对象。（即查看栈顶元素）</p>
<p><strong>注：栈的弹栈特点是先进后出。</strong></p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">//导入 栈的包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//如果pushA，popA之间有一个是空的，则是不合法的，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(pushA == <span class="keyword">null</span> &amp;&amp; popA == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个辅助栈来模拟入栈出栈的过程</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//定义一个index来记录出栈popA的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环，一直到所有内容入栈完毕</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; pushA.length;i++)&#123;</span><br><span class="line">            stack.push(pushA[i]);</span><br><span class="line">            <span class="comment">//如果目前的栈顶与出栈的队列相同则出栈，然后index++</span></span><br><span class="line">            <span class="comment">//如果栈不为空，继续出栈。</span></span><br><span class="line">            <span class="keyword">while</span>((!stack.isEmpty()) &amp;&amp; stack.peek() == popA[index])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果最后栈为空，则返回true</span></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、从上往下打印二叉树"><a href="#二、从上往下打印二叉树" class="headerlink" title="二、从上往下打印二叉树"></a>二、从上往下打印二叉树</h1><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        从上往下打印出二叉树的每个节点，通层节点从左至右打印。</p>
<h6 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h6><p>​        层次遍历,用arraylist模拟一个队列来存储相应的TreeNode。</p>
<h6 id="ArrayList和LinkedList包中的常用方法："><a href="#ArrayList和LinkedList包中的常用方法：" class="headerlink" title="ArrayList和LinkedList包中的常用方法："></a>ArrayList和LinkedList包中的常用方法：</h6><p>​        ArrayList和LinkedList都继承了List类，其中add（）方法就是继承自List类的。</p>
<p>​        add():添加对象至集合(List、ArrayList、LinkedList)中。</p>
<p>​        isEmpty():用来判断集合中是否包含元素对象。返回值类型为Boolean。</p>
<p>​        removeFirst():移除并返回集合的第一个元素对象。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果二叉树为空则返回一个空的arrayList</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.定义一个ArrayList对象用来存储二叉树的节点值val</span></span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.定义一个LinkedList对象来做层序遍历</span></span><br><span class="line">        LinkedList&lt;TreeNode&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        linkedList.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!linkedList.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = linkedList.removeFirst();</span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            arrayList.add(temp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、二叉搜索树的后序遍历序列"><a href="#三、二叉搜索树的后序遍历序列" class="headerlink" title="三、二叉搜索树的后序遍历序列"></a>三、二叉搜索树的后序遍历序列</h1><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<h6 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h6><p>​        递归调用。</p>
<p>​        对于一个序列S，最后一个元素是last（即就是根节点元素），设去掉last元素后的序列为T，那么T必定满足：可以分为两段，前一段（即左子树）小于last，后一段（右子树）大于last，且两段都是合法的后序序列。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="keyword">int</span> [] sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> judge(sequence,<span class="number">0</span>,sequence.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> [] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= last)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后序遍历，最后的一个位置元素即是根节点</span></span><br><span class="line">        <span class="keyword">int</span> i = last;</span><br><span class="line">        <span class="comment">//找到的i即是分割左子树与右子树的位置。i-1的位置到start为左子树，i到last-1位置为右子树</span></span><br><span class="line">        <span class="comment">//因为二叉树的左子树的所有元素小于根节点的值，右子树的所有元素的值大于根节点的值</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt; start &amp;&amp; arr[i-<span class="number">1</span>] &gt; arr[last])&#123;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左子树的所有元素值都要小于根节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= start;--j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[last])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在递归的时候判断左子树和右子树是否满足后序遍历</span></span><br><span class="line">        <span class="keyword">return</span>(judge(arr,start,i-<span class="number">1</span>) &amp;&amp; judge(arr,i,last-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、把数组排成最小的数"><a href="#四、把数组排成最小的数" class="headerlink" title="四、把数组排成最小的数"></a>四、把数组排成最小的数</h1><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>​        输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>
<h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h6><p>​        冒泡排序</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;numbers.length;j++)&#123;</span><br><span class="line">                String s1= numbers[i]+<span class="string">""</span>+numbers[j];</span><br><span class="line">                String s2= numbers[j]+<span class="string">""</span>+numbers[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(s1.compareTo(s2)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    temp = numbers[j];</span><br><span class="line">                    numbers[j]=numbers[i];</span><br><span class="line">                    numbers[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            str += String.valueOf(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>笔试题总结</title>
    <url>/2020/02/21/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-编程题"><a href="#1-编程题" class="headerlink" title="1.编程题"></a>1.编程题</h2><h3 id="1-1倒序数："><a href="#1-1倒序数：" class="headerlink" title="1.1倒序数："></a>1.1倒序数：</h3><p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。<br>给定 x = 123，返回 321 </p><p>给定 x = -123，返回 -321</p><p>思路；通过取余取得最后一位 然后除以十再取最后一位(相当于往前取一位) ,用一个数保存，每次取得都乘十并加上取得的数字（相当于往前挤一位），</p><a id="more"></a>


<pre><code>直至原数不能再被十整除或者反转结果已经溢出则结束循环</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.bigdata.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daoxu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">outNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = c; <span class="comment">//临时记录c 用于判断是否溢出</span></span><br><span class="line">            c = c * <span class="number">10</span>  + n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(c/<span class="number">10</span> != temp)&#123;<span class="comment">//如果c/10和临时记录并不相等，说明已经溢出了 结束循环</span></span><br><span class="line">                c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i = outNumber(n);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>c = c * 10  + n % 10</strong></p>
<p><strong>c = c * 10  + n % 10</strong></p>
<p><strong>c = c * 10  + n % 10</strong></p>
<p>真滴蠢！！！</p>
<h3 id="1-2跳台阶："><a href="#1-2跳台阶：" class="headerlink" title="1.2跳台阶："></a>1.2跳台阶：</h3><p> 一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">1</span> || target == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JumpFloor(target - <span class="number">1</span>)+JumpFloor(target -<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>笔试总结</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线编程之数据库SQL实战</title>
    <url>/2019/11/19/%E7%89%9B%E5%AE%A2%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="一、查询最晚入职员工的所有信息"><a href="#一、查询最晚入职员工的所有信息" class="headerlink" title="一、查询最晚入职员工的所有信息"></a>一、查询最晚入职员工的所有信息</h1><ul>
<li><strong>题目描述</strong></li>
</ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找最晚入职员工的所有信息</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure><a id="more"></a>


<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> hire_date = (<span class="keyword">select</span> <span class="keyword">max</span>(hire_date)<span class="keyword">from</span> employees);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>考察select语句的嵌套使用</p>
</li>
</ul>
<h1 id="二、查找入职员工时间排名倒数第三名的员工所有信息"><a href="#二、查找入职员工时间排名倒数第三名的员工所有信息" class="headerlink" title="二、查找入职员工时间排名倒数第三名的员工所有信息"></a>二、查找入职员工时间排名倒数第三名的员工所有信息</h1><ul>
<li><strong>题目描述</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找入职员工时间排名倒数第三的员工所有信息</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>*</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> </span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>order by作用：</p>
<p>对记录进行排序（默认升序），desc为降序，asc为升序。</p>
<p>limit作用：</p>
<p>用于限制显示的条数。</p>
<p>Limit [offset,] N<br> Offset: 偏移量,即跳过几行，0可不写<br> N: 取出条目</p>
<p><conter> <img src="https://s2.ax1x.com/2019/11/19/Mg0c01.png" alt="Mg0c01.png"></conter></p>
</li>
</ul>
<h1 id="三、查找当前薪水详情以及部门编号"><a href="#三、查找当前薪水详情以及部门编号" class="headerlink" title="三、查找当前薪水详情以及部门编号"></a>三、查找当前薪水详情以及部门编号</h1><ul>
<li><strong>题目描述</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找各个部门当前(to_date=&apos;9999-01-01&apos;)领导当前薪水详情以及其对应部门编号dept_no</span><br><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">`dept_no` char(4) NOT NULL,</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`salary` int(11) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SQL语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salaries.*,dept_manager.dept_no </span><br><span class="line"><span class="keyword">from</span> salaries, dept_manager </span><br><span class="line"><span class="keyword">where</span> salaries.emp_no = dept_manager.emp_no</span><br><span class="line"><span class="keyword">and</span> salaries.to_date = <span class="string">"9999-01-01"</span></span><br><span class="line"><span class="keyword">and</span> dept_manager.to_date = <span class="string">"9999-01-01"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>总结</strong></p>
<p>多条件查询。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>牛客</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全综合实验篇</title>
    <url>/2020/06/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E7%AF%87/</url>
    <content><![CDATA[<h1 id="网络安全综合实验篇"><a href="#网络安全综合实验篇" class="headerlink" title="网络安全综合实验篇"></a>网络安全综合实验篇</h1><h2 id="1、实验要求"><a href="#1、实验要求" class="headerlink" title="1、实验要求"></a>1、实验要求</h2><ol>
<li>配置ACL，过滤具有某种特点的分组。</li>
<li>配置NAT。在企业内部结构化分层使用NAT地址。</li>
<li>实验测试一种网络攻击，比如SYN_Flood、MAC泛洪攻击或ARP攻击。</li>
<li>配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。</li>
<li>配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP VPN 或SSL VPN。</li>
</ol><a id="more"></a>
<h2 id="2、配置ACL，过滤具有某种特点的分组。"><a href="#2、配置ACL，过滤具有某种特点的分组。" class="headerlink" title="2、配置ACL，过滤具有某种特点的分组。"></a>2、配置ACL，过滤具有某种特点的分组。</h2><h3 id="2-1实验拓扑"><a href="#2-1实验拓扑" class="headerlink" title="2.1实验拓扑"></a>2.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJ1IHA.png" alt="tJ1IHA.png"></p>
<h3 id="2-2实验步骤"><a href="#2-2实验步骤" class="headerlink" title="2.2实验步骤"></a>2.2实验步骤</h3><h4 id="2-2-1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。"><a href="#2-2-1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。" class="headerlink" title="2.2.1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。"></a>2.2.1根据拓扑配置路由器、PC的ip及掩码，然后在各个路由器上配置RIP协议实现全网互通。</h4><h4 id="2-2-2测试全网是否互通，PC间互Ping结果如下："><a href="#2-2-2测试全网是否互通，PC间互Ping结果如下：" class="headerlink" title="2.2.2测试全网是否互通，PC间互Ping结果如下："></a>2.2.2测试全网是否互通，PC间互Ping结果如下：</h4><p><img src="https://s1.ax1x.com/2020/06/01/tJ1q9f.png" alt="tJ1q9f.png"></p>
<h4 id="2-2-3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信"><a href="#2-2-3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信" class="headerlink" title="2.2.3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信"></a>2.2.3通过ACL的配置使得PC1和PC2可以正常通信，但PC1不能和PC3通信</h4><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p> <strong>在AR3的g0/0/1接口拒绝PC1的访问</strong> ，配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR3]acl</span> <span class="string">2000</span></span><br><span class="line"><span class="meta">[AR3-acl-basic-2000]rule</span> <span class="string">deny source 192.168.10.2 0</span></span><br><span class="line"><span class="attr">[AR3-acl-basic-2000]quit</span></span><br><span class="line"><span class="meta">[AR3]interface</span> <span class="string">GigabitEthernet0/0/1</span></span><br><span class="line"><span class="comment"># 在GigabitEthernet0/0/1接口调用</span></span><br><span class="line"><span class="meta">[AR3-GigabitEthernet0/0/1]traffic-filter</span> <span class="string">outbound acl 2000</span></span><br><span class="line"><span class="attr">[AR3-GigabitEthernet0/0/1]quit</span></span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><strong>PC1 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ39Nq.png" alt="tJ39Nq.png"></p>
<p><strong>PC2 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3iCV.png" alt="tJ3iCV.png"></p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p> <strong>在AR3上只允许PC2拒绝PC1</strong>，配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除法一配置</span></span><br><span class="line"><span class="meta">[AR3]undo</span> <span class="string">acl 200</span></span><br><span class="line"><span class="comment"># 允许PC2访问 拒绝PC1</span></span><br><span class="line"><span class="meta">[AR3]acl</span> <span class="string">2000</span></span><br><span class="line"><span class="meta">[AR3-acl-basic-2000]rule</span> <span class="string">permit source 192.168.20.2 0</span></span><br><span class="line"><span class="meta">[AR3-acl-basic-2000]rule</span> <span class="string">deny source any</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><strong>PC1 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ39Nq.png" alt="tJ39Nq.png"></p>
<p><strong>PC2 Ping PC3：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3iCV.png" alt="tJ3iCV.png"></p>
<h4 id="2-2-4-AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信"><a href="#2-2-4-AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信" class="headerlink" title="2.2.4 AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信"></a>2.2.4 AR1远程登录到AR3，但两者不能ping通，PC1，PC2仍能正常通信</h4><ol>
<li><p>首先在AR3中设置telnet远程登陆，配置如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删掉原来的配置</span></span><br><span class="line"><span class="meta">[AR3]undo</span> <span class="string">acl 2000 </span></span><br><span class="line"><span class="comment"># 设置远程登陆</span></span><br><span class="line"><span class="meta">[AR3]user-interface</span> <span class="string">vty 0 4</span></span><br><span class="line"><span class="meta">[AR3-ui-vty0-4]authentication-mode</span> <span class="string">password</span></span><br><span class="line"><span class="attr">Please</span> <span class="string">configure the login password (maximum length 16):admin</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试远程登陆配置是否正确。</p>
<p>AR1中远程登陆AR3，结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3K4x.png" alt="tJ3K4x.png"></p>
<p>可见，能够登陆。</p>
</li>
<li><p>通过ACL配置实现AR1-&gt;AR3拒绝ping，但是可以远程登陆。</p>
<p>在AR2中做如下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]acl</span> <span class="string">3000</span></span><br><span class="line"><span class="meta">[AR2-acl-adv-3000]rule</span> <span class="string">deny icmp source 12.1.1.1 0 destination 24.1.1.2 0</span></span><br><span class="line"><span class="attr">[AR2-acl-adv-3000]quit</span></span><br><span class="line"><span class="meta">[AR2]interface</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[AR2-GigabitEthernet0/0/0]traffic-filter</span> <span class="string">inbound acl 3000</span></span><br><span class="line"><span class="attr">[AR2-GigabitEthernet0/0/0]quit</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ33vD.png" alt="tJ33vD.png"></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3NVA.png" alt="tJ3NVA.png"></p>
</li>
</ol>
<h2 id="3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。"><a href="#3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。" class="headerlink" title="3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。"></a>3、配置NAT。在企业内部结构化分层使用NAT地址。配置防火墙，禁止某种网络服务（防火墙在企业内网与外网之间）。</h2><h2 id="防火墙NAT配置"><a href="#防火墙NAT配置" class="headerlink" title="防火墙NAT配置"></a>防火墙NAT配置</h2><h3 id="3-1实验拓扑"><a href="#3-1实验拓扑" class="headerlink" title="3.1实验拓扑"></a>3.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJ3yrQ.png" alt="tJ3yrQ.png"></p>
<h3 id="3-2实验步骤"><a href="#3-2实验步骤" class="headerlink" title="3.2实验步骤"></a>3.2实验步骤</h3><h4 id="3-2-1根据拓扑配置路由器、防火墙、PC的ip及掩码。"><a href="#3-2-1根据拓扑配置路由器、防火墙、PC的ip及掩码。" class="headerlink" title="3.2.1根据拓扑配置路由器、防火墙、PC的ip及掩码。"></a>3.2.1根据拓扑配置路由器、防火墙、PC的ip及掩码。</h4><h4 id="3-2-2在AR1中配置一条去往防火墙GE端口的默认路由。"><a href="#3-2-2在AR1中配置一条去往防火墙GE端口的默认路由。" class="headerlink" title="3.2.2在AR1中配置一条去往防火墙GE端口的默认路由。"></a>3.2.2在AR1中配置一条去往防火墙GE端口的默认路由。</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1]ip</span> <span class="string">route-static 0.0.0.0 0.0.0.0 11.0.0.1</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-3在防火墙中将端口加入对应的trust、dmz、untrust域中"><a href="#3-2-3在防火墙中将端口加入对应的trust、dmz、untrust域中" class="headerlink" title="3.2.3在防火墙中将端口加入对应的trust、dmz、untrust域中"></a>3.2.3在防火墙中将端口加入对应的trust、dmz、untrust域中</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[SRG]firewall</span> <span class="string">zone trust</span></span><br><span class="line"><span class="meta">[SRG-zone-trust]add</span> <span class="string">interface g0/0/1 将接口加入trust区域（默认安全级别85）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[SRG]firewall</span> <span class="string">zone trust</span></span><br><span class="line"><span class="meta">[SRG-zone-trust]add</span> <span class="string">interface g0/0/3将接口加入dmz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[SRG]firewall</span> <span class="string">zone untrust</span></span><br><span class="line"><span class="meta">[SRG-zone-untrust]add</span> <span class="string">interface g0/0/2将接口键入untrust区域（安全级别5）</span></span><br><span class="line"><span class="meta">[SRG]ip</span> <span class="string">route-static 192.168.10.0 24 11.0.0.2</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-4静态NAT：一对一"><a href="#3-2-4静态NAT：一对一" class="headerlink" title="3.2.4静态NAT：一对一"></a>3.2.4静态NAT：一对一</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置将内网地址192.168.10.10 映射到12.0.0.10地址</span></span><br><span class="line"><span class="meta">SRG]nat</span> <span class="string">server global 12.0.0.10 inside 192.168.10.10</span></span><br><span class="line"><span class="meta">[SRG]policy</span> <span class="string">interzone trust untrust outbound  </span></span><br><span class="line"><span class="comment">#进入trust到untrust出口方向策略</span></span><br><span class="line"><span class="meta">[SRG-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1 创建一个策略</span></span><br><span class="line"><span class="meta">[SRG-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">service service-set icmp 服务为ICMP协议</span></span><br><span class="line"><span class="meta">[SRG-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string"> permit</span></span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>PC1 Ping AR2 GE0/0/0端口</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ35xU.png" alt="tJ35xU.png"></p>
<p>AR2 GE0/0/0端口捕获报文如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ37qJ.png" alt="tJ37qJ.png"></p>
<p>发现PC1的ip地址为12.0.0.10，将内网ip192.168.10.10映射为公网ip12.0.0.10。</p>
<h4 id="3-2-5动态NAT：多对多（服务器）"><a href="#3-2-5动态NAT：多对多（服务器）" class="headerlink" title="3.2.5动态NAT：多对多（服务器）"></a>3.2.5动态NAT：多对多（服务器）</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除静态NAT</span></span><br><span class="line"><span class="meta">[SRG]undo</span> <span class="string">nat server gloabl 12.0.0.10 inside 192.168.10.10</span></span><br><span class="line"><span class="comment"># 创建nat地址池</span></span><br><span class="line"><span class="meta">[SRG]nat</span> <span class="string">address-group 1 12.0.0.20 12.0.0.50  </span></span><br><span class="line"><span class="meta">[SRG]nat-policy</span> <span class="string">interzone trust untrust outbound</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 配置源IP地址</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">source 192.168.10.0 mask 24 </span></span><br><span class="line"><span class="comment"># 配置动作为源IP进行nat</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string">source-nat </span></span><br><span class="line"><span class="comment"># 关联nat地址池</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-1]address-group 1</span> <span class="string">no-pat</span></span><br></pre></td></tr></table></figure>

<p>测试：PC1 Ping AR2 GE0/0/0端口，并在AR2 GE0/0/0端口捕获报文：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ3XPx.png" alt="tJ3XPx.png"></p>
<p>将内网ip192.168.10.10映射为公网ip12.0.0.20。</p>
<p>修改PC1 ip地址为192.168.10.11，在进行测试结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJ8UL4.png" alt="tJ8UL4.png"></p>
<p>将内网ip192.168.10.11映射为公网ip12.0.0.21。</p>
<h4 id="3-2-6动态NAT：一对多（最常用）"><a href="#3-2-6动态NAT：一对多（最常用）" class="headerlink" title="3.2.6动态NAT：一对多（最常用）"></a>3.2.6动态NAT：一对多（最常用）</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[SRG]nat-policy</span> <span class="string">interzone trust untrust outbound</span></span><br><span class="line"><span class="comment"># 删除nat多对多配置</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound]undo</span> <span class="string">policy 1</span></span><br><span class="line"><span class="comment"># 配置一对多</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">2</span></span><br><span class="line"><span class="comment"># 配置源IP地址</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-2]policy</span> <span class="string">source 192.168.10.0 mask 24 </span></span><br><span class="line"><span class="comment"># 配置动作为源IP进行nat</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-2]action</span> <span class="string">source-nat  </span></span><br><span class="line"><span class="comment"># 配置要转换的地址为g/0/1</span></span><br><span class="line"><span class="meta">[SRG-nat-policy-interzone-trust-untrust-outbound-2]easy-ip GigabitEthernet</span> <span class="string">0/0/1</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>PC1 Ping AR2 GE0/0/0端口，并在AR2 GE0/0/0端口捕获报文：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJkgf.png" alt="tJJkgf.png"></p>
<p>将内网ip192.168.10.11映射为公网ip12.0.0.1。</p>
<p>修改PC1 ip地址为192.168.10.13，在进行测试结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJuUs.png" alt="tJJuUs.png"></p>
<p>将内网ip192.168.10.13映射为公网ip12.0.0.1。</p>
<p>实现将多个内网ip映射到同一公网ip下。</p>
<h2 id="4、实验测试一种网络攻击，比如SYN-Flood、MAC泛洪攻击或ARP攻击。"><a href="#4、实验测试一种网络攻击，比如SYN-Flood、MAC泛洪攻击或ARP攻击。" class="headerlink" title="4、实验测试一种网络攻击，比如SYN_Flood、MAC泛洪攻击或ARP攻击。"></a>4、实验测试一种网络攻击，比如SYN_Flood、MAC泛洪攻击或ARP攻击。</h2><h2 id="选择：MAC地址欺骗与MAC地址泛洪攻击"><a href="#选择：MAC地址欺骗与MAC地址泛洪攻击" class="headerlink" title="选择：MAC地址欺骗与MAC地址泛洪攻击"></a>选择：MAC地址欺骗与MAC地址泛洪攻击</h2><h3 id="4-1实验拓扑"><a href="#4-1实验拓扑" class="headerlink" title="4.1实验拓扑"></a>4.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJJQCq.png" alt="tJJQCq.png"></p>
<p>各个设备ip、MAC均为真实存在的，没有造假嫌疑，如下所示：</p>
<ul>
<li><strong>网关：</strong></li>
</ul>
<p><a href="https://imgchr.com/i/tJJGKU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/01/tJJGKU.png" alt="tJJGKU.png"></a></p>
<ul>
<li><p><strong>Win10：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJyrD.png" alt="tJJyrD.png"></p>
</li>
<li><p><strong>Win7：</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJfPI.png" alt="tJJfPI.png"></p>
</li>
</ul>
<h3 id="4-2实验步骤"><a href="#4-2实验步骤" class="headerlink" title="4.2实验步骤"></a>4.2实验步骤</h3><h4 id="4-2-1MAC诈骗"><a href="#4-2-1MAC诈骗" class="headerlink" title="4.2.1MAC诈骗"></a>4.2.1MAC诈骗</h4><ol>
<li><p>攻击原理：</p>
<p> MAC地址欺骗是数据链路层攻击，它是利用<strong>交换机端口学习的漏洞</strong>，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。 </p>
</li>
<li><p>提出两个问题，交换机的端口学习是如何进行的？有什么漏洞？思考一下…</p>
<ul>
<li><p>首先，清空并查看交换机LSW1的CAM表，命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清空</span></span><br><span class="line"><span class="meta">[Huawei]undo</span> <span class="string">mac-address all</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line"><span class="meta">【Huawei】display</span> <span class="string">mac-address</span></span><br><span class="line"><span class="attr">[Huawei]</span></span><br></pre></td></tr></table></figure>

<p>可见CAM表已被清空。</p>
</li>
<li><p>我们从PC1上向PC2发一个构造的udp包，如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJJvR0.png" alt="tJJvR0.png"></p>
</li>
<li><p>在交换机上查询CAM表，结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJYuLD.png" alt="tJYuLD.png"></p>
<p>发现已经学习到一条记录，MAC地址以及对应的端口号。</p>
</li>
<li><p>再构造一个数据包，由PC1发给PC2，将源MAC地址改位Win10的MAC地址。</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJY3FA.png" alt="tJY3FA.png"></p>
</li>
<li><p>再次查看CAM表。</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJYUOS.png" alt="tJYUOS.png"></p>
<p>发现多了两天记录分别是Win10的MAC地址和网关的MAC地址及对应端口号。在此本应该只是学到Win10的MAC地址及对应端口号，关于学到网管记录的猜测是，在此期间交换机与网管进行某种数据交换。从而交换机学到了关于网关的记录。</p>
</li>
</ul>
</li>
<li><p>明白了交换机端口学习的原理，现在来伪造数据包，造成MAC地址欺骗，同时准备以下三个条件：</p>
<ol>
<li>在PC1上伪造源MAC为Win10的MAC地址，不停的发UDP包给PC2。</li>
<li>在LSW1的 Ehternet 0/0/1和Ethenet 0/0/3端口同时抓包 。</li>
<li>在PC2构造PC2到Win10的数据包。</li>
</ol>
<p>抓包结果如下：</p>
<p><strong>Ehternet 0/0/1:</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJY6S0.png" alt="tJY6S0.png"></p>
<p><strong>Ehternet 0/0/3:</strong></p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJYHl6.png" alt="tJYHl6.png"></p>
<p>由此可见，原本由PC2发给Win10的数据包，被PC1欺骗交换机后，交换机将报文转发给了PC1，这样PC1成功完成了MAC地址欺骗攻击。 </p>
</li>
</ol>
<h4 id="4-2-2MAC地址洪泛攻击"><a href="#4-2-2MAC地址洪泛攻击" class="headerlink" title="4.2.2MAC地址洪泛攻击"></a>4.2.2MAC地址洪泛攻击</h4><ol>
<li><p>1、漏洞原理<br>每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目的站的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。</p>
</li>
<li><p>攻击过程<br>以kali为攻击机，使用macof命令向网络中发送大量网络不存在的源mac地址，堵塞交换机的CAM表。 </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">lcx@kali</span>:<span class="string">~$apt-get install dsniff	#安装macof</span></span><br><span class="line"><span class="meta">lcx@kali</span>:<span class="string">~$ macof</span></span><br><span class="line"><span class="attr">de</span>:<span class="string">f0:1b:1c:6f:8e ba:8d:41:6:3d:7a 0.0.0.0.25215 &gt; 0.0.0.0.49125: S 475078686:475078686(0) win 512</span></span><br><span class="line"><span class="attr">ea</span>:<span class="string">38:be:33:e5:aa 4d:ce:29:60:3c:2f 0.0.0.0.39934 &gt; 0.0.0.0.238: S 1559529363:1559529363(0) win 512</span></span><br><span class="line"><span class="attr">b5</span>:<span class="string">ea:9a:4:2d:1c 3:33:5f:73:fa:d2 0.0.0.0.58068 &gt; 0.0.0.0.18986: S 697518561:697518561(0) win 512</span></span><br><span class="line"><span class="attr">31</span>:<span class="string">1f:6c:72:6f:80 7c:a8:df:55:99:25 0.0.0.0.29320 &gt; 0.0.0.0.56619: S 444895901:444895901(0) win 512</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">47:e7:37:ca:19 a9:73:33:66:61:2d 0.0.0.0.54528 &gt; 0.0.0.0.25861: S 993143653:993143653(0) win 512</span></span><br><span class="line"><span class="attr">3b</span>:<span class="string">75:bd:54:e7:55 4d:d1:68:4:5a:f0 0.0.0.0.28814 &gt; 0.0.0.0.35766: S 1430997091:1430997091(0) win 512</span></span><br><span class="line"><span class="attr">e7</span>:<span class="string">81:bb:79:4b:af df:ed:92:76:fe:79 0.0.0.0.59194 &gt; 0.0.0.0.18284: S 1586191808:1586191808(0) win 512</span></span><br><span class="line"><span class="attr">9b</span>:<span class="string">28:c8:4d:35:bb 4c:d2:d9:5b:3f:d0 0.0.0.0.46568 &gt; 0.0.0.0.15767: S 1249153469:1249153469(0) win 512</span></span><br><span class="line"><span class="attr">13</span>:<span class="string">6:d:71:2a:26 5f:82:7:70:d6:4c 0.0.0.0.41050 &gt; 0.0.0.0.34579: S 1375163656:1375163656(0) win 512</span></span><br><span class="line"><span class="attr">94</span>:<span class="string">cb:82:1f:a2:22 2e:4:26:69:88:cf 0.0.0.0.44712 &gt; 0.0.0.0.33754: S 1652107051:1652107051(0) win 512</span></span><br><span class="line"><span class="attr">3f</span>:<span class="string">7c:f7:1b:7:80 13:53:17:53:5c:c6 0.0.0.0.48520 &gt; 0.0.0.0.34351: S 585705839:585705839(0) win 512</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>此时在交换机查看CAM表。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[Huawei]display</span> <span class="string">mac-address</span></span><br><span class="line"><span class="attr">MAC</span> <span class="string">address table of slot 0:</span></span><br><span class="line"><span class="attr">-----------------------------------------------------------------</span></span><br><span class="line"><span class="attr">MAC</span> <span class="string">Address    VLAN/       PEVLAN CEVLAN Port            Type      LSP/LSR-ID  </span></span><br><span class="line">               <span class="meta">VSI/SI</span>                                              <span class="string">MAC-Tunnel  </span></span><br><span class="line"><span class="attr">-----------------------------------------------------------------</span></span><br><span class="line"><span class="meta">000c-290f-5de0</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">5489-984f-5035</span> <span class="string">1           -      -      Eth0/0/2        dynamic   0/-         </span></span><br><span class="line"><span class="meta">000c-2926-219e</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">f4ee-141d-58de</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">7c67-a298-eb12</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">000c-291b-7e0d</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">0050-56ef-dc6d</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">000c-296c-fc6e</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">feef-5464-ecad</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">eaaa-9473-1926</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">22a6-7027-c5f4</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">7019-0f73-c876</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">2eef-313b-f53f</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">5682-5743-45c8</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">7670-c168-505e</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">8aaa-ba4f-489d</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">a6a8-2d2a-73a7</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">120c-2355-b4b5</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">5833-be1f-0aa6</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">f438-0117-c0dc</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">dee0-7b40-1207</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">4af0-244c-25d9</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">f4d0-e92b-4fd5</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">2859-7003-3924</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">86ea-0825-52a2</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line"><span class="meta">a4fd-c13a-8c3c</span> <span class="string">1           -      -      Eth0/0/3        dynamic   0/-         </span></span><br><span class="line">  <span class="meta">----</span> <span class="string">More ----</span></span><br></pre></td></tr></table></figure>

<p>发现表中大量陌生MAC地址记录，同时根据端口绑定可以看到绑定来自Ethernet0/0/3，说明这个攻击来自这接口。 </p>
</li>
</ol>
<h2 id="5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP-VPN-或SSL-VPN。"><a href="#5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP-VPN-或SSL-VPN。" class="headerlink" title="5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP VPN 或SSL VPN。"></a>5、配置VPN。企业内网与外网之间可能有防火墙，也可能有NAT。从企业外部，用户不能直接访问企业内部。企业员工外出，或跨地区、跨国家企业都有跨越公众互联网，访问企业内部网络的需求。配置NAT某种VPN，比如L2TP VPN 或SSL VPN。</h2><p>采用了IPSec vpn技术、NAT等技术，搭建了一个简单的总公司与分公司的网络环境，实现总公司与分公司的正常访问 。</p>
<h3 id="5-1实验拓扑"><a href="#5-1实验拓扑" class="headerlink" title="5.1实验拓扑"></a>5.1实验拓扑</h3><p><img src="https://s1.ax1x.com/2020/06/01/tJt9pt.png" alt="tJt9pt.png"></p>
<h3 id="5-2实验目的"><a href="#5-2实验目的" class="headerlink" title="5.2实验目的"></a>5.2实验目的</h3><p>  FW1和FW2模拟企业边缘设备，分别在2台设备上配置NAT和IPsec vpn实现2边私网可以通过vpn互相通信 </p>
<h3 id="5-3实验步骤"><a href="#5-3实验步骤" class="headerlink" title="5.3实验步骤"></a>5.3实验步骤</h3><h4 id="5-3-1AR4配置"><a href="#5-3-1AR4配置" class="headerlink" title="5.3.1AR4配置"></a>5.3.1AR4配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR4]int</span> <span class="string">g0/0/0</span></span><br><span class="line"><span class="meta">[AR4-GigabitEthernet0/0/1]ip</span> <span class="string">add 100.0.0.2 30</span></span><br><span class="line"><span class="meta">[AR4-GigabitEthernet0/0/1]int</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="meta">[AR4-GigabitEthernet0/0/0]ip</span> <span class="string">add 200.0.0.2 30</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-FW1配置"><a href="#5-3-2-FW1配置" class="headerlink" title="5.3.2 FW1配置"></a>5.3.2 FW1配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[FW1]firewall</span> <span class="string">zone trust          //配置trust区域</span></span><br><span class="line"><span class="meta">[FW1-zone-trust]add</span> <span class="string">interface g0/0/0    //将接口加入trust区域</span></span><br><span class="line"><span class="attr">[FW1-zone-trust]quit</span></span><br><span class="line"><span class="meta">[FW1]firewall</span> <span class="string">zone untrust           //配置untrust区域</span></span><br><span class="line"><span class="meta">[FW1-zone-untrust]add</span> <span class="string">int g0/0/1          //将接口加入untrust区域</span></span><br><span class="line"><span class="attr">[FW1-zone-untrust]quit</span></span><br><span class="line"><span class="meta">[FW1]int</span> <span class="string">g0/0/0</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/0]ip</span> <span class="string">add 10.0.0.254 8</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/0]int</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/1]ip</span> <span class="string">add 100.0.0.1 30</span></span><br><span class="line"><span class="attr">[FW1-GigabitEthernet0/0/1]quit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置NAT</span></span><br><span class="line"><span class="meta">[FW1]ip</span> <span class="string">route-static 0.0.0.0 0.0.0.0 10.0.0.2   //配置默认路由上公网</span></span><br><span class="line"><span class="meta">[FW1]nat-policy</span> <span class="string">interzone trust untrust outbound </span></span><br><span class="line"><span class="attr">//进入trust到untrust区域out方向的策略视图</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1     //创建一个策略</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">source 10.0.0.0 0.255.255.255</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-1]policy</span> <span class="string">destination 192.168.1.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string">no-nat </span></span><br><span class="line"><span class="attr">//以上三条命令意思是不允许将源为10.0.0.0/8网段目标为192.168.1.0/24网段的数据包进行NAT</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[FW1-nat-policy-interzone-trust-untrust-outbound-1]quit</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">2  //创建策略2</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-2]action</span> <span class="string">source-nat</span></span><br><span class="line"><span class="attr">//允许对源IP进行NAT</span></span><br><span class="line"><span class="meta">[FW1-nat-policy-interzone-trust-untrust-outbound-2]easy-ip</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="attr">//对接口G0/0/1地址复用</span></span><br><span class="line"><span class="attr">[FW1-nat-policy-interzone-trust-untrust-outbound-2]quit</span></span><br><span class="line"><span class="attr">[FW1-nat-policy-interzone-trust-untrust-outbound]quit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置IPSec ×××</span></span><br><span class="line"><span class="attr">阶段一</span></span><br><span class="line"><span class="meta">[FW1]ike</span> <span class="string">proposal 1     //配置一个安全提议</span></span><br><span class="line"><span class="meta">[FW1-ike-proposal-1]authentication-method</span> <span class="string">pre-share   //配置IKE认证方式为预共享密钥</span></span><br><span class="line"><span class="meta">[FW-ike-proposal-1]authentication-algorithm</span> <span class="string">sha1   //配置IKE认证算法为sha1</span></span><br><span class="line"><span class="meta">[FW1-ike-proposal-1]integrity-algorithm</span> <span class="string">aes-xcbc-96  //配置IKE完整性算法</span></span><br><span class="line"><span class="meta">[FW1-ike-proposal-1]dh</span> <span class="string">group2  //配置IKE密钥协商DH组</span></span><br><span class="line"><span class="attr">[FW1-ike-proposal-1]quit</span></span><br><span class="line"><span class="meta">[FW]ike</span> <span class="string">peer FW2             //创建一个IKE对等体名字为FW2</span></span><br><span class="line"><span class="meta">[FW1-ike-peer-usg-2]pre-shared-key</span> <span class="string">123.abc    //配置预共享密钥</span></span><br><span class="line"><span class="meta">[FW1-ike-peer-usg-2]remote-address</span> <span class="string">200.0.0.1  //配置对等体IP地址</span></span><br><span class="line"><span class="meta">[FW1-ike-peer-usg-2]ike-proposal</span> <span class="string">1       //调用ike安全提议</span></span><br><span class="line"><span class="attr">[FW1-ike-peer-usg-2]quit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">阶段二</span></span><br><span class="line"><span class="meta">[FW1]ipsec</span> <span class="string">proposal test        //配置一个ipsec安全提议</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]encapsulation-mode</span> <span class="string">tunnel    //封装方式采用隧道</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]transform</span> <span class="string">esp    //配置IPSEC安全协议为ESP</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]esp</span> <span class="string">encryption-algorithm aes   //配置ESP协议加密算法为aes</span></span><br><span class="line"><span class="meta">[FW1-ipsec-proposal-test]esp</span> <span class="string">authentication-algorithm sha1  //配置ESP协议认证算法</span></span><br><span class="line"><span class="attr">[FW1-ipsec-proposal-test]quit</span></span><br><span class="line"><span class="meta">[FW1]acl</span> <span class="string">3000         //创建一个ACL定义感兴趣流</span></span><br><span class="line"><span class="meta">[FW1-acl-adv-3000]rule</span> <span class="string">permit ip source 10.0.0.0 0.255.255.255 destination 192.168.1.0 0.0.0.255</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[FW1]ipsec</span> <span class="string">policy map 1 isakmp    //创建一个安全策略，名称为map</span></span><br><span class="line"><span class="meta">[FW1-ipsec-policy-isakmp-map-1]ike-peer</span> <span class="string">FW2    //调用ike对等体</span></span><br><span class="line"><span class="meta">[FW1-ipsec-policy-isakmp-map-1]proposal</span> <span class="string">test     //调用IPsec安全提议</span></span><br><span class="line"><span class="meta">[FW1-ipsec-policy-isakmp-map-1]security</span> <span class="string">acl 3000   //配置感兴趣流</span></span><br><span class="line"><span class="attr">[FW1-ipsec-policy-isakmp-map-1]quit</span></span><br><span class="line"><span class="meta">[FW1]int</span> <span class="string">g0/0/1</span></span><br><span class="line"><span class="meta">[FW1-GigabitEthernet0/0/1]ipsec</span> <span class="string">policy map     //在外网口上调用安全策略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#区域间策略配置</span></span><br><span class="line"><span class="meta">[FW1]policy</span> <span class="string">interzone trust untrust outbound .</span></span><br><span class="line"><span class="attr">//进入trust到untrust区域out方向策略视图</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-outbound]policy</span> <span class="string">1    //创建策略</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-outbound-1]action</span> <span class="string">permit  </span></span><br><span class="line"><span class="meta">//允许trust区域所有主机访问untrust区域</span> <span class="string"></span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-outbound-1]quit</span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-outbound]quit</span></span><br><span class="line"><span class="meta">[FW1]policy</span> <span class="string">interzone trust untrust inbound </span></span><br><span class="line"><span class="attr">//进入trust区域到untrust区域的in方向策略视图</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound]policy</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound-1]policy</span> <span class="string">source 192.168.1.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound-1]policy</span> <span class="string">destination 10.0.0.0 0.255.255.255</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-trust-untrust-inbound-1]action</span> <span class="string">permit </span></span><br><span class="line"><span class="attr">//以上命令为允许数据包源地址为192.168.1.0/24网段和目标地址为10.0.0.0/8网段的流量过</span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-inbound-1]quit</span></span><br><span class="line"><span class="attr">[FW1-policy-interzone-trust-untrust-inbound]quit</span></span><br><span class="line"><span class="meta">[FW1]policy</span> <span class="string">interzone local untrust inbound</span></span><br><span class="line"><span class="attr">//进入local区域到untrust区域的in方向策略视图</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound]policy</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound-1]policy</span> <span class="string">source 200.0.0.1 0</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound-1]policy</span> <span class="string">destination 100.0.0.1 0</span></span><br><span class="line"><span class="meta">[FW1-policy-interzone-local-untrust-inbound-1]action</span> <span class="string">permit </span></span><br><span class="line"><span class="attr">//允许源地址是200.0.0.1目标地址是100.0.0.1的数据包访问</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-3FW2配置"><a href="#5-3-3FW2配置" class="headerlink" title="5.3.3FW2配置"></a>5.3.3FW2配置</h4><p> <strong>FW2配置和FW1相同，只需调整源IP和目标IP即可</strong>。 </p>
<h4 id="5-3-4测试"><a href="#5-3-4测试" class="headerlink" title="5.3.4测试"></a>5.3.4测试</h4><p>总公司PC Ping 分公司PC 结果如下：ping</p>
<p><img src="https://s1.ax1x.com/2020/06/01/tJtthR.png" alt="tJtthR.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>网络安全实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工程课程设计</title>
    <url>/2020/06/17/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="一、课程设计的目的及任务"><a href="#一、课程设计的目的及任务" class="headerlink" title="一、课程设计的目的及任务"></a>一、课程设计的目的及任务</h1><p>网络工程课程设计是一门综合性实践课程，其包括网络工程设计和网络管理与维护的实践内容，其目的是：使学生在学习网络工程和网络管理的基础上，学习并掌握企业网及互联网工程设计、实施、管理和维护的基本知识和方法，培养学生综合运用所学的专业基础理论、基本技能和专业知识分析问题和解决工程设计问题的能力，培养学生调查研究，查阅技术文献、资料、手册，进行程序设计及编写技术文件的基本能力。</p><a id="more"></a>
<h1 id="二、课程设计的基本要求"><a href="#二、课程设计的基本要求" class="headerlink" title="二、课程设计的基本要求"></a>二、课程设计的基本要求</h1><p>要求学生在教师指导下学生独立完成设计任务，通过课程设计能够掌握网络工程和网络管理及维护的基本方法；熟悉二层交换机、三层交换机、路由器、防火墙的使用；熟悉STP（Spanning Tree Protocol）的配置、交换机端口聚合、VLAN设置、跨交换机VLAN的建立与管理、二层交换机管理地址设置、三层交换机虚接口设置、配置静态路由、配置默认路由、特定主机路由、RIP路由协议配置、OSPF路由协议配置；巩固和加深对理论课中知识的理解，综合运用所学知识完成一个小型企业网系统的设计。此外，在Windows或Linux安装基本网络服务，诸如Web、FTP、E-mail、DNS、DHCP、Telnet、AAA服务。能够通过SNMP协议对建立的网络进行管理。熟悉ASN.1编码规则；掌握在网管设备上配置SNMP Agent；SNMP协议工作原理验证与分析；RMON原理与配置；通过网管软件查询、设置MIB对象；配置Windows SNMP服务，通过Windows SNMP服务查询、设置Windows中MIB对象，用网络管理软件管理网络。</p>
<p><strong>实验部分要求：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VLAN设置</span><br><span class="line">跨交换机VLAN设置</span><br><span class="line">交换机端口聚合</span><br><span class="line">STP（Spanning Tree Protocol）的配置</span><br><span class="line">交换机端口聚合</span><br><span class="line">三层交换机虚接口设置</span><br><span class="line">配置静态路由、默认路由、特定主机路由</span><br><span class="line">配置动态RIP</span><br><span class="line">配置动态OSPF</span><br><span class="line">配置DHCP中继代理</span><br><span class="line">配置ACL、NAT</span><br><span class="line">配置WiFi网络</span><br><span class="line">配置防火墙</span><br><span class="line">配置Web、FTP、E-mail、DNS、Telnet、DHCP服务器</span><br><span class="line">配置AAA服务器</span><br><span class="line">配置SNMP Agent</span><br><span class="line">查询、设置MIB对象</span><br><span class="line">SNMP协议工作原理验证与分析</span><br><span class="line">RMON原理与配置</span><br><span class="line">配置Windows SNMP服务</span><br><span class="line">查询、设置Windows中MIB对象</span><br><span class="line">用网络管理软件管理网络</span><br></pre></td></tr></table></figure>

<h1 id="三、实验拓扑设计"><a href="#三、实验拓扑设计" class="headerlink" title="三、实验拓扑设计"></a>三、实验拓扑设计</h1><h2 id="3-1设计思路"><a href="#3-1设计思路" class="headerlink" title="3.1设计思路"></a>3.1设计思路</h2><p>对于小型企业系统设计，以防火墙为切入点，防火墙将网络划分为三个区域：Untrust、DMZ、</p>
<p>Trust。</p>
<p><strong>untrust(不信任域):</strong>低级安全区域，安全优先级为5通常用来定义Internet等不安全的网</p>
<p>络，用于网络入口线的接入。</p>
<p><strong>dmz(隔离区):</strong>中级安全区域，安全优先级为50通常用来定义内部服务器所在网络作用是把WEB,E-</p>
<p>mail,等允许外部访问的服务器单独接在该区端口，使整个需要保护的内部网络接在信任区端口</p>
<p>后，不允许任何访问，实现内外网分离，达到用户需求。DMZ可以理解为一个不同于外网或内网</p>
<p>的特殊网络区域，DMZ内通常放置一些不含机密信息的公用服务器，比如Web、Mail、FTP等。</p>
<p>这样来自外网的访问者可以访问DMZ中的服务，但不可能接触到存放在内网中的公司机密或私人</p>
<p>信息等，即使DMZ中服务器受到破坏，也不会对内网中的机密信息造成影响。</p>
<p><strong>trust(信任域):</strong>高级级安全区域，安全优先级为85通常用来定义内部用户所在的网络，也可以理</p>
<p>解为应该是防护最严密的地区。</p>
<p>将企业的入口路由器放置防护墙的Untrust区域中，并在路由器上进行SNMP配置，方便进行管</p>
<p>理。在DMZ区域，放置企业内网服务器，存放的服务器有FTP服务器、WEB服务器、VPN服务</p>
<p>器。其中除了FTP服务器是在ensp中实现的外，其他服务均在linux虚拟机中实现，通过云连接至</p>
<p>linux服务器。linux服务器中又配置了SSH（安全外壳协议）服务，可供管理员通过SSH远程登陆</p>
<p>服务器进行修改、配置等操作。在Trust区域中，针对企业内部不同的部门 划分出多个模块 首先</p>
<p>是IP地址的使用，针对内网多个设备的情况下使用企业私网地址，一是可以有效减少对IP地址的</p>
<p>资金投入，二是针对部门能够有较为合理的分配模式和规划方案。其次，对于企业整体而言，内</p>
<p>部网络的相互通信是保证企业工作效率的首要条件和要求，针对各类部门工作性质的不同，企业</p>
<p>中不同子网的通信能力也有所区别。 所以，我们在中间核心部门中配置了DHCP服务来保证员工</p>
<p>使用每一台设备拥有一个独立的私网IP，并采用OSPF协议使得这些设备能够进行相互通信，确保</p>
<p>员工即使跨部门工作也不会有太多的麻烦。对于企业内部的机密部门，我们使用了更加可靠的方</p>
<p>式来让其中的员工和设备进行工作，为保证网络供应稳定性，在拓扑中设计了冗余链路，从而出</p>
<p>现了环路状况，为解环路所产生的广播风暴问题，在相应得到交换机上配置STP（baiSpanning </p>
<p>Tree Protocol 生成树协议），因此，这一部分是无法和企业内部的其他部门进行直接通信的。最</p>
<p>后考虑到企业文化，针对使用移动端工作的员工，内部网络中同样配置了WLAN，使得企业的工</p>
<p>作形式不完全局限于传统的设备。</p>
<h2 id="3-2拓扑图"><a href="#3-2拓扑图" class="headerlink" title="3.2拓扑图"></a>3.2拓扑图</h2><p><img src="https://i.loli.net/2020/06/17/MJadei3sjVrgFvu.png" alt="image-20200617220633273"></p>
<h1 id="四、实验步骤、配置及测试"><a href="#四、实验步骤、配置及测试" class="headerlink" title="四、实验步骤、配置及测试"></a>四、实验步骤、配置及测试</h1><h2 id="4-1Trust区域"><a href="#4-1Trust区域" class="headerlink" title="4.1Trust区域"></a>4.1Trust区域</h2><h3 id="4-1-1-WLAN"><a href="#4-1-1-WLAN" class="headerlink" title="4.1.1 WLAN"></a>4.1.1 WLAN</h3><p>WLAN部分由一个AC，一个核心交换机及数个AP构成。其中，在核心交换机上还额外配置了动态</p>
<p>dhcp，ospf,nat等配置，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AC:</span><br><span class="line">[AC6005]int Vlanif 1</span><br><span class="line">[AC6005-Vlanif1]ip ad 10.1.15.1 24</span><br><span class="line">[AC6005]capwap source interface Vlanif 1</span><br><span class="line">[AC6005]wlan</span><br><span class="line">[AC6005-wlan-view]ap auth-mode no-auth</span><br><span class="line">[AC6005-wlan-view]ssid-profile name ssid</span><br><span class="line">[AC6005-wlan-prof-ssid]ssid huawei </span><br><span class="line">[AC6005-wlan-view]vap-profile name vap</span><br><span class="line">[AC6005-wlan-prof-vap]service-vlan vlan 100</span><br><span class="line">[AC6005-wlan-prof-vap]ssid-profile ssid</span><br><span class="line">[AC6005-wlan-view]rrm-profile name default</span><br><span class="line">[AC6005-wlan-prof-default]calibrate auto-txpower-select disable</span><br><span class="line">[AC6005-wlan-view]ap-group name default</span><br><span class="line">[AC6005-wlan-ap-group-default]radio 0</span><br><span class="line">[AC6005-wlan-group-default]vap-profile vap wlan 1</span><br><span class="line"></span><br><span class="line">LSW9:</span><br><span class="line">[S1]vlan 30</span><br><span class="line">[S1]vlan 300</span><br><span class="line">[S1]DHCP enable</span><br><span class="line">[S1]int g0/0/1</span><br><span class="line">[S1-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/1]port trunk allow-pass vlan 300 30</span><br><span class="line">[S1]int g0/0/2</span><br><span class="line">[S1-GigabitEthernet0/0/2]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/2]port trunk allow-pass vlan 300</span><br><span class="line">[S1]int g0/0/3</span><br><span class="line">[S1-GigabitEthernet0/0/3]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/3]port trunk allow-pass vlan 300</span><br><span class="line">[S1]int g0/0/4</span><br><span class="line">[S1-GigabitEthernet0/0/4]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet0/0/4]port trunk allow-pass vlan 300</span><br><span class="line">[S1]int Vlanif 300</span><br><span class="line">[S1-Vlanif300]ip ad 10.1.30.254 24</span><br><span class="line">[S1-Vlanif300]dhcp select interface</span><br><span class="line">[S1]int Vlanif 30</span><br><span class="line">[S1-Vlanif30]ip ad 10.1.3.10 24</span><br><span class="line">[S1-Vlanif30]dhcp select interface</span><br><span class="line">[S1]int Vlanif 1</span><br><span class="line">[S1-Vlanif1]ip ad 10.1.15.254 24</span><br><span class="line">[S1-Vlanif1]dhcp select interface</span><br><span class="line">[S1]ospf 1</span><br><span class="line">[S1-ospf-1]area 0</span><br><span class="line">[S1-ospf-1-area-0.0.0.0]net 10.1.3.0 0.0.0.255</span><br><span class="line">[S1-ospf-1-area-0.0.0.0]net 10.1.30.0 0.0.0.255</span><br></pre></td></tr></table></figure>



<h3 id="4-1-2-VLAN-动态DHCP-OSPF综合配置"><a href="#4-1-2-VLAN-动态DHCP-OSPF综合配置" class="headerlink" title="4.1.2 VLAN+动态DHCP+OSPF综合配置"></a>4.1.2 VLAN+动态DHCP+OSPF综合配置</h3><p>以LSW1设备所在区域为例，其余相同配置区域均与该区域类似，故后续不再赘述：</p>
<p>首先配置VLAN，配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]Vlan batch 40 401 402</span><br><span class="line">[Huawei]int vlanif 40</span><br><span class="line">[Huawei-Vlanif40]ip address 10.1.4.10 24</span><br><span class="line">[Huawei]int vlan 401</span><br><span class="line">[Huawei-Vlanif401]ip address 10.1.41.1 24</span><br><span class="line">[Huawei]int vlan 402</span><br><span class="line">[Huawei-Vlanif402]ip address 10.1.42.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port trunk allow-pass vlan 40 401 402</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port trunk allow-pass vlan 40 401 402</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type hybrid</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port hybrid pvid vlan 40</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port hybrid untagged vlan 40 401 402</span><br></pre></td></tr></table></figure>

<p>划分地址池，配置DHCP，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]ip pool 401</span><br><span class="line">[Huawei-ip-pool-401]net 10.1.41.0 mask 255.255.255.0</span><br><span class="line">[Huawei-ip-pool-401]gateway-list 10.1.41.1</span><br><span class="line">[Huawei-ip-pool-401]dns-list 8.8.8.8</span><br><span class="line">[Huawei]ip pool 402</span><br><span class="line">[Huawei-ip-pool-402]net 10.1.42.0 mask 255.255.255.0</span><br><span class="line">[Huawei-ip-pool-402]gateway-list 10.1.42.1</span><br><span class="line">[Huawei-ip-pool-402]dns-list 8.8.8.8</span><br><span class="line">[Huawei-Vlanif401]Dhcp select interface</span><br><span class="line">[Huawei-Vlanif402]Dhcp select interface</span><br></pre></td></tr></table></figure>

<p>最后配置ospf,配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.41.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.42.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.0.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<h3 id="4-1-3-STP"><a href="#4-1-3-STP" class="headerlink" title="4.1.3 STP"></a>4.1.3 STP</h3><p>Stp配置命令以LSW11为例，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]stp enable</span><br><span class="line">[Huawei]stp mode stp</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br></pre></td></tr></table></figure>

<p>设置LSW11为主root结点，命令为</p>
<p> <code>[Huawei]stp root primary</code> </p>
<p>设置LSW7 为备份root设备，命令为</p>
<p><code>[Huawei]stp root secondary</code> </p>
<p>查看各设备的stp生成树情况，命令为：<code>display stp brief</code></p>
<p>各设备的stp协议树情况如下：</p>
<ol>
<li>LSW11：</li>
</ol>
<p><img src="https://i.loli.net/2020/06/18/TypJ2Edg5oMZkKe.png" alt="image-20200617164302532"></p>
<p>LSW7：</p>
<p><img src="https://i.loli.net/2020/06/18/djis7S6U52A4k3V.png" alt="image-20200617164446769"></p>
<p>LSW12:</p>
<p><img src="https://i.loli.net/2020/06/18/1k5tzXWjI2ohqdU.png" alt="image-20200617164708417"></p>
<p>LSW14:</p>
<p><img src="https://i.loli.net/2020/06/18/g3SCahTpGufi1UE.png" alt="image-20200617164721376"></p>
<p>从上面的各交换机的端口状态可以看出stp设置成功。</p>
<h3 id="4-1-4-链路聚合"><a href="#4-1-4-链路聚合" class="headerlink" title="4.1.4 链路聚合"></a>4.1.4 链路聚合</h3><p>链路聚合配置命令，以LSW21为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]int Eth-Trunk 1</span><br><span class="line">[Huawei-Eth-Trunk1]bpdu enable </span><br><span class="line">[Huawei-Eth-Trunk1]mode lacp-static </span><br><span class="line">[Huawei-Eth-Trunk1]q</span><br><span class="line">[Huawei-Eth-Trunk1]port link-type trunk</span><br><span class="line">[Huawei-Eth-Trunk1]port trunk al	</span><br><span class="line">[Huawei-Eth-Trunk1]port trunk allow-pass vlan 70</span><br><span class="line">[Huawei-Eth-Trunk1]quit</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]eth-trunk 1</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]q</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]eth-trunk 1</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]q</span><br><span class="line">[Huawei]int vlanif 70</span><br><span class="line">[Huawei-Vlanif70]ip address 10.1.7.2 24</span><br></pre></td></tr></table></figure>

<p>配置结果展示（LSW22ip为10.1.7.3/24）</p>
<p><img src="https://i.loli.net/2020/06/18/fuhrz5aXW6l4UkK.png" alt="image-20200617163215700"></p>
<p><img src="https://i.loli.net/2020/06/18/UaGgh6zsLrFdBZ7.png" alt="image-20200617163240930"></p>
<p>ping测试：</p>
<p><img src="https://i.loli.net/2020/06/18/BIDbj7vF2mtXOkr.png" alt="image-20200617163321995"></p>
<h3 id="4-1-5-核心路由器配置（AR2）"><a href="#4-1-5-核心路由器配置（AR2）" class="headerlink" title="4.1.5 核心路由器配置（AR2）"></a>4.1.5 核心路由器配置（AR2）</h3><p>首先给该路由器中增加了额外接口，如下图所示：<img src="https://i.loli.net/2020/06/18/TypJ2Edg5oMZkKe.png" alt="image-20200618082032153"></p>
<p>对于AR2的配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Huawei]int GigabitEthernet 1/0/0</span><br><span class="line">[Huawei-GigabitEthernet1/0/0]ip address 10.1.3.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 10.1.4.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 10.1.5.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.10.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 2/0/0</span><br><span class="line">[Huawei-GigabitEthernet2/0/0]ip address 192.168.15.1 24</span><br><span class="line">[Huawei]int GigabitEthernet 4/0/0</span><br><span class="line">[Huawei-GigabitEthernet4/0/0]ip address 192.168.100.1 24</span><br><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.5.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.4.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 10.1.3.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 192.168.10.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]Net 192.168.100.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">[Huawei]nat address-group 1 192.168.10.10 192.168.10.30</span><br><span class="line">[Huawei]acl 2001</span><br><span class="line">[Huawei-acl-basic-2001]rule 5 permit <span class="built_in">source</span> 10.1.0.0 0.0.255.255</span><br><span class="line">[Huawei]int GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]nat outbound 2001 address-group 1 no-pat</span><br><span class="line">[Huawei]telnet server <span class="built_in">enable</span> </span><br><span class="line">[Huawei]user-interface vty 0 4</span><br><span class="line">[Huawei-ui-vty0-4]authentication-mode password</span><br><span class="line">Please configure the login password (maximum length 16):huawei123</span><br><span class="line">[Huawei-ui-vty0-4]user privilege level 3</span><br></pre></td></tr></table></figure>

<h3 id="4-1-6-telnet"><a href="#4-1-6-telnet" class="headerlink" title="4.1.6 telnet"></a>4.1.6 telnet</h3><p>首先配置AR1，配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]int GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.15.2 24</span><br></pre></td></tr></table></figure>

<p>由于在核心交换机AR2已经配置了telnet，这里直接展示操作。</p>
<p><img src="https://i.loli.net/2020/06/18/neIwyORTNHx5p4Y.png" alt></p>
<h3 id="4-1-7-防火墙配置"><a href="#4-1-7-防火墙配置" class="headerlink" title="4.1.7 防火墙配置"></a>4.1.7 防火墙配置</h3><p>配置命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SRG]firewall zone trust</span><br><span class="line">[SRG-zone-trust]add int g0/0/1 (g0/0/0端口默认为Trust区域)</span><br><span class="line">[SRG]firewall zone untrust</span><br><span class="line">[SRG-zone-untrust]add int g0/0/2</span><br><span class="line">[SRG]firewall zone dmz</span><br><span class="line">[SRG-zone-dmz]add int g0/0/3</span><br><span class="line">[SRG-zone-dmz]add int g0/0/4</span><br><span class="line"></span><br><span class="line">[SRG]int GigabitEthernet0/0/1</span><br><span class="line">[SRG-GigabitEthernet0/0/1]ip address 192.168.10.100 24</span><br><span class="line">[SRG]int GigabitEthernet0/0/2</span><br><span class="line">[SRG-GigabitEthernet0/0/2]ip address 192.168.40.1 24</span><br><span class="line">[SRG]int GigabitEthernet0/0/3</span><br><span class="line">[SRG-GigabitEthernet0/0/3]ip address 192.168.30.1 24</span><br><span class="line">[SRG]int GigabitEthernet0/0/4</span><br><span class="line">[SRG-GigabitEthernet0/0/3]ip address 192.168.20.1 24</span><br><span class="line"></span><br><span class="line">[SRG]firewall packet-filter default permit interzone trust dmz direction outbound</span><br><span class="line">[SRG]policy interzone trust dmz outbound</span><br><span class="line">[SRG-policy-interzone-trust-dmz-outbound]policy 1</span><br><span class="line">[SRG-policy-interzone-trust-dmz-outbound-1]policy source 192.168.10.0 mask 255.255.255.0</span><br><span class="line">[SRG-policy-interzone-trust-dmz-outbound-1]action permit</span><br><span class="line"></span><br><span class="line">[SRG]ospf 1</span><br><span class="line">[SRG-ospf-1]area 0</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.10.0 0.0.0.255</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.20.0 0.0.0.255</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.30.0 0.0.0.255</span><br><span class="line">[SRG-ospf-1-area-0.0.0.0]Net 192.168.40.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<h2 id="4-2DMZ区域"><a href="#4-2DMZ区域" class="headerlink" title="4.2DMZ区域"></a>4.2DMZ区域</h2><h3 id="4-2-1FTP服务器"><a href="#4-2-1FTP服务器" class="headerlink" title="4.2.1FTP服务器"></a>4.2.1FTP服务器</h3><p>由于在本机上使用ftp+内网穿透技术实现的网络硬盘共享服务，在此直接将ftp服务提供给ensp。</p>
<p>服务为win10提供，服务端配置：</p>
<p><img src="https://i.loli.net/2020/06/16/eYyRwafv29LzCFJ.png" alt="image-20200616155309043"></p>
<p>ensp中连接如下：</p>
<p><img src="https://i.loli.net/2020/06/16/7bMz1ApBlfdSEHc.png" alt="image-20200616155420223"></p>
<h3 id="4-2-2linux服务器"><a href="#4-2-2linux服务器" class="headerlink" title="4.2.2linux服务器"></a>4.2.2linux服务器</h3><h4 id="4-2-2-1准备工作"><a href="#4-2-2-1准备工作" class="headerlink" title="4.2.2.1准备工作"></a>4.2.2.1准备工作</h4><h5 id="1-在虚拟机中安装老师提供的ubuntu-20-04-mate系统当作DMZ去的服务器。"><a href="#1-在虚拟机中安装老师提供的ubuntu-20-04-mate系统当作DMZ去的服务器。" class="headerlink" title="1. 在虚拟机中安装老师提供的ubuntu-20.04-mate系统当作DMZ去的服务器。"></a>1. 在虚拟机中安装老师提供的ubuntu-20.04-mate系统当作DMZ去的服务器。</h5><h5 id="2-换源"><a href="#2-换源" class="headerlink" title="2.换源"></a>2.换源</h5><p>在设置中选择系统设置，找到Software Updater，点击进入，再点击Settings按钮，</p>
<p><img src="https://i.loli.net/2020/06/16/T2oMNG86Xr5wILW.png" alt="image-20200616092916772"></p>
<p><img src="https://i.loli.net/2020/06/16/8OU6e1VxjuyDHm7.png" alt="image-20200616093031282"></p>
<p><img src="https://i.loli.net/2020/06/16/qAn1YptUaRHFrLP.png" alt="image-20200616093227130"></p>
<p><img src="https://i.loli.net/2020/06/16/Y4IUR98sBaWo5Su.png" alt="image-20200616093307249"></p>
<p>选择Reload重新加载源。</p>
<p>在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>更新源和软件。</p>
<h5 id="3-连通性"><a href="#3-连通性" class="headerlink" title="3.连通性"></a>3.连通性</h5><p><strong>关闭防火墙，测试网路连通性。</strong></p>
<p>关闭命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span> //关闭防火墙</span><br><span class="line">sudo ufw status  //查看防护墙状态</span><br></pre></td></tr></table></figure>

<p>win7也需要关闭防护墙。</p>
<p>测试连通性：</p>
<p><img src="https://i.loli.net/2020/06/16/DbQxdyCL5vPEltU.png" alt="image-20200616094011730"></p>
<h5 id="4-搭建web服务器"><a href="#4-搭建web服务器" class="headerlink" title="4.搭建web服务器"></a>4.搭建web服务器</h5><p><strong>安装nginx服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p><strong>调整防火墙（也可以将防火墙直接关闭，在这里推荐将防火墙开启，对相应服务进行放行，配置如下）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw app list</span><br><span class="line">  CUPS</span><br><span class="line">  Nginx Full</span><br><span class="line">  Nginx HTTP</span><br><span class="line">  Nginx HTTPS</span><br></pre></td></tr></table></figure>

<p>正如你所看到的，Nginx有三个配置文件可用：Nginx Full、Nginx HTTP、Nginx HTTPS</p>
<p>Nginx Full ：此配置文件打开端口80（正常，未加密的网络流量）和端口443（TLS / SSL加密流量）</p>
<p>Nginx HTTP ：此配置文件仅打开端口80（正常，未加密的网络流量）</p>
<p>Nginx HTTPS ：此配置文件仅打开端口443（TLS / SSL加密流量）</p>
<p>输入以下命令以查看防火墙状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p>可以看到允许通过的服务有哪些：</p>
<p><img src="https://i.loli.net/2020/06/16/NhQq761kTlcia8e.png" alt="image-20200616154638847"></p>
<p>Ubuntu 20.04上的Nginx默认启用了一个服务器模块，该模块被配置为在<code>/var/www/html</code>目录下提供文档。将写好的项目复制至/var/www/html目录下。</p>
<p><strong>测试：在浏览器中输入<a href="http://192.168.10.121" target="_blank" rel="noopener">http://192.168.10.121</a></strong></p>
<p><img src="https://i.loli.net/2020/06/16/3Ice8vWAhPpoCO2.png" alt="image-20200616154344810"></p>
<h5 id="5-搭建VPN服务器（PPTP）"><a href="#5-搭建VPN服务器（PPTP）" class="headerlink" title="5.搭建VPN服务器（PPTP）"></a>5.搭建VPN服务器（PPTP）</h5><h6 id="5-1安装PPTPD"><a href="#5-1安装PPTPD" class="headerlink" title="5.1安装PPTPD"></a>5.1安装PPTPD</h6><p>第一步当然是安装这个软件包了。（下面所有的代码，如果需要修改的，我会特别标记出来的，其他都表示可以直接复制）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/igebY2qfOFyJ81I.png" alt="image-20200617100516932"></p>
<h6 id="5-2编辑PPTPD-CONF文件"><a href="#5-2编辑PPTPD-CONF文件" class="headerlink" title="5.2编辑PPTPD.CONF文件"></a>5.2编辑PPTPD.CONF文件</h6><p>打开这个文件并进入编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/IXBjQ6aAMZSmh9t.png" alt="image-20200617102931169"></p>
<p>localip:表示PPTP服务地址及本机IP。</p>
<p>remoteip：当客户机通过pptp连接到vpn后所能拿到的ip地址范围，默认从第一个开始分配给客户</p>
<h6 id="5-3修改CHAP-SECRETS文件，添加可以登录的用户"><a href="#5-3修改CHAP-SECRETS文件，添加可以登录的用户" class="headerlink" title="5.3修改CHAP-SECRETS文件，添加可以登录的用户"></a>5.3修改CHAP-SECRETS文件，添加可以登录的用户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Noq3EBz6cGMklhQ.png" alt="image-20200617101228399"></p>
<p>client：连接用户名<br>server：连接的服务<br>secret：连接密码<br>IP addresses：可连接的IP，*表示所有</p>
<h6 id="5-4修改远程连接用户的DNS"><a href="#5-4修改远程连接用户的DNS" class="headerlink" title="5.4修改远程连接用户的DNS"></a>5.4修改远程连接用户的DNS</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/Gsk7SRaUxf6dnJX.png" alt="image-20200617101414509"></p>
<h6 id="5-5开启网络转发功能"><a href="#5-5开启网络转发功能" class="headerlink" title="5.5开启网络转发功能"></a>5.5开启网络转发功能</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctil.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/17/SEI5OkULVhHiyjJ.png" alt="image-20200617101751708"></p>
<p>去掉两行对应的注释，提供ipv4和ipv6的转发功能。</p>
<p>更新配置命令如下：</p>
<p><img src="https://i.loli.net/2020/06/17/MLXForGbRWD2CgK.png" alt="image-20200617102036260"></p>
<h6 id="5-6配置iptables"><a href="#5-6配置iptables" class="headerlink" title="5.6配置iptables"></a>5.6配置iptables</h6><p><strong>开启gre协议</strong></p>
<p>输入下面的指令，开启gre协议，并打开服务器47,1723号端口。</p>
<p>使用VPN需要开启gre协议，而gre协议需要使用服务器的47和1723号端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p gre -j ACCEPT </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 1723 -j ACCEPT   </span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 47 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>开启NAT转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.10.121/24 -o ens33 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>上面指令中ip要填写部署pptp步骤中第1.2步中设置的localip，也就是虚拟vpn的主机的ip。</p>
<p>ens33表示当前服务器的网卡，这里不同机器可能不一样，可以通过ifconfig指令进行查询，之后</p>
<p>修改成对应的设备名称即可。</p>
<p>POSTROUTING参数表示，指定当数据包离开服务器的时候，对数据包进行处理。</p>
<p>MASQUERADE这个参数的意思就是即将从服务器封包出去(-o)的那块网卡上的IP，由于实验室的</p>
<p>服务器是固定ip，所以这里修改成服务器的虚拟ip也是可以的。</p>
<p>通过上面的指令，iptables做了这样一件事情：将所有从服务器上传出的源地址为10.1.1.1-255之</p>
<p>中的ip数据包的源ip改成服务器的ip。如果不做这个操作，服务器通过VPN传回的数据包将不包</p>
<p>含服务器自己的源ip，所以远程访问主机的回复ip包会丢失。</p>
<h6 id="5-7重启PPTP服务并查看状态"><a href="#5-7重启PPTP服务并查看状态" class="headerlink" title="5.7重启PPTP服务并查看状态"></a>5.7重启PPTP服务并查看状态</h6><p><img src="https://i.loli.net/2020/06/17/2b8jyBToNMIUscR.png" alt="image-20200617103114973"></p>
<h6 id="5-8配置客户端，连接"><a href="#5-8配置客户端，连接" class="headerlink" title="5.8配置客户端，连接"></a>5.8配置客户端，连接</h6><p><img src="https://i.loli.net/2020/06/17/oij7bdWNUpSvr6g.png" alt="image-20200617110012250"></p>
<h6 id="5-9进行连接测试"><a href="#5-9进行连接测试" class="headerlink" title="5.9进行连接测试"></a>5.9进行连接测试</h6><p><img src="https://i.loli.net/2020/06/17/2l78AzI6rQqgkSM.jpg" alt="img"></p>
<p>连接成功之后查看一下获取到的IP地址</p>
<p><img src="https://i.loli.net/2020/06/17/Ka4FzQTliIydRk1.png" alt="image-20200617235356285"></p>
<h5 id="6-SSH（安全外壳协议）服务器"><a href="#6-SSH（安全外壳协议）服务器" class="headerlink" title="6.SSH（安全外壳协议）服务器"></a>6.SSH（安全外壳协议）服务器</h5><p> <strong>使用apt工具下载并安装openssh-server</strong></p>
<p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/RCn267brXeU4lEv.png" alt="image-20200616161058823"></p>
<p>等待安装结束即可。然后再次查看服务有没有启动，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://i.loli.net/2020/06/16/io7a8QJWSdN2kOj.png" alt="image-20200616161259612"></p>
<p>再次确认或者没有图中的结果，使用如下命令来启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh status</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/16/LwJMf76dZ4t8DyC.png" alt="image-20200616161426284"></p>
<p>ssh服务端已经开启，在xshell中进行远程登陆测试。</p>
<p><img src="https://i.loli.net/2020/06/16/8BZLinq6XrVH7QY.png" alt="image-20200616161545290"></p>
<p>在主机栏填入开启ssh服务端的主机ip，点击确定进入如下界面：</p>
<p><img src="https://i.loli.net/2020/06/16/kxpV1fbLr6HdZcm.png" alt="image-20200616161709692"></p>
<p>这是密钥和算法协商阶段：</p>
<p>客户请求连接-服务器将对应公钥、生成会话ID发给客户端、客户端生成会话密钥，并将会话密钥</p>
<p>与会话ID进行xor逻辑运算后的值，使用服务器公钥加密发送给服务器、服务器采用私钥解密</p>
<p>后，通过xor运算得到会话密钥-之后所有传输都会被会话密钥加密与解密。</p>
<p>点击接受并保存后，进入认证阶段：</p>
<p>password认证-输入用户名与密码，服务器验证是否合法。</p>
<p>publickey认证-数字签名认证，客户端发送用户名、公共密钥、公共密钥算法的publickey认证请</p>
<p>求给服务器端，服务器验证是否合法。使用ssh-keygen程序生成公钥 id_dsa.pub 和私钥 </p>
<p>id_dsa。</p>
<p><img src="https://i.loli.net/2020/06/16/7YbxIvFL9Jg8psr.png" alt="image-20200616161924769"></p>
<p><img src="https://i.loli.net/2020/06/16/4PrdZ6DmenCAfg8.png" alt="image-20200616161949478"></p>
<p>输入正确的用户名密码后，xshell界面如下：</p>
<p><img src="https://i.loli.net/2020/06/16/9rHSfgCceAbZLaT.png" alt="image-20200616162022133"></p>
<h2 id="4-3Untrust区域"><a href="#4-3Untrust区域" class="headerlink" title="4.3Untrust区域"></a>4.3Untrust区域</h2><h3 id="4-3-1-SNMP"><a href="#4-3-1-SNMP" class="headerlink" title="4.3.1 SNMP"></a>4.3.1 SNMP</h3><h4 id="4-3-1-1-ensp端"><a href="#4-3-1-1-ensp端" class="headerlink" title="4.3.1.1 ensp端"></a>4.3.1.1 ensp端</h4><p>在AR3处配置<strong>snmp-agent,</strong>设置读团体字为<strong>public</strong>，写团体字为<strong>private</strong>，配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Huawei]snmp  </span><br><span class="line">[Huawei]snmp-agent </span><br><span class="line">[Huawei]snmp-agent sys-info version v1 </span><br><span class="line">[Huawei]snmp-agent community <span class="built_in">read</span> public</span><br><span class="line">[Huawei]snmp-agent community write private</span><br><span class="line">[Huawei]snmp-agent sys-info contact this_is_a_test_string. </span><br><span class="line">[Huawei]int GigabitEthernet 0/0/2 </span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 192.168.56.10 24</span><br></pre></td></tr></table></figure>

<p>AR3配置完成后，将AR3与云连接，而云通过与Windows主机的Mib Browser连接从而实现设备</p>
<p>管理，云的相关配置如下：</p>
<p><img src="https://i.loli.net/2020/06/18/WDyibS2oMpT7qBh.png" alt="云设置"></p>
<h4 id="4-3-1-2-Windows端"><a href="#4-3-1-2-Windows端" class="headerlink" title="4.3.1.2 Windows端"></a>4.3.1.2 Windows端</h4><p>在Windows端打开Mib Browser，进行IP，SNMPv1相关配置。</p>
<p><img src="https://i.loli.net/2020/06/18/2bZDsCMcUwVlHdP.png" alt="配置"></p>
<p>如上图所示，配置读团体字为<strong>public</strong>，写团体字为<strong>private</strong>，与ensp中保持一致，然后连接，出</p>
<p>现下图界面，从图中可以看到，连接成功。</p>
<p><img src="https://i.loli.net/2020/06/18/PdvjVaQBgJfDMyU.png" alt="连接成功"></p>
<p>为了测试连接的正确性，这里进行了set测试，测试过程如下：</p>
<p><img src="https://i.loli.net/2020/06/18/cvUWfiwxVKg7CJz.png" alt="Set操作"></p>
<p>在发送set请求后，可以得到Mib Browser返回的Set响应，如下：</p>
<p><img src="https://i.loli.net/2020/06/18/syIhcSJEjL6nN4G.png" alt="Set响应"></p>
<p>然后我们打开ensp中，mib所管理的设备可以看到，set设置成功。</p>
<p><img src="https://i.loli.net/2020/06/18/MmzUascDEPCFv1W.png" alt="Set结果"></p>
<h4 id="4-3-1-3-SNMPv1报文分析"><a href="#4-3-1-3-SNMPv1报文分析" class="headerlink" title="4.3.1.3 SNMPv1报文分析"></a>4.3.1.3 SNMPv1报文分析</h4><ul>
<li><p>报文交互过程</p>
<p>SNMP 报文在管理站和代理之间传送。 </p>
<p>管理站主动发出 GetRequest、GetNextRequest 和 SetRequest 类型的报文，代理以 GetResponse 报文响应。 </p>
<p>代理则主动发出 Trap 报文给管理站，不需要应答。 </p>
<p>一般来说，管理站可连续发出多个请求报文，然后等待代理返回应答报文。如果在规定的时</p>
<p>间内收到应答，则按照请求标识进行配对。</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/06/18/KueRqPD7r3NIOyv.png" alt="image-20200617230804937"></p>
<p>报文解码分析</p>
<p>用ASN.l表示的变量必须转换为串行的字节流才能在网络中传输，转换用ASN.l描述的数据机读代</p>
<p>码的算法有多种，一般使用基本编码规则BER，BER在ISO 8825/X标准中进行了定义。</p>
<p>SNMP 的报文是用 BER 方式编码的 BER 编码后生成的结构为类型-长度-值三元组， 简称 </p>
<p>TLV（Type, Length, Value），TLV 每个域都是一系列八位组，T 字段表达数 据的类型信息，L 字</p>
<p>段是值的长度，V 字段包含实际的数据，值部分还可以递归地再编码为 TLV 结构，如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/18/qRjzYCBQXe4a7fS.png" alt="image-20200617231028312"></p>
<p>不同SNMP报文具有不同的PDU格式，接下来给出各PDU的格式，如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/18/6aceNMUOxVp54Eb.png" alt="image-20200617231051639"></p>
<ul>
<li>set </li>
</ul>
<p><img src="https://i.loli.net/2020/06/18/638eWfmHNg1CcG7.png" alt="img"></p>
<p>分析如下表：</p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>T  表示 SEQUENCE类型（即SNMP报文整体为SEQUENCE类型）</td>
</tr>
<tr>
<td>33</td>
<td>L  表示 后面总共有3*16+3= 51 个字节的内容</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V  int型长度为1 ，值为0。对应到SNMPv1中可知，这里是代表version为1</td>
</tr>
<tr>
<td>04 07 70 72 69 76 61 74 65</td>
<td>TLV : OCTETSTRING 7 priavte。对应写团体字private</td>
</tr>
<tr>
<td>A3 25</td>
<td>T L : PDU Type –set (PDU的 type为 Set(3), 38字节)</td>
</tr>
<tr>
<td>02 01 04</td>
<td>T L V：int型长度为1 ，值为4，代表Request id为 4</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error ststus 0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error index 0</td>
</tr>
<tr>
<td>30 1A</td>
<td>T L SEQUENCE 26字节 (代表Variable bindings )</td>
</tr>
<tr>
<td>30 18</td>
<td>T L SEQUENCE 24字节</td>
</tr>
<tr>
<td>06 08 2B 06 01 02 01 01 05 00</td>
<td>T L V：ObjectID 1.3.4.1.2.1.1.5.0</td>
</tr>
<tr>
<td>04 0C 53 4E 4D 50 5F 43 6F 6E 74 6F 72 6C</td>
<td>T L V : OCTET STRING SNMP_Contorl</td>
</tr>
</tbody></table>
<ul>
<li><p>Set—response</p>
<p><img src="https://i.loli.net/2020/06/18/PFB2OGcXAu79LQx.png" alt="image-20200618004937128"></p>
<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>T  表示 SEQUENCE类型（即SNMP报文整体为SEQUENCE类型）</td>
</tr>
<tr>
<td>33</td>
<td>L  表示 后面总共有3*16+3= 51 个字节的内容</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V  int型长度为1 ，值为0。对应到SNMPv1中可知，这里是代表version为1</td>
</tr>
<tr>
<td>04 07 70 72 69 76 61 74 65</td>
<td>TLV : OCTETSTRING 7 priavte。对应写团体字private</td>
</tr>
<tr>
<td>A2 25</td>
<td>T L : PDU Type –set-response (PDU的 type为 Set(2), 38字节)</td>
</tr>
<tr>
<td>02 01 04</td>
<td>T L V：int型长度为1 ，值为4，代表Request id为 4</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error ststus 0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>T L V：int型长度为1 ，值为0，代表Error index 0</td>
</tr>
<tr>
<td>30 1A</td>
<td>T L SEQUENCE 26字节 (代表Variable bindings )</td>
</tr>
<tr>
<td>30 18</td>
<td>T L SEQUENCE 24字节</td>
</tr>
<tr>
<td>06 08 2B 06 01 02 01 01 05 00</td>
<td>T L V：ObjectID 1.3.4.1.2.1.1.5.0</td>
</tr>
<tr>
<td>04 0C 53 4E 4D 50 5F 43 6F 6E 74 6F 72 6C</td>
<td>T L V : OCTET STRING SNMP_Contorl</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>通过这次课程设计使我充分的理解和运用了网络规划、配置与维护的相关知识，特别是对网络协</p>
<p>议的配置有了极深的了解，学会了综合性的看待问题与解决网络规划设计问题。</p>
<p>通过一周来的学习，我学到了不少的知识！学到了如何将课程中学到的零零散散的知识、协议汇</p>
<p>总起来，也深刻体会到网络拓扑设计和协议的合理配置对于一个网络是否完善、健壮起着决定性</p>
<p>作用。在学习的过程中有失败，也有困惑，有成功，也有喜悦。虽然只是课程设计，但我拿出了</p>
<p>自己的全部精力去对待，能学到知识固然值得骄傲，能认识到自己的过错和不足也是一件幸事，</p>
<p>我想这就是我学习这门课的最大感受吧。</p>
<p>由于本人精力和时间有限，本课程设计中或多或少会存在一些缺点，所设计的网络难免存在一些</p>
<p>不足，还恳请各位老师和同学给与批评和指正。</p>
<p>最后，感谢我那坚强且饱受VMare Workstation、ensp摧残的笔记本，感谢全力燃烧的CPU和近</p>
<p>乎拉满的内存。感谢高抬贵手。</p>
<hr>
<p><a href="https://www.bilibili.com/video/BV1Wa4y1Y7ET/" target="_blank" rel="noopener">附演示视频</a></p>
<p>==本次课设由彭晨希、丁磊、李松柏共同完成。==</p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>课程设计</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>网络管理与维护课后作业</title>
    <url>/2020/02/24/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p><strong>2.网络管理的对象有哪些？举例说明。</strong></p><p>网络管理对象典型地分为以下 2 类： </p><p>⑴ 网络上的结点设备。</p><p>如计算机网络中 的主机、网关、路由器、交换机、服务器、存储设备，提供电话业务的交换</p><p>机、提供移动电 话业务的移动交换机、提供卫星通信业务的转发器等</p><p>⑵ 网络中的软件、服务以及事件。</p><p>软件资源主要包括操作系统、应用软件和通信软件等。</p><a id="more"></a>






<p>服务是指结点设备或软件所提供服务的相关信息。</p>
<p>事件指网络中出现各种情况时发生的事件。</p>
<p>例：IP路由器</p>
<p>路由器是管理起来最直观的设备。其用途是提供不同网络之间 IP 数据报的转发。典型结构是</p>
<p>一个独立的、带有多个物理端口的设备，每个端口可以连接其他设备（通常是计算机或路由</p>
<p>器）。可管理的对象例如端口的状态（可用或不可用、设备是否连接、当前的速率等）， 端</p>
<p>口的 IP 地址和掩码，静态路由，路由协议及其参数等。还可以监控每个接口发送与接收 </p>
<p>的 IP 数据报数量等。</p>
<p><strong>5. ISO 网络管理的五大管理功能是什么？分别对每个功能进行简单的描述。</strong></p>
<p>ISO 网络管理的五大管理功能分别是<strong>性能管理</strong>、<strong>故障管理</strong>、<strong>计费管理</strong>、<strong>配置管理</strong>、<strong>安全管理</strong>。</p>
<ul>
<li><p><strong>性能管理：</strong></p>
<p>性能管理是采集、分析网络以及网络设备的性能数据，以便发现网络或网络设备的性能 </p>
<p>是否产生偏差或下降并进行矫正，同时统计网络运行状态信息，对网络的服务质量做出</p>
<p>评测、估计，为网络进一步规划与调整提供依据。性能管理的目的是维护网络服务质量</p>
<p>和网络运营效率。</p>
</li>
<li><p><strong>故障管理：</strong></p>
<p>故障管理是收集、过滤和归并网络事件，有效地发现、确认、记录和定位网络故障，分 </p>
<p>析故障原因并给出排错建议与排错工具，形成故障发现、故障告警、故障隔离、故障排</p>
<p>除和故障预防的一整套机制。</p>
</li>
<li><p><strong>计费管理：</strong></p>
<p>计费管理的作用是正确地计算和收取用户使用网络服务的费用，以及进行网络资源利用 </p>
<p>率的统计和网络的成本效益核算。</p>
</li>
<li><p><strong>配置管理：</strong></p>
<p>配置管理是最基本的网络管理功能，其作用是管理网络的建立、扩充和开通。由于网络 </p>
<p>设备来自多个厂商，因此管理信息定义和操作的一致性和互通性就成了一个非常复杂的问题。</p>
</li>
<li><p><strong>安全管理：</strong></p>
<p>安全管理的作用是提供信息的保密、认证和完整性保护机制，使网络中的服务、数据和 </p>
<p>系统免受侵扰和破坏。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络管理与维护</category>
      </categories>
      <tags>
        <tag>网络管理与维护</tag>
      </tags>
  </entry>
  <entry>
    <title>网络管理与维护大作业</title>
    <url>/2020/06/13/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1 id="一、SNMPv3工作原理"><a href="#一、SNMPv3工作原理" class="headerlink" title="一、SNMPv3工作原理"></a>一、SNMPv3工作原理</h1><h2 id="1-1-SNMP的组成"><a href="#1-1-SNMP的组成" class="headerlink" title="1.1 SNMP的组成"></a>1.1 SNMP的组成</h2><p>​        SNMP被设计为工作在TCP/IP协议族上，采用UDP进行数据传输。SNMP采用了Client/Server模型的特殊形式：代理/管理站模型。对网络的管理与维护是通过管理工作站与SNMP代理间的交互工作完成的。每个SNMP从代理负责回答SNMP管理工作站（主代理）关于MIB定义信息的各种查询。<br>简单来说，就是需要一个服务器程序（代理，agent）和一个客户机（管理器，manager）。而与直观上不同的是，SNMP的服务器端代表被管理的事物，而客户机端才是管理者。客户机从简单的命令行实用程序，如net-snmp提供的snmpwalk，到专门的管理软件、工作站都有。</p><a id="more"></a>
<h2 id="1-2-SNMP的组织结构"><a href="#1-2-SNMP的组织结构" class="headerlink" title="1.2 SNMP的组织结构"></a>1.2 SNMP的组织结构</h2><p>​        SNMP数据以一种标准化的层次结构进行布置，这种结构的大部分都留给将来扩充，而特定厂商添加的部分则被本地化以避免冲突。命名的层次结构由MIB（Management Information Base，管理信息库）组成，它是描述通过SNMP协议可访问的数据的结构化文本文件。MIB 包括了对特定数据变量的说明，数据变量被称为OID（Object Identifier，对象标识符）。</p>
<p>​        SNMP 层次结构非常像一个文件系统。不过，它是用点号（.）作为分隔符，每个节点被赋予了一个数字而不是名字。为了易于引用，还可以给节点赋予文字名称，但这种命名其实只是为了高层应用方面而已，而不是层次结构的一项功能。</p>
<h2 id="1-3-SNMP协议的一些操作"><a href="#1-3-SNMP协议的一些操作" class="headerlink" title="1.3 SNMP协议的一些操作"></a>1.3 SNMP协议的一些操作</h2><p>​        基本的SNMP协议操作只有4种：get（获取）、get_next（获取下一个）、set（设置）和trap（陷阱）。<br>get 和 set 是从节点读取数据和把数据写入节点的基本操作，节点以OID方式说明。<br>get-next 用于在MIB 层次结构上步进。<br>trap 是从服务器（代理程序）到客户机（管理器）的一个主动提供的异步通知，在出现特定的事情或状态时，它会报告。SNMP协议已经定义了若干标准的trap操作，例如“I have just come up”（刚启动），还有报告网络链路故障或已修复，路由或身份认证等的trap，这取决于agent程序的实现。</p>
<h2 id="1-4-SNMPv3和之前版本的区别"><a href="#1-4-SNMPv3和之前版本的区别" class="headerlink" title="1.4 SNMPv3和之前版本的区别"></a>1.4 SNMPv3和之前版本的区别</h2><p>​        SNMP v3 在前面的版本上增加了安全能力和远程配置能力，SNMPv3结构为消息安全和VACM（View-based Access Control Model）引入了USM（User-based Security Model）。这个结构支持同时使用不同的安全机制，接入控制，消息处理模型。SNMP v3 也引入使用SNMP SET命令动态配置 SNMP agent而不失MIB对象代表agent配置。</p>
<p><strong>USM（基于用户的安全模型）</strong></p>
<p>​        USM引入了用户名和组的概念，可以设置认证和加密功能。认证用于验证报文发送方的合法性，避免非法用户的访问；加密则是对NMS和Agent之间传输的报文进行加密，以免被窃听。通过有无认证和有无加密等功能组合，可以为NMS和Agent之间的通信提供更高的安全性。</p>
<p><strong>VACM（基于视图的访问控制模型）</strong></p>
<p>​        VACM技术定义了组、安全等级、上下文、MIB视图、访问策略五个元素，这些元素同时决定用户是否具有访问的权限，只有具有了访问权限的用户才能管理操作对象。在同一个SNMP实体上可以定义不同的组，组与MIB视图绑定，组内又可以定义多个用户。当使用某个用户名进行访问的时候，只能访问对应的MIB视图定义的对象。</p>
<p>有三个可能的安全级别: noAuthNoPriv, authNoPriv, 和 authPriv.</p>
<p>noAuthNoPriv 级别指明了没有认证或私密性被执行. </p>
<p>authNoPriv 级别指明了认证被执行但没有私密性被执行. </p>
<p>authPriv 级别指明了认证和私密性都被执行.</p>
<p>==auth—认证 支持MD5 or SHA;==</p>
<p>==priv—加密 支持DES or RSA;==</p>
<h1 id="二、设计思路"><a href="#二、设计思路" class="headerlink" title="二、设计思路"></a>二、设计思路</h1><p>​        由于Win10对MIB Browser兼容性不太好，故在VMware下建立win7虚拟机在win7环境下运行MIB Browser（客户端程序，manager），再在VMware下建立centos7虚拟机运行net-snmp（服务端程序，agent）。</p>
<p>​        两虚拟机均采用桥接的方式，并关闭防火墙，使得两台机器在同一子网下且可进行互相通讯。两机器IP地址如下：</p>
<ul>
<li><p>win7：</p>
<p><img src="https://i.loli.net/2020/06/12/xYv3mJilN7dSqZo.png" alt="image-20200612221922868"></p>
</li>
<li><p>centos7：</p>
<p>关闭防火墙命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> snmpd.service</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  <img src="https://i.loli.net/2020/06/12/VjPTAF2kwQLhRHX.png" alt="image-20200612222021007"></p>
<ul>
<li><p>互通测试：</p>
<p><img src="https://i.loli.net/2020/06/12/43TOLNb7sMaVXQ1.png" alt="image-20200612234549339"></p>
<p><img src="https://i.loli.net/2020/06/12/CzxNwh1sI4v2iOV.png" alt="image-20200612234637804"></p>
</li>
</ul>
<h1 id="三、网络拓扑结构"><a href="#三、网络拓扑结构" class="headerlink" title="三、网络拓扑结构"></a>三、网络拓扑结构</h1><p><img src="https://i.loli.net/2020/06/13/BhEaH3PyYUjMISX.png" alt="image-20200613002337094"></p>
<h1 id="四、实验过程"><a href="#四、实验过程" class="headerlink" title="四、实验过程"></a>四、实验过程</h1><h2 id="4-1Centos7-Agent-："><a href="#4-1Centos7-Agent-：" class="headerlink" title="4.1Centos7(Agent)："></a>4.1Centos7(Agent)：</h2><h3 id="4-1-1下载安装net-snmp"><a href="#4-1-1下载安装net-snmp" class="headerlink" title="4.1.1下载安装net-snmp"></a>4.1.1下载安装net-snmp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lcx@localhost ~]$ sudo yum install -y net-snmp net-snmp-utils</span><br><span class="line">lcx@localhost ~]$ snmpd -v</span><br><span class="line">NET-SNMP version:  5.7.2</span><br><span class="line">Web:               http://www.net-snmp.org/</span><br><span class="line">Email:             net-snmp-coders@lists.sourceforge.net</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2配置SNMPv3用户"><a href="#4-1-2配置SNMPv3用户" class="headerlink" title="4.1.2配置SNMPv3用户"></a>4.1.2配置SNMPv3用户</h3><p>在配置v3用户前，需要停用snmp的服务，具体配置命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#未停止snmp服务，无法创建snmpv3用户</span></span><br><span class="line">lcx@localhost ~]$ net-snmp-create-v3-user </span><br><span class="line">Apparently at least one snmpd demon is already running.</span><br><span class="line">You must stop them <span class="keyword">in</span> order to use this <span class="built_in">command</span>.</span><br><span class="line">[lcx@localhost ~]$ service snmpd stop </span><br><span class="line">Stopping snmpd (via systemctl):                            [  确定  ]</span><br><span class="line">[lcx@localhost ~]$ service snmpd status </span><br><span class="line">● snmpd.service - Simple Network Management Protocol (SNMP) Daemon.</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/snmpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line"></span><br><span class="line">6月 12 17:09:38 localhost.localdomain systemd[1]: Started Simple Network Man...</span><br><span class="line">6月 13 08:57:25 localhost.localdomain systemd[1]: Stopped Simple Network Man...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"><span class="comment">#创建名为lcx的snmpv3用户</span></span><br><span class="line">[lcx@localhost ~]$ sudo net-snmp-create-v3-user </span><br><span class="line">[sudo] lcx 的密码：</span><br><span class="line">Enter a SNMPv3 user name to create: </span><br><span class="line">lcx </span><br><span class="line">Enter authentication pass-phrase: </span><br><span class="line">auth-password</span><br><span class="line">Enter encryption pass-phrase: </span><br><span class="line">  [press <span class="built_in">return</span> to reuse the authentication pass-phrase]</span><br><span class="line">encrypt-password</span><br><span class="line">adding the following line to /var/lib/net-snmp/snmpd.conf:</span><br><span class="line">   createUser lcx MD5 <span class="string">"auth-password"</span> DES encrypt-password</span><br><span class="line">adding the following line to /etc/snmp/snmpd.conf:</span><br><span class="line">   rwuser lcx</span><br><span class="line">[lcx@localhost ~]$</span><br></pre></td></tr></table></figure>

<p>​        我创建了一个名叫<strong>lcx</strong>的SNMPv3用户，使用<strong>MD5</strong>进行认证以及使用<strong>DES</strong>进行加密，<strong>auth-password</strong>作为认证密码，<strong>encrypt-password</strong>作为加密密码。</p>
<p>在配置文件中查看SNMPv3用户是否添加成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lcx@localhost ~]$ sudo vim /etc/snmp/snmpd.conf </span><br><span class="line">[sudo] lcx 的密码：</span><br><span class="line">[lcx@localhost ~]$</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/06/13/GMpf3VkDznSZo2E.png" alt="image-20200613150210380"></p>
<p>可在配置文件中查看到添加的v3用户。</p>
<h3 id="4-1-3验证服务"><a href="#4-1-3验证服务" class="headerlink" title="4.1.3验证服务"></a>4.1.3验证服务</h3><p>snmpwalk命令用法：</p>
<table>
<thead>
<tr>
<th>-v 1|2c|3</th>
<th>specifies SNMP version to use</th>
</tr>
</thead>
<tbody><tr>
<td>-u USER-NAME</td>
<td>set security name (e.g. bert)</td>
</tr>
<tr>
<td>-l LEVEL</td>
<td>set security level (noAuthNoPriv|authNoPriv|authPriv)</td>
</tr>
<tr>
<td>-a PROTOCOL</td>
<td>set authentication protocol (MD5|SHA)</td>
</tr>
<tr>
<td>-A PASSPHRASE</td>
<td>set authentication protocol pass phrase</td>
</tr>
<tr>
<td>-x PROTOCOL</td>
<td>set privacy protocol (DES|AES)</td>
</tr>
<tr>
<td>-X PASSPHRASE</td>
<td>set privacy protocol pass phrase</td>
</tr>
<tr>
<td>-c COMMUNITY</td>
<td>set the community string (v1/v2c版本)</td>
</tr>
</tbody></table>
<p>在验证前，需开启snmp服务，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lcx@localhost ~]$  service snmpd start </span><br><span class="line">Starting snmpd (via systemctl):                            [  确定  ]</span><br><span class="line">[lcx@localhost ~]$ service snmpd status </span><br><span class="line">● snmpd.service - Simple Network Management Protocol (SNMP) Daemon.</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/snmpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2020-06-13 09:13:40 CST; 6s ago</span><br><span class="line"> Main PID: 66998 (snmpd)</span><br><span class="line">    Tasks: 1</span><br><span class="line">   Memory: 4.3M</span><br><span class="line">   CGroup: /system.slice/snmpd.service</span><br><span class="line">           └─66998 /usr/sbin/snmpd -LS0-6d -f</span><br><span class="line"></span><br><span class="line">6月 13 09:13:40 localhost.localdomain systemd[1]: Starting Simple Network Ma...</span><br><span class="line">6月 13 09:13:40 localhost.localdomain snmpd[66998]: NET-SNMP version 5.7.2</span><br><span class="line">6月 13 09:13:40 localhost.localdomain systemd[1]: Started Simple Network Man...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line">[lcx@localhost ~]$</span><br></pre></td></tr></table></figure>

<p>在此使用如下命令进行验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lcx@localhost ~]$ snmpwalk -v 3 -u lcx -a MD5 -A auth-password -l authPriv -x DES -X encrypt-password localhost</span><br><span class="line">SNMPv2-MIB::sysDescr.0 = STRING: Linux localhost.localdomain 3.10.0-1062.12.1.el7.x86_64 <span class="comment">#1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64</span></span><br><span class="line">SNMPv2-MIB::sysObjectID.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.10</span><br><span class="line">DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (15262) 0:02:32.62</span><br><span class="line">SNMPv2-MIB::sysContact.0 = STRING: Root &lt;root@localhost&gt; (configure /etc/snmp/snmp.local.conf)</span><br><span class="line">SNMPv2-MIB::sysName.0 = STRING: lcx-centos</span><br><span class="line">SNMPv2-MIB::sysLocation.0 = STRING: Unknown (edit /etc/snmp/snmpd.conf)</span><br><span class="line">SNMPv2-MIB::sysORLastChange.0 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORID.1 = OID: SNMP-MPD-MIB::snmpMPDCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.2 = OID: SNMP-USER-BASED-SM-MIB::usmMIBCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.3 = OID: SNMP-FRAMEWORK-MIB::snmpFrameworkMIBCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.4 = OID: SNMPv2-MIB::snmpMIB</span><br><span class="line">SNMPv2-MIB::sysORID.5 = OID: TCP-MIB::tcpMIB</span><br><span class="line">SNMPv2-MIB::sysORID.6 = OID: IP-MIB::ip</span><br><span class="line">SNMPv2-MIB::sysORID.7 = OID: UDP-MIB::udpMIB</span><br><span class="line">SNMPv2-MIB::sysORID.8 = OID: SNMP-VIEW-BASED-ACM-MIB::vacmBasicGroup</span><br><span class="line">SNMPv2-MIB::sysORID.9 = OID: SNMP-NOTIFICATION-MIB::snmpNotifyFullCompliance</span><br><span class="line">SNMPv2-MIB::sysORID.10 = OID: NOTIFICATION-LOG-MIB::notificationLogMIB</span><br><span class="line">SNMPv2-MIB::sysORDescr.1 = STRING: The MIB <span class="keyword">for</span> Message Processing and Dispatching.</span><br><span class="line">SNMPv2-MIB::sysORDescr.2 = STRING: The management information definitions <span class="keyword">for</span> the SNMP User-based Security Model.</span><br><span class="line">SNMPv2-MIB::sysORDescr.3 = STRING: The SNMP Management Architecture MIB.</span><br><span class="line">SNMPv2-MIB::sysORDescr.4 = STRING: The MIB module <span class="keyword">for</span> SNMPv2 entities</span><br><span class="line">SNMPv2-MIB::sysORDescr.5 = STRING: The MIB module <span class="keyword">for</span> managing TCP implementations</span><br><span class="line">SNMPv2-MIB::sysORDescr.6 = STRING: The MIB module <span class="keyword">for</span> managing IP and ICMP implementations</span><br><span class="line">SNMPv2-MIB::sysORDescr.7 = STRING: The MIB module <span class="keyword">for</span> managing UDP implementations</span><br><span class="line">SNMPv2-MIB::sysORDescr.8 = STRING: View-based Access Control Model <span class="keyword">for</span> SNMP.</span><br><span class="line">SNMPv2-MIB::sysORDescr.9 = STRING: The MIB modules <span class="keyword">for</span> managing SNMP Notification, plus filtering.</span><br><span class="line">SNMPv2-MIB::sysORDescr.10 = STRING: The MIB module <span class="keyword">for</span> logging SNMP Notifications.</span><br><span class="line">SNMPv2-MIB::sysORUpTime.1 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.2 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.3 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.4 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.5 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.6 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.7 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.8 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.9 = Timeticks: (8) 0:00:00.08</span><br><span class="line">SNMPv2-MIB::sysORUpTime.10 = Timeticks: (8) 0:00:00.08</span><br><span class="line">IF-MIB::ifNumber.0 = INTEGER: 5</span><br><span class="line">IF-MIB::ifIndex.1 = INTEGER: 1</span><br><span class="line">IF-MIB::ifIndex.2 = INTEGER: 2</span><br><span class="line">IF-MIB::ifIndex.3 = INTEGER: 3</span><br><span class="line">IF-MIB::ifIndex.4 = INTEGER: 4</span><br><span class="line">IF-MIB::ifIndex.5 = INTEGER: 5</span><br><span class="line">IF-MIB::ifDescr.1 = STRING: lo</span><br><span class="line">IF-MIB::ifDescr.2 = STRING: ens33</span><br><span class="line">IF-MIB::ifDescr.3 = STRING: virbr0</span><br><span class="line">IF-MIB::ifDescr.4 = STRING: virbr0-nic</span><br><span class="line">IF-MIB::ifDescr.5 = STRING: docker0</span><br><span class="line">IF-MIB::ifType.1 = INTEGER: softwareLoopback(24)</span><br><span class="line">IF-MIB::ifType.2 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifType.3 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifType.4 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifType.5 = INTEGER: ethernetCsmacd(6)</span><br><span class="line">IF-MIB::ifMtu.1 = INTEGER: 65536</span><br><span class="line">IF-MIB::ifMtu.2 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifMtu.3 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifMtu.4 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifMtu.5 = INTEGER: 1500</span><br><span class="line">IF-MIB::ifSpeed.1 = Gauge32: 10000000</span><br><span class="line">IF-MIB::ifSpeed.2 = Gauge32: 1000000000</span><br><span class="line">IF-MIB::ifSpeed.3 = Gauge32: 0</span><br><span class="line">IF-MIB::ifSpeed.4 = Gauge32: 10000000</span><br><span class="line">IF-MIB::ifSpeed.5 = Gauge32: 0</span><br><span class="line">IF-MIB::ifPhysAddress.1 = STRING: </span><br><span class="line">IF-MIB::ifPhysAddress.2 = STRING: 0:c:29:1b:7e:d</span><br><span class="line">IF-MIB::ifPhysAddress.3 = STRING: 52:54:0:25:dc:88</span><br><span class="line">IF-MIB::ifPhysAddress.4 = STRING: 52:54:0:25:dc:88</span><br><span class="line">IF-MIB::ifPhysAddress.5 = STRING: 2:42:b2:34:7a:93</span><br><span class="line">IF-MIB::ifAdminStatus.1 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifAdminStatus.2 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifAdminStatus.3 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifAdminStatus.4 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifAdminStatus.5 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifOperStatus.1 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifOperStatus.2 = INTEGER: up(1)</span><br><span class="line">IF-MIB::ifOperStatus.3 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifOperStatus.4 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifOperStatus.5 = INTEGER: down(2)</span><br><span class="line">IF-MIB::ifLastChange.1 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.2 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.3 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.4 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifLastChange.5 = Timeticks: (0) 0:00:00.00</span><br><span class="line">IF-MIB::ifInOctets.1 = Counter32: 12538599</span><br><span class="line">IF-MIB::ifInOctets.2 = Counter32: 779843410</span><br><span class="line">IF-MIB::ifInOctets.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInOctets.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInOctets.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUcastPkts.1 = Counter32: 69333</span><br><span class="line">IF-MIB::ifInUcastPkts.2 = Counter32: 533359</span><br><span class="line">IF-MIB::ifInUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInNUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInDiscards.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInErrors.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifInUnknownProtos.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutOctets.1 = Counter32: 12538599</span><br><span class="line">IF-MIB::ifOutOctets.2 = Counter32: 4493350</span><br><span class="line">IF-MIB::ifOutOctets.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutOctets.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutOctets.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutUcastPkts.1 = Counter32: 69333</span><br><span class="line">IF-MIB::ifOutUcastPkts.2 = Counter32: 65738</span><br><span class="line">IF-MIB::ifOutUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutNUcastPkts.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutDiscards.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.1 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.2 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.3 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.4 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutErrors.5 = Counter32: 0</span><br><span class="line">IF-MIB::ifOutQLen.1 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.2 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.3 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.4 = Gauge32: 0</span><br><span class="line">IF-MIB::ifOutQLen.5 = Gauge32: 0</span><br><span class="line">IF-MIB::ifSpecific.1 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.2 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.3 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.4 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IF-MIB::ifSpecific.5 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">SNMPv2-SMI::mib-2.3.1.1.1.2.1.192.168.10.1 = INTEGER: 2</span><br><span class="line">SNMPv2-SMI::mib-2.3.1.1.2.2.1.192.168.10.1 = Hex-STRING: F4 EE 14 1D 58 DE </span><br><span class="line">SNMPv2-SMI::mib-2.3.1.1.3.2.1.192.168.10.1 = IpAddress: 192.168.10.1</span><br><span class="line">IP-MIB::ipForwarding.0 = INTEGER: forwarding(1)</span><br><span class="line">IP-MIB::ipDefaultTTL.0 = INTEGER: 64</span><br><span class="line">IP-MIB::ipInReceives.0 = Counter32: 140948</span><br><span class="line">IP-MIB::ipInHdrErrors.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInAddrErrors.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipForwDatagrams.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInUnknownProtos.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInDiscards.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipInDelivers.0 = Counter32: 140624</span><br><span class="line">IP-MIB::ipOutRequests.0 = Counter32: 135827</span><br><span class="line">IP-MIB::ipOutDiscards.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipOutNoRoutes.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipReasmTimeout.0 = INTEGER: 30 seconds</span><br><span class="line">IP-MIB::ipReasmReqds.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipReasmOKs.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipReasmFails.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipFragOKs.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipFragFails.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipFragCreates.0 = Counter32: 0</span><br><span class="line">IP-MIB::ipAdEntAddr.127.0.0.1 = IpAddress: 127.0.0.1</span><br><span class="line">IP-MIB::ipAdEntAddr.172.17.0.1 = IpAddress: 172.17.0.1</span><br><span class="line">IP-MIB::ipAdEntAddr.192.168.10.113 = IpAddress: 192.168.10.113</span><br><span class="line">IP-MIB::ipAdEntIfIndex.127.0.0.1 = INTEGER: 1</span><br><span class="line">IP-MIB::ipAdEntIfIndex.172.17.0.1 = INTEGER: 5</span><br><span class="line">IP-MIB::ipAdEntIfIndex.192.168.10.113 = INTEGER: 2</span><br><span class="line">IP-MIB::ipAdEntNetMask.127.0.0.1 = IpAddress: 255.0.0.0</span><br><span class="line">IP-MIB::ipAdEntNetMask.172.17.0.1 = IpAddress: 255.255.0.0</span><br><span class="line">IP-MIB::ipAdEntNetMask.192.168.10.113 = IpAddress: 255.255.255.0</span><br><span class="line">IP-MIB::ipAdEntBcastAddr.127.0.0.1 = INTEGER: 0</span><br><span class="line">IP-MIB::ipAdEntBcastAddr.172.17.0.1 = INTEGER: 1</span><br><span class="line">IP-MIB::ipAdEntBcastAddr.192.168.10.113 = INTEGER: 1</span><br><span class="line">IP-MIB::ip.21.1.1.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.1.172.17.0.0 = IpAddress: 172.17.0.0</span><br><span class="line">IP-MIB::ip.21.1.1.192.168.10.0 = IpAddress: 192.168.10.0</span><br><span class="line">IP-MIB::ip.21.1.2.0.0.0.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.2.172.17.0.0 = INTEGER: 5</span><br><span class="line">IP-MIB::ip.21.1.2.192.168.10.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.3.0.0.0.0 = INTEGER: 1</span><br><span class="line">IP-MIB::ip.21.1.3.172.17.0.0 = INTEGER: 0</span><br><span class="line">IP-MIB::ip.21.1.3.192.168.10.0 = INTEGER: 0</span><br><span class="line">IP-MIB::ip.21.1.7.0.0.0.0 = IpAddress: 192.168.10.1</span><br><span class="line">IP-MIB::ip.21.1.7.172.17.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.7.192.168.10.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.8.0.0.0.0 = INTEGER: 4</span><br><span class="line">IP-MIB::ip.21.1.8.172.17.0.0 = INTEGER: 3</span><br><span class="line">IP-MIB::ip.21.1.8.192.168.10.0 = INTEGER: 3</span><br><span class="line">IP-MIB::ip.21.1.9.0.0.0.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.9.172.17.0.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.9.192.168.10.0 = INTEGER: 2</span><br><span class="line">IP-MIB::ip.21.1.11.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-MIB::ip.21.1.11.172.17.0.0 = IpAddress: 255.255.0.0</span><br><span class="line">IP-MIB::ip.21.1.11.192.168.10.0 = IpAddress: 255.255.255.0</span><br><span class="line">IP-MIB::ip.21.1.13.0.0.0.0 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IP-MIB::ip.21.1.13.172.17.0.0 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IP-MIB::ip.21.1.13.192.168.10.0 = OID: SNMPv2-SMI::zeroDotZero</span><br><span class="line">IP-MIB::ipNetToMediaIfIndex.2.192.168.10.1 = INTEGER: 2</span><br><span class="line">IP-MIB::ipNetToMediaPhysAddress.2.192.168.10.1 = STRING: f4:ee:14:1d:58:de</span><br><span class="line">IP-MIB::ipNetToMediaNetAddress.2.192.168.10.1 = IpAddress: 192.168.10.1</span><br><span class="line">IP-MIB::ipNetToMediaType.2.192.168.10.1 = INTEGER: dynamic(3)</span><br><span class="line">IP-MIB::ipRoutingDiscards.0 = Counter32: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteDest.0.0.0.0.0.0.0.0.0.192.168.10.1 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteDest.172.17.0.0.255.255.0.0.0.0.0.0.0 = IpAddress: 172.17.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteDest.192.168.10.0.255.255.255.0.0.0.0.0.0 = IpAddress: 192.168.10.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteMask.0.0.0.0.0.0.0.0.0.192.168.10.1 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteMask.172.17.0.0.255.255.0.0.0.0.0.0.0 = IpAddress: 255.255.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteMask.192.168.10.0.255.255.255.0.0.0.0.0.0 = IpAddress: 255.255.255.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteTos.0.0.0.0.0.0.0.0.0.192.168.10.1 = INTEGER: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteTos.172.17.0.0.255.255.0.0.0.0.0.0.0 = INTEGER: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteTos.192.168.10.0.255.255.255.0.0.0.0.0.0 = INTEGER: 0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteNextHop.0.0.0.0.0.0.0.0.0.192.168.10.1 = IpAddress: 192.168.10.1</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteNextHop.172.17.0.0.255.255.0.0.0.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteNextHop.192.168.10.0.255.255.255.0.0.0.0.0.0 = IpAddress: 0.0.0.0</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteIfIndex.0.0.0.0.0.0.0.0.0.192.168.10.1 = INTEGER: 2</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteIfIndex.172.17.0.0.255.255.0.0.0.0.0.0.0 = INTEGER: 5</span><br><span class="line">IP-FORWARD-MIB::ipCidrRouteIfIndex.192.168.10.0.255.255.255.0.0.0.0.0.0 = INTEGER: 2</span><br></pre></td></tr></table></figure>

<p>可以看到我们顺利的取到了服务器的snmp数据。</p>
<h2 id="4-2Win7-Manager"><a href="#4-2Win7-Manager" class="headerlink" title="4.2Win7(Manager):"></a>4.2Win7(Manager):</h2><h3 id="4-2-1MIB-Browser配置"><a href="#4-2-1MIB-Browser配置" class="headerlink" title="4.2.1MIB Browser配置"></a>4.2.1MIB Browser配置</h3><p><img src="https://i.loli.net/2020/06/13/3mjMEeig6dNZSht.png" alt="image-20200613093819436"></p>
<p>如上图所示：在1中输入agent ip，在2中选择v3并添加v3用户，点击3进行连接。</p>
<p>2中操作如下：</p>
<p><img src="https://i.loli.net/2020/06/13/rhpVedP8By5EQg9.png" alt="image-20200613094154210"></p>
<p>选择SNMP版本为v3后 ，点击AddUser进行添加v3用户界面，具体如下：</p>
<p><img src="https://i.loli.net/2020/06/13/2SieXxfhGp69WTF.png" alt="image-20200613094334060"></p>
<p>根据在Centos7中添加的用户信息进行填写，Authentication Protocol中选择MD5，</p>
<p>Privacy Protocol选择DES。内容分别为auth-password、encrypt-password。</p>
<h1 id="五、结果展示和分析"><a href="#五、结果展示和分析" class="headerlink" title="五、结果展示和分析"></a>五、结果展示和分析</h1><p>​        ==由于报文捕获分析是在实验完成几天后进行的，win7ip租约到期，路由器dhcp服务器重新对win7进行ip分配，分配结果如下：==</p>
<p><img src="https://i.loli.net/2020/06/13/jMUAVtpe4XbkLgn.png" alt="image-20200613123132547"></p>
<p>使用MIB  Browser连接被管理设备（centos7），结果如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/13/bXRHWgf6uSticlK.png" alt="image-20200613101300359"></p>
<p>​        可以看到，由MIB发出<strong>Request</strong>，由Centos7返回<strong>Synchronize</strong>和<strong>Response</strong>消息。来回的信息中可以看到Authentication Protocol, Privacy Protocol以及Security Level等相关信息。</p>
<p>​        连接Centos7的同时，在Win7上进行报文捕获，结果如下：</p>
<p><img src="https://i.loli.net/2020/06/13/XlJqGraw2QEfPxH.png" alt="img"></p>
<ul>
<li><p>对Get-request报文进行分析：</p>
<img src="/2020/06/13/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%A4%A7%E4%BD%9C%E4%B8%9A/Users\12173\Desktop\EarNmg38xSoO7nD.png" alt="image-20200613125115379">

<table>
<thead>
<tr>
<th>十六进制数据</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>表示SNMP协议报文(整个报文是一个SEQUENCE)</td>
</tr>
<tr>
<td>38</td>
<td>消息长度38字节(表示后面还有38个字节的内容)</td>
</tr>
<tr>
<td>02 01 03</td>
<td>表示这个报文的协议为SNMPv3(02表示integer 01表示长度为1个字节)</td>
</tr>
<tr>
<td>30</td>
<td>表示msgGlobalData为一个Sequence</td>
</tr>
<tr>
<td>0e</td>
<td>表示该子报文的长度为14字节</td>
</tr>
<tr>
<td>02 01 59</td>
<td>表示对应的msgID：32</td>
</tr>
<tr>
<td>02 03 00 ff f0</td>
<td>表示对应msgMaxSize：65520</td>
</tr>
<tr>
<td>04 01 00</td>
<td>表示对应的是msgFlags：04</td>
</tr>
<tr>
<td>02 01 03</td>
<td>表示对应的msgSecurityModel：USM(3)</td>
</tr>
<tr>
<td>04 10</td>
<td>引擎ID</td>
</tr>
<tr>
<td>30 0e</td>
<td>表示接下来从msgAuthoritativeEngineID到msgPrivacyParameters为一个Sequence且长度为14字节</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgAuthoritativeEngineID长度为0，没有内容</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示msgAuthoritativeEngineBoots：0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示msgAuthoritativeEngineTime：0</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgUserName为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgAuthenticationParameters为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>04 00</td>
<td>表示msgPrivacyParameters为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>30 11</td>
<td>表示接下来的msgData：plaintext为一个Sequence，长度为17字节</td>
</tr>
<tr>
<td>04 00</td>
<td>表示contextEngineID为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>04 00</td>
<td>表示contextName为Octect String类型，长度为0，没有内容</td>
</tr>
<tr>
<td>a0</td>
<td>表示这个PDU为Get-Request类型</td>
</tr>
<tr>
<td>0b</td>
<td>表示data的长度为11字节</td>
</tr>
<tr>
<td>02 01 58</td>
<td>表示request-id：88</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-status为0</td>
</tr>
<tr>
<td>02 01 00</td>
<td>表示error-index为0</td>
</tr>
<tr>
<td>30 00</td>
<td>表示variable-bindings：0 items</td>
</tr>
</tbody></table>
</li>
<li><p>report报文</p>
<p>对比上述对GetRequest报文的分析，可以在该报文中看到msgAuthoritativeEngineID等值不再为空，是因为Centos7设备将相关信息发送给了管理软件，如下图所示：</p>
<p><img src="https://i.loli.net/2020/06/13/hk3zsDKZS4QRtTb.png" alt="image-20200613140623752"></p>
<p><img src="https://i.loli.net/2020/06/13/tFgS8UVIcqx4brJ.png" alt="image-20200613141147537"></p>
</li>
<li><p>encryptedPDU报文内容如下：</p>
<p><img src="https://i.loli.net/2020/06/13/Qa9lHeAzsD8Oc3W.png" alt="image-20200613134901797"></p>
<p>表示为已经加密的PDU。</p>
</li>
<li><p>get操作获取设备名称</p>
<p><img src="https://i.loli.net/2020/06/13/AatzEOP43LJVksr.png" alt="image-20200613144611730"></p>
<p>从图中可以看到设备名为<strong>lcx-VM-centos7</strong>。</p>
</li>
<li><p>通过set操作更改设备名称为<strong>lcx-centos7</strong></p>
<p><img src="https://i.loli.net/2020/06/13/TQYoxLc3SKlrRe5.png" alt="image-20200613144922792"></p>
<p>从图中可以看到，设备名已被修改为<strong>lcx-centos7</strong></p>
</li>
<li><p>通过get bulk操作检索SMMP变量值</p>
<p>此操作通常被用于检索大数据量，尤其当您的SNMP版本是V2c或V3时，检索大的表就要用到此操作。GETBULK操作会根据最大重试值执行一个连续的GETNEXT操作。非中继值决定要进行GETNEXT操作的变量列表中的变量数，对于剩下的变量，将根据最大重试值进行连续GETNEXT操作。</p>
<ul>
<li><p>请求部分：</p>
<p><img src="https://i.loli.net/2020/06/13/8S7WRcEehGujr2f.png" alt="image-20200613145414187"></p>
</li>
<li><p>响应部分：</p>
<p><img src="https://i.loli.net/2020/06/13/9stxUF74ZwmzqPM.png" alt="image-20200613145550590"></p>
<p>报文对应操作如下：</p>
<p><img src="https://i.loli.net/2020/06/13/ZSoc6Mw5UAsa9jp.png" alt="img"></p>
<p>捕获报文文件如下：</p>
<p>报文文件已上传至git仓库<a href="https://github.com/yym08090809/Anything/blob/master/snmp%20all.pcapng" target="_blank" rel="noopener">点击可下载</a></p>
</li>
</ul>
</li>
</ul>
<h1 id="六、问题及解决方案"><a href="#六、问题及解决方案" class="headerlink" title="六、问题及解决方案"></a>六、问题及解决方案</h1><h2 id="问题一、两台虚拟机见无法通讯"><a href="#问题一、两台虚拟机见无法通讯" class="headerlink" title="问题一、两台虚拟机见无法通讯"></a>问题一、两台虚拟机见无法通讯</h2><p><strong>解决方案:</strong>将虚拟机网络连接方式设置为桥接模式，并关闭防火墙。使得两台机器在同一个网段的同一子网下。</p>
<h2 id="问题二、无法添加SNMPv3用户"><a href="#问题二、无法添加SNMPv3用户" class="headerlink" title="问题二、无法添加SNMPv3用户"></a>问题二、无法添加SNMPv3用户</h2><p><strong>解决方案:</strong>根据提示snmpd服务停止后，即可添加snmpv3用户。</p>
]]></content>
      <categories>
        <category>网络管理与维护</category>
      </categories>
      <tags>
        <tag>网络管理与维护</tag>
      </tags>
  </entry>
  <entry>
    <title>花生壳+everything搭建共享硬盘y</title>
    <url>/2020/02/23/%E8%8A%B1%E7%94%9F%E5%A3%B3%E6%90%AD+everything%E6%90%AD%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h1 id="1-前景"><a href="#1-前景" class="headerlink" title="1.前景"></a>1.前景</h1><p>在跟老师做项目的过程中，需要下载好多资料并进行共享，qq群文件上限10g已存满，XX网盘限速严重，不适合于大型视频文件传输。于是萌生了搭建一个ftp服务器的想法，在搭建前有一个问题值得思考下，绝大多数人加拉的宽带都只有一个公网IP，然后路由器中的dhcp协议进行私网ip动态分配，我们在私网下搭建的ftp服务器是不能被外网所访问的。对于这个问题的解决方案就是使用<a href="https://hsk.oray.com/" target="_blank" rel="noopener">花生壳</a>。一款不只是用于内外穿透的软件。</p><a id="more"></a>
<h1 id="2-FTP共享硬盘"><a href="#2-FTP共享硬盘" class="headerlink" title="2.FTP共享硬盘"></a>2.FTP共享硬盘</h1><p>将自己硬盘的所有或部分内容通过网络进行共享。</p>
<p>如下图所示：</p>
<p><a href="https://imgchr.com/i/Ji6vB4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/15/Ji6vB4.png" alt="Ji6vB4.png"></a></p>
<h1 id="3-搭建过程"><a href="#3-搭建过程" class="headerlink" title="3.搭建过程"></a>3.搭建过程</h1><h2 id="3-1搭建准备"><a href="#3-1搭建准备" class="headerlink" title="3.1搭建准备"></a>3.1搭建准备</h2><ul>
<li><p><strong>硬件：</strong>电脑一台</p>
</li>
<li><p><strong>软件：</strong><a href="https://hsk.oray.com" target="_blank" rel="noopener">花生壳</a><a href="https://everything.en.softonic.com/" target="_blank" rel="noopener">+everything</a></p>
<p>花生壳：在此主要用于内外穿透。</p>
<p>everything：可以用于文件检索，在此用于做文件服务器。</p>
</li>
</ul>
<h2 id="3-2安装、配置、测试软件"><a href="#3-2安装、配置、测试软件" class="headerlink" title="3.2安装、配置、测试软件"></a>3.2安装、配置、测试软件</h2><p>安装花生壳和everything后，花生壳需要进行账号的注册，在账号注册完成后，去</p>
<p>注册自己的域名（有免费的）如下图所示：</p>
<p><img src="https://ae01.alicdn.com/kf/Hc5a55d3dac834a42a6db31346624188cj.png" alt></p>
<p>注册完域名后，对everything进行如下配置,在everything主页点击“工具-&gt;选项-&gt;http服务器或者ftp服务器（这里选用http服务器进行文件传输）”，启用http服务器,服务器端口选择在0~65535之间即可，最好不要选择知名端口，容易冲突即端口被占用。配置用户名密码后确定即可，下图是我的配置，仅供参考。FTP服务器配置大同小异，仅是传输协议不同，功能上没什么区别。</p>
<ul>
<li>FTP：文本传输协议</li>
<li>HTTP/HTTPS：超文本传输协议。</li>
</ul>
<p><img src="https://ae01.alicdn.com/kf/H4b9c2ff49f7a488a98959a8dba348184R.png" alt></p>
<p>everything的配置到此结束，可在浏览器进行本机测试：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></p>
<p>HTTP服务器测试如下：</p>
<p><img src="https://ae01.alicdn.com/kf/H9befde32cb4b46da81ca32b5c30cc3cbx.png" alt></p>
<p>输入evething中设置的用户名密码即可使用。</p>
<p>FTP服务器测试如下：<a href="ftp://localhost:21" target="_blank" rel="noopener">ftp://localhost:21</a></p>
<p><img src="https://ae01.alicdn.com/kf/H4e64cc2e1b824a38a834744c67c81a05o.png" alt></p>
<p>测试无误后，在花生壳中进行内外端口映射，在此就是将本机的文件服务器穿过内网，对外网公开，点击添加符号，添加如下内容。</p>
<p><img src="https://ae01.alicdn.com/kf/H8e5ecaaa34c0400fa3bd97ec0a2e4b3cr.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/H21e2f081690743238174d4123f9d2276L.png" alt></p>
<p>应用名称：随便起。</p>
<p>应用图标：随便选。</p>
<p>应用类型：选择HTTP（因为搭建的是HTTP服务器），HTTP服务应该是需要购买的，6元100年，稳赚不赔。</p>
<p>外网域名：选择你之前注册的域名，外网端口选择随机端口即可。</p>
<p>内网主机：可在cmd中输入ipconfig查看内网ip地址，也可直接填写回环地址127.0.0.1，多用于测试。</p>
<p>密码访问限制：可有可无。因为在http服务器中需要用户名和密码登录，所有在此我没有开启密码访问。</p>
<p>到此配置结束，去浏览器访问外网域名，登录用户后即可下载自己电脑上的所有文件，也可在everything中对访问文件进行筛选，如下图所示我只将需要共享的文件放置G盘，然后共享G盘下的所有东西。</p>
<p><img src="https://ae01.alicdn.com/kf/H649ddba9e37d485f856ddbd004f8cdfco.png" alt></p>
<h1 id="4-花生壳使用体验"><a href="#4-花生壳使用体验" class="headerlink" title="4.花生壳使用体验"></a>4.花生壳使用体验</h1><p>最大的优点解决了内网穿透的问题，将私网ip下的服务映射到公网ip上，盲猜使用重定向将请求转发到私网ip下的主机，要是用于小型文件的传输的话，免费的带宽（1M 即128kb/s）就够用了，要是用于传大型文件的话就emmm，当然也有解决方案，充值呗，成为人民币玩家，俗话说有钱能使鬼推磨，10M带宽，有点小贵，贴给那些暴躁老哥，一言不合就奥利给、冲他。</p>
<p><img src="https://ae01.alicdn.com/kf/H4487b84dcf5d4b48852ee9404dcaca8a2.png" alt></p>
<p>基于花生壳app可以做很多延伸，可以将自己的电脑变成一台服务器，运行各种项目如基于http的web项目、基于socket的通讯项目等等，通过内网穿透，端口映射到外网，实现跨网段访问。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>FTP服务</tag>
      </tags>
  </entry>
  <entry>
    <title>边界网关协议实验（BGP）《一》</title>
    <url>/2020/05/11/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE%E5%AE%9E%E9%AA%8C%EF%BC%88BGP%EF%BC%89%E3%80%8A%E4%B8%80%E3%80%8B/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><p><img src="https://s1.ax1x.com/2020/05/11/YYn0l8.png" alt="YYn0l8.png"></p><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><p>了解边界网管协议（BGP）</p><p>实现两个域间的通讯。</p><h1 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h1><h2 id="3-1网关ip配置"><a href="#3-1网关ip配置" class="headerlink" title="3.1网关ip配置"></a>3.1网关ip配置</h2><p>AR1配置，其他同理。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;sys</span></span><br><span class="line"><span class="meta">[Huawei]un</span> <span class="string">in en</span></span><br><span class="line"><span class="attr">Info</span>: <span class="string">Information center is disabled.</span></span><br><span class="line"><span class="meta">[Huawei]sysname</span> <span class="string">AR1</span></span><br><span class="line"><span class="meta">[AR1]interface</span> <span class="string">GigabitEthernet0/0/0</span></span><br><span class="line"><span class="meta">[AR1-GigabitEthernet0/0/0]ip</span> <span class="string">add 192.168.6.1 24</span></span><br><span class="line"><span class="meta">[AR1-GigabitEthernet0/0/0]interface</span> <span class="string">GigabitEthernet0/0/1</span></span><br><span class="line"><span class="meta">[AR1-GigabitEthernet0/0/1]ip</span> <span class="string">add 192.168.5.2 24</span></span><br></pre></td></tr></table></figure><a id="more"></a>





<h2 id="3-2AS1配置RIP协议"><a href="#3-2AS1配置RIP协议" class="headerlink" title="3.2AS1配置RIP协议"></a>3.2AS1配置RIP协议</h2><p>AR1配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[AR1]rip</span></span><br><span class="line"><span class="meta">[AR1-rip-1]net</span> <span class="string">192.168.6.0</span></span><br><span class="line"><span class="meta">[AR1-rip-1]net</span> <span class="string">192.168.5.0</span></span><br></pre></td></tr></table></figure>

<p>AR7配置同理。</p>
<h2 id="3-3AS2配置OSPF"><a href="#3-3AS2配置OSPF" class="headerlink" title="3.3AS2配置OSPF"></a>3.3AS2配置OSPF</h2><p>AR2配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[AR2]ospf</span></span><br><span class="line"><span class="meta">[AR2-ospf-1]area</span> <span class="string">0</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]net</span> <span class="string">192.168.5.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]net</span> <span class="string">192.168.1.0 0.0.0.255</span></span><br></pre></td></tr></table></figure>

<p>AR3~5同理。</p>
<h2 id="3-4配置BGP"><a href="#3-4配置BGP" class="headerlink" title="3.4配置BGP"></a>3.4配置BGP</h2><p>AR1配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1]bgp</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">192.168.5.1 as-number 2</span></span><br></pre></td></tr></table></figure>

<p>AR2配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]bgp</span> <span class="string">2</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">192.168.5.2 as-number 1</span></span><br></pre></td></tr></table></figure>

<p>查看BGP邻居关系（display bgp peer）</p>
<p>AR1:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYnom4.png" alt="YYnom4.png"></p>
<p>AR2:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYn779.png" alt="YYn779.png"></p>
<p>再查看路由表（display bgp routing-table），由于没有引入路由表为空,</p>
<p>引入：</p>
<ul>
<li><p>AR1：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1-bgp]import-route</span> <span class="string">rip 1	</span></span><br><span class="line"><span class="meta">[AR1-bgp]import-route</span> <span class="string">direct</span></span><br></pre></td></tr></table></figure>

<p>再次查看路由表，如下图所示：<img src="https://s1.ax1x.com/2020/05/11/YYnqt1.png" alt="YYnqt1.png"></p>
</li>
<li><p>AR2:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2-bgp]import-route</span> <span class="string">direct 	</span></span><br><span class="line"><span class="meta">[AR2-bgp]import-route</span> <span class="string">ospf 1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/05/11/YYu97d.png" alt="YYu97d.png"></p>
</li>
</ul>
<h2 id="3-5测试"><a href="#3-5测试" class="headerlink" title="3.5测试"></a>3.5测试</h2><p>AR5 GE0/0/0 Ping AR7 GE0/0/0  在AR2 GE0/0/0端口抓包结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYuPAA.png" alt="YYuPAA.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>BGP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>边界网关协议实验（BGP）《三》</title>
    <url>/2020/05/18/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE%E5%AE%9E%E9%AA%8C%EF%BC%88BGP%EF%BC%89%E3%80%8A%E4%B8%89%E3%80%8B/</url>
    <content><![CDATA[<h1 id="1-拓扑图"><a href="#1-拓扑图" class="headerlink" title="1.拓扑图"></a>1.拓扑图</h1><p><img src="https://s1.ax1x.com/2020/05/18/Yhp0fK.png" alt="Yhp0fK.png">、</p><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><p>利用AS-path属性实现路由策略，使得AR2不向AR1通告AS300内的任何路由。</p><h1 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h1><h2 id="3-1配置AR1-AR4路由器的网关ip"><a href="#3-1配置AR1-AR4路由器的网关ip" class="headerlink" title="3.1配置AR1~AR4路由器的网关ip"></a>3.1配置AR1~AR4路由器的网关ip</h2><h2 id="3-2配置域间路由协议（BGP）"><a href="#3-2配置域间路由协议（BGP）" class="headerlink" title="3.2配置域间路由协议（BGP）"></a>3.2配置域间路由协议（BGP）</h2><p>AR1配置如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR1]bgp</span> <span class="string">100</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">11.2.1.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR1-bgp]import-route</span> <span class="string">direct</span></span><br></pre></td></tr></table></figure><a id="more"></a>




<p>其他路由器同理。</p>
<h2 id="3-3配置AS-PATH属性实现路由过滤"><a href="#3-3配置AS-PATH属性实现路由过滤" class="headerlink" title="3.3配置AS-PATH属性实现路由过滤"></a>3.3配置AS-PATH属性实现路由过滤</h2><h3 id="3-3-1-AS-PATH属性概述"><a href="#3-3-1-AS-PATH属性概述" class="headerlink" title="3.3.1 AS-PATH属性概述"></a>3.3.1 AS-PATH属性概述</h3><ul>
<li><p><strong>概念</strong></p>
<p> AS-PATH是公认必遵属性，该属性用一串AS号来描述去往的指定目的地AS间路径或路由，当BGP speaker发气一条路由，将在AS_Path中增加自己的AS号。也就是说，这条路由每经过一个AS区域，就会加上一个AS号，用来标示路径的优先级。</p>
</li>
<li><p><strong>作用</strong></p>
<p>用来标识路由经过的AS路径。</p>
<p>当一个路由器收到两条相同目的地的路由，它将选择<strong>AS路径最短</strong>的路由。 </p>
<p> 在真实的网络环境中，不一定AS号越少的链路质量越高。而AS-PATH这个功能又是根据AS号来判断路由的优先的，AS号越少越优先。那么这个时候我们可能会用到AS-path的一个功能，来增加AS号的长度,从而实现选路的功能：</p>
<p><img src="https://s1.ax1x.com/2020/05/18/YhFydJ.jpg" alt="YhFydJ.jpg"></p>
<p>在这个图中，本来左边的路径是：500,200,100,右边的路径是300,100,现在在右边的路径上面多加几个相同的AS号，最后右边的路径就变成了：300,100,100,100,比左边路径的AS号要多。最后左边的路径为主要工作路径。</p>
</li>
<li><p><strong>总结</strong></p>
<ul>
<li><strong>一个路由的AS号附加得越多，路由的优先级越低。</strong> </li>
<li><strong>AS-path属性可以防止环路。</strong> </li>
<li><strong>可以修改AS的附加，称为path-prepending。</strong> </li>
</ul>
</li>
</ul>
<h3 id="3-3-2-AS-PATH属性配置"><a href="#3-3-2-AS-PATH属性配置" class="headerlink" title="3.3.2 AS-PATH属性配置"></a>3.3.2 AS-PATH属性配置</h3><p>在AS2上配置，创建编号为1的AS-PATH过滤器，拒绝包含AS号300的路由通过。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]ip</span> <span class="string">as-path-filter path-filter1 deny _300_	</span></span><br><span class="line"><span class="meta">[AR2]ip</span> <span class="string">as-path-filter path-filter1 permit .*</span></span><br><span class="line"><span class="meta">[AR2]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">11.2.1.1 as-path-filter path-filter1 export </span></span><br><span class="line"><span class="attr">[AR2-bgp]quit</span></span><br><span class="line"><span class="meta">[AR2]reset</span> <span class="string">bgp all</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a>3.3.3 测试</h3><ol>
<li><p>查看AR1路由表：</p>
<p><img src="https://s1.ax1x.com/2020/05/18/Yhm3pd.png" alt="Yhm3pd.png"></p>
<p>在AR1的路由表中没看到AS300中的任何路由条目，及实现了通过配置AS-PATH属性实现了AR2不向AR1通告AS300内的任何路由。</p>
</li>
<li><p>AR1和AR3互Ping环回地址，结果如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/18/Yhn85F.png" alt="Yhn85F.png"></p>
<p>从上图可以看出AR1 Ping AR3 请求超时，AR3 Ping AR1 可以Ping通，也能说明在AR2中通过配置AS-PATH属性实现了路由过滤。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>BGP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>静态路由及默认路由配置</title>
    <url>/2020/03/09/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%8F%8A%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、静态路由及默认路由配置"><a href="#一、静态路由及默认路由配置" class="headerlink" title="一、静态路由及默认路由配置"></a>一、静态路由及默认路由配置</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ul>
<li><p><strong>静态路由：</strong> 是指用户或网络管理员手工配置的路由信息。当网络拓扑结构或链路状态发生改变时，需要网络管理员手工配置静态路由信息。</p>
<p><strong>静态路由优缺点：</strong>  相比较动态路由协议，静态路由无需频繁的交换各自的路由表，配置简单，比较适合小型、简单的网络环境。不适合大型和复杂的网络环境的原因是：当网络拓扑结构和链路状态发生改变时，网络管理员需要做大量的调整，工作量繁重，而且无法感知错误发生，不易排错。 </p>
</li>
<li><p><strong>默认路由：</strong> 是一种特殊的静态路由，当路由表中与数据包目的地址没有匹配的表项时，数据包将根据默认路由条目进行转发。默认路由在某些时候是非常有效的，例如在末梢网络中，默认路由可以大大简化路由器的配置，减轻网络管理员的工作负担。 </p>
</li>
</ul><a id="more"></a>
<h2 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h2><ul>
<li>掌握静态路由的配置方法。</li>
<li>掌握默认路由的配置方法。</li>
</ul>
<h2 id="3-实验拓扑"><a href="#3-实验拓扑" class="headerlink" title="3.实验拓扑"></a>3.实验拓扑</h2><p><img src="https://s2.ax1x.com/2020/03/08/3zg9HS.png" alt="3zg9HS.png"></p>
<h2 id="4-实验步骤"><a href="#4-实验步骤" class="headerlink" title="4.实验步骤"></a>4.实验步骤</h2><h3 id="4-1配置PCA、PCB的IP、掩码及网关。"><a href="#4-1配置PCA、PCB的IP、掩码及网关。" class="headerlink" title="4.1配置PCA、PCB的IP、掩码及网关。"></a>4.1配置PCA、PCB的IP、掩码及网关。</h3><p>如拓扑图中所示</p>
<h3 id="4-2在S1交换机上划分vlan配置虚接口"><a href="#4-2在S1交换机上划分vlan配置虚接口" class="headerlink" title="4.2在S1交换机上划分vlan配置虚接口"></a>4.2在S1交换机上划分vlan配置虚接口</h3><p><strong>要求：vlan1包括端口E0/1到E0/22，vlan2包括端口E0/23到E0/24</strong></p>
<p>配置命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;Huawei&gt;system-view</span></span><br><span class="line"><span class="attr">sysname</span> <span class="string">S1</span></span><br><span class="line"><span class="meta">[S1]vlan</span> <span class="string">batch 1 2</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/23</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/23]port</span> <span class="string">link-type trunk</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/23]port</span> <span class="string">trunk allow-pass vlan 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/24</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/24]port</span> <span class="string">link-type trunk</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/24]port</span> <span class="string">trunk allow-pass vlan 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/1]port</span> <span class="string">default vlan 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">GigabitEthernet 0/0/2</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">link-type access</span></span><br><span class="line"><span class="meta">[S1-GigabitEthernet0/0/2]port</span> <span class="string">default vlan 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 2</span></span><br><span class="line"><span class="meta">[S1-Vlanif</span> <span class="string">2]ip address 192.168.1.1 24</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[S1]interface</span> <span class="string">vlanif 3</span></span><br><span class="line"><span class="meta">[S1-Vlanif</span> <span class="string">2]ip address 192.168.2.1 24</span></span><br></pre></td></tr></table></figure>

<p>配置完成后结果如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zgnBT.png" alt="3zgnBT.png"></p>
<h3 id="4-3在R1上配置端口ip和静态路由"><a href="#4-3在R1上配置端口ip和静态路由" class="headerlink" title="4.3在R1上配置端口ip和静态路由"></a>4.3在R1上配置端口ip和静态路由</h3><p>在R1 GE0/0/0端口上配置ip为192.168.1.2/24</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R1]interface</span> <span class="string">GigabitEthernet 0/0/0</span></span><br><span class="line"><span class="meta">[R1-GigabitEthernet0/0/0]ip</span> <span class="string">address 192.168.1.2 24</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h5></li>
</ul>
<p><img src="https://s2.ax1x.com/2020/03/08/3zgQN4.png" alt="3zgQN4.png"></p>
<p>查看路由表：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zgUHO.png" alt="3zgUHO.png"></p>
<p>测试：pcApingR1</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3z2roF.png" alt="3z2roF.png"></p>
<p>​    在路由器GE0/0/0端口捕获报文如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zR4cn.png" alt="3zR4cn.png"></p>
<ul>
<li><h5 id="配置默认路由"><a href="#配置默认路由" class="headerlink" title="配置默认路由"></a>配置默认路由</h5><p>删除刚才配置的静态路由：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">undo</span> <span class="string">ip route-static 192.168.2.0 255.255.255.0 192.168.1.1</span></span><br></pre></td></tr></table></figure>

<p>对R1配置缺省路由。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R1]</span> <span class="string">IP route-static 0.0.0.0  0.0.0.0 192.168.1.1</span></span><br></pre></td></tr></table></figure>

<p>查看路由表结果如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zWcK1.png" alt="3zWcK1.png"></p>
</li>
</ul>
<p>测试:</p>
<p>R1pingPCA:</p>
<p><img src="https://s2.ax1x.com/2020/03/08/3zfAaT.png" alt="3zfAaT.png"></p>
<p><strong>问题出处：</strong>在拓扑中，S1上GE0/0/24端口选择的是trunk类型，无法ping通。</p>
<p><strong>解决方案如下：</strong></p>
<p>将GE0/0/24端口类型换为access。</p>
<p><strong>原因解释：</strong></p>
<p>因为R1是路由器。路由器是三层设备，不认识二层的Vlan、Trunk等等。 故在此将路由器当作用户设备端口类型选择为access。</p>
<p>端口类型更换后测试：</p>
<p>R1 Ping PCA：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/3zxgED.png" alt="3zxgED.png"></p>
<p>在端口</p>
<p>GE0/0/0上捕获报文如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/3zxTDf.png" alt="3zxTDf.png"></p>
<h1 id="二、RIP配置及RIPv1报文结构分析"><a href="#二、RIP配置及RIPv1报文结构分析" class="headerlink" title="二、RIP配置及RIPv1报文结构分析"></a>二、RIP配置及RIPv1报文结构分析</h1><h2 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h2><p> RIP(Routing Information Protocol,路由信息协议）是一种<a href="https://baike.baidu.com/item/内部网关协议" target="_blank" rel="noopener">内部网关协议</a>（IGP），是一种<a href="https://baike.baidu.com/item/动态路由选择/1250467" target="_blank" rel="noopener">动态路由选择</a>协议，用于自治系统（AS）内的路由信息的传递。RIP协议基于距离矢量算法（DistanceVectorAlgorithms），使用“跳数”(即metric)来衡量到达目标地址的路由距离。这种协议的<a href="https://baike.baidu.com/item/路由器/108294" target="_blank" rel="noopener">路由器</a>只关心自己周围的<a href="https://baike.baidu.com/item/世界/24458" target="_blank" rel="noopener">世界</a>，只与自己相邻的路由器交换信息，范围限制在15跳(15度)之内，再远，它就不关心了。RIP应用于网络七层模型的应用层。 </p>
<h2 id="2-实验目的-1"><a href="#2-实验目的-1" class="headerlink" title="2.实验目的"></a>2.实验目的</h2><ul>
<li>掌握RIP的配置方法。</li>
<li>理解RIPv1报文的结构。</li>
</ul>
<h2 id="3-实验拓扑-1"><a href="#3-实验拓扑-1" class="headerlink" title="3.实验拓扑"></a>3.实验拓扑</h2><p><img src="https://s2.ax1x.com/2020/03/08/3zg9HS.png" alt="3zg9HS.png"></p>
<h2 id="4-实验步骤-1"><a href="#4-实验步骤-1" class="headerlink" title="4.实验步骤"></a>4.实验步骤</h2><p>在静态路由的实验基础上完成RIP的配置。</p>
<h3 id="4-1对静态路由配置进行修改"><a href="#4-1对静态路由配置进行修改" class="headerlink" title="4.1对静态路由配置进行修改"></a>4.1对静态路由配置进行修改</h3><p>删除静态路由条目或者缺省路由条目。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">undo</span> <span class="string">ip route-static 192.168.2.0 255.255.255.0 192.168.1.1</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line"><span class="attr">undo</span> <span class="string">ip route-static 0.0.0.0 0.0.0.0 192.168.1.1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2在S1、R1上分别配置RIP协议"><a href="#4-2在S1、R1上分别配置RIP协议" class="headerlink" title="4.2在S1、R1上分别配置RIP协议"></a>4.2在S1、R1上分别配置RIP协议</h3><p>命令如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在交换机S1上的配置信息如下：</span></span><br><span class="line"><span class="attr">[S1]rip</span></span><br><span class="line"><span class="meta">[S1-rip-1]network</span> <span class="string">192.168.1.0</span></span><br><span class="line"><span class="meta">[S1-rip-1]network</span> <span class="string">192.168.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在路由器R1上的配置信息如下：</span></span><br><span class="line"><span class="attr">[R4]rip</span></span><br><span class="line"><span class="meta">[R4-rip-1]network</span> <span class="string">192.168.1.0</span></span><br></pre></td></tr></table></figure>

<p>查看R1的路由表信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[R1]display</span> <span class="string">ip routing-table</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/03/09/8Sh4Mj.png" alt="8Sh4Mj.png"></p>
<p>可以看到RIP的路由条目：</p>
<ul>
<li><p>目的IP为：192.168.2.0</p>
</li>
<li><p>子网掩码为：255.255.255.0（24）</p>
</li>
<li><p>下一跳IP为：192.168.1.1</p>
</li>
</ul>
<p>测试：</p>
<p>R1 Ping PCA：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/8S5pcQ.png" alt="8S5pcQ.png"></p>
<p>在端口GE0/0/0处捕获报文信息如下：</p>
<p><img src="https://s2.ax1x.com/2020/03/09/8SIaGT.png" alt="8SIaGT.png"></p>
<p>发现RIPv1的报文。</p>
<h3 id="4-3RIPv1报文结构分析"><a href="#4-3RIPv1报文结构分析" class="headerlink" title="4.3RIPv1报文结构分析"></a>4.3RIPv1报文结构分析</h3><p>具体报文内容如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/03/12/8VvUiR.png" alt="8VvUiR.png"></p>
<p>在此只研究RIP报文结构，对其他层不做展开描述。</p>
<p>会话层数据概况 （该文使用RIP协议：Routing Information Protocol）</p>
<ul>
<li><p><strong>Command Response (2)  #命令</strong></p>
<ul>
<li><p>1为RIP请求信息；</p>
<p>交换机刚启动RIP时，发送request请求报文；<br>此后，没有request报文，只有response应答报文</p>
</li>
<li><p>2为RIP响应信息；</p>
</li>
</ul>
</li>
<li><p><strong>Version  RIPv1 (1)  #版本</strong></p>
<p>使用RIPv1版本</p>
</li>
<li><p><strong>Address Family IP (2) #协议簇</strong></p>
<p>该字段长度为4字节。对于TCP/IP协议簇，该字段的取值为2 </p>
</li>
<li><p><strong>IP Address 192.168.1.0   #路由项的目的网络地址</strong> </p>
<p> 表示路由器的目的网络地址为 192.168.1.0</p>
</li>
<li><p><strong>Metric  16 #跳数:</strong></p>
<p>表示跳数为16</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>路由实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>边界网关协议实验（BGP）《二》</title>
    <url>/2020/05/13/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE%E5%AE%9E%E9%AA%8C%EF%BC%88BGP%EF%BC%89%E3%80%8A%E4%BA%8C%E3%80%8B/</url>
    <content><![CDATA[<h1 id="1、拓扑图"><a href="#1、拓扑图" class="headerlink" title="1、拓扑图"></a>1、拓扑图</h1><p><img src="https://s1.ax1x.com/2020/05/11/YYpH2R.png" alt="YYpH2R.png"></p><h1 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h1><p>实现控制选路：</p><ul>
<li>AR1-&gt;AR4  经过AR2</li>
<li>AR4-&gt;AR1  经过AR3</li>
</ul><h1 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3.实验步骤"></a>3.实验步骤</h1><h2 id="3-1基础配置"><a href="#3-1基础配置" class="headerlink" title="3.1基础配置"></a>3.1基础配置</h2><p>根据拓扑所示，配置各个路由器ip。</p><h2 id="3-2配置域内路由协议（OSPF）"><a href="#3-2配置域内路由协议（OSPF）" class="headerlink" title="3.2配置域内路由协议（OSPF）"></a>3.2配置域内路由协议（OSPF）</h2><p>AR2配置如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">R2</span></span><br><span class="line"><span class="meta">[AR2]ospf</span> <span class="string">1</span></span><br><span class="line"><span class="meta">[AR2-ospf-1]area</span> <span class="string">0</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]network</span> <span class="string">19.0.24.0 0.0.0.255</span></span><br><span class="line"><span class="meta">[AR2-ospf-1-area-0.0.0.0]network</span> <span class="string">2.2.2.2 0.0.0.0</span></span><br><span class="line"><span class="attr">[AR2-ospf-1-area-0.0.0.0]quit</span></span><br><span class="line"><span class="attr">[AR2-ospf-1]quit</span></span><br></pre></td></tr></table></figure><a id="more"></a>






<p>AR3，AR4路由器配置命令类似。</p>
<p>测试：</p>
<p> AR2、AR3、AR4互相ping以下他们的loopback地址，看ospf是否能ping通</p>
<p>结果如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYPWrt.png" alt="YYPWrt.png"></p>
<h2 id="3-3域间路由协议（边界网关协议BGP）"><a href="#3-3域间路由协议（边界网关协议BGP）" class="headerlink" title="3.3域间路由协议（边界网关协议BGP）"></a>3.3域间路由协议（边界网关协议BGP）</h2><p> 配置AR1和AR2、AR1和AR3之间的邻接关系，使他们之间能通过==EBGP==相互传递路由，在AR2、AR3和AR4上配置IBGP邻接关系，使AR2、AR3、AR4之间可以通过==IBGP==互相传递路由。 </p>
<ul>
<li>EBGP邻居:AS之间的BGP邻居关系。</li>
<li>IBGP邻居:同一个AS内部的BGP邻居关系。</li>
</ul>
<h3 id="AR1配置："><a href="#AR1配置：" class="headerlink" title="AR1配置："></a>AR1配置：</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;AR1&gt;sys</span></span><br><span class="line"><span class="meta">[AR1]bgp</span> <span class="string">100</span></span><br><span class="line"><span class="meta">[AR1-bgp]router-id</span> <span class="string">1.1.1.1</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">19.0.12.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR1-bgp]peer</span> <span class="string">19.0.13.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR1-bgp]network</span> <span class="string">1.1.1.1 32</span></span><br></pre></td></tr></table></figure>

<h3 id="AR2配置："><a href="#AR2配置：" class="headerlink" title="AR2配置："></a>AR2配置：</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR2]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR2-bgp]router-id</span> <span class="string">2.2.2.2</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">19.0.12.1 as-number 100</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">19.0.24.2 as-number 200</span></span><br><span class="line"><span class="meta">[AR2-bgp]peer</span> <span class="string">19.0.24.2 next-hop-local</span></span><br><span class="line"><span class="meta">[AR2-bgp]import-route</span> <span class="string">ospf 1</span></span><br></pre></td></tr></table></figure>

<p>AR3、AR4与AR2类似。</p>
<h2 id="3-4查看BGP路由"><a href="#3-4查看BGP路由" class="headerlink" title="3.4查看BGP路由"></a>3.4查看BGP路由</h2><h3 id="AR1路由表："><a href="#AR1路由表：" class="headerlink" title="AR1路由表："></a>AR1路由表：</h3><p><img src="https://s1.ax1x.com/2020/05/11/YYFD9e.png" alt="YYFD9e.png"></p>
<h3 id="AR4路由表："><a href="#AR4路由表：" class="headerlink" title="AR4路由表："></a>AR4路由表：</h3><p><img src="https://s1.ax1x.com/2020/05/11/YYkiHx.png" alt="YYkiHx.png"></p>
<p> 从路由表可以看出，AR4到AR1之间的通信是通过AR2来传递的。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>AR4 Ping AR1 在AR2的GE0/0/0端口、AR3的GE0/0/1端口分别进行报文捕获，结果如下：</p>
<p>AR2的GE0/0/0端口:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYk5a6.png" alt="YYk5a6.png"></p>
<p>AR3的GE0/0/1:</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYkOsA.png" alt="YYkOsA.png"></p>
<p>在AR2的GE0/0/0端口捕获到ICMP报文，验证了路由传递路径为AR4-&gt;AR2-&gt;AR1。</p>
<h2 id="3-5-BGP各种属性控制选路"><a href="#3-5-BGP各种属性控制选路" class="headerlink" title="3.5 BGP各种属性控制选路"></a>3.5 BGP各种属性控制选路</h2><h3 id="3-5-1-通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的"><a href="#3-5-1-通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的" class="headerlink" title="3.5.1 通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的"></a>3.5.1 通过MED属性控制选路，使得AR1到AR4的通信是通过AR2来传递的</h3><p>==MED值越大，优先级越低。==</p>
<ol>
<li><p>修改MED属性，增加AR3路由器的MED值</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR3]route-policy</span> <span class="string">med permit node 10</span></span><br><span class="line"><span class="meta">[AR3-route-policy]apply</span> <span class="string">cost + 500</span></span><br><span class="line"><span class="attr">[AR3-route-policy]quit</span></span><br><span class="line"><span class="meta">[AR3]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR3-bgp]peer</span> <span class="string">19.0.12.1 route-policy med export</span></span><br><span class="line"><span class="attr">[AR3-bgp]quit</span></span><br><span class="line"><span class="attr">[AR3]quit</span></span><br><span class="line"><span class="meta">&lt;AR3&gt;reset</span> <span class="string">bgp all</span></span><br><span class="line"><span class="attr">&lt;AR3&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在AR1上查看路由表 </p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYEr3F.png" alt="YYEr3F.png"></p>
<p>可以看到去往AR3的MED值明显大于AR2。故路由传递路径为AR1-&gt;AR2-&gt;AR4。</p>
</li>
</ol>
<h3 id="3-5-2-修改优先级参数，使AR4到AR1的通信通过AR3来传递"><a href="#3-5-2-修改优先级参数，使AR4到AR1的通信通过AR3来传递" class="headerlink" title="3.5.2 修改优先级参数，使AR4到AR1的通信通过AR3来传递"></a>3.5.2 修改优先级参数，使AR4到AR1的通信通过AR3来传递</h3><p> 本地优先级（local-preference属性）的默认值为100，越大越有先，取值范围0-4294967295<br>想走谁，就将谁的local-preference值设置的大些 </p>
<ol>
<li><p>在AR3上修改优先级 </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[AR3]route-policy</span> <span class="string">lop permit node 10</span></span><br><span class="line"><span class="meta">[AR3-route-policy]apply</span> <span class="string">local-preference 222</span></span><br><span class="line"><span class="attr">[AR3-route-policy]quit</span></span><br><span class="line"><span class="meta">[AR3]bgp</span> <span class="string">200</span></span><br><span class="line"><span class="meta">[AR3-bgp]peer</span> <span class="string">19.0.34.2 route-policy lop export</span></span><br><span class="line"><span class="attr">[AR3-bgp]quit</span></span><br><span class="line"><span class="attr">[AR3]quit</span></span><br><span class="line"><span class="meta">&lt;AR3&gt;reset</span> <span class="string">bgp all</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在AR4上查看路由表<br><img src="https://s1.ax1x.com/2020/05/11/YYZbkt.png" alt="YYZbkt.png"></p>
<p>AR3的local-preference值大于AR2，路由路径应为AR4-&gt;AR3-&gt;AR1。</p>
</li>
</ol>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>AR4 Ping AR1 在AR3的GE0/0/0端口进行报文捕获，捕获报文内容如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/05/11/YYm85q.png" alt="YYm85q.png"></p>
]]></content>
      <categories>
        <category>网络工程设计</category>
        <category>BGP实验</category>
      </categories>
      <tags>
        <tag>网络工程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>高级 Solidity 理论</title>
    <url>/2020/06/26/%E9%AB%98%E7%BA%A7%20Solidity%20%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<p>在学习solidity的过程中发现一个在线学习平台，这是一个第三方的在线智能合约学习环境，目标是教会大家实现 DApp 游戏。这个网站的特点是自作非常精良，各种辅助学习材料丰富，并且是对 Solidity 小白友好的。</p><p><a href="https://cryptozombies.io/" target="_blank" rel="noopener">点击这里进入学习平台</a></p><h1 id="一、智能协议的永固性"><a href="#一、智能协议的永固性" class="headerlink" title="一、智能协议的永固性"></a>一、智能协议的永固性</h1><p>到现在为止，我们讲的 Solidity 和其他语言没有质的区别，它长得也很像 JavaScript。</p><a id="more"></a>


<p>但是，在有几点以太坊上的 DApp 跟普通的应用程序有着天壤之别。</p>
<p>第一个例子，在你把智能协议传上以太坊之后，它就变得<strong>不可更改</strong>, 这种永固性意味着你的代码永远不能被调整或更新。</p>
<p>你编译的程序会一直，永久的，不可更改的，存在以太坊上。这就是 Solidity 代码的安全性如此重要的一个原因。如果你的智能协议有任何漏洞，即使你发现了也无法补救。你只能让你的用户们放弃这个智能协议，然后转移到一个新的修复后的合约上。</p>
<p>但这恰好也是智能合约的一大优势。代码说明一切。如果你去读智能合约的代码，并验证它，你会发现，一旦函数被定义下来，每一次的运行，程序都会严格遵照函数中原有的代码逻辑一丝不苟地执行，完全不用担心函数被人篡改而得到意外的结果。</p>
<h2 id="外部依赖关系"><a href="#外部依赖关系" class="headerlink" title="外部依赖关系"></a>外部依赖关系</h2><p>在第2课中，我们将加密小猫（CryptoKitties）合约的地址硬编码到 DApp 中去了。有没有想过，如果加密小猫出了点问题，比方说，集体消失了会怎么样？ 虽然这种事情几乎不可能发生，但是，如果小猫没了，我们的 DApp 也会随之失效 – 因为我们在 DApp 的代码中用“硬编码”的方式指定了加密小猫的地址，如果这个根据地址找不到小猫，我们的僵尸也就吃不到小猫了，而按照前面的描述，我们却没法修改合约去应付这个变化！</p>
<p>因此，我们不能硬编码，而要采用“函数”，以便于 DApp 的关键部分可以以参数形式修改。</p>
<p>比方说，我们不再一开始就把猎物地址给写入代码，而是写个函数 <code>setKittyContractAddress</code>, 运行时再设定猎物的地址，这样我们就可以随时去锁定新的猎物，也不用担心加密小猫集体消失了。</p>
<h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><p>请修改第2课的代码，使得可以通过程序更改 CryptoKitties 合约地址。</p>
<ol>
<li>删除采用硬编码 方式的 <code>ckAddress</code> 代码行。</li>
<li>之前创建 <code>kittyContract</code> 变量的那行代码，修改为对 <code>kittyContract</code> 变量的声明 – 暂时不给它指定具体的实例。</li>
<li>创建名为 <code>setKittyContractAddress</code> 的函数， 它带一个参数 <code>_address</code>（<code>address</code>类型）， 可见性设为<code>external</code>。</li>
<li>在函数内部，添加一行代码，将 <code>kittyContract</code> 变量设置为返回值：<code>KittyInterface（_address）</code>。</li>
</ol>
<blockquote>
<p>注意：你可能会注意到这个功能有个安全漏洞，别担心 - 咱们到下一章里解决它;）</p>
</blockquote>
<h2 id="合约修改"><a href="#合约修改" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 移除这一行:</span></span><br><span class="line">  <span class="comment">//address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;</span></span><br><span class="line">  <span class="comment">// 2. 只声明变量:</span></span><br><span class="line">  <span class="comment">//KittyInterface kittyContract = KittyInterface(ckAddress);</span></span><br><span class="line">  KittyInterface kittyContract;</span><br><span class="line">  <span class="comment">// 3. 增加 setKittyContractAddress 方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setKittyContractAddress</span>(<span class="params">address _address</span>) <span class="title">external</span> </span>&#123;</span><br><span class="line">    kittyContract = KittyInterface(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string species</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keccak256(species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、Ownable-Contracts"><a href="#二、Ownable-Contracts" class="headerlink" title="二、Ownable Contracts"></a>二、Ownable Contracts</h1><p>上一章中，您有没有发现任何安全漏洞呢？</p>
<p>呀！<code>setKittyContractAddress</code> 可见性居然申明为“外部的”（<code>external</code>），岂不是任何人都可以调用它！ 也就是说，任何调用该函数的人都可以更改 CryptoKitties 合约的地址，使得其他人都没法再运行我们的程序了。</p>
<p>我们确实是希望这个地址能够在合约中修改，但我可没说让每个人去改它呀。</p>
<p>要对付这样的情况，通常的做法是指定合约的“所有权” - 就是说，给它指定一个主人（没错，就是您），只有主人对它享有特权。</p>
<h2 id="OpenZeppelin库的Ownable-合约"><a href="#OpenZeppelin库的Ownable-合约" class="headerlink" title="OpenZeppelin库的Ownable 合约"></a>OpenZeppelin库的<code>Ownable</code> 合约</h2><p>下面是一个 <code>Ownable</code> 合约的例子： 来自 <strong>_ OpenZeppelin _</strong> Solidity 库的 <code>Ownable</code> 合约。 OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。等把这一课学完，您不要催我们发布下一课，最好利用这个时间把 OpenZeppelin 的网站看看，保管您会学到很多东西！</p>
<p>把楼下这个合约读读通，是不是还有些没见过代码？别担心，我们随后会解释。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title Ownable</span></span><br><span class="line"><span class="comment"> * @dev The Ownable contract has an owner address, and provides basic authorization control</span></span><br><span class="line"><span class="comment"> * functions, this simplifies the implementation of "user permissions".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract Ownable &#123;</span><br><span class="line">  address public owner;</span><br><span class="line">  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @dev The Ownable constructor sets the original `owner` of the contract to the sender</span></span><br><span class="line"><span class="comment">   * account.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Ownable</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @dev Throws if called by any account other than the owner.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  modifier onlyOwner() &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == owner);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @dev Allows the current owner to transfer control of the contract to a newOwner.</span></span><br><span class="line"><span class="comment">   * @param newOwner The address to transfer ownership to.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transferOwnership</span>(<span class="params">address newOwner</span>) <span class="title">public</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(newOwner != address(<span class="number">0</span>));</span><br><span class="line">    OwnershipTransferred(owner, newOwner);</span><br><span class="line">    owner = newOwner;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面有没有您没学过的东东？</p>
<ul>
<li>构造函数：<code>function Ownable()</code>是一个 <strong>_ constructor_</strong> (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。</li>
<li>函数修饰符：<code>modifier onlyOwner()</code>。 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。 在这个例子中，我们就可以写个修饰符 <code>onlyOwner</code> 检查下调用者，确保只有合约的主人才能运行本函数。我们下一章中会详细讲述修饰符，以及那个奇怪的<code>_;</code>。</li>
<li><code>indexed</code> 关键字：别担心，我们还用不到它。</li>
</ul>
<p>所以<code>Ownable</code> 合约基本都会这么干：</p>
<ol>
<li>合约创建，构造函数先行，将其 <code>owner</code> 设置为<code>msg.sender</code>（其部署者）</li>
<li>为它加上一个修饰符 <code>onlyOwner</code>，它会限制陌生人的访问，将访问某些函数的权限锁定在 <code>owner</code> 上。</li>
<li>允许将合约所有权转让给他人。</li>
</ol>
<p><code>onlyOwner</code> 简直人见人爱，大多数人开发自己的 Solidity DApps，都是从复制/粘贴 <code>Ownable</code> 开始的，从它再继承出的子类，并在之上进行功能开发。</p>
<p>既然我们想把 <code>setKittyContractAddress</code> 限制为 <code>onlyOwner</code> ，我们也要做同样的事情。</p>
<h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><p>首先，将 <code>Ownable</code> 合约的代码复制一份到新文件 <code>ownable.sol</code> 中。 接下来，创建一个 <code>ZombieFactory</code>，继承 <code>Ownable</code>。</p>
<p>1.在程序中导入 <code>ownable.sol</code> 的内容。 如果您不记得怎么做了，参考下 <code>zombiefeeding.sol</code>。</p>
<p>2.修改 <code>ZombieFactory</code> 合约， 让它继承自 <code>Ownable</code>。 如果您不记得怎么做了，看看 <code>zombiefeeding.sol</code>。</p>
<h2 id="合约修改-1"><a href="#合约修改-1" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 在这里导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./ownable.sol"</span>;</span><br><span class="line"><span class="comment">// 2. 在这里继承:</span></span><br><span class="line"><span class="comment">//contract ZombieFactory &#123;</span></span><br><span class="line">contract ZombieFactory is Ownable &#123;  </span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        randDna = randDna - randDna % <span class="number">100</span>;</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、onlyOwner-函数修饰符"><a href="#三、onlyOwner-函数修饰符" class="headerlink" title="三、onlyOwner 函数修饰符"></a>三、onlyOwner 函数修饰符</h1><p>现在我们有了个基本版的合约 <code>ZombieFactory</code> 了，它继承自 <code>Ownable</code> 接口，我们也可以给 <code>ZombieFeeding</code> 加上 <code>onlyOwner</code> 函数修饰符。</p>
<p>这就是合约继承的工作原理。记得：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZombieFeeding 是个 ZombieFactory</span><br><span class="line">ZombieFactory 是个 Ownable</span><br></pre></td></tr></table></figure>

<p>因此 <code>ZombieFeeding</code> 也是个 <code>Ownable</code>, 并可以通过 <code>Ownable</code> 接口访问父类中的函数/事件/修饰符。往后，<code>ZombieFeeding</code> 的继承者合约们同样也可以这么延续下去。</p>
<h2 id="函数修饰符"><a href="#函数修饰符" class="headerlink" title="函数修饰符"></a>函数修饰符</h2><p>函数修饰符看起来跟函数没什么不同，不过关键字<code>modifier</code> 告诉编译器，这是个<code>modifier(修饰符)</code>，而不是个<code>function(函数)</code>。它不能像函数那样被直接调用，只能被添加到函数定义的末尾，用以改变函数的行为。</p>
<p>咱们仔细读读 <code>onlyOwner</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev 调用者不是‘主人’，就会抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">modifier onlyOwner() &#123;</span><br><span class="line">  <span class="built_in">require</span>(msg.sender == owner);</span><br><span class="line">  _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>onlyOwner</code> 函数修饰符是这么用的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract MyContract is Ownable &#123;</span><br><span class="line">  event LaughManiacally(string laughter);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注意！ `onlyOwner`上场 :</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">likeABoss</span>(<span class="params"></span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    LaughManiacally(<span class="string">"Muahahahaha"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 <code>likeABoss</code> 函数上的 <code>onlyOwner</code> 修饰符。 当你调用 <code>likeABoss</code> 时，<strong>首先执行</strong> <code>onlyOwner</code> 中的代码， 执行到 <code>onlyOwner</code> 中的 <code>_;</code> 语句时，程序再返回并执行 <code>likeABoss</code> 中的代码。</p>
<p>可见，尽管函数修饰符也可以应用到各种场合，但最常见的还是放在函数执行之前添加快速的 <code>require</code>检查。</p>
<p>因为给函数添加了修饰符 <code>onlyOwner</code>，使得<strong>唯有合约的主人</strong>（也就是部署者）才能调用它。</p>
<blockquote>
<p>注意：主人对合约享有的特权当然是正当的，不过也可能被恶意使用。比如，万一，主人添加了个后门，允许他偷走别人的僵尸呢？</p>
</blockquote>
<blockquote>
<p>所以非常重要的是，部署在以太坊上的 DApp，并不能保证它真正做到去中心，你需要阅读并理解它的源代码，才能防止其中没有被部署者恶意植入后门；作为开发人员，如何做到既要给自己留下修复 bug 的余地，又要尽量地放权给使用者，以便让他们放心你，从而愿意把数据放在你的 DApp 中，这确实需要个微妙的平衡。</p>
</blockquote>
<h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><p>现在我们可以限制第三方对 <code>setKittyContractAddress</code>的访问，除了我们自己，谁都无法去修改它。</p>
<ol>
<li>将 <code>onlyOwner</code> 函数修饰符添加到 <code>setKittyContractAddress</code> 中。</li>
</ol>
<h2 id="合约修改-2"><a href="#合约修改-2" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  KittyInterface kittyContract;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改这个函数:</span></span><br><span class="line">  <span class="comment">//function setKittyContractAddress(address _address) external &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setKittyContractAddress</span>(<span class="params">address _address</span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    kittyContract = KittyInterface(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string species</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keccak256(species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、Gas"><a href="#四、Gas" class="headerlink" title="四、Gas"></a>四、Gas</h1><p>厉害！现在我们懂了如何在禁止第三方修改我们的合约的同时，留个后门给咱们自己去修改。</p>
<p>让我们来看另一种使得 Solidity 编程语言与众不同的特征：</p>
<h2 id="Gas-驱动以太坊DApps的能源"><a href="#Gas-驱动以太坊DApps的能源" class="headerlink" title="Gas - 驱动以太坊DApps的能源"></a>Gas - 驱动以太坊DApps的能源</h2><p>在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 <strong><em>gas\</em></strong>，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。</p>
<p>一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 <strong><em>gas\</em></strong> 等于这个操作背后的所有运算花销的总和。</p>
<p>由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。</p>
<h2 id="为什么要用-gas-来驱动？"><a href="#为什么要用-gas-来驱动？" class="headerlink" title="为什么要用 gas\ 来驱动？"></a>为什么要用 <strong><em>gas\</em></strong> 来驱动？</h2><p>以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的“去中心化” 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。</p>
<p>可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。</p>
<blockquote>
<p>注意：如果你使用侧链，倒是不一定需要付费，比如咱们在 Loom Network 上构建的 CryptoZombies 就免费。你不会想要在以太坊主网上玩儿“魔兽世界”吧？ - 所需要的 gas 可能会买到你破产。但是你可以找个算法理念不同的侧链来玩它。我们将在以后的课程中咱们会讨论到，什么样的 DApp 应该部署在太坊主链上，什么又最好放在侧链。</p>
</blockquote>
<h2 id="省-gas-的招数：结构封装-（Struct-packing）"><a href="#省-gas-的招数：结构封装-（Struct-packing）" class="headerlink" title="省 gas 的招数：结构封装 （Struct packing）"></a>省 gas 的招数：结构封装 （Struct packing）</h2><p>在第1课中，我们提到除了基本版的 <code>uint</code> 外，还有其他变种 <code>uint</code>：<code>uint8</code>，<code>uint16</code>，<code>uint32</code>等。</p>
<p>通常情况下我们不会考虑使用 <code>uint</code> 变种，因为无论如何定义 <code>uint</code>的大小，Solidity 为它保留256位的存储空间。例如，使用 <code>uint8</code> 而不是<code>uint</code>（<code>uint256</code>）不会为你节省任何 gas。</p>
<p>除非，把 <code>uint</code> 绑定到 <code>struct</code> 里面。</p>
<p>如果一个 <code>struct</code> 中有多个 <code>uint</code>，则尽可能使用较小的 <code>uint</code>, Solidity 会将这些 <code>uint</code> 打包在一起，从而占用较少的存储空间。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">struct NormalStruct &#123;</span><br><span class="line">  uint a;</span><br><span class="line">  uint b;</span><br><span class="line">  uint c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct MiniMe &#123;</span><br><span class="line">  uint32 a;</span><br><span class="line">  uint32 b;</span><br><span class="line">  uint c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为使用了结构打包，`mini` 比 `normal` 占用的空间更少</span></span><br><span class="line">NormalStruct normal = NormalStruct(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">MiniMe mini = MiniMe(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>所以，当 <code>uint</code> 定义在一个 <code>struct</code> 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 <code>struct</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint c; uint32 a; uint32 b;` 和 `uint32 a; uint c; uint32 b;</span><br></pre></td></tr></table></figure>

<p>前者比后者需要的gas更少，因为前者把<code>uint32</code>放一起了。</p>
<h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><p>在本课中，咱们给僵尸添2个新功能：<code>level</code> 和 <code>readyTime</code> - 后者是用来实现一个“冷却定时器”，以限制僵尸猎食的频率。</p>
<p>让我们回到 <code>zombiefactory.sol</code>。</p>
<ol>
<li>为 <code>Zombie</code> 结构体 添加两个属性：<code>level</code>（<code>uint32</code>）和<code>readyTime</code>（<code>uint32</code>）。因为希望同类型数据打成一个包，所以把它们放在结构体的末尾。</li>
</ol>
<p>32位足以保存僵尸的级别和时间戳了，这样比起使用普通的<code>uint</code>（256位），可以更紧密地封装数据，从而为我们省点 gas。</p>
<h2 id="合约修改-3"><a href="#合约修改-3" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./ownable.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory is Ownable &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">        <span class="comment">//在这里添加数据</span></span><br><span class="line">        uint32 level;</span><br><span class="line">        uint32 readyTime;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        randDna = randDna - randDna % <span class="number">100</span>;</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、时间单位"><a href="#五、时间单位" class="headerlink" title="五、时间单位"></a>五、时间单位</h1><p><code>level</code> 属性表示僵尸的级别。以后，在我们创建的战斗系统中，打胜仗的僵尸会逐渐升级并获得更多的能力。</p>
<p><code>readyTime</code> 稍微复杂点。我们希望增加一个“冷却周期”，表示僵尸在两次猎食或攻击之之间必须等待的时间。如果没有它，僵尸每天可能会攻击和繁殖1,000次，这样游戏就太简单了。</p>
<p>为了记录僵尸在下一次进击前需要等待的时间，我们使用了 Solidity 的时间单位。</p>
<h2 id="时间单位"><a href="#时间单位" class="headerlink" title="时间单位"></a>时间单位</h2><p>Solidity 使用自己的本地时间单位。</p>
<p>变量 <code>now</code> 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。我写这句话时 unix 时间是 <code>1515527488</code>。</p>
<blockquote>
<p>注意：Unix时间传统用一个32位的整数进行存储。这会导致“2038年”问题，当这个32位的unix时间戳不够用，产生溢出，使用这个时间的遗留系统就麻烦了。所以，如果我们想让我们的 DApp 跑够20年，我们可以使用64位整数表示时间，但为此我们的用户又得支付更多的 gas。真是个两难的设计啊！</p>
</blockquote>
<p>Solidity 还包含<code>秒(seconds)</code>，<code>分钟(minutes)</code>，<code>小时(hours)</code>，<code>天(days)</code>，<code>周(weeks)</code> 和 <code>年(years)</code> 等时间单位。它们都会转换成对应的秒数放入 <code>uint</code> 中。所以 <code>1分钟</code> 就是 <code>60</code>，<code>1小时</code>是 <code>3600</code>（60秒×60分钟），<code>1天</code>是<code>86400</code>（24小时×60分钟×60秒），以此类推。</p>
<p>下面是一些使用时间单位的实用案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uint lastUpdated;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将‘上次更新时间’ 设置为 ‘现在’</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTimestamp</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">  lastUpdated = now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果到上次`updateTimestamp` 超过5分钟，返回 'true'</span></span><br><span class="line"><span class="comment">// 不到5分钟返回 'false'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fiveMinutesHavePassed</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (now &gt;= (lastUpdated + <span class="number">5</span> minutes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这些工具，我们可以为僵尸设定“冷静时间”功能。</p>
<h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><p>现在咱们给DApp添加一个“冷却周期”的设定，让僵尸两次攻击或捕猎之间必须等待 <strong>1天</strong>。</p>
<ol>
<li><p>声明一个名为 <code>cooldownTime</code> 的<code>uint</code>，并将其设置为 <code>1 days</code>。（没错，”1 days“使用了复数， 否则通不过编译器）</p>
</li>
<li><p>因为在上一章中我们给 <code>Zombie</code> 结构体中添加 <code>level</code> 和 <code>readyTime</code> 两个参数，所以现在创建一个新的 <code>Zombie</code> 结构体时，需要修改 <code>_createZombie()</code>，在其中把新旧参数都初始化一下。</p>
<p>修改 <code>zombies.push</code> 那一行， 添加加2个参数：<code>1</code>（表示当前的 <code>level</code> ）和<code>uint32（now + cooldownTime）</code>（现在+冷却时间，表示下次允许攻击的时间 <code>readyTime</code>）。</p>
</li>
</ol>
<blockquote>
<p>注意：必须使用 <code>uint32（...）</code> 进行强制类型转换，因为 <code>now</code> 返回类型 <code>uint256</code>。所以我们需要明确将它转换成一个 <code>uint32</code> 类型的变量。</p>
</blockquote>
<p><code>now + cooldownTime</code> 将等于当前的unix时间戳（以秒为单位）加上”1天“里的秒数 - 这将等于从现在起1天后的unix时间戳。然后我们就比较，看看这个僵尸的 <code>readyTime</code>是否大于 <code>now</code>，以决定再次启用僵尸的时机有没有到来。</p>
<p>下一章中，我们将讨论如何通过 <code>readyTime</code> 来规范僵尸的行为。</p>
<h2 id="合约修改-4"><a href="#合约修改-4" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefactory.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./ownable.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory is Ownable &#123;</span><br><span class="line"></span><br><span class="line">    event NewZombie(uint zombieId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line">    <span class="comment">// 1. 在这里定义 `cooldownTime`</span></span><br><span class="line">    uint cooldownTime = <span class="number">1</span> days;</span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">        uint32 level;</span><br><span class="line">        uint32 readyTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] public zombies;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">uint</span> =&gt;</span> address) public zombieToOwner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createZombie</span>(<span class="params">string _name, uint _dna</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 修改下面这行:</span></span><br><span class="line">        <span class="comment">//uint id = zombies.push(Zombie(_name, _dna)) - 1;</span></span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna, <span class="number">1</span>, uint32(now + cooldownTime))) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_generateRandomDna</span>(<span class="params">string _str</span>) <span class="title">private</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRandomZombie</span>(<span class="params">string _name</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        randDna = randDna - randDna % <span class="number">100</span>;</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、僵尸冷却"><a href="#六、僵尸冷却" class="headerlink" title="六、僵尸冷却"></a>六、僵尸冷却</h1><p>现在，<code>Zombie</code> 结构体中定义好了一个 <code>readyTime</code> 属性，让我们跳到 <code>zombiefeeding.sol</code>， 去实现一个”冷却周期定时器“。</p>
<p>按照以下步骤修改 <code>feedAndMultiply</code>：</p>
<ol>
<li>”捕猎“行为会触发僵尸的”冷却周期“</li>
<li>僵尸在这段”冷却周期“结束前不可再捕猎小猫</li>
</ol>
<p>这将限制僵尸，防止其无限制地捕猎小猫或者整天不停地繁殖。将来，当我们增加战斗功能时，我们同样用”冷却周期“限制僵尸之间打斗的频率。</p>
<p>首先，我们要定义一些辅助函数，设置并检查僵尸的 <code>readyTime</code>。</p>
<h2 id="将结构体作为参数传入"><a href="#将结构体作为参数传入" class="headerlink" title="将结构体作为参数传入"></a>将结构体作为参数传入</h2><p>由于结构体的存储指针可以以参数的方式传递给一个 <code>private</code> 或 <code>internal</code> 的函数，因此结构体可以在多个函数之间相互传递。</p>
<p>遵循这样的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doStuff</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// do stuff with _zombie</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们可以将某僵尸的引用直接传递给一个函数，而不用是通过参数传入僵尸ID后，函数再依据ID去查找。</p>
<h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>先定义一个 <code>_triggerCooldown</code> 函数。它要求一个参数，<code>_zombie</code>，表示一某个僵尸的存储指针。这个函数可见性设置为 <code>internal</code>。</li>
<li>在函数中，把 <code>_zombie.readyTime</code> 设置为 <code>uint32（now + cooldownTime）</code>。</li>
<li>接下来，创建一个名为 <code>_isReady</code> 的函数。这个函数的参数也是名为 <code>_zombie</code> 的 <code>Zombie storage</code>。这个功能只具有 <code>internal</code> 可见性，并返回一个 <code>bool</code> 值。</li>
<li>函数计算返回<code>(_zombie.readyTime &lt;= now)</code>，值为 <code>true</code> 或 <code>false</code>。这个功能的目的是判断下次允许猎食的时间是否已经到了。</li>
</ol>
<h2 id="合约修改-5"><a href="#合约修改-5" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  KittyInterface kittyContract;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setKittyContractAddress</span>(<span class="params">address _address</span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    kittyContract = KittyInterface(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在这里定义 `_triggerCooldown` 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_triggerCooldown</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    _zombie.readyTime = uint32(now + cooldownTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 在这里定义 `_isReady` 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isReady</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (_zombie.readyTime &lt;= now);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string species</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keccak256(species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、公有函数和安全性"><a href="#七、公有函数和安全性" class="headerlink" title="七、公有函数和安全性"></a>七、公有函数和安全性</h1><p>现在来修改 <code>feedAndMultiply</code> ，实现冷却周期。</p>
<p>回顾一下这个函数，前一课上我们将其可见性设置为<code>public</code>。你必须仔细地检查所有声明为 <code>public</code> 和 <code>external</code>的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 <code>onlyOwner</code> 这样的函数修饰符，用户能利用各种可能的参数去调用它们。</p>
<p>检查完这个函数，用户就可以直接调用这个它，并传入他们所希望的 <code>_targetDna</code> 或 <code>species</code> 。打个游戏还得遵循这么多的规则，还能不能愉快地玩耍啊！</p>
<p>仔细观察，这个函数只需被 <code>feedOnKitty()</code> 调用，因此，想要防止漏洞，最简单的方法就是设其可见性为 <code>internal</code>。</p>
<h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>目前函数 <code>feedAndMultiply</code> 可见性为 <code>public</code>。我们将其改为 <code>internal</code> 以保障合约安全。因为我们不希望用户调用它的时候塞进一堆乱七八糟的 DNA。</li>
<li><code>feedAndMultiply</code> 过程需要参考 <code>cooldownTime</code>。首先，在找到 <code>myZombie</code> 之后，添加一个 <code>require</code> 语句来检查 <code>_isReady()</code> 并将 <code>myZombie</code> 传递给它。这样用户必须等到僵尸的 <code>冷却周期</code> 结束后才能执行 <code>feedAndMultiply</code> 功能。</li>
<li>在函数结束时，调用 <code>_triggerCooldown(myZombie)</code>，标明捕猎行为触发了僵尸新的冷却周期。</li>
</ol>
<h2 id="合约修改-6"><a href="#合约修改-6" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiefeeding.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefactory.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KittyInterface &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getKitty</span>(<span class="params">uint256 _id</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    bool isGestating,</span></span></span><br><span class="line"><span class="function"><span class="params">    bool isReady,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 cooldownIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 nextActionAt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 siringWithId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 birthTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 matronId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 sireId,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 generation,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 genes</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">ZombieFeeding</span> <span class="title">is</span> <span class="title">ZombieFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  KittyInterface kittyContract;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setKittyContractAddress</span>(<span class="params">address _address</span>) <span class="title">external</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    kittyContract = KittyInterface(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_triggerCooldown</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    _zombie.readyTime = uint32(now + cooldownTime);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_isReady</span>(<span class="params">Zombie storage _zombie</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (_zombie.readyTime &lt;= now);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 使这个函数的可见性为 internal</span></span><br><span class="line">  <span class="comment">//function feedAndMultiply(uint _zombieId, uint _targetDna, string species) public &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedAndMultiply</span>(<span class="params">uint _zombieId, uint _targetDna, string species</span>) <span class="title">internal</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    <span class="comment">// 2. 在这里为 `_isReady` 增加一个检查</span></span><br><span class="line">    <span class="built_in">require</span>(_isReady(myZombie));</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keccak256(species) == keccak256(<span class="string">"kitty"</span>)) &#123;</span><br><span class="line">      newDna = newDna - newDna % <span class="number">100</span> + <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _createZombie(<span class="string">"NoName"</span>, newDna);</span><br><span class="line">    <span class="comment">// 3. 调用 `triggerCooldown`</span></span><br><span class="line">    _triggerCooldown(myZombie);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feedOnKitty</span>(<span class="params">uint _zombieId, uint _kittyId</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    uint kittyDna;</span><br><span class="line">    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);</span><br><span class="line">    feedAndMultiply(_zombieId, kittyDna, <span class="string">"kitty"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、进一步了解函数修饰符"><a href="#八、进一步了解函数修饰符" class="headerlink" title="八、进一步了解函数修饰符"></a>八、进一步了解函数修饰符</h1><p>相当不错！我们的僵尸现在有了“冷却定时器”功能。</p>
<p>接下来，我们将添加一些辅助方法。我们为您创建了一个名为 <code>zombiehelper.sol</code> 的新文件，并且将 <code>zombiefeeding.sol</code> 导入其中，这让我们的代码更整洁。</p>
<p>我们打算让僵尸在达到一定水平后，获得特殊能力。但是达到这个小目标，我们还需要学一学什么是“函数修饰符”。</p>
<h2 id="带参数的函数修饰符"><a href="#带参数的函数修饰符" class="headerlink" title="带参数的函数修饰符"></a>带参数的函数修饰符</h2><p>之前我们已经读过一个简单的函数修饰符了：<code>onlyOwner</code>。函数修饰符也可以带参数。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储用户年龄的映射</span></span><br><span class="line">mapping (<span class="function"><span class="params">uint</span> =&gt;</span> uint) public age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限定用户年龄的修饰符</span></span><br><span class="line">modifier olderThan(uint _age, uint _userId) &#123;</span><br><span class="line">  <span class="built_in">require</span>(age[_userId] &gt;= _age);</span><br><span class="line">  _;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须年满16周岁才允许开车 (至少在美国是这样的).</span></span><br><span class="line"><span class="comment">// 我们可以用如下参数调用`olderThan` 修饰符:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">driveCar</span>(<span class="params">uint _userId</span>) <span class="title">public</span> <span class="title">olderThan</span>(<span class="params"><span class="number">16</span>, _userId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 其余的程序逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到了吧， <code>olderThan</code> 修饰符可以像函数一样接收参数，是“宿主”函数 <code>driveCar</code> 把参数传递给它的修饰符的。</p>
<p>来，我们自己生产一个修饰符，通过传入的<code>level</code>参数来限制僵尸使用某些特殊功能。</p>
<h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><ol>
<li>在<code>ZombieHelper</code> 中，创建一个名为 <code>aboveLevel</code> 的<code>modifier</code>，它接收2个参数， <code>_level</code> (<code>uint</code>类型) 以及 <code>_zombieId</code> (<code>uint</code>类型)。</li>
<li>运用函数逻辑确保僵尸 <code>zombies[_zombieId].level</code> 大于或等于 <code>_level</code>。</li>
<li>记住，修饰符的最后一行为 <code>_;</code>，表示修饰符调用结束后返回，并执行调用函数余下的部分。</li>
</ol>
<h2 id="合约修改-7"><a href="#合约修改-7" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里开始</span></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、僵尸修饰符"><a href="#九、僵尸修饰符" class="headerlink" title="九、僵尸修饰符"></a>九、僵尸修饰符</h1><p>现在让我们设计一些使用 <code>aboveLevel</code> 修饰符的函数。</p>
<p>作为游戏，您得有一些措施激励玩家们去升级他们的僵尸：</p>
<ul>
<li>2级以上的僵尸，玩家可给他们改名。</li>
<li>20级以上的僵尸，玩家能给他们定制的 DNA。</li>
</ul>
<p>是实现这些功能的时候了。以下是上一课的示例代码，供参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 存储用户年龄的映射</span><br><span class="line">mapping (uint =&gt; uint) public age;</span><br><span class="line"></span><br><span class="line">// 限定用户年龄的修饰符</span><br><span class="line">modifier olderThan(uint _age, uint _userId) &#123;</span><br><span class="line">  require (age[_userId] &gt;= _age);</span><br><span class="line">  _;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 必须年满16周岁才允许开车 (至少在美国是这样的).</span><br><span class="line">// 我们可以用如下参数调用`olderThan` 修饰符:</span><br><span class="line">function driveCar(uint _userId) public olderThan(16, _userId) &#123;</span><br><span class="line">  // 其余的程序逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合约演习"><a href="#合约演习" class="headerlink" title="合约演习"></a>合约演习</h2><ol>
<li>创建一个名为 <code>changeName</code> 的函数。它接收2个参数：<code>_zombieId</code>（<code>uint</code>类型）以及 <code>_newName</code>（<code>string</code>类型），可见性为 <code>external</code>。它带有一个 <code>aboveLevel</code> 修饰符，调用的时候通过 <code>_level</code> 参数传入<code>2</code>， 当然，别忘了同时传 <code>_zombieId</code> 参数。</li>
<li>在这个函数中，首先我们用 <code>require</code> 语句，验证 <code>msg.sender</code> 是否就是 <code>zombieToOwner [_zombieId]</code>。</li>
<li>然后函数将 <code>zombies[_zombieId] .name</code> 设置为 <code>_newName</code>。</li>
<li>在 <code>changeName</code> 下创建另一个名为 <code>changeDna</code> 的函数。它的定义和内容几乎和 <code>changeName</code> 相同，不过它第二个参数是 <code>_newDna</code>（<code>uint</code>类型），在修饰符 <code>aboveLevel</code> 的 <code>_level</code> 参数中传递 <code>20</code> 。现在，他可以把僵尸的 <code>dna</code> 设置为 <code>_newDna</code> 了。</li>
</ol>
<h2 id="合约修改-8"><a href="#合约修改-8" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里开始</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、利用-‘View’-函数节省-Gas"><a href="#十、利用-‘View’-函数节省-Gas" class="headerlink" title="十、利用 ‘View’ 函数节省 Gas"></a>十、利用 ‘View’ 函数节省 Gas</h1><p>酷炫！现在高级别僵尸可以拥有特殊技能了，这一定会鼓动我们的玩家去打怪升级的。你喜欢的话，回头我们还能添加更多的特殊技能。</p>
<p>现在需要添加的一个功能是：我们的 DApp 需要一个方法来查看某玩家的整个僵尸军团 - 我们称之为 <code>getZombiesByOwner</code>。</p>
<p>实现这个功能只需从区块链中读取数据，所以它可以是一个 <code>view</code> 函数。这让我们不得不回顾一下“gas优化”这个重要话题。</p>
<h2 id="“view”-函数不花-“gas”"><a href="#“view”-函数不花-“gas”" class="headerlink" title="“view” 函数不花 “gas”"></a>“view” 函数不花 “gas”</h2><p>当玩家从外部调用一个<code>view</code>函数，是不需要支付一分 gas 的。</p>
<p>这是因为 <code>view</code> 函数不会真正改变区块链上的任何数据 - 它们只是读取。因此用 <code>view</code> 标记一个函数，意味着告诉 <code>web3.js</code>，运行这个函数只需要查询你的本地以太坊节点，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。</p>
<p>稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“<code>external view</code> 声明，就能为你的玩家减少在 DApp 中 gas 用量。</p>
<blockquote>
<p>注意：如果一个 <code>view</code> 函数在另一个函数的内部被调用，而调用函数与 <code>view</code> 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 <code>view</code> 的函数只有在外部调用时才是免费的。</p>
</blockquote>
<h2 id="实战演习-8"><a href="#实战演习-8" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们来写一个”返回某玩家的整个僵尸军团“的函数。当我们从 <code>web3.js</code> 中调用它，即可显示某一玩家的个人资料页。</p>
<p>这个函数的逻辑有点复杂，我们需要好几个章节来描述它的实现。</p>
<ol>
<li>创建一个名为 <code>getZombiesByOwner</code> 的新函数。它有一个名为 <code>_owner</code> 的 <code>address</code> 类型的参数。</li>
<li>将其申明为 <code>external view</code> 函数，这样当玩家从 <code>web3.js</code> 中调用它时，不需要花费任何 gas。</li>
<li>函数需要返回一个<code>uint []</code>（<code>uint</code>数组）。</li>
</ol>
<p>先这么声明着，我们将在下一章中填充函数体。</p>
<h2 id="合约修改-9"><a href="#合约修改-9" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里创建你的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">address _owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint[]</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="十一、存储非常昂贵"><a href="#十一、存储非常昂贵" class="headerlink" title="十一、存储非常昂贵"></a>十一、存储非常昂贵</h1><p>Solidity 使用<code>storage</code>(存储)是相当昂贵的，”写入“操作尤其贵。</p>
<p>这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！</p>
<p>为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 <code>memory</code>(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。</p>
<p>在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了<code>external view</code>的函数，遍历比 <code>storage</code> 要便宜太多，因为 <code>view</code> 函数不会产生任何花销。 （gas可是真金白银啊！）。</p>
<p>我们将在下一章讨论<code>for</code>循环，现在我们来看一下看如何如何在内存中声明数组。</p>
<h2 id="在内存中声明数组"><a href="#在内存中声明数组" class="headerlink" title="在内存中声明数组"></a>在内存中声明数组</h2><p>在数组后面加上 <code>memory</code>关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 <code>storage</code> 的做法相比，内存运算可以大大节省gas开销 – 把这数组放在<code>view</code>里用，完全不用花钱。</p>
<p>以下是申明一个内存数组的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getArray() external pure returns(uint[]) &#123;</span><br><span class="line">  // 初始化一个长度为3的内存数组</span><br><span class="line">  uint[] memory values = new uint[](3);</span><br><span class="line">  // 赋值</span><br><span class="line">  values.push(1);</span><br><span class="line">  values.push(2);</span><br><span class="line">  values.push(3);</span><br><span class="line">  // 返回数组</span><br><span class="line">  return values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 <code>for</code> 循环结合的做法。</p>
<blockquote>
<p>注意：内存数组 <strong>必须</strong> 用长度参数（在本例中为<code>3</code>）创建。目前不支持 <code>array.push()</code>之类的方法调整数组大小，在未来的版本可能会支持长度修改。</p>
</blockquote>
<h2 id="实战演习-9"><a href="#实战演习-9" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们要要创建一个名为 <code>getZombiesByOwner</code> 的函数，它以<code>uint []</code>数组的形式返回某一用户所拥有的所有僵尸。</p>
<ol>
<li>声明一个名为<code>result</code>的<code>uint [] memory&#39;</code> （内存变量数组）</li>
<li>将其设置为一个新的 <code>uint</code> 类型数组。数组的长度为该 <code>_owner</code> 所拥有的僵尸数量，这可通过调用 <code>ownerZombieCount [_ owner]</code> 来获取。</li>
<li>函数结束，返回 <code>result</code> 。目前它只是个空数列，我们到下一章去实现它。</li>
</ol>
<h2 id="合约修改-10"><a href="#合约修改-10" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">address _owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint[]</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里开始</span></span><br><span class="line">    uint[] memory result = <span class="keyword">new</span> uint[](ownerZombieCount[_owner]);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、For-循环"><a href="#十二、For-循环" class="headerlink" title="十二、For 循环"></a>十二、For 循环</h1><p>在之前的章节中，我们提到过，函数中使用的数组是运行时在内存中通过 <code>for</code> 循环实时构建，而不是预先建立在存储中的。</p>
<p>为什么要这样做呢？</p>
<p>为了实现 <code>getZombiesByOwner</code> 函数，一种“无脑式”的解决方案是在 <code>ZombieFactory</code> 中存入”主人“和”僵尸军团“的映射。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mapping (address =&gt; uint[]) public ownerToZombies</span><br></pre></td></tr></table></figure>

<p>然后我们每次创建新僵尸时，执行 <code>ownerToZombies [owner] .push（zombieId）</code> 将其添加到主人的僵尸数组中。而 <code>getZombiesByOwner</code> 函数也非常简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getZombiesByOwner(address _owner) external view returns (uint[]) &#123;</span><br><span class="line">  return ownerToZombies[_owner];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="这个做法有问题"><a href="#这个做法有问题" class="headerlink" title="这个做法有问题"></a>这个做法有问题</h3><p>做法倒是简单。可是如果我们需要一个函数来把一头僵尸转移到另一个主人名下（我们一定会在后面的课程中实现的），又会发生什么？</p>
<p>这个“换主”函数要做到：</p>
<p>1.将僵尸push到新主人的 <code>ownerToZombies</code> 数组中， 2.从旧主的 <code>ownerToZombies</code> 数组中移除僵尸， 3.将旧主僵尸数组中“换主僵尸”之后的的每头僵尸都往前挪一位，把挪走“换主僵尸”后留下的“空槽”填上， 4.将数组长度减1。</p>
<p>但是第三步实在是太贵了！因为每挪动一头僵尸，我们都要执行一次写操作。如果一个主人有20头僵尸，而第一头被挪走了，那为了保持数组的顺序，我们得做19个写操作。</p>
<p>由于写入存储是 Solidity 中最费 gas 的操作之一，使得换主函数的每次调用都非常昂贵。更糟糕的是，每次调用的时候花费的 gas 都不同！具体还取决于用户在原主军团中的僵尸头数，以及移走的僵尸所在的位置。以至于用户都不知道应该支付多少 gas。</p>
<blockquote>
<p>注意：当然，我们也可以把数组中最后一个僵尸往前挪来填补空槽，并将数组长度减少一。但这样每做一笔交易，都会改变僵尸军团的秩序。</p>
</blockquote>
<p>由于从外部调用一个 <code>view</code> 函数是免费的，我们也可以在 <code>getZombiesByOwner</code> 函数中用一个for循环遍历整个僵尸数组，把属于某个主人的僵尸挑出来构建出僵尸数组。那么我们的 <code>transfer</code> 函数将会便宜得多，因为我们不需要挪动存储里的僵尸数组重新排序，总体上这个方法会更便宜，虽然有点反直觉。</p>
<h2 id="使用-for-循环"><a href="#使用-for-循环" class="headerlink" title="使用 for 循环"></a>使用 <code>for</code> 循环</h2><p><code>for</code>循环的语法在 Solidity 和 JavaScript 中类似。</p>
<p>来看一个创建偶数数组的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getEvens() pure external returns(uint[]) &#123;</span><br><span class="line">  uint[] memory evens = new uint[](5);</span><br><span class="line">  // 在新数组中记录序列号</span><br><span class="line">  uint counter = 0;</span><br><span class="line">  // 在循环从1迭代到10：</span><br><span class="line">  for (uint i = 1; i &lt;= 10; i++) &#123;</span><br><span class="line">    // 如果 `i` 是偶数...</span><br><span class="line">    if (i % 2 == 0) &#123;</span><br><span class="line">      // 把它加入偶数数组</span><br><span class="line">      evens[counter] = i;</span><br><span class="line">      //索引加一， 指向下一个空的‘even’</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return evens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数将返回一个形为 <code>[2,4,6,8,10]</code> 的数组。</p>
<h2 id="实战演习-10"><a href="#实战演习-10" class="headerlink" title="实战演习"></a>实战演习</h2><p>我们回到 <code>getZombiesByOwner</code> 函数， 通过一条 <code>for</code> 循环来遍历 DApp 中所有的僵尸， 将给定的‘用户id’与每头僵尸的‘主人’进行比较，并在函数返回之前将它们推送到我们的<code>result</code> 数组中。</p>
<p>1.声明一个变量 <code>counter</code>，属性为 <code>uint</code>，设其值为 <code>0</code> 。我们用这个变量作为 <code>result</code> 数组的索引。</p>
<p>2.声明一个 <code>for</code> 循环， 从 <code>uint i = 0</code> 到 <code>i &lt;zombies.length</code>。它将遍历数组中的每一头僵尸。</p>
<p>3.在每一轮 <code>for</code> 循环中，用一个 <code>if</code> 语句来检查 <code>zombieToOwner [i]</code> 是否等于 <code>_owner</code>。这会比较两个地址是否匹配。</p>
<p>4.在 <code>if</code> 语句中：</p>
<ol>
<li>通过将 <code>result [counter]</code> 设置为 <code>i</code>，将僵尸ID添加到 <code>result</code> 数组中。</li>
<li>将counter加1（参见上面的for循环示例）。</li>
</ol>
<p>就是这样 - 这个函数能返回 <code>_owner</code> 所拥有的僵尸数组，不花一分钱 gas。</p>
<h2 id="合约修改-11"><a href="#合约修改-11" class="headerlink" title="合约修改"></a>合约修改</h2><p>zombiehelper.sol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./zombiefeeding.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieHelper is ZombieFeeding &#123;</span><br><span class="line"></span><br><span class="line">  modifier aboveLevel(uint _level, uint _zombieId) &#123;</span><br><span class="line">    <span class="built_in">require</span>(zombies[_zombieId].level &gt;= _level);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">uint _zombieId, string _newName</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">2</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].name = _newName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeDna</span>(<span class="params">uint _zombieId, uint _newDna</span>) <span class="title">external</span> <span class="title">aboveLevel</span>(<span class="params"><span class="number">20</span>, _zombieId</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    zombies[_zombieId].dna = _newDna;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getZombiesByOwner</span>(<span class="params">address _owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint[]</span>) </span>&#123;</span><br><span class="line">    uint[] memory result = <span class="keyword">new</span> uint[](ownerZombieCount[_owner]);</span><br><span class="line">    <span class="comment">// 在这里开始</span></span><br><span class="line">    uint counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(uint i = <span class="number">0</span>; i &lt; zombies.length; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(zombieToOwner[i] == _owner)&#123;</span><br><span class="line">        result[counter] = i;</span><br><span class="line">        counter++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、放在一起"><a href="#十三、放在一起" class="headerlink" title="十三、放在一起"></a>十三、放在一起</h1><p><img src="https://i.loli.net/2020/06/27/sLj1ZB97XJ3RxTK.png" alt="image-20200627004954082"></p>
<h1 id="十四、第三课打卡"><a href="#十四、第三课打卡" class="headerlink" title="十四、第三课打卡"></a>十四、第三课打卡</h1><p><img src="https://i.loli.net/2020/06/27/xCM5qpkjuXtagod.png" alt="image-20200627005139917"></p>
<p><a href="https://share.cryptozombies.io/zh/lesson/3/share/truffle_solidity_web3.js_javaScript" target="_blank" rel="noopener">我的僵尸大军3</a></p>
]]></content>
      <categories>
        <category>Solidity Path</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
</search>
